{"pages":[{"title":"","text":"对不起，您访问的页面不存在！","link":"/404.html"}],"posts":[{"title":"2017年的第一场雪","text":"总说BBC的天气预报不准，这次难得的准了一次。2017年的初雪如期而至。上午11点左右开始飘雪，后来越下越大，一直下到中午时分，整个大地一片银妆素裹。这让我想起了唐代诗人宋之问《苑中遇雪应制》中的诗句：“不知庭霰今朝落，疑是林花昨夜开。” 这漫天的大雪更让我想起了故乡的常常飘雪的冬天。 拍摄于2017年11月30日 圣诞节快到了，英国人都喜欢White Christmas，也希望几周后的圣诞还能再迎来一场大雪，给人们带来一个节日的惊喜。","link":"/2017/"},{"title":"宅家日久，体重渐增，压力渐大","text":"真的很奇怪，在英国往年似乎很少长时间有艳阳高照的天气，但自从开始宅在家中后，晴空万里的好天气似乎接连不断。仿佛在诱惑人们不要宅在家中。算一算，离上次全家出门散步似乎已经两周多了，于是今天决定出门去放放风。 家附近的小山丘，摄于2020.5 外面已经是初夏的感觉了，路边的盛开的花似乎已经换了一茬，水仙已经陆陆续续的凋谢，换上了各种颜色更为鲜艳的花。偶遇三三两两的路人都是一身短装，完全是夏天的装束了。在往年赶上这样的天气，周边的海滩一定又是人满为患了。 我们走的并不是很远，只是在家附近的小山丘上去走了走，路上遇到了好几拨孩子学校的同学，看来大家都不想宅在家中了。在和其他家长的闲聊中感觉到大家似乎面临了同样的问题：由于一日三餐都在家中，购买食物的开支都明显上涨，伴随的是大家的体重似乎也都在缓慢的增加。很多人宅在家中，总要给自己找点事情做，于是一大批美食博主变得非常火爆，我媳妇最近迷上了Youtube上一个叫做小高姐的美食博主，开始按照菜谱做了很多美食，面对这么多诱惑，我几乎不做思考的选择了接受。。。 家长们面临的压力日渐增加，想要工作和辅导孩子功课两不误，很多家长只能在孩子入睡后再加班，把白天亏欠的时间补回来。但这样长久下去家长们的压力会变得过大。在网上看到了一段话，应该能够反映出家长们的心声： It’s OK if your childis tearfulkeeps throwing tantrumswon’t do their schoolworkwants to go back to schoolcan’t focus on home learningwon’t do what you askpicks fights with siblingsis struggling to sleepspends hours on screenskeeps answering backis always bored","link":"/20200506/"},{"title":"汉堡之行 2","text":"汉堡是一座漂亮又舒适的城市，让人还想再来。这是在市中心拍的照片 猜猜这是做什么的？","link":"/2-3curvbat/"},{"title":"在绿岛假日农家度假村的休闲时光","text":"这次全家回国看望家人，由于只是三月，北方的花草普遍还没有长出来。周末带孩子去附近的绿岛假日农家度假村游玩，还是玩的很开心。 进门处就有一些非常有趣的具有中国特色的小摊位，有棉花糖，可以画糖画，还可以根据人名作画。也可以买到棉花糖，糖葫芦等特色小吃。 度假村里还有射箭，采摘，骑骆驼等项目。 每次回国和家人在一起的感觉都这么好，让我不禁动了要彻底回国的念头。。。","link":"/2bx7wn/"},{"title":"我的年夜饭","text":"身在他乡，在除夕之夜很幸运在在好朋友家吃到了丰盛的年夜饭。 祝愿所有的家人朋友新春快乐！万事如意！","link":"/2hdfrt/"},{"title":"18年投的一个ICO项目2Key终于要上交易所了","text":"声明：下面只是我个人的经历分享，不作为您的投资建议。 今天朋友联系我说18年一起投的一个ICO项目2Key要发币了，而且在5月19号要上交易所。我整个就懵了，2Key是什么？？？翻了翻过去的记录，似乎还真的投过这个币，现在忘的彻彻底底了。 当时选择投资这个ICO主要有以下几个考虑： 首先，这个项目有卖点。2Key强调的是“智能链接”，可以用2Key来创建多级推荐活动。在这些活动中奖励推荐链中的每一个人。在整个活动过程中，可以实时跟踪活动是如何传播的。 其次，项目的合伙人/合作方包括：Enigma, Ledger, Metamask, Zoom (Zoom在两年前还没有和2Key合作，这应该是今年的事)等这些知名的名字，应该靠谱。 感觉团队是是实实在在的做事，比如他们专门针对系统的Bug有一套赏金系统：https://www.2key.network/bug-bounty 查看了一下项目的Github活跃度，代码更新还是比较频繁的： 2Key现在的币价是$0.08，在5月19号要上架Bilaxy和Hotbit交易所。希望上架后币价能涨一些吧。 最后给出项目的相关信息： 代币名称：2KEY发行总量：6亿合约地址：0xe48972fcd82a274411c01834e2f031d4377fa2c0官网：https://www.2key.network/源码：https://github.com/2key/contracts","link":"/2key/"},{"title":"环保意识要从小培养","text":"最近孩子所在的学校组织了一个有创意的活动，就是用各种可回收物品设计艺术品并进行评比。通过这个活动，既能教会孩子们什么是可以回收的，各种可回收物品的类别，还能锻炼他们的想象力。 周围的环境绝对可以影响一个人的习惯。在国外生活的时间长了，包括孩子都养成了习惯，垃圾一定要分类处理。最近开始尽量避免使用吸管等塑料制品。我们也在有意识的培养他们的环保意识。 地球是大家的，需要我们共同的呵护。","link":"/2px44k/"},{"title":"从看牙医的经历来说说保护牙齿的误区","text":"前两天去看牙医，做了常规检查后，牙医说我的牙龈红肿很厉害，并没有像往常一样给我洗牙，而是建议我再见一下专门的口腔清洁师（又额外的多交了40英镑）。今天见到了口腔清洁师之后，她首先给我洗了牙，同时给我制定了整套的牙齿康复方案。其中最重要的建议就是在每天刷牙的基础上，还要使用一种叫做Interdental brush的小牙刷或者牙线清洁牙齿中间的缝隙。同时建议我每过三个月就要复查一次。 其实客观的讲，以前从来没有仔细想过怎样才能把牙刷的更干净，直到几年前才第一次意识到每个人都需要使用这种小牙刷或者牙线的。可以想一想，普通的牙刷，无论手动还是电动的，都无法清洁牙缝之间的食物残渣，久而久之，可以想象口腔之中会有多少病菌。而且我现在如果去看牙医的话，都是在早上刷过牙后什么东西都不再吃，直到见过牙医后才吃饭，这是对牙医最起码的尊重吧。 那么，你也在使用牙线或者小牙刷吗？","link":"/2tohkv/"},{"title":"在成都武侯祠体验三国文化","text":"成都武侯祠：摄于2018年4月5日 这次到了成都，作为从小读三国故事长大的我自然不能错过著名的武侯祠，去感受一下那个英雄辈出的时代，去探望一下故事中常常出现的人物。武侯祠是用来纪念刘备和诸葛亮的，也是中国历史上唯一一座君臣合祭的祠堂。在祠堂中最著名的有岳飞手书的诸葛亮的《出师表》。 三国文化之所以备受全国甚至世界瞩目，甚至有一个说法，在中华传统文化的形成过程中，三国文化为整个中华民族精神的形成再次造血。在三国文化中体现的忠，信，勇敢，等等都是整个中华民族精神的核心。同时也孕育除了四川人的性格：聪明，幽默，勇敢，有血性等群体性格。","link":"/2vghwq/"},{"title":"成都传统文化之采耳","text":"这次的成都之行体验到了很多的四川传统文化。其中的采耳就是其中比较独特的一个。在成都，无论是在景点附近小逛，还是在餐厅就餐，经常会有采耳师傅拿着一把特制的工具发出清脆的响声来招揽生意。在宽窄巷子里的采耳师傅格外的多，价格也相对更贵些，60元起。犹豫再三还是没有勇气把自己的耳朵交到别人手里。。。 虽然说白了采耳就是掏耳朵，但经朋友介绍，其实采耳之中还是有很多讲究的。采耳师傅们一般要参加近两年的的培训才能上岗。因此他们会熟知耳朵附近的穴位以及各式工具的使用。通常他们会先使用蜜蜡薄片放置于耳中，利用蜜蜡软化耳垢并使其容易剥落。然后会用精致掏耳勺，小鹅毛刷，软丝等工具让客人的耳朵又爽又痒。下次去一定要体验一把。","link":"/2xteek/"},{"title":"巴黎游记 - 卢浮宫","text":"今日参观了塞纳河边的卢浮宫，这座宫殿承载这法国八百余年的历史，其馆藏横跨几千年，覆盖几大洲。现在卢浮宫可以说是世界上参观人数最多的博物馆。 其门口的玻璃金字塔由贝聿铭设计，将艺术设计和科学结合，堪称其经典之作。他并没有采用埃及金字塔造型，而是采用了几何学中的金字塔。这样不仅美观，节省空间，而且其玻璃质地不仅能够反射出巴黎不断变化的天空，同时为地下宫殿提供了采光。 这里的“镇馆三宝”，其实蒙娜丽莎的微笑知名度似乎更胜一筹，各种纪念品上，宣传册上都是这个迷人的微笑。 儿时最为崇拜的智慧女神雅典娜","link":"/2y3x3a/"},{"title":"比特币今日暴涨原因瞎猜测","text":"声明：以下仅代表作者的个人见解，并不能作为您投资的依据！币市有风险，一定要慎重！ 今日比特币又被爆拉一把，最高时逼近$9000，那么又是什么原因导致的呢？ 考虑到交易时间，那么最有可能的就是又有大量国外资金入场。 鉴于最近的贸易战，应该还会有大量资金入场，比特币突破$10000应该指日可待。 当然，具体如何行动，需要你自己的判断，以上全部是作者的个人猜想，不能作为投资依据。","link":"/2ufgpd/"},{"title":"儿子写的做饺子的方法，看到第3,4条笑死了","text":"","link":"/3-4-2017723t192128967z/"},{"title":"疫情期间团结互助，共度难关","text":"英国疫情发展至今，大家纷纷在家工作，为了保持心理健康，比平时多加了很多虚拟社交场景。比如：虚拟生日party，虚拟酒吧聚会，虚拟tea break等等。就连有的同事离职，也没法去见上一面，只能在网上道别。在这种种“奇怪”的虚拟场景之外，我也听到，看到了很多感人的小事，闪烁着人性的光辉。 图源：pixabay 首先是对周边一些老人的关注。在冠状病毒面前，他们是抵抗力最弱的群体。按照政府要求，他们需要在家中尽量不要外出。因此，很多人纷纷帮助身边的一些老年人购买生活必需品，主动送至家们口，让众多老人感受到社区的关心。 其次是对那些自雇人群的照顾。我家孩子上的一些课外班，比如芭蕾舞，学费已经交过了，但是目前情况下已经无法继续开班。老师已经发邮件给家长们同意将学费退还。但很多家长提出现在疫情下老师相当失去了收入，倡议大家不再要求老师退还学费了。家长们无一例外的同意，非常愉快的就达成了共识。 还有就是对周边一些小店铺的照顾。由于这些店铺本身客源就少，疫情可能会将它们压垮，因此，如果需要购买生活必备品时，优先考虑一些周边的店铺，能帮的话尽量帮一把。 也有一些周边的人在网络上组织了一些公益性质的免费课程。参与者象征性的缴纳一些费用，该费用会被捐赠给NHS。 诸如此类的事情还有很多，虽然都很小，但却让人非常感动。让我们感受到在此艰难时刻，大家在想着彼此，给了彼此前进的动力。","link":"/3a72oh/"},{"title":"巴黎圣母院","text":"2018年8月31日 天气很好，天很蓝，特别美好的一天，而这些美好，从此却只能存在于回忆、照片之中了。","link":"/3cc2ee9cf0eb7/"},{"title":"从&quot;只要孩子快乐就好&quot;这句话说起","text":"我的邻居是一家英国人，他们有四个孩子。其中有一个和我儿子上同一所小学。让我感到奇怪的是在我儿子在家写各种作业(包括学校布置的和我们自己找的学习资料)的时候，他家儿子不是在门前踢球，就是在骑自行车，要不就是和其他小伙伴们一起玩。反正总之，我感觉他家孩子似乎没有太多学习的时间。感觉和国内家长相比较，有一部分英国的家长似乎对孩子的学习不是很上心。 Image source: pixabay 这让我想起了以前听到过的一句话：只要孩子开心就好。这句话似乎得到了很多家长的赞同。我想邻居也是出于这样的考虑吧。其实仔细一想，这句话有些太过片面，孩子现在快乐，未必代表他/她以后就会快乐。在别的孩子学习或者参加各种课外班的时候，孩子之间的差距已经在默默的拉大，那么在漫长的成长过程中这种差距会越来越大，等到孩子长大了，这种差距可能就已经变得无法弥补。到那个时候，如果和别的孩子相比没有任何优势，升学，就业等等重重障碍的话，那么你的孩子还会快乐吗？记得和一位读硕士的学生聊天时她说道：真的非常感谢当年父母逼我学乐器，让我有了一技之长，通过这个技能结识了很多朋友，也得到了一些好的机会。 也是出于这个考虑，我家孩子上的时公立学校，但周一到周日各种课外活动几乎不断，作为父母的我们几乎也要累死了。但我们期待能够通过我们的努力让他们能够站到一个比较高的起点，能够享受长久的快乐。","link":"/3czvwk/"},{"title":"童子军露营活动","text":"今天儿子第一次参加童子军露营活动，兴奋了好几天! 虽然天公不作美，一大早雨就淅淅沥沥下个不停，但孩子们的心情似乎并未受到影响。一到营地，小伙伴们就钻进帐篷兴奋地铺床，准备睡具，到彼此的“卧室”串门，拿出零食一起分享。 据统计,世界上已经有160个国家建立了童子军组织，世界范围内约有3亿人曾经参加过童子军。如今，童子军成为世界上规模最大、范围最广的青少年组织 。通过各种童子军的活动，可以培养孩子们的良好道德和优秀体格。 期待明天见到儿子，听他说说自己的感觉。","link":"/3pcklr/"},{"title":"哥本哈根的地标之一：黑钻石图书馆","text":"这次会议的场所设在丹麦皇家图书馆，也叫做黑钻石图书馆。而这个黑钻石图书馆也是丹麦的地标性建筑之一。 如果你觉得在这座图书馆中收藏着价值连城的黑钻石，那么你就错了，其实，这座图书馆之所以被叫做黑钻石，主要是因为图书馆建筑的外观都是黑色，同时又多棱角，看上去就像钻石一样。这个黑钻石建筑建于1999年，是在丹麦皇家图书馆原有建筑基础上进行的扩展。图书馆位于哥本哈根市中心临河而建，因此这里的视野非常好。 美人鱼简直就是丹麦的国宝，就连图书馆门口也有小美人鱼的雕像，嗯，不过这个版本的美人鱼似乎难看了点。。。 .图书馆完全对公众开放，可以进入馆内参观。里面空间极大，各种设施非常齐全。在里面学习累了，到咖啡厅找个临河的桌子坐坐，喝杯咖啡也是很惬意的。","link":"/3oebuw/"},{"title":"英国这里圣诞节都吃些什么？","text":"圣诞节前，单位餐厅提供的都是圣诞套餐，同时餐厅装饰的也很有节日氛围，每套餐具中还包括了一个圣诞帽和Cracker。 首先在英国的传统中，圣诞餐肯定要有烤火鸡。其实最早英国是吃烤鹅的，后来烤火鸡从美国传过来慢慢替代了传统的烤鹅。当然，有些时候也用烤鸭，烤鸡来替代。如果是一个大家庭，会在火鸡肚子中放上一只鸭子，鸭子肚子中再放上一只小鸡。这样一层套一层，可以慢慢的吃。 和烤鸡配套的菜往往选用烤土豆，胡萝卜，还有Sprout，就是超级小的圆白菜，有时候也配上西兰花。 餐后的甜点则是著名的Mince Pie。这是一种圣诞期间的著名小点心。里面的馅是葡萄干，杏干，苹果等水果做成的。甜的要死，我和同事们开玩笑说，一年我只能吃一个。而我办公室里的英国同事们超级喜欢这种小吃，办公室里自从12月份就没有断过。 还有一道著名的餐后甜点就是Christmas Pudding。它是由面团，各种水果，白兰地酒混合制成的。其实除了过甜外，我还是很喜欢它的味道。我这份上面还撒上了一些custard，吃起来就没有那么甜了。","link":"/3pihdb/"},{"title":"我的一次申请丹麦申根签证的经历","text":"由于十月份要去哥本哈根开会，因此去申请丹麦的申根签证。本来以为会是非常简单的，可是却在曼城的签证中心出现了些小波折，还好今天顺利的拿到了签证。下面把我的经历和大家分享一下。 由于是去开会，因此想到肯定要申请Business Visa，看了一下网站上列举的申请材料列表，基本上没有什么疑问。只是在会议的邀请信问题上不是很清楚，官方的要求是这么说的： Conferences: confirmation that you have been accepted for the conference and paid the registration fee. 单位已经帮我交了注册费，想想应该就没有问题了吧，不过还是打电话确认了一下。签证中心的人说没有问题，可以不带邀请信。 于是就把所有材料都带齐了，去了离我最近的曼彻斯特签证中心。其实现在很多国家的使馆都把签证业务交由这些签证中心来统一处理。到了之后里面的人很少，等候区也很整洁舒适： 等叫到我的时候，把所有资料都准备好了，见到了一位印度小哥。在看材料的时候，先是和我要银行账单。可这个在材料列表中明明没说啊，我的雇主给我开的信中明确说到了会cover我在会议期间的一切费用。但这个也没什么可争的，为了以防万一我还是带了银行账单。接下来，小哥管我要邀请信，我一下就方了，这明明打电话确认过的啊，我把会议的注册确认信给他看，可这位小哥就是一根筋，而且和我说今天没法给我办，让我把邀请信拿到后再重新来申请。我当时就有些火大，但还是控制住了自己的情绪，和他再次解释是他的同事和我确认的不需要邀请信。后来这位小哥看我这么坚持，就进去和他们的经理请示了一下。出来后和我说可以给我把材料交上去，但还让我签了一封确认信，主要就是说我知道可能缺会议的邀请信，如果耽误签证的申请甚至拒签后果自负之类的，OK，我还是签了并把材料交了上去。 回家的路上就赶紧给会议方发了封信，让他们帮我出封邀请信。很快对方回复说第二天就会把信寄出来，这样从丹麦到英国应该有个3，4天吧。结果没有想到周末就收到了签证，还是多次入境的。结果我的邀请信还没有收到这个签证就拿到了。。。 Anyway，签证终于拿到了，非常期待美人鱼的故乡之行。","link":"/3rhf2r/"},{"title":"风雨同舟，我们将最终战胜病毒","text":"自从冠状病毒爆发后，截止到今天，已经在英国发现了8例，英国形势似乎也越来越严峻了。 身在海外的华人时时刻刻在关注国内的疫情。在此紧要关头，各种社团纷纷组织捐助活动，尽一份心，尽一份力，希望疫情早日过去。到目前为止，已经在两个不同的渠道进行了捐助，就连孩子们也拿出了自己的压岁钱，献上了一份爱心。目前捐助的第一批物资已经抵达武汉。 2020年的春天已经来临了，街边的水仙花已经悄悄的露出了头。希望疫情早日过去，武汉加油，中国加油！","link":"/3set9p/"},{"title":"加密货币租赁平台","text":"声明：以下仅代表作者的个人见解，并不能作为您投资的依据！币市有风险，一定要慎重！ 对于持有加密货币的朋友们来说，最常见的无非是两个选择，长期持有，或者进行交易获利。对于希望长期持有的朋友是否想过，如果把现金放在银行是有利息的，那么你的加密货币是否也应该产生利息呢？答案其实是肯定的。下面就介绍几个可以赚取利息的交易所： Gate.ioGate.io的理财和借贷市场是一个用户对用户的借贷平台，平台不参与任何借贷和放贷。可以看下当前系统中USDT的挂单： 据官网说USDT最高时年化达到 72%! 余币宝余币宝是OKEx.com打造的一款可随存随取的币币增值产品。用户可通过将闲置币转入余币宝的方式，每天享受余币宝带来的收益，具有随存随取，按天计息，无最低存币限制的特点。可以看到，USDT的年化率达到15%： 类似的平台/交易所还有很多，有加密货币，又不打算交易的朋友可以考虑一下。","link":"/3snxoy/"},{"title":"自己花园种的纯天然韭菜盒子","text":"自从家中花园种上了韭菜，就时不时的能吃到韭菜盒子。 这是我家花园菜地里的韭菜，绿油油的很喜人： 其实还是很喜欢这种感觉的。每年春天我都会在自家花园中种下各种蔬菜，比如： 西红柿，角瓜，豆角，青椒，茄子，南瓜等。偶尔也会种些玉米，向日葵。除此之外，花园中还有苹果树和梨树。可能自己水平有限吧，菜地产量并不高，整体下来丝毫不能省钱，因为毕竟要花好多时间来打理菜地，同时也要买不少肥料土，种子等。但却很喜欢这种感觉。夏季中孩子们每次去花园玩如果不能收获什么回来的话也会有些小失望。 最让我解馋的还是自己种的韭菜，韭菜馅的饺子和馅饼是我和媳妇的最爱。因为自己定居的小城这里中国超市的韭菜不仅贵还经常断货。而韭菜似乎很喜欢英国这种阴冷的气候，长的非常好。","link":"/3v1n8o/"},{"title":"带孩子做科学实验系列之：水的张力","text":"今天给大家介绍一个简单的实验来验证水的张力。 图源：pixabay.com 准备首先，需要准备一个小碗，在碗中盛上清水。 同时，还要准备一些曲别针。 开始实验首先，让孩子自己尝试一下能否把曲别针直接平放在水面上。直接把曲别针放在水面上的话会沉到碗底。 接下来撕一下块纸巾，大约三厘米见方，轻轻平方到水中，然后迅速把一个曲别针平放在纸巾上。 轻轻把曲别针下面的纸巾撤掉，你看到了什么？曲别针已经浮在水面上了！ 这个实验说明了水分子之间的张力可以支撑一定重量的物体，如果物体重量正好没有超过水面张力所能承受的范围，就会浮在水面上。","link":"/3yjgz5/"},{"title":"说说英国乒乓球俱乐部的那些事儿","text":"由于乒乓球是我多年来的爱好，因此在十几年前踏入英国的时候就开始留意英国各个城市乒乓球俱乐部的信息。这么多年来曾经加入了多家乒乓球俱乐部并参加了各种比赛。下面是我所在的团队在2016/2017获得团体冠军时所获得的奖牌： 在英国要想参加各种俱乐部的比赛，就不得不提一下英国乒乓球协会。英国乒乓球协会创建于1980年。协会由一部分志愿者来运营。在乒乓球协会中首先出现的是资深球员之间的比赛，发展至今日，成了英国乒乓球的甲级联赛。后来，又出现了少年组，老年组，和女子之间的各种竞赛。 对于一般的乒乓球爱好者，要想参加当地的各种比赛，需要： 首先，在英国乒乓球协会官网【官网地址】注册账号，并缴纳会员费，一年大约十几英镑吧。 其次，给你打算加入的当地俱乐部缴纳会员费，这个费用主要是用来场地租赁，以及相关活动所需。这个费用根据俱乐部而异。如果加入的是各大学的会员，由于有大学的补贴，会员费一般会便宜不少。以我所在的城市约克来说，大学的会员费是每年40英镑，而其他俱乐部则将近100-200英镑。 加入了会员后，你就可以参加俱乐部组织的各种训练了。 同时，俱乐部内部会根据球员的水平把队员分配到不同的团队，参加不同级别的比赛。以我所在的约克为例，这里共有4个级别的比赛，Division 1, Division 2, Division 3, 和Division 4。 虽然乒乓球是我们的国球，但其实在英国这里的业余比赛中，很多外国人的水平还是很高的。 我这里说的是业余选手。我曾经在Division 1打过比赛，胜率不是特别高，感觉有的英国人/德国人看起来打的没有太大特色， 就是典型的横板两面拉打法，但是对方就胜在失误少，经常是一场下来貌似自己的进攻多，但最后输球的还是我。曾经有两个国内受过业余体校训练的本科生来这里参赛，在Division 1的胜率也就是将近80%左右。 除了各地的俱乐部之间有联赛，在英国的各大学之间也有联赛，如果是客场的话，团队成员就需要长途跋涉到另一个城市去参加比赛。 基本上在英国各地的乒乓球俱乐部中都会有孩子们的各种兴趣班，家长可以带着孩子学习乒乓球。这是我儿子在俱乐部练习：","link":"/3zhpfz/"},{"title":"近距离观看热气球升空","text":"点火升空瞬间非常壮观。","link":"/41hco2o9/"},{"title":"圣诞期间，流光溢彩的霍华德城堡","text":"每年圣诞节前去霍华德城堡(Castle Howard)游玩，并和圣诞老人见面，成了我家的一个传统。今年也不例外，下午约好了朋友一起来到霍华德城堡。 到了天已经黑了，上图是从pixabay找了一张天亮时城堡的照片 霍华德城堡到现在已经有了近300多年的历史，属于约克三大家族之一的霍华德家族。是约克这里的热门景点之一。霍华德城堡还是很多电影的取景地，比如《故园风雨后》（Brideshead Revisited)，主人公们聚会喝茶以及游泳场景的拍摄地就选在了霍华德城堡。 为了迎接圣诞节，霍华德城堡处处装扮的流光溢彩，在城堡内部有众多豪华房间，里面有燃着熊熊炉火的壁炉，温暖的烛光，以及现场演奏的音乐。标志性的7米多高的圣诞树上，装饰了超过3000个小挂饰，让整个大厅美的让人窒息。 每年霍华德城堡内部装饰的主题都不一样，今年的主题是化妆舞会的面具，整个大厅内成了各个雕像的“化妆舞会”。","link":"/48sln1/"},{"title":"就喜欢你看不惯我又干不掉我的样子","text":"在翻看前面的北京蓝天城照片时，也看到这这组吾皇驾到的照片。真心喜欢这组动画形象，最有意思的就是那句经典台词：“就喜欢你看不惯我又干不掉我的样子”。记得当时孩子们在那玩了将近一个小时。其实当时也不太清楚这只大猫的来历，只是喜欢这组形象而也。后来查了查才知道原来这只大猫原来也是网红！它由著名插画作家白茶所画，那本经典的《就喜欢你看不惯我又干不掉我的样子》一经问世就狂销了40万册。大悦城展示的这组漫画形象体现了漫画作家的生活场景。 哈哈，“抱朕，还等朕翻你牌子呐？来，抱抱 参见万睡，为何不跪？超级喜欢吾皇的“王之蔑视”眼神。。。 这位将军是做什么的呢？ 大猫的厨房倒是挺不错： 这个电脑桌就是按照白茶书房里的样子而造，孩子们都很喜欢这个书房： 同样也是网红的大狗巴扎黑内心阴影面积估计无法计算。。。 吾皇现在很忙啊： 孩子们和吾皇合影","link":"/4chytv/"},{"title":"说说我对曼彻斯特这座城市的印象","text":"因为10月份要去哥本哈根出差，所以今天去曼城的丹麦签证中心去申请申根签证。虽然曾经去过几次曼城，但似乎喜欢上Steemit之后，到了哪里都会从另外一个角度来观察。哈哈，谁说的来着，Steemit有毒。。。 第一个印象就是曼城这座城市和足球之间的渊源。似乎很多人说到曼彻斯特，首先想到的就是曼联和曼城这两只英超球队。其实足球对这座城市的影响可以说是无处不在的。就连街边都是球星的大幅广告。 就连去签证中心的路上，随随便便的都能看到足球活动场地： 第二个印象就是由于受到英国工业革命的影响，曼城依然保留了很多工业革命的痕迹，虽然那个“蒸汽和汗水”的时代早已远去，但历史在这座城市留下的印记确实随处可见。 仍然在运作的货站: 第三个印象就是这是一个多元化的城市。印度人不愧为英国人数最多的少数民族，在曼城的印巴区，就会然你有一种错觉，似乎到了另外一个国家。而曼城的中国城则是英国最大的中国城之一。虽然听朋友提过似乎曼城的中国城比伦敦的中国城还要大，但毕竟这个也不太好衡量，而且也是无意义的比较，也就没有深究过。但是曼城的好吃中餐馆真的是太多了。这次，经老婆的提议，去的是以各种面食和小吃著名的汉朝。 去吃饭的路上，途径曼彻斯特大学的建筑： 汉朝小吃城： 由于这里的价格很便宜，因此有很多来这里吃午饭的曼大中国留学生，可能是因为我们错过了饭点，因此人不是很多： 非常地道的鸡蛋煎饼： 家乡味道的肉夹馍： 他家的羊肉串不仅味道好，而且肉质非常嫩： 烤猪蹄： 麻辣香锅也是完胜一些川菜馆的香锅：","link":"/4dbk8r/"},{"title":"说说丹麦人的自行车情节","text":"这次来哥本哈根开会，充分感受到了丹麦人对自行车的情有独衷。会议午餐的时候和丹麦同事们聊天才逐渐了解了丹麦人对自行车的独特情节。其实，丹麦人在上个世纪二三十年代就开始大量的使用自行车作为交通工具了。后来随着汽车的普及，很多丹麦人选择了开车，自行车就慢慢的被人们遗忘了。后来70年代的一次石油危机让很多汽车变成了废铁，也让丹麦人感受到了汽车这种依靠石油的交通工具的脆弱。于是很多人又开始提倡保护环境，重新拾起了对自行车的热爱。 清晨的哥本哈根街头，于2017.10.16 在现在的哥本哈根，设有很宽的专用自行车道，宽度应该够一辆小汽车行驶的。同时在十字路口也针对自行车设计了专用的弯道。因此很多人都选择骑自行车上班和出行。当然也听到了一些关于自行车的趣事。比如： 不仅骑自行车的人经常抗议开车的人破坏环境，同时它们还经常内讧，骑车速度快的嫌弃骑车慢的耽误他们的时间，而骑车慢的反倒觉得骑车快的人不够安全。 这里的共享单车也很盛行，同时自行车上还有导航系统，还能告诉你哪里有停车点。感觉越来越喜欢这座城市了。","link":"/4dnfha/"},{"title":"再次造访剑桥","text":"因工作原因再次造访剑桥。难得在英国的冬日碰上这么一个阳光明媚的天气，剑桥这座小城显得更加漂亮了。 虽然刚到十一月，就能感受到圣诞气氛了。 路过剑桥大学著名的国王学院。当初来剑桥玩的时候是从游客入口进入参观的。今天从其后面的草坪看过去，另有一番味道。 今天在工作间隙参观了大学，很奇怪的是图书馆中竟然没有太多学生。难道剑桥的学霸们太聪明了，都不用到图书馆学习？","link":"/4fnmsa4u/"},{"title":"仰望星空，你可曾想过宇宙的尽头是什么？经典科普书推荐 - 极简宇宙史","text":"最近朋友送了我儿子由霍金弟子所著的《极简宇宙史》这本书，翻看了一下目录，感觉对于上小学的儿子来说有些深奥，但里面讲述的内容非常好，因此打算自己先读上一遍，再慢慢给儿子讲解。谁想到自己一开始读这本书就放不下了。本来计划是利用上班时候的午休时间来读，结果就像看小说一样上了瘾，把所有能挤的时间都利用上很快就读完了。这本书解答了很多我在一直思考却得不到答案的问题，比如宇宙的尽头是什么？地球的寿命怎样？还有一些我从来没有想到过的问题：比如：如果把地球压缩成一个黑洞，那么地球会变成多大？再比如：你知道月亮是地球上掉下去的一块肉，嗯，不，石头吗？还有，你知道吗？在地球上是不可能炼制出金子来的，这是为什么呢？ 这本畅销书讲述了我们所在的地球，太阳系，银河系，以及更大的宇宙空间的形成过程，以及在未来会是怎样的。同时也涵盖了很多微观世界的科学知识，比如磁场的原理是什么？为什么人可以站在地板上不会掉入地板中而无法站在水面上？还通俗的解释了爱因斯坦的相对论以及牛顿万有引力定律的局限性。当然，就像爱因斯坦自己所说的一样，相对论本身也是有局限性的。是不是被我安利了？这本书的中英文版本都有，国外可以在Amazon买到，国内可以在当当买到。这本书，你绝对值得拥有。","link":"/4prmng/"},{"title":"全副武装去了趟超市","text":"最近英国的疫情越来越严重，在家中已经宅了近两个星期。但今天家中的蔬菜水果快吃光了，决定去超市补充一些生活必需品。 图源：pixabay 出发前做好了充足的准备，一次性手套，口罩，墨镜一应俱全。嗯，没错，是墨镜。因为没有买到护目镜，所以用墨镜来替代。 开车到了超市后，发现超市门口已经有很多人在排队了。大家都非常注意，彼此之间保持了两米以上的距离。感觉气氛有些压抑，没有人说话交谈，只是跟着队伍在默默的往前移动。 图源：pixabay 超市门口有员工在控制人数，等了快半个小时后终于轮到我了。进去以后，超市里的人很少。这主要是要保证”social distance“吧。相比较于两周前大家纷纷拥堵在超市中囤积生活必需品时，区别简直太大了。超市的物品非常全，可以说是堆积如山。就连两周前的紧俏商品-卫生纸也有很多。由于继续囤积了一些生活必备品，因此，这次消费的金额差不多是平时购物时的两倍。 到家后并没有对所有物品进行消毒处理，而是把物品全部先放置到了车库中。打算放上三天后再开始使用。对于一些需要在冰箱中保存的物品进行了消毒处理后放在了家中。之后按照专家的推荐边洗手边唱了两遍生日歌。。。 这次购物应该足够全家人吃上两个礼拜了。下面打算尽量选择网购，老老实实在家中宅上几个星期再说吧。。。","link":"/4vss8x/"},{"title":"很多事情就和打球一样，如激流勇进，不进则退","text":"图片：我今年的新队服 我今年参加的乒乓球俱乐部联赛赛季已经过半，比赛结果比自己预期的差了不少。整体感觉自从上个赛季晋级后每场比赛都难打了很多。自己在比赛时对球的处理稍有犹豫被动几乎会毫无例外的会失分。同时也感觉原来打球习惯中的一些小弱点在高手面前都会被抓住，然后被暴打。。。随着比赛一场场的进行，慢慢也就适应了这种和高手互博的感觉，处处抢占主动，发挥自己长处，反倒感觉每场球都打的很痛快，就算有时候实力不如人会输球，但感觉输的不窝囊。 其实生活工作中很多事情都是这样，一味被动求稳往往最终的结果会很差。只有不断主动出击，彻底发挥出自己的实力，才有可能达到预期的目标。用一部我很喜欢的电视剧中的观点来说，就是要亮剑。不论结果如何，一定要把自己的剑亮出来。","link":"/4xdwiz/"},{"title":"带孩子做科学实验系列之 - 物体的密度(试验结果能喝喔)","text":"有时候密度这个概念对小朋友们来说很难理解。下面这个试验能够帮助小朋友们理解密度，而且试验的结果不仅好看，还很好喝！估计没有哪个小朋友会对这个试验说不了。 试验材料准备首先你需要三种不同的果汁，注意这里需要鲜榨果汁，那种用果粉冲的果汁不行的。 为了避免有两种果汁密度非常相近实验失败，建议多买一种作为备用。 果汁的密度由里面所含的糖分和密度所决定。我这里选择的是葡萄汁+Berries，桔子汁，和桃+草莓汁。 接下来你还需要一个特别细的玻璃杯，越细这个试验越容易做成功。 最后你需要一个吸管。我用的就是买Calpol带的。 试验步骤首先让孩子看一下每瓶果汁的配料表，主要看看里面的水份百分比，含糖量，果肉比重等，让孩子自己估计一下比重。 第二步就要找一个干净的杯子，倒入一种果汁A，大约也就是两三厘米深就可以，然后用吸管吸上一滴另外一种果汁B，滴入杯中，观察一下B是会沉底，还是漂浮在A上面。如果沉底，说明B的密度大于A，如果B浮在A上面，说明B的密度小于A。还有另外一种可能，就是两种果汁的密度是一样的，这种情况下你就需要再换另外一种果汁了。重复这个步骤直到你找到三种不同密度的果汁。 我这次选用的果汁按照密度由大到小分别为： Red Grape &amp; Berries, Clementine, Peach &amp; Strawberry. 找另一个干净的杯子，把三种果汁按照密度由大到小的次序倒入杯中，你就会看到果汁分成了三层，互不影响！注意在倒入第二种和第三种果汁的时候要使用吸管，不能直接用瓶子倒！ 否则果汁会混在一起！ 实验很成功，孩子们在分享胜利果实！ 总结这个试验说明了对于同等体积的液体，它们里面所含有的物质是不尽相同的。100毫升的果汁里面所含有的成份就比同样体积的水中的成份要多，因此也要重。","link":"/4yeuv2/"},{"title":"和俏皮可爱的圣诞精灵们的约会","text":"在西方的圣诞传统中，有一群俏皮的圣诞小精灵，他们的任务是查看孩子们是不是听话，并把结果报告给圣诞老人。圣诞老人据此来决定是否要给小朋友们送圣诞礼物。当然，有些时候这些圣诞小精灵们会做一些调皮的事情。。。 上个周末和朋友家一起带着孩子们去了周边的一个精灵村，去看看这里淘气的精灵们，嗯，当然还有圣诞老人。 没有想到这里的人如此多，大家围着这个精灵村的向导，听着他给大家讲述精灵的故事： 精灵向导做的第一件调皮事就是“指羊为鹿”，非要说这是Reindeer… 接着带着众多小朋友们来到了精灵村的入口： 和众多精灵们见面： 互动环节来了，这些调皮的精灵们把有些礼物搞混了，需要小朋友们来帮忙： 这个礼物是巧克力？？？足球？？？ 这个精灵装扮成了什么？猜猜看。。。 这个精灵装扮成的天使也有些太，彪悍了吧 参观完毕还有Mince Pie和Sherry","link":"/4ywdjf/"},{"title":"孩子们的乐园 - 北京蓝天城职业体验","text":"早就听朋友们说北京这个蓝天城职业体验中心很好，孩子们几乎没有不喜欢的。今年终于有机会带孩子去体验了一下。我们去的是北京朝阳区大悦城的那家。早就听说这里人满为患，因此我们特意避开了周末，不过还是遭遇了各种学校组织的团，参加各种活动时依然需要排队。 进去时各种热门活动都已经排起了常常的队，预计等待时间至少半小时，因此我们先参加了相对排队时间短的活动。首先参加了时装秀的活动。小女孩们换好服装，准备开始走秀： 走秀正式开始： 接下来参加了医生体验活动，活动项目很多，比如要建立医疗卡，为各种病人包括小孩看病，抬病人上救护车等等。看看孩子们穿上医生的白大褂，似乎很有感觉： 轮流给病人看病： 给小朋友看病： 还要用担架抬着病人上救护车 接下来又来这个“果园”进行采摘体验： 摘完后还要推车自己摘的水果绕场一周，不太明白这是做什么，难道是去卖水果？？？","link":"/53bufg/"},{"title":"维京人如何消磨时光","text":"今天在陪孩子写作业时又跟着学习了一下维京人的历史。今天主要是讨论维京人如何消磨时光。 维京人有很多游戏，比如：打球，举重，摔跤。 但游戏经常变得暴力和血腥，偶尔也会丢掉性命。好彪悍的民族。。。 图源：http://sciencenordic.com (by Mari Pedersen) 维京人的游戏经常是非常暴力，甚至残酷的。在游戏中经常会以参与者的严重受伤或死亡而结束。这些游戏要展示的就是男性的力量，灵巧性，和策略。以球类游戏为例，在Egill Skallagrımsson中记录了一个这样的故事：一个12岁的男孩和另一个更年长的男孩在玩游戏中处于下风，因此发怒而用球拍攻击对方，对方自然毫不示弱。看到这样占不到便宜，于是掉头就跑。。。嗯，不是真的逃跑，而是跑去找了把斧子，回来直接把对方给砍翻了。。。","link":"/5a2a301bec57/"},{"title":"一年一度的万圣节又要来了！","text":"周末去超市，各种万圣节的装饰已经上架开始促销了。这是在超市门口见到的各式南瓜。最中间的那个南瓜爷爷最初以为是假的，走进了一看才知道是真真正正的南瓜！顺便查了一下最大南瓜的世界记录，竟然有2,624.6磅，也就是1,190公斤！ 图片拍摄于2019年10月 临近万圣节，最兴奋的还是孩子们。目前已经收到孩子就读小学的通知，要举办南瓜灯比赛，还有万圣节趴。同时孩子们参加的各种课外班，芭蕾课等等也都会举办各种万圣节活动。 图源：pixabay 当然，孩子们最期盼的还是万圣节当晚的Trick or Treat要糖活动。英国当地有个不成文的习俗，如果你不打算让孩子们上门要糖，就不要做任何万圣节装饰，也不要点南瓜灯。反之，如果家中装扮的很万圣节，就表示期待小朋友们来上门要糖了。 在万圣节期间，英国这里最经典的食物就是太妃糖苹果Toffee Apple，苹果酒，还有南瓜派了。感觉和孩子们一样有些小期待了。","link":"/5dhuvm/"},{"title":"英国的童子军","text":"儿子参加英国的童子军Scouts已经满一年了，获得了各种我认识和不认识的徽章。这次获得了Bronze Chief Scouts Award。同时我们全家被邀请参加颁奖典礼。其实这种活动名为童子军，参与组织的人各种年龄段都有，从6岁的小朋友到两鬓斑白的老人，都在为这项活动贡献力量。 英国的Scouts是针对年龄为6-25岁青少年的一个组织。在他们组织的各种活动中，给年轻人们提供各种经历，甚至是冒险。通过一系列活动锻炼孩子们的各种能力，比如：团队协作，时间管理，领导力，创造力，计划能力，沟通能力。 长期参加这项活动的孩子在升学就业中能获得更多优势。 童子军的各种活动包括皮划艇，海外考察，摄影，攀登等。 参加这些活动，可以学习生存技能，急救，计算机编程，甚至是如何驾驶飞机。通过这些活动可以结交朋友，体验更广阔的世界。 童子军活动的成功在很大程度上要归功于一些成年人志愿者，他们通过各种方式来贡献自己的力量，同时也享受各种活动经历，认识新朋友。其实很多童子军志愿者都感觉能够从参加的各种活动中得到各种能力的提高。","link":"/5ekhhy/"},{"title":"成都网红妖娆拉面哥","text":"最近去成都黄龙溪古镇游玩，见到了著名的网红妖娆拉面哥。小哥表演的非常卖力，一边跟着音乐律动旋转跳跃，紧闭着双眼，一边拉动着手中的面，同时小眼神也风骚的很。。。 这家面馆号称“一根面”，意思是说整碗面只有一根，足显拉面小哥的功夫非常过硬。 My video is at DLive","link":"/5f617220-3e8e-11e8-bfed-63766378c43c/"},{"title":"来看看英国小学生的英语和数学试题","text":"到了期末了，孩子也放假了，同时也收到了孩子二年级SATS考试成绩。看了一下，感觉数学很简单，英语真心不容易啊。。。 来，先看几道算术题： 再来看几道Math reasoning，数学方面的推理题： 英语方面主要考的是拼写，语法，句法等： 除此之外，还有英语的阅读理解，感觉非常像雅思考试。 国内的家长们怎么感觉？国内二年级的语文考试难度和这个比怎样？","link":"/5fqjkb/"},{"title":"也来说说我的兴趣：乒乓球","text":"我最大的兴趣爱好就是打乒乓球，自从上小学开始打到现在，这个兴趣从没有间断过。虽然没有受过系统专业的训练，但由于机缘巧合，曾受过专业教练的指导，因此这么多年过来，在各种业余比赛中也取得了一些成绩。现在乒乓球不仅仅是我自己的兴趣所在，我还在努力培养自己孩子对乒乓球的兴趣。 由于父母都是中学老师，因此在我很小的时候他们就带着我去学校学习打乒乓球。当时的条件有限，很多乒乓球台都是室外的水泥台。但也就是在这些水泥乒乓球台上，在和小伙伴们一次次的练习中，我对乒乓球的兴趣逐渐被培养起来了。 后来上大学后，遇到了很多志趣相投的同学，我自然也成为了大学的乒乓球场地的常客。记得在校内运动会的时候，经过和队友的努力，拿到了全校的团体冠军，当时的感觉真的是把棒极了。 参加工作后更是以球会友，结交了不少球友，球技也在缓慢的提高中。到了英国这个乒乓球的发源地才发现这里的乒乓球爱好者竟是如此之多。也就自然而然的加入了当地的乒乓球俱乐部并参加了俱乐部之间的联赛。 在我的引导下，儿子似乎也喜欢上了乒乓球，回国期间带他参加了国内的训练班，在专业教练的指导下，孩子很快就培养起了对乒乓球的信心。 对于这个兴趣，我会一直坚持下去的！","link":"/5hl12q/"},{"title":"开始在家办公","text":"英国疫情一天比一天严重，很多欧洲国家(目前不包含英国)的学校都已经听课，很多英国公司也都鼓励员工在家办公。 我所在的单位今天开始试运行如何在家办公。在此之前已经做了很多准备，比如：工作如何计划，团队成员之间的协作，沟通方式等等。 但是，在真正试行的时候，还是遇到了一些问题。比如：有的服务器是有访问权限限制的，只有内网中的个别IP地址可以访问，现在远程工作通过VPN连接的话，IP地址发生了变化，虽然有很多方法可以解决，但在实际操作的时候还是有很多事先想不到的问题的。 对于在家工作这个问题，我真的是很矛盾，就工作效率而言，个人更喜欢在办公室工作。但在目前形势下，尤其是英国目前的疫情下，希望所有的工作还是在家更好吧。 现在进一步的感受到，岁月静好，能够安安心心的工作，孩子们快快乐乐的上学是多么美好的一件事。","link":"/5hvaoh/"},{"title":"哥本哈根嬉皮村游记","text":"会议期间，在丹麦同事的推荐下来到了这里著名的Christiania嬉皮村小逛。 说到Christiania的起源，就要回溯到上个世纪60年代的嬉皮风。 当时一些叛逆的年轻人非常抵触盛行的拜金主义， 古板的教育体制， 还有核武等种种令人不满但却无法改变的社会问题， 以一种看似非常颓废，甚至自虐的方式生活。 他们的生活宗旨就是追求纯自然的生活， 同时向往完全自由的生活状态。 这种想法一经提出， 慢慢在全球范围内受到很多人的认可。 当然丹麦也不例外。 一群年轻人来到哥本哈根城东的一个废弃军营占山为王， 并自称为克里斯钦省， 俨然就要独立的样子。 丹麦政府曾经想要取缔， 但又迫于人权组织的压力， 一直没有采取有效措施， 慢慢这个省就成了一个即成事实。 政府索性就给了他们高度的自制权。 发展至今， 村里的居民将近有1000人。 村里的植被环境都保持了最原始的状态， 也是目前世界上唯一能展现60年代嬉皮士风貌的地方。 村里也有很完善的社区， 有自己的学校， 同时靠着旅游业也有自己的收入。 当然， 诸如医院， 银行， 供水， 供电等等设施还是和哥本哈根连在一起的。 不得不说，这里隐居了一些出色的艺术家， 在村里也可以看到很多出色的艺术作品， 展示了很多天马行空般的想象力和创造力。 这座房子外面的画很有艺术感，也非常漂亮： 因为游客很多， 因此这里还有专门的村内导游 这里写着”Say no to hard drugs”， 表明了这个村对于毒品的态度。。。","link":"/5klbbn/"},{"title":"断舍离","text":"最近一直宅在家中。由于时时刻刻都生活/工作在这个小空间，因此更加觉得家中有些杂乱，很多不必要的东西可以扔掉。正好单位在复活节期间多放了两天假，加上本来的复活节大周末，总共六天的时间。于是和媳妇决定对家中进行大刀阔斧的整理。 图源：pixabay 首先进行整顿的是家中的书架，架子上摆放着一家人的书。其中很多是针对新生儿的育儿书籍。这些书当年都是从国内人肉扛回来的。现在肯定不需要了，于是进行了分类：破损的直接回收扔掉，好一些的送给朋友和捐助给一些慈善店。 对于有些书，比如一些经典儿童绘本，媳妇总是有一些舍不得。这个时候我就劝她，好好想一想，过去一年，甚至几年内，是否用过，如果没有的话，说明就不需要这本书了。那么，它就应该把位置让出来。这样我们就能把当前更需要的书摆上书架。 其实对于一本你真正需要，或者喜欢的书，你经常会情不自禁的去读它。比如，我最喜欢的图书之一：《极简宇宙史》。迄今已经读过两遍了。我在书架中给它留了一个最好的位置，因为我知道我还会再读一遍的。 经过这一番整理，原本杂乱臃肿的书架顿时清爽了，感觉似乎心头的一块大石头被搬走，自己的心情也好了很多。","link":"/5w3nes/"},{"title":"Mrs Sunderland Festival闭幕演出","text":"由于两个孩子在上周的比赛中表现突出，分别获得了两个钢琴独奏冠军和两人合作的四手联弹的冠军，因此很荣幸的被组委会邀请在闭幕演出中进行表演。作为家长，我们也沾了孩子们光，在现场感受了一下各个类别表演获奖者的精彩演出。 由于在比赛期间只参加了钢琴比赛，因此对其他项目仅仅是知道而已，但并不知道具体比赛细节。这个大型活动涵盖Music，Speech，Drama等众多内容。今天晚上也见识了其他类别获奖者的精彩演出。很多选手都是从英国各地赶来的，看来对这个活动是真爱啊。 比如说Speech组的冠军是一个小朋友，上台的表演形式有些类似于脱口秀。讲的故事虽然只有短短的几分钟，但把观众逗得不断捧腹大笑。我想这也是国内李诞的表演为什么如此火爆的原因吧。 还有一个比较震撼的就是各个合唱团的精彩表演。虽然演员们多是业余选手，但他们的演出效果还是非常震撼的，比如有一支合唱团演唱的《狮子王》中的歌曲，配合着各种口技，仿佛将非洲风情和各种动物带到了舞台上。 真心喜欢这个活动，感觉往返两个多小时的车程也值得了。","link":"/5x8nh9-mrs-sunderland-festival/"},{"title":"针对交易所的交易所","text":"今天偶然间看到一篇文章，提出了一个有趣的观点：目前币圈很多老韭菜的刚需是需要一个专门能够聚合各个交易所的交易所。 其实，无论是新老韭菜，在交易/搬砖时都需要这样一项服务，实时统计各个交易所的币价，并能够进行汇总显示。当然，如果能够自动进行比价并交易的话，就更完美了。 想象这么好的idea，难道没有人在做吗？于是Google了一下，还真的找到了一个聚合交易所： 感兴趣的可以去注册看看，这是我的邀请链接：http://www.biup.com/reg.html?&amp;lang=zh_CN&amp;in_code=S443Z8","link":"/65hywi/"},{"title":"我的第一次烘培经历","text":"媳妇前两天过生日。在现在疫情下考虑还是不去买生日蛋糕了。何况英国超市中的生日蛋糕上面都是厚厚的一层糖霜，想想就够了。于是决定，自己动手给媳妇做一个生日蛋糕。先上个成品图吧： 其实，媳妇绝对是一个烘培高手，一般孩子们和我的生日蛋糕都是她来做。各种糕点都是轻松搞定，什么戚风蛋糕，中式月饼，Brownie等等，迄今为止还没有失败的记录。做出来的糕点不仅我们自己喜欢吃，单位同事，朋友们也都是赞不绝口。但是，总不能让媳妇自己给自己做生日蛋糕吧。 何况，现在成天宅在家中，这也算带着孩子们的一项活动。于是立刻开始动手啦。 从网上查找了一下菜谱，选择了一款最为简单的海绵蛋糕作为我有生以来的第一次烘培尝试。 首先用打蛋器将鸡蛋打好，菜谱上说要打的非常起泡才好。但我用打蛋器只能打成这个程度，随它去吧。 然后在蛋液中混入食用油，糖，牛奶，再用打蛋器打好。 接下来将面粉放入蛋液中并搅匀。在这个步骤中比例是很关键的。按照教程上说的，蛋/糖/面粉的比例是2:1:1，最佳状态是最终的食材混合物能够达到粘在搅拌器上不掉下来的程度。但我按照这个比例配出来的太稀了，根本达不到这个效果。可能是我中间按照自己的感觉加入了牛奶和食用油的原因吧。于是就不停的加入面粉。最终根本就不管这个比例了，完全跟着感觉走。后来和媳妇请教时才知道，她每次都是严格按照比例，用厨房秤称出每一项食材的重量的。哎，看样子，做任何事情都是有规矩的，不能像我这样随意来。也许，只有达到高手境界才能随意发挥吧。 也不知道加了多少面粉之后，食材的混合物终于可以挂在搅拌器上了。我迫不及待的将其导入烘培盘中，然后在事先预热的烤箱中烤了共25分钟。 蛋糕终于烤好了！尽管没有媳妇烤的蛋糕松软，但是似乎味道还很不错。我这第一次的尝试也算成功了吧。。。","link":"/5wpl8/"},{"title":"复活节花园寻宝","text":"复活节如期而至，其实每年都选择在复活节假期回国和家人团聚。但今年因疫情被迫取消了航班，第一次带着孩子在英国度过复活节。 图源：pixabay 不过凡事都尽量往好处想，孩子们一直喜欢复活节时在花园中寻找复活节彩蛋这个游戏，但由于每年的复活节都在中国，因此一直没能满足他们的这个心愿。今年正好满足一下他们的这个小小愿望。 由于疫情，现在复活节彩蛋都限购，只买到一点点的彩蛋。但孩子们更喜欢的是这个游戏本身，彩蛋的多少应该不是最重要的。 其实，在寻找复活节彩蛋游戏中，还有一个主角，就是复活节小兔子。在传说中，复活节小兔子将彩蛋藏起来。之所以是兔子，可能是因为它们强大的生育能力吧，毕竟复活节意味着新生命的诞生。 我自然就成了客串小兔子的角色，将彩蛋藏在了花园中。 藏在了苹果树的树枝上： 梨树上： 孩子们做游戏的小房子这里： 浇水用的小水壶中： 很快，这些彩蛋就都被找到了。彩蛋内部一般都是空的，象征着耶稣复活后空空的坟墓。其实时至今日，复活节的宗教色彩已经慢慢淡化了，成了很多家庭度假的热门时段。期待早日恢复正常，把错过的假期补上。","link":"/6da9hx/"},{"title":"英国日益严重的疫情下，记录一下那些暖心的瞬间","text":"英国的疫情进一步恶化，最近两天查尔斯王子，Johnson首相，还有卫生大臣先后被检测出新冠状病毒阳性。这也让众多英国民众更加担心接下来几周的英国疫情。 但就在这样的疫情下，依然有着很多温暖人心的瞬间，让大家相信我们是在一起和病毒作斗争。 首先是昨晚8点钟的时候，众多家庭纷纷走出家门，站在门口和阳台上，为众多在前线工作的NHS医生，护士，及相关工作人员鼓掌加油。尽管，那些医护人员可能听不到这些掌声，但相信他们可以感受到大家对他们的尊重和鼓励。We are together! 还有就是针对前一段时间民众恐慌引发囤积食物而造成的食品短缺，众大超市发表联合声明，确保全部民众的生活必需品，因为这对他们而言，已经不仅仅是他们的工作了，而是一种应尽的责任。而且，很多超市还专门开辟了特殊时段，为众多在一线奋斗的人员提供优先购物通道，让他们在劳作后不用担心买不到生活必需品。 由于医院的压力越来越大，因此要招募一定数量的志愿者，让人感动的是，众多民众首先想到的是如何共同努力，共度难关，而不是个人的安全，在非常短的时间内报名人数就远远超过所需人数。 这样温暖的瞬间还有很多很多，让我感受到整个人类在一起和病毒作斗争，相信终有一天我们会彻底战胜病毒。","link":"/6fbtgr/"},{"title":"开车中偶遇路霸，司机毫无办法，有女侠路见不平，拔腿相助","text":"在英国这里开车时遇到各种动物横穿马路，真的是没有一点办法，只能等着。 这个就是罪魁祸首，抱歉开车中, 照片有点模糊， 有时候真的是奇怪，这些动物也真是聪明，知道人不会伤害它们才会如此放肆吧。。。","link":"/6fca14/"},{"title":"说说丹麦的消费水平","text":"在这次出行之前就知道丹麦的物价高， 这次算是有了一个深刻的体会。 关于汇率， 为了简单， 基本上可以把丹麦克朗和人民币看成1:1。 哥本哈根Irma超市 首先是这里的25%的税， 英国的20%已经觉得很高了， 而且在超市中对于生活必需品比如面包，牛奶不征税。 可在哥本哈根的超市中，貌似是对所有东西都征税的。 感觉最贵的是这里的吃的。 在街边随便买个炒面需要80-90 DKK。 普通餐厅的一道main course基本上都是200 DKK左右， 一家四口人就算只要main course + 酒水饮料， 一顿饭下来基本就要1000 DKK了。 最后一天吃的中餐， 稍微便宜些， 每道菜也要120-150 DKK左右。 听丹麦同事说哥本哈根是拥有米其林餐厅最多的城市， 难怪就连会议午餐的餐厅主人都是米其林大厨呢。 搜了一下， 2017年哥本哈根共有一家米其林三星， 一家米其林二星， 13家米其林三星餐厅。 坐的从机场到酒店的出租车， 只要15分钟， 就要280DKK。 最后给个建议， 如果来哥本哈根玩的话， 推荐购买Copenhagen Card， 我媳妇买了个5天的卡， 899DKK， 几乎所有著名景点门票 + 公交都包， 感觉省了好多钱。 另外， 真的没有必要换太多现金， 用信用卡直接付的话汇率还是很不错的。","link":"/6h49cg/"},{"title":"杜伦大教堂","text":"因工作原因来Durham出差，经同事建议从火车站沿河边步行到开会地点，看到了不一样的杜伦大教堂。算算离上次来都十年了，岁月在不经意间竟然如此匆匆。。。","link":"/6mgazp/"},{"title":"自闭症儿童需要更多的关注","text":"最近儿子学校给所有家长发了一封信，呼吁所有家长更多关注自己的孩子，以便更早发现自闭症的儿童，及早采取措施。并建议成立一个group，大家分享心得体会。 其实，根据最新的统计，世界范围的自闭症患者超过1%，只不过自闭症患者的程度可能各不相同，重的不能生活自理。轻的则不易察觉。很多自闭症患者往往在某些方面远超常人，甚至是出类拔萃的天才。很多世界名人，科学家都是自闭症患者，比如：爱因斯坦，莫扎特，牛顿，达尔文等等。我所工作的单位中也有一些同事是自闭症，但他们都非常聪明，也感觉不出和常人的区别。因此，即使感觉自己的孩子可能是自闭症，也不必太过担心，只不过他们可能需要更多的理解和关注，因为他们眼中的世界可能于我们的彻底不同。 Image credit to: thinkaustism.co.uk 如果旁边的人有以下行为的那么就需要多加关注了（下面列表非官方，只是从邮件中看到的）： 表现出于他／她年龄不符的行为举止，这些行为甚至可能会导致他们自己或周围孩子的危险 如果事情没有按照计划进行，表现出特别的焦虑或者有不恰当的举动 不能从别人的角度来看待问题，或者不能为了别人而调整自己的行为 很难改变自己，比如从一个活动切换到另外一个活动 对于某种东西过于敏感，比如某种气味，食物的纹理，或者衣服 社交障碍 睡眠障碍或者尿床 过于没有组织计划性","link":"/6mqwf9/"},{"title":"国外经典图书推荐之：查理和巧克力工厂","text":"给孩子买了一套Roald Dahl的经典图书。不仅孩子自己喜欢，就连我和孩子的妈妈对这套书也有些着迷。这位作家在全世界范围内都是大名鼎鼎，他的图书销量超过了2.5亿！今天给大家推荐他写的”Charlie and the Chocolate Factory” (查理和巧克力工厂)。 Image source: pixabay 这个故事讲述的是出身贫困家庭的Charlie从小和自己的父母还有爷爷奶奶，姥姥姥爷住在一栋漏风的破房子中，家中经常吃不饱饭，可即使这样，查理也从来不吃长辈们让给自己的食物，因为他知道长辈们也饿着肚子。对于查理来说，每年最期待的日子就是自己的生日了，因为只有在他生日的那天才能吃到他最喜欢的巧克力。离他家不远的地方就是一个全世界最有名的巧克力工厂，工厂里生产的巧克力畅销世界各地。但工厂一直异常神秘。它的大门一直紧闭着，既没有人进去，也没有人出来。突然有天工厂的主人Willy Wonka宣布了一条爆炸性的新闻，在最新售卖的巧克力包装里会有５张金色入场券，入场券的获得者将会获得免费参观巧克力工厂的机会，同时终生享用工厂里生产的巧克力。于是整个世界陷入了疯狂中，大家拼命的购买Wonka的巧克力。很快这5个幸运儿出现了。前4位都出身富裕家庭，由于娇生惯养，他们有着各种各样的缺点。在进入巧克力工厂后，他们都被梦幻般的景色所震撼：飞流直下的巧克力瀑布，波涛荡漾的巧克力河流，大片的口香糖草地。。。最终前面的4个孩子都迷失在各种诱惑中，从而丧失了继续参观的资格。只有查理坚持到了最后，从而获得Wonka的青睐，成为了下一任巧克力工厂的继承人。 这个故事告诉了我们要遵守规则和自律，非常适合教育孩子。其实，不仅是图书，还有电影和音乐剧。我家孩子对这部音乐剧也是非常着迷。","link":"/6pdftt/"},{"title":"说说在英国读公立学校的感受 - 月旦评","text":"国内的很多朋友都有一种感觉，就是国外儿童读书环境很轻松，没有什么作业压力，其实自己的孩子在这里读书后才感受到，真的不是那么回事。其实，这里同样是要拼的，拼的是父母的精力，时间，金钱。当然你可以彻底放羊，只是按照学校要求来做，那么注定你的孩子在以后的竞争中不能处于优势而不能更好的获取各种资源。 图为儿子模仿石器时代风格的石板画 首先是公立学校里的教学内容几乎都不够深入，完全不能满足培养孩子兴趣，挖掘孩子潜能的需要。就拿我儿子学校的小提琴可来说吧，到了四年级，整个班都要学习小提琴，不论有无基础，一次课不到一个小时。如果你的孩子曾经系统的学过小提琴，就会知道这和浪费时间几乎没什么区别。我家孩子还是在私下里找了当地最好的专业老师，一对一的辅导，而且每天都要练习才可以。其实类似的兴趣班有很多，类似钢琴，游泳，舞蹈，马术，网球，还有数学/英语的课外辅导班等等。长期下来，同一个班的同学之间会差距非常大。 其次拼的就是爸妈的综合能力。当孩子提出一个问题的时候，父母是否能过够进行正确的引导，或者是否有学习能力，自己先准备好了再系统的辅导孩子，这对孩子的成长会有很大的影响。 还有就是要拼父母的体力。每天下午3点多放学后，很多父母都是开车带着孩子在各个辅导班之间奔波。晚上还要督促孩子复习，巩固所学的内容，这样一天下来真的会让人精疲力尽。 总而言之，无论在哪里，如果要想自己的孩子具有竞争力，有一个好的未来，父母要付出的真的是太多了。还好，一分耕耘，必将会有一分收获！","link":"/6s1o79/"},{"title":"注册赞赏公民，支持Steem中文社区 + 使用经验分享","text":"受 @ericet 影响，最近尝试使用 like 的赞赏功能。感觉非常好用，就交付了每月5美元的赞赏公民(CIVIC LIKER)月费。这样我的赞赏能量就更大了。同时昨天在 @ericet 提供的核心代码基础上进行了修改，写了一段代码，对 https://steem.buzz/ 上所有配置了赞赏功能的 CN 区用户自动进行了赞赏。 下面总结一下自己的体会，完全是自己的理解，如有偏差，欢迎大家指正。 首先，什么是赞赏公民？赞赏公民类似于Steem/Hive上的大鲸，其赞赏(点赞)的权重较大。但Steem/Hive上的大鲸的点赞力度也根据SP/HP值而有所区分。赞赏公民只有每月5美元这一种选项，因此点赞权重应该一样。 其次，在Steem/Hive中有Voting Power的概念，满血时点赞产生的收益最大，随着点赞次数增加，点赞产生的收益逐步递减。当VP为0时，点赞不产生任何收益。但在like网络中似乎并没有VP的概念，似乎可以无数次点赞。但是，根据我目前测试，针对同一个用户的多篇文章点赞，其产生的收益并不相同，似乎也在递减。我目前看到的是前两篇一样，第三篇的收益会降低。再往后目前还没有尝试。但具体细节怎样，由于找不到相关文档，我目前也不清楚。 关于Steem/Hive网络和赞赏功能的集成。目前似乎只有 @ericet 在 https://steem.buzz/ 上将赞赏功能和Steem集成到了一起。目前我还没有看到将赞赏功能和Hive整合的网站。 其实，like网络已经提供了很多方式和你的自媒体进行整合，比如有Wordpress插件，Medium集成等。对于其它系统搭建的网站，都不难整合的。细节请看到这里：https://github.com/likecoin/likecoin-button","link":"/6sxpjo/"},{"title":"说说今天在超市中遇到的一个坑","text":"听很多人吐槽过英国人的数学如何不好，在超市里的物价经常标的莫名其妙，比如同样商品一件1英镑，两件2.5英镑之类的笑话。我也看到过很多英国人在购物时对于那些买一送一的OFFER直接忽略，拿起一个就走的。 但今天却见识了一家超市的坑，而且我还掉坑里了，哈哈，虽然很快就从坑里爬了出来。。。 首先是看到了这个半价的洗碗机里的那个小皂块的半价折扣，想想家里的正好快用完了，于是就拿了一个。可是交钱后才发现收了我既不是20英镑，也不是半价的10英镑，而是一个莫名其妙的16英镑。后来去客服问了一下才搞清楚，原来是把不打折的放在了这里。后来我又去看了下，想找一个打折的，结果发现整架子都是那种16英镑的，只能说这个折扣的牌子真是坑人。 接下来紧跟着掉到了第二个坑中，有一种家里总用的洗衣粉也在半价折扣，同一个架子上摆着共三种颜色的，左边白色和右边粉色的下面价签写着半价，而中间金色的包装没有价签，于是想着同一厂家同种产品，应该都在折吧，就拿了一桶，结果是原价。。。 还好，这里退货很方便，看来每次购物完检查一下小票真的是非常有必要啊。","link":"/6wsdmf/"},{"title":"大自然的馈赠 - 野生栗子","text":"十月金秋又到了，在英国这里几乎到处都是野生的栗子树。对于喜欢吃栗子的人真的是有福气了。 在我办公室附近就有一片大草地，草地边上就有两颗不小的栗子树。 由于已经到了成熟的季节，很多栗子都已经涨开了。 有些熟透了的栗子落到了地上，又回归了大地母亲的怀抱。 除了栗子外，草地边上还长了好多黑莓和Rasberry，由于没人采摘，很多黑莓落在地上，化为泥土。 我非常喜欢采摘，也喜欢带着自己的孩子采摘这些野生的水果，接受大自然的馈赠。捡到的栗子我试着在烤箱里烤过几次，效果不怎么好。后来索性就简化了一下，直接放在锅里用水煮熟就可以吃了。纯有机，纯天然，又超级有营养！","link":"/6x2ppa/"},{"title":"出门放风","text":"算一算已经宅在家中两周多了。在这两周中，除了我自己出门去了一趟超市外，全家人都老老实实的在家闭关，该上班的上班，该学习的学习。孩子们每天上下午固定两次在花园中活动一下，蹦床成了他们最爱的项目。 最近在网上看了一个张文宏教授的在线访谈，知道了在地广人稀的地方，只要多加注意，是可以去散散步的。想一想我家似乎这两个条件都满足啊，我们住的远离市中心，可以说在一个小村落里。同时这两天的天气实在是太好了，处处都能嗅到春天的气息。因此决定全家出动，就在家附近去散散步，不要辜负这大好春光。 本来村里的人就不多，现在更是都宅在家中，因此出门几乎没见到几个人。路上都是空空况况的。零星遇到的行人之间也都很有默契的彼此保持至少三米以上的距离。 与这冷冷清清的街道相比，一簇簇的水仙花还有各种知名的，不知名的小花已经完全盛开，将路边点缀的生机盎然。 同时趁着现在路上几乎没有车，让孩子们骑车正式上路，顺便给他们讲了讲各种需要注意的交通规则。 虽然活动半径距离住处都没超过200米，但一家人走走停停，回家时已经是一个多小时之后了，感觉浑身舒畅。希望生活能够早日回归正常，和众多亲友们再次相聚。","link":"/6x7r52/"},{"title":"约克哈里*波特纪念品店小逛","text":"最近朋友从北京来英国玩，陪着朋友参观了一下约克肉铺街的哈里*波特纪念品店。想想在约克住了这么多年竟然也没有去过这家店 (The shop that must not be named)。 店门口排着长长的队： 纪念品店所在的街道就是电影中对角巷的拍摄地： 隔着商店橱窗就能看到里面拥挤的人群。 排队将近30分钟后终于轮到我们了，进入了这魔幻的世界： 进门处的橱窗： 各种怪兽： Magic wand: 各种杯子： 哈哈，飞行器： 还有posters: 魔法杖： 朋友家的小孩是铁杆哈里波特迷，在小小的店内竟然转了快一个小时！","link":"/6xtpfq/"},{"title":"真的吃到了西游记中的人参果","text":"最近在国内一家超市中第一次见到了人参果这种奇异的水果。价格也不贵，8.8元。买了两个尝了一下，味道很不错，清清淡淡非常爽口。 毋庸置疑水果的形状肯定是通过模具造出来的，但我非常好奇人参果的本来面目应该是什么样子的。于是百度了一下，看到的图片基本都是带花纹的人参果，而这种纯绿色的搜不到。谁见过这种人参果的本来面目？","link":"/6y8efb/"},{"title":"英国疫情现状+漫长的闭关开始","text":"英国的疫情已经越来越严重了，甚至很多人都感觉英国在步意大利的后尘。自从“全民免疫”的概念提出来之后，英国政府最近的政策完全反转了，提出了一系列严格举措来控制疫情蔓延。 首先是自上周五放学后开始，全英所有大中小学全面停课。同时鼓励所有有可能的单位员工全部在家办公。继而又出台政策，要求所有餐厅，酒吧，剧院等暂停营业。小企业主可以和政府申请财政补助，停业公司中在家的员工则会由政府发放80%的工资而不用工作。 然而，让我非常不理解的是，由于这个周末的天气很好，众多英国家庭纷纷外出，享受这宝贵的阳光。很多交通干线上纷纷堵车，各种公园，景点人满为患。仿佛全面度假要开始一般。。。 对于这点，我是真心无语。。。英国NHS的众多医生护士纷纷提出：”I stay at work for you, You stay at home for us.” 的口号，号召大家齐心协力共抗病毒。英国议会也全票通过最新法案，赋予政府更大权限，如有必要，将会采取更加严厉的措施，避免疫情的进一步恶化。 我和周边的朋友家庭们只能做好我们该做的，好好的宅在家中。期待疫情早日消除，所有人都能尽情享受这无限的春光。","link":"/72etvv/"},{"title":"祝小公主生日快乐","text":"我家的小公主四岁了！本来计划给她办个生日趴，可小姑娘说只要在幼儿园里和好朋友们一起庆祝就可以了。要“save the money for Disneyland”。以便去迪士尼好好玩一玩。 女儿最近在幼儿园各项指标都超前，让我们引以为傲。参加的各种课外班，小提琴，幼儿芭蕾，音乐课也是表现突出，老师经常让她给做示范。 我的小公主生日快乐！","link":"/78xjjd/"},{"title":"最近7天乌托邦翻译项目汇总Top open source projects for Utopian translation contributions in past 7 days","text":"Top open source projects for Utopian translation contributions in past 7 days从事乌托邦翻译有一段时间了，有时候感觉比较困难的就是选取适合的开源项目进行翻译。因此写了一个小程序来生成这样一个列表，里面包括了近7天内乌托邦通过审核的翻译文章，按照文章数量进行了排序，这里列举了排名前30名的Github库，以及相应的翻译数量。同时每个Github库都列出了几篇通过审核的翻译文章作为参考。希望对大家有用。 I have been tranlating open source projects via Crowdin and Utopian for a while. Sometimes I feel it is hard to find a suitable project to translate. Therefore, I write a script to generate a summary of open source project translations. The data is retrieved via Utopian API. Hopefully the following list will give you some ideas on which project you want to work on if you want to translate open source projects via Utopian. https://github.com/ancap-ch/from-en [241 contributions]Examples: https://steemit.com/@macaddy/complete-translation-ancap-ch-from-english-into-nigerian-pidgin-1-087-words https://steemit.com/@jmotip/ancap-ch-translation-to-german-151-1088-words https://steemit.com/@nestorsolayaojr/translating-1-252-words-of-ancap-ch-from-en-english-to-tagalog https://github.com/Gapminder/dollar-street-pages [130 contributions]Examples: https://steemit.com/@accro/dollar-street-translation-into-arabic-1053words-part-41 https://steemit.com/@nehomar/spanish-translation-dollar-street-part-xxvii-1022-words https://steemit.com/@nehomar/spanish-translation-dollar-street-part-xxvi-1018-words https://github.com/uccser/cs-unplugged [40 contributions]Examples: https://steemit.com/@crybois/cs-unplugged-english-turkish-translate-part-9 https://steemit.com/@guinsoo/translation-of-cs-unplugged-project-7-en-to-tr https://steemit.com/@guinsoo/translation-of-cs-unplugged-project-6-en-to-tr https://github.com/akeneo/pim-community-standard [23 contributions]Examples: https://steemit.com/@andreistalker/english-to-romanian-translated-1000-words-of-akeneo-part-4 https://steemit.com/@andreistalker/english-to-romanian-translated-1000-words-of-akeneo-part-5 https://steemit.com/@hasiok/polish-translation-for-akeneo-1133-words https://github.com/code-dot-org/code-dot-org [16 contributions]Examples: https://steemit.com/@shoganaii/hour-of-code-learn-game-development-code-org-localization-121 https://steemit.com/@shoganaii/hour-of-code-learn-game-development-code-org-localization-120 https://steemit.com/@shoganaii/hour-of-code-learn-game-development-code-org-localization-119 https://github.com/salesagility/SuiteCRM [14 contributions]Examples: https://steemit.com/@katherinef4/2i7pt3-translation-to-spanish-venezuela-suitecrm-core-1010-words-part-1 https://steemit.com/@katherinef4/translation-to-spanish-venezuela-suitecrm-core-1020-words-part-2 https://steemit.com/@otega/translated-suitecrm-from-english-to-yoruba-language-1250-words https://github.com/zaproxy/zaproxy [13 contributions]Examples: https://steemit.com/@robin-ho/cebuano-translation-owasp-zap-1-121-translated-words-localization-20 https://steemit.com/@robin-ho/cebuano-translation-owasp-zap-1-139-translated-words-localization-19 https://steemit.com/@robin-ho/cebuano-translation-owasp-zap-1-143-translated-words-localization-18 https://github.com/bolt/bolt [12 contributions]Examples: https://steemit.com/@otega/bolt-bolt-translation-in-to-yoruba-1012words-part-2 https://steemit.com/@syedumair/bolt-translation-to-urdu-india-or-part-4-1060-worda-translated https://steemit.com/@syedumair/bolt-translation-to-urdu-india-or-part-3-1098-words-translated https://github.com/bookchainio/steem-whitepaper [8 contributions]Examples: https://steemit.com/@leurop/translation-of-steem-white-paper-from-en-to-portuguese-part-7 https://steemit.com/@rosatravels/steem-white-paper-part-5-or-traditional-chinese-1009-words https://steemit.com/@sarmizegetusa/steem-whitepaper-romanian-translation-11-1331-words-translated https://github.com/phalcon/docs [7 contributions]Examples: https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part16-1323-words https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part15-1288-words https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part14-1201-words https://github.com/PrestaShop/PrestaShop [7 contributions]Examples: https://steemit.com/@leynesmoran/prestashop-project-translation-from-english-to-spanish-venezuela-part-19-1218-words https://steemit.com/@sontiogo/translation-spanish-part-5-prestashop-official https://steemit.com/@leynesmoran/prestashop-project-translation-from-english-to-spanish-venezuela-part-17-1314-words https://github.com/OpenCPN/OpenCPN [7 contributions]Examples: https://steemit.com/@strings/vkdzs-opencpn-or-english-to-filipino-or-part-5 https://steemit.com/@digitalplayer/translated-4096-words-from-english-to-italian-for-opencpn-4 https://steemit.com/@digitalplayer/translated-3072-words-from-english-to-italian-for-opencpn-3 https://github.com/Airesis/Airesis [6 contributions]Examples: https://steemit.com/@gerardocoin/spanish-venezuelan-translation-of-airesis-part-iv-1116-words-translated https://steemit.com/@gerardocoin/spanish-neutral-translation-of-airesis-part-ii-1200-words-translated https://steemit.com/@gerardocoin/spanish-venezuelan-translation-of-airesis-part-i-1144-words-translated https://github.com/akeneo/pim-community-dev [5 contributions]Examples: https://steemit.com/@foxsil/translation-of-akeneo-from-english-to-polish-part-1-1064-words https://steemit.com/@silviu93/translated-1000-words-from-english-to-romanian-for-akeneo-7 https://steemit.com/@silviu93/translated-1000-words-from-english-to-romanian-for-akeneo-6 https://github.com/byteball/byteball [5 contributions]Examples: https://steemit.com/@dbucci24/byteball-translation-from-english-to-spanish https://steemit.com/@face2face/byteball-wallet-translation-finsihed-part-2-english-hindi https://steemit.com/@face2face/byteball-wallet-translation-part-1-english-hindi-1013-words https://github.com/Sea-n/tdesktop [4 contributions]Examples: https://steemit.com/@zulfikaraw/i-translation-telegreat-into-indonesia-language-4-as-proofreader https://steemit.com/@zulfikaraw/i-translation-telegreat-into-indonesia-language-3-as-proofreader https://steemit.com/@zulfikaraw/i-translation-telegreat-into-indonesia-language-as-proofreader https://github.com/nuxeo/nuxeo [4 contributions]Examples: https://steemit.com/@miss-ste/nuxeo-italian-translation-from-64-to-74 https://steemit.com/@godfish/translating-nuxeo-into-czech-part-iii-1-141-words https://steemit.com/@godfish/translating-nuxeo-into-czech-part-i-1-138-words https://github.com/zaproxy/zap-core-help [4 contributions]Examples: https://steemit.com/@victory622/chinese-simplified-version-translations-for-owasp-zap-help-xviii-1317 https://steemit.com/@victory622/chinese-simplified-version-translations-for-owasp-zap-help-xvii-1176 https://steemit.com/@riderblack/1-196-words-translated-to-owasp-zap-help-project-from-english-to-filipin https://github.com/falling-sky/source [4 contributions]Examples: https://steemit.com/@caratzky/1152-translated-and-proofread-words-for-falling-sky-or-cebuano-translation-or-11th-contribution https://steemit.com/@deusjudo/falling-sky-translation-from-67-to-74-1111-word-1-part https://steemit.com/@caratzky/1112-translated-and-proofread-words-for-falling-sky-or-cebuano-translation-or-7th-contribution https://github.com/zotonic/zotonic [3 contributions]Examples: https://steemit.com/@khaled-dz/translation-zotonic-into-arabic-1075-word https://steemit.com/@khaled-dz/translation-zotonic-into-arabic-1066-word https://steemit.com/@ackseriam/zotonic-translation-from-english-to-spanish-1130-words-3 https://github.com/progit/progit2-es [3 contributions]Examples: https://steemit.com/@josue33/spanish-translation-pro-git-1431-words-part-16 https://steemit.com/@josue33/spanish-translation-pro-git-1130-words-part-15 https://steemit.com/@josue33/spanish-translation-pro-git-1104-words-part-14 https://github.com/steemit/bluepaper [3 contributions]Examples: https://steemit.com/@uwc/translation-of-steem-bluepaper-from-english-to-croatian-2-1-767-words https://steemit.com/@punqtured/translation-of-steem-bluepaper-or-en-to-dk-full-translation https://steemit.com/@uwc/translation-of-steem-bluepaper-from-english-to-croatian-1-1-160-words https://github.com/jmalenko/alarm-morning [3 contributions]Examples: https://steemit.com/@marugy99/translation-to-spanish-alarm-morning-from-english-1154-words https://steemit.com/@samuellmiller/translation-spanish-alarm-morning-from-english-1044-words-part-3 https://steemit.com/@samuellmiller/translation-spanish-alarm-morning-from-english-1057-words-part-2 https://github.com/pbek/QOwnNotes [3 contributions]Examples: https://steemit.com/@cryptoexplorer7/translation-contribution-to-open-source-project-part-5 https://steemit.com/@cryptoexplorer7/translation-contribution-to-open-source-project-part-4 https://steemit.com/@totoh/qownnotes-or-english-to-hiligaynon-translation-or-1-082-words-or https://github.com/FireHound/android_frameworks_base [2 contributions]Examples: https://steemit.com/@karinarmc/firehound-european-portuguese-part2 https://steemit.com/@karinarmc/firehound-european-portuguese-part1 https://github.com/sakaiproject/sakai [2 contributions]Examples: https://steemit.com/@silviu93/translated-1000-words-from-english-to-italian-for-sakai-cle-2 https://steemit.com/@silviu93/translated-1000-words-from-english-to-italian-for-sakai-cle-1 https://github.com/espocrm/documentation [2 contributions]Examples: https://steemit.com/@reserve04/espocrm-translation-1094-words-into-russian-language-10 https://steemit.com/@reserve04/espocrm-translation-1100-words-into-russian-language-9 https://github.com/exoplatform/platform [2 contributions]Examples: https://steemit.com/@agentzero/1215-translated-words-for-exo-platform-or-tagalog-translation-or-6th-contribution https://steemit.com/@vinzruzell/exo-platform-or-english-to-tagalog-translation-or-1-130-words-or-part-3-or https://github.com/Khan/webapp-i18n-bigfile [2 contributions]Examples: https://steemit.com/@toffer/official-khan-academy-translating-1-137-words-in-filipino-or-khan-2 https://steemit.com/@toffer/official-khan-academy-translating-1-106-words-in-filipino-or-khan-1 https://github.com/snipe/snipe-it [2 contributions]Examples: https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1095-words-part-6 https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1096-words-part-5","link":"/7-top-open-source-projects-for-utopian-translation-contributions-in-past-7-days/"},{"title":"疫情后第一次一家人外出吃中餐","text":"最近英国政府为了刺激消费，避免众多餐厅陷入倒闭潮，出台了一个很霸气的政策：八月份的周一到周三，在所有经政府批准的餐厅中就餐的餐费，政府给买单一半（每个人头上不超过10英镑）！ 其实最近由于进行扩建，家中一直没有厨房可用。每天的晚饭基本上都是靠点外卖解决。但再好餐厅的菜，一旦打包成了外卖，味道上就会大打折扣。今天感觉实在不想吃外卖，于是决定去餐厅就餐。 由于这个政策的刺激，去餐厅就餐的人数很多，因此，要想保证有座的话，必须提前预订。打电话给我们最喜欢的一家中餐，被告诉环境最好的一楼已经订满，要想吃的话必须到二楼坐。 进入餐厅后，看到餐桌的摆放和平时很不一样，每两个用餐的餐桌之间，距离都超过两米，这是为了最大限度上来避免就餐客人之间的接触。餐厅服务人员口罩，手套一应俱全。 想着既然有政府买单，那就多点几个最喜欢的菜吧。点完后被告知，由于很多人点外卖，后厨忙不过来，我们需要砍掉几个菜。好吧，也只能这样了。 等待的过程中和老板聊了几句。原来最近很多人都和我们一样，经常性的点外卖。以至于餐厅的厨师们每天都累到虚脱，因此我们从点菜到最后就餐，足足等了将近一个小时。 不过，用餐完毕后感觉，这份等待还是很值的。晒几个他家的拿手菜：","link":"/20200818/"},{"title":"由一瓶威士忌引发的思考","text":"今天去超市买东西，在还购物车的时候发现前面的空购物车中有一瓶威士忌酒，很明显是有人在买完东西后忘记拿了。当时直接就把酒送到了超市的服务台，把情况说清楚了，走人。后来受好奇心驱使，查了查这瓶酒的价格，将近40英镑，相当我在超市消费金额的一半。 其实，以前也遇到了几次类似的场景，都做了相同的处理。有些时候朋友会说我这个人在这方面脑瓜不太灵光。可我自己倒没觉得怎样，如果我把这瓶酒拿回家，自己肯定过不了自己这一关，心里肯定会觉得很别扭。在国外生活时间久了，很是接受这边的诚信体系，是你的就是你的，别人也抢不走，不是你的就都是浮云，要学会淡定。 也曾经听过一些人的所谓生活窍门，比如：个别在大学上学的学生从来不交停车费，被问到为什么的时候还“精明”的算了一笔账：停车费每月30英镑，但他停车的地方比较偏，被查的几率很小，如果一年中偶尔被查到两三次，每次收到50英镑的罚单，整体来说也是划算的。对这种想法我真的是无语了。我确实懒得琢磨这些小窍门，想要赚钱，有很多方法，何必费心想这些小窍门？ 其实从根本上说这就是一种对规则的尊重，在我们生活的社会中有很多大家都认可的规则，你是认真的遵守这些规则吗？","link":"/7mlfrn/"},{"title":"月是故乡圆 - 参加当地华人的中秋晚会","text":"每逢佳节倍思亲。这周正逢国庆和中秋两大节日，让我更加思念国内的亲人们。转眼到英国已经十几个年头了，当时初到英国的情景还历历在目，可目前自己的孩子们都上学了。悠悠岁月漫长，心中永远不变的是对故乡，对亲人的思念之情。 还好当地的华人自己组织起来，举办了中秋晚会。在晚会上遇见了好多许久不见的朋友，也认识了很多新的朋友，孩子们玩的也非常高兴，让参与者都感觉了一份家的温馨。 这次中秋晚会的一个高潮就是中国传统的猜谜游戏，大家纷纷踊跃参与，组成了不同的小组，最后我爱人的小组还荣获了第一名。给大家分享几个有趣的谜语。一个是难度系数较大的：一边大，一边小，一边跑，一边跳（打一字）。另一个是非常奇葩的：吃着包子上厕所（打一个成语） 组织者还组织孩子们做手工，让孩子们体验了一下中国传统文化。 在国庆之夜，祝愿我的祖国繁荣昌盛，我的家人朋友们幸福安康！","link":"/7krffu/"},{"title":"古希腊艺术：阿喀琉斯和埃阿斯对弈","text":"最近孩子正在学习古希腊的知识。家庭作业中有很多涉及到古希腊的内容。本周的作业是完成一件和古希腊艺术相关的作品。经过一番选择，我们决定临摹古希腊艺术中著名的花瓶：阿喀琉斯和埃阿斯对弈。于是我也和孩子一同学习了一下这件艺术品。 图源：英国亚马逊上仿制的艺术品 这件作品由公元前550年左右时的黑绘陶瓶艺术家埃克塞基亚斯所创作。在陶罐上描绘了阿喀琉斯与埃阿斯对弈的场景。这名艺术家还有一件著名的作品，就是“埃阿斯之死”。有人对这位艺术家的评价极高，是因为他才使得黑绘陶瓶艺术成为主流艺术之一。 瓶中的阿喀琉斯(Achilles)和埃阿斯(Ajax)很多人一定很熟悉。尤其是阿喀琉斯，是古希腊神话中神一般存在的英雄。由于自出生时他的女神母亲将其捉住脚踝放入冥河斯堤克斯里浸泡，因此全身刀枪不入，同时还具有超凡的智慧和力量，只有被手握住的脚踝处成了他的致命弱点。也因为如此后来在特洛伊战争中被小人所害。","link":"/7sfbjq/"},{"title":"侠盗罗宾汉的故乡之行","text":"上个周末全家去侠盗罗宾汉(Robin Hood)的故乡，也就是Sherwood Forest度假。先看看百度百科上对罗宾汉的介绍： 在英国的传说中，罗宾汉的名字是极为响亮的。有些学者认为罗宾汉是中世纪绿林好汉的化身，还有学者认为这些民间故事完全出自人们的想象。他的传奇有多种说法，大致是说在12～13世纪著名的十字军东征的时候，英格兰的理查王被俘，留在国内的约翰王子趁机篡权，拒绝赎回理查王。而与他狼狈为奸的诺丁汉郡长也趁机强占了忠心于理查王的罗宾汉家的领地，更试图染指他的心上人玛丽安。罗宾汉被迫躲进舍伍德森林，以此为基地，领导一支农民起义军到处劫富济贫，最终成功赎回理查王，粉碎了约翰王子等人的阴谋。罗宾汉最突出的就是射箭术高超。据介绍，现在射箭比赛里就有“罗宾汉”这一术语，指射中另一支已中靶心的箭。 历经近两个小时的车程，终于来到罗宾汉曾经战斗过的地方： 我们预订的森林小木屋： 这棵大树非常有名，曾在2014年全英树木评比中获奖！据说罗宾汉就是在这棵大树下认识自己的好兄弟加左右手Little John。 这里简直就是狗狗们的天堂，各种品种的狗狗们在这里尽情撒欢，就连Information Centre门口都有“停狗位”：","link":"/7ncpsm/"},{"title":"重新造访爱丁堡","text":"最近出差重新造访曾经生活了多年的爱丁堡。 爱丁堡这座美丽的城市是苏格兰的首府。城市中的剧院，博物馆，画廊比比皆是。瓦特，贝尔，达尔文，史蒂文森，柯南道尔，J·K·罗琳等人和爱丁堡有着密不可分的联系。 爱丁堡的景点也非常集中：爱丁堡城堡，皇家大道，卡尔顿山，亚瑟王宝座，苏格兰国家博物馆，苏格兰国家艺术画廊，王子街，斯科特纪念塔等等 Posted using Partiko Android","link":"/7z1jxztw/"},{"title":"900+ Chinese Food Recipes - Top 1 Chinese food recipes in Google Play store","text":"900+ Chinese Food RecipesTop 1 Chinese food recipes in Google Play store Screenshots Hunter’s comment900+ Chinese Food Recipes is an amazing Android recipe app with more than 900 recipes, including soups, meats, fishes, vege, noodles, cakes, dumplings etc. This app has everything from easy to expert recipes and teaches you step by step in making Chinese food. The interface of the app is user-friendly and easy to use. Each recipe includes information like the ingredients and the instructions about how to cook. You can bookmark your favorite recipes and come back later. Also, you can share the recipes via social networking as well. If you love Chinese food and want to know how to cook it, this is the APP for you. Linkhttps://play.google.com/store/apps/details?id=id.startupmedia.chinesefoodrecipes ContributorsHunter: @aafeng This is posted on Steemhunt - A place where you can dig products and earn STEEM.View on Steemhunt.com","link":"/900-chinese-food-recipes-top-1-chinese-food-recipes-in-google-play-store/"},{"title":"园艺精品公园宝墨园游记 - A day trip to Baomo Garden by @aafeng","text":"建于清嘉庆年间的宝墨园是一座特色非常鲜明的园艺精品公园，集清官文化、岭南文化、珠三角水乡特色于一体。宝墨园曾于1957年被毁，后于1995年被重建。里面除了锦鲤池，龟池，牡丹园，莲池等景色宜人的景点，文化气息也是极为浓厚，里面有为纪念包公而修建的包相府庙，还有众多岭南文化代表人物的墨宝和遗迹等。 Baomo Garden was first built in the late Qing Dynasty, ruined in 1957, and reconstructed in 1995. It is a masterpiece of South China culture, arts, gardens and architectures. Baomo Garden has a large number of antiques, calligraphy and paintings by well-known masters. 正门进门处的白石仿古牌坊，非常雄伟壮观。 The magnificent white stone antique arch 别小看这个锦鲤池，里面也是有故事的。据说原番禺市委书记梁伟苏退休之后，研究出一套水循环系统并应用于宝墨园。因此在宝墨园中锦鲤数量多，而池水却始终清澈见底。 The water circulation system has been well designed by Liang Weisu. As a result, the water is always clear bottomed out, no matter how many number of koi lives there. 龟池中密密麻麻的小乌龟们： Turtle pond 接下来就到了金碧辉煌，雍容华贵的艺林苑。 Then we went to the resplendent, elegant Yilin Garden. 其实整个宝墨园中的水景都非常别致，园中的水都是清澈见底，一座座石桥横跨在水面上，这是湖光影印中的阁楼： In fact, water is an important part of the sceneries in the Baomo park, the water is clear everywhere with stone bridges cross over it. Here is the attic surrounded by water: 湖中喷泉： fountain in the lake 猜猜这个“荷香馆”是什么地方？哈哈，其实它只是是一间高级的洗手间。知道这是洗手间后再看看图中的那副对联，脑补一下，是不是画面有点美？这座洗手间采用的可是有名的岭南建筑风格：水磨青砖，彩色琉璃二龙抢珠屋顶，还有七彩窗户。 Guess what is this building? Study room? Restaurants? LOL, it is a toilet! This toilet represents a typical Lingnan architectural style, such as the typical bricks being used for the wall, the roof decorated by dragon fighting colored glass, and stained glass. 赵泰来艺术宫气势雄伟，是一座集彩绘、木雕、陶塑、石雕之精华于一体的建筑，建筑的门口有六条气势磅礴的青石双龙盘柱。门前墙壁上有《三国演义》中的故事“桃园三结义”，“三英战吕布”，“官渡之战”，和“舌战群儒”。这是门口墙壁上的三英战卢布壁画： Zhao Tailai Art Palace is a magnificent building demonstrating fine arts e.g. painting, wood carving, pottery, stone carving etc. There are six stone pillar decorated with dragons in front of the building . The front wall is decorated by four murals about “Romance of the Three Kingdoms” . 在艺术宫内有很多瓷器和名家真迹的展示，这是乾隆年间瓷器： Porcelain in Qianlong years 好喜欢这里的建筑： Elegant buildings 我们又到了这里著名的玫瑰园，里面有着各色玫瑰，很多是我从没见过的异样品种： We went to the famous rose garden where is full of a large number of varieties. I have never seen many of them before. 这支玫瑰花的颜色好独特： The color of this rose is so unique 红红的玫瑰： Red rose 这种混色的玫瑰： Mixed colored rose 这里还有一件很吸引人的活动就是可以在鱼池里捉小鱼。每天都有几次的固定时间放一些小鱼让游客捕捉。每到这个时候，经常是孩子和家长一起上。我们也体验了一把，捉到了几条小鱼。 One of the popular activities is to catch fishes in the pond. The staff put some fishes into the pond for tourists to catch a couple of times a day. 晚上和家人一起去吃海鲜，餐厅外面是一个很大的海鲜市场，可以自己选择要吃的海鲜，餐厅给现做。 We went to a seafood restaurant for dinner. 进门处就是各种广式靓汤： Lots of Cantonese soups to choose in the hall. 海鲜的种类非常多，这是花龙虾： Huge amount of seafood to choose 鳄鱼龟 Alligator turtle 这里有各种大螃蟹： Different kind of crabs 据家人介绍，这个大煎堆似乎很有名，似乎还上了一个专门介绍中国美食的电视频道。这是现炸的大煎堆 Large sesame seed ball 餐厅这里环境很好：在餐厅里可以眺望珠江 Very nice and comfortable restaurant with a great river view.","link":"/a-day-trip-to-baomo-garden-by-aafeng/"},{"title":"北京老牛体验馆亲子体验 &#x2F; A great family day in Laoniu children discovery museum, Bejing","text":"早就听说北京老牛儿童探索馆的大名，一直没有机会带孩子去，今年回国期间终于如愿以偿，带着孩子在里面玩了半天，感觉真的是名不虚传，里面不仅好玩，而且还很有教育意义。老牛体验馆位于中国儿童中心院内，主要面向7岁以下儿童。在这里提倡亲子互动，让孩子们在玩的过程中探索和认识世界。老牛馆儿童票价60元，成人票价20元。这个收费算是非常低的了。我们是去的下午场。 I have heard this famous children discovery museum for a long time and luckily we took our kids there this year. This centre is a decent educational place to let kids have fun while learning new things, and let children explore and understand the world. It is mainly for children under 7 years old. The admission fee is 60 RMB for children and 20 RMB for adults. 到了儿童探索馆： We have arrived! 进入老牛馆后先到了左边的布偶表演区，孩子们在操纵木偶表演： First we went to the puppet show area which children are the directors! 接下来先来到空气动力学的科学区，这里通过各种道具把空气动力学的基本原理展示给孩子们。首先是这里通过吸力把塑料球吸引到顶部。 Then we came to the aerodynamics scientific area, where through a variety of experiments to show children the basic principles of aerodynamics. 孩子在聚精会神的看着： Kids are watching 旁边是这个可以攀爬的网状金属树：儿子已经迫不及待的爬上去了 Next to this is the climbing net 小女儿也不甘示弱： My daughter also likes it 旁边还有一个展示水流和水的冲击力的科学区，孩子们可以在这里玩水： There is also a science area showing the impact of water. 这里可以教孩子们了解脉搏和心跳： Children can learn pulse and heartbeat here 放了一辆真的小汽车来教孩子们了解汽车构造： A really car for kids to try 任何一个儿童中心都必不可少的shopping体验区 The shop 女孩子们最喜欢的过家家 Girls love this kind of imaginative play 宠物医院的两个小医生 Two pets doctor 游玩结束后去了非常有名的便宜坊餐厅去吃北京烤鸭，这个餐厅布置得非常雅致： We went to the famous PianYiFang restaurants to have dinner, the restaurant is very nice and comfortable 大红灯笼 Red lanterns 餐厅中的空间很大，孩子们在饭前饭后可以自由活动。孩子们首先都被这两只鹦鹉给吸引过去了： The children were first attracted by the two parrots 北京烤鸭一如既往地好吃，当时就没有拍照，比较惊艳的是这两个素菜。都是第一次吃，但都非常爽口。 Beijing roast duck, as always, delicious, but we didn’t take photos. I was impressed by the two vegetable dishes. 黄金红薯泥： Gold sweet potato mash 非常喜欢这个凉拌冰菜： I love this icy vegtable","link":"/a-great-family-day-in-laoniu-children-centre-bejing/"},{"title":"A great family day out in Piglets farm - 在小猪农场的愉快周末","text":"这个周日带这孩子参加在Piglet小猪农场的mumbler活动。农场里除了各种孩子们喜欢的游乐设施外，还有专门的各种活动，比如：孩子的舞蹈，芭蕾，face painting等等。原来这个农场就很受欢迎，今天更是格外的忙，看停车场的车就比平时多了一倍。 We had a great family day at Piglet Pig Farm this Sunday. There are different activities such as children’s dance, ballet, face painting and so on. The farm is very popular, today it is extremely busy. 门口的这只萌萌的小猪Truffles The super cool Truffles 这是Piglet正门，感觉门口这个小果树非常漂亮，结满了黄色的小果子 In front of the main entrance, a beautiful tree with lots of yellow fruits. 不愧是小猪农场，入门处不远就有一群小猪和猪妈妈。看来什么小动物小的时候都是很可爱的。 Just opposite the main entrance, a pig family is seeking food and the little ones are super cute. 今天的天气非常给力，一直有阳光，风也很小，这在英国可是非常难得的。蓝天，白云，小猪，还有我家的小美女 Today’s weather is amazing, see blue sky, cloud, pig, and my little princess 孩子们一进门就冲到了这辆木制拖拉机这里。我家的小女汉子站在了木制拖拉机的驾驶舱顶上 The children rushed to the wooden tractor. My little daughter was standing on top of the wooden tractor’s cockpit 蹦床一直是我儿子的大爱，他一直在这里不停的蹦了半个小时。从一开始的人满为患蹦到了最后几乎就他自己。 Trampoline has always been my son’s favourite, he has been here in the non-stop jump for half an hour. From the beginning of the overcrowding to the last almost just himself. 到了小猪赛跑的时间了，大家纷纷围拢过来观看。小朋友们先是和这个小猪造型合影： It’s pig racing time 孩子们超级喜欢的拖斗车，我家的儿子和女儿都是超级喜欢。儿子来了后就连续做了两次。 Trailer is always children’s favorite. 还有这种能骑三轮车的地方，骑起来感觉比自行车要费劲些。但这也是它吸引人的地方吧。因为稍微费劲，所以比赛起来也就更有意思。而有的则可以家长和孩子一起骑 Pedal Go-Carts attacts both children and adults. 另外里面还有一个小高尔夫球场，主要是用推杆。从开始到最后难度系数不断增加。我家小女儿更钟爱这里的高尔夫，玩了好几轮 A small golf course sits in the far end of the Piglets. My little daughter loves the golf here, she has played several rounds 在女儿的小朋友带领下，一起玩起了这个网间跨越的游戏，可以让小孩子们锻炼身体协调能力 My daughter has been playing the Olympigs Obstacle Course for a while. 两个小蜘蛛侠 Two little spiders 这个造型独特的小房子也是喜爱过家家的小女儿的最爱，女儿管它叫做蘑菇房 This little mushroom house is an ideal place to play Daddy and Mummy’s game 这里也有用玉米地搭建的迷宫Maze A maze by corns 就连里面的垃圾桶都在教育孩子们垃圾分类的知识 The rubbish bin has been designed to educate children on garbage classification 沙池这里也吸引了不少小朋友。 Sand pool here also attracted a lot of children. 小推土机驾驶员 The little bulldozer driver 出门前咨询了一下，这里在万圣节，圣诞节期间还有各种活动。据说圣诞节期间的有些活动已经背订光了。期待下一次的活动。 There are a variety of activities during Halloween and Christmas. Some of the activities during the Christmas period have been sold out.","link":"/a-great-family-day-out-in-piglet/"},{"title":"香辣虾","text":"今天突然无比想念国内的香辣虾，周边中餐馆菜单上似乎没见到这个菜。于是决定自己动手，也没有从网上查菜谱，完全凭着感觉做的。没有想到异常成功，色香味都非常满意。看来厨艺都是逼出来的。","link":"/a5b8eef14aff/"},{"title":"如何在预售前兑换AAA代币-详细操作步骤","text":"偶然间看到 @rosatravels 的这篇文章，自己尝试了一下AAA代币的兑换。感觉如果没有用过Steem Engine，过程略有些绕，因此把操作的详细步骤总结一下，供感兴趣的朋友参考。 关于AAA代币及其对应项目的详细介绍，请参考 @jayplayco 的这篇文章：Starting Presale of Triple A, the blockchain based Movie and Video review platform 登陆 Steem Engine首先，登陆Steem Engine，这里只需要使用你的posting key就可以。 充值STEEM到Steem Engine单击 “Deposit”，会看到如下窗口： 单击 “GET DEPOSIT INFO”, 你会看到如下窗口： 其中，”Current STEEM Balance” 指的是你Steemit账号中可用的STEEM数量，在最下面的 “DEPOSIT AMOUNT” 中输入你想要转入的STEEM数额，比如：10。注意：这里Steem Engine要收取1%的手续费。然后，单击：”DEPOSIT STEEM”。 由于这里设计到转账操作，因此需要输入你的Active key。我这里使用的是Steem Keychain这个Chrome插件，非常好用。 单击Steem Keychain中的”CONFIRM”按钮确认交易。如下图所示，STEEM很快就能转到Steem Engine中： 购买JJM代币进入Steem Engine的JJM代币页面：https://steem-engine.com/?p=market&amp;t=JJM 输入当前的市场价，打算购入的JJM数额，系统会自动计算出所需的STEEM，如果你的余额够，可以单击”Buy JJM”，进入到下一步，否则，修改需要购买的JJM数量。 系统会再次确认： 单击 “BUY” 下单。系统同样需要你输入Active key，或者在Steem Keychain中确认。 回到”WALLET”页面，可以看到你的Token中有了JJM： 发送JJM给 @virus707@virus707 就是JJM 和 AAA 代币的发行者，下面你需要把刚才拿到的JJM发送给 @virus707。建议在备注字段填写推荐人，例如：aafeng - referral，这样你我各自能得到额外的2%代币。 同样需要输入Active key，或在Steem Keychain中确认。 然后就等着吧，我是在一个多小时后收到AAA代币的。我的20 STEEM最后换到的AAA估值 $145，是不是很爽？？？等到6月5日正式发售时希望给我们一个惊喜。","link":"/aaa/"},{"title":"Abramović Method沉浸式体验","text":"在这次会议期间， 由主办方组织在丹麦皇家图书馆，也号称黑钻石图书馆体验了一下著名的Marina Abramović沉浸式体验。在这里，需要把手机交给工作人员保管，脱掉鞋子，戴上耳机，进入到一个非常安静的房间中，选择一个你最舒适的方式，你可以站着，可以坐着，甚至可以躺下，盖上毯子。 彻底放松下来，忘掉一切，用心去体验书中讲述的故事。 这种沉浸式阅读的发明者是由塞尔维亚出生的世界出名的表演艺术家Marina Abramović所发明。她被认为是在这个世界上最伟大，同时也是最具破坏力的表演艺术家。在她的很多表演中，强调的是和观众的深度交互。这套方法中包括了特殊的耳机，帮助听众摆脱各种束缚的方法，比如：特制的椅子和硬板床。这套方法有些时候甚至都可以作为一种心理疗法。 在整个体验过程中，我试着坐在特制的椅子上，同时也试着躺在了特制的硬板床上，听着耳机中清晰而缓慢的英语朗读的故事，很快就忘记了时间，不知不觉的沉浸到了故事中。真是一次奇妙的体验。","link":"/abramovic-method/"},{"title":"英国圣诞节传统 - 圣诞日历Advent Calender","text":"英国圣诞节的传统之一就是给孩子买一个Advent Calender圣诞日历。一般圣诞日历都设计的很精美。内设24个小门。从12月1日到24日，每天可以打开一个小门，里面会装有一些巧克力或小玩具，给孩子门一个惊喜。虽然平时对孩子们的甜食控制很严格。但毕竟圣诞季来了，我也会放松要求。送给孩子们他们喜欢的圣诞日历。哥哥选择的是小雪人的圣诞日历。妹妹选择的则是冰雪奇缘为主题的圣诞日历。 其实，圣诞日历不仅是孩子门的最爱，很多成年人也喜欢。毕竟，一到12月份，每天都有一个小惊喜，又有谁不喜欢呢？因此现在很多商家比如Liberty, Harrods，还有很多经营化妆品的商家都会推出一些化妆品的圣诞日历，同样也非常畅销。 圣诞日历最早源于德国的路德教。早期的圣诞日历带有浓厚的宗教色彩，人们会在12月的每一天点上一支新蜡烛，或者挂上一幅新的宗教画。其实，圣诞节本身又何尝不是呢？沧海桑田，发展至今日。圣诞日历的宗教色彩已经越来越淡化了，已经变成了一种美好的节日礼物了。","link":"/advent-calender/"},{"title":"长隆海洋王国游记 A trip to Chimelong Ocean Kingdom","text":"我们在国内的时候去了一趟位于珠海横琴长隆国际海洋度假区的长隆海洋王国，下面把这次的游记和大家分享一下。这里有各种珍稀的海洋生物，比如白鲸，海豚，北极熊，北极狐等等。Located at Chimelong International Ocean Resort in Hengqin, Zhuhai, Chimelong Ocean Kingdom is a large aquarium that allows guests to view the rare whale shark, beluga whales, polar bears, and other adorable animals up close! 长隆海洋王国在世界上都是有名的，因此吸引了大批的游客，这里是海洋王国的入口Chimelong Ocean Kingdom delivers an exciting and internationally recognised park experience! 入口处的大屏幕就让人感到非常震撼，话说这是我在所有去过的公园中见到过的最大的展示屏。在屏幕中可以看到各种小动物在悠闲的游来游去。屏幕的两边则装饰着珊瑚和岩石。The amazing ocean journey begins the moment you step onto Ocean Avenue! Immerse yourself in an underwater world with the giant overhead LED screen. The avenue’s sidewalks are decorated with vibrant corals and rocks reminiscent of the ocean floor. 首先参观的是这些可爱的海狮We first visited these cute sea lions 接下来这些海狮进行了精彩的表演A wonderful performance by these sea lions 海豚也来客串，进行顶球表演。之后又进行团体表演The performance by dolphins 接下来我们来到了极地世界，这里展示着北极和南极的各种动物，有企鹅，北极熊，北极狐，和北极狼，还有白鲸的表演。We then arrived at Polar Horizon which shows us the mysterious North and South Poles. 接下来我们去了著名的白鲸剧场We visited the famous Beluga whale theatre 白鲸到水池边用特殊的方式和观众致意，前排观众都被淋成了落汤鸡The clever whales says hello in a special way, pouring water to audience 接下来是白鲸和驯兽员的互动。首先是白鲸推着驯兽员游泳，然后驯兽员还站在了白鲸的肚子上。Then the trainer and the whale performed together, e..g the whale pushed the trainer to swim and latter the trained stood on the whale’s stomach. 池底的龙虾：The lobsters 游弋的鲨鱼，和工作人员咨询了一下，原来这种鲨鱼是不吃小鱼的。它们可以和小鱼们和平共处。Those sharks live in peace with other fishes. 这种鲨鱼是要吃别的小鱼的，因此只能在单独的水箱中玩耍了These sharks would eat other fishes, so can only stay in a separate water tank 超大的魔鬼鱼Stingrays 整个水箱很大，鱼群在里面自由的游弋，还有丑丑的小鱼，生活在石缝中的小鱼 ： 梦幻般的水母","link":"/a-trip-to-chimelong-ocean-kingdom/"},{"title":"2020年的第一次出游","text":"由于疫情原因，2020年一直在家中宅着。最近英国疫情形势有所缓解，政府也公布了一系列解封政策。于是这个周末和两家朋友一起约好，去周边的Allerthorpe Lakeland Park水上乐园去玩了一天。 这个水上乐园目前还没有全面开放，一些水上项目将会在下周正式开启。不过即使这样，这里也不失为一个休闲的好去处。毕竟这里地广人稀，周边是大片的绿地，还有湖水，空气也非常好。即使在这里散散步，晒晒太阳，也很不错。 来这里的人还真不少，感觉不少人其实也不参加什么项目，一家人在这里野餐，聊天，放松而已。 这里也是专门的房车宿营地，很多家庭会开着房车，停在这里，并在这里住上几天。 这里的项目都是水上的。目前包括：单人皮划艇，四人/八人划船，脚踏船，划桨冲浪等项目。 这个Paddleboarding看起来有些吓人，感觉搞不好就会掉在水中。但其实没有那么可怕，只要站稳了，划水的时候不要用力过猛，还是很稳的。有些人感觉不是很有把握，索性跪在上面划水。如果划累了，可以趴在上面歇一会。 单人皮划艇是最为轻便的了，也很好划。很多小朋友都可以轻松掌控，玩的非常溜： 感觉这个水上乐园非常好玩，希望还能再来。但现在疫情还没有彻底好的时候人就已经不少了。希望下次来的时候人不要太多就好。","link":"/allerthorpe-park/"},{"title":"苹果","text":"最近家里的苹果丰收了，也收到网友的建议，可以做苹果馅饼和果酱。可大家不知道的是，我种的可是我最喜欢吃的Braeburn苹果。但不知道什么原因，收获的苹果看起来又大又红，但吃起来太硬了，似乎只能拿它做食材来做些苹果馅饼之类的东西。 记得小时候的时候，国内的苹果种类也很多，像又大又红的红富士苹果，黄色，带有香蕉香味的黄香蕉苹果。还有大名鼎鼎的国光苹果。让我记忆最为深刻的是一种绿色的苹果，已经记不清它的名字了，但印象种它的个头很大，味道更是独特，在苹果的香味中含有青椒的味道。那种独特的味道让我至今都记忆犹新。 这两年回国的时候，感觉苹果的种类更加丰富了，甚至可以说是中西合璧，像红富士，嘎拉(Gala)，红将军，红星蛇果，金冠等等，让人眼花缭乱，无从选择。但却再也吃不出记忆中儿时的味道了。 所谓“一方水土养一方人”。对于苹果品种来说也是这样吧。在英国超市中见到的苹果种类和国内的并不太一样。 首先来说说最为大众的品种：Royal Gala，这种品种在国内也可以见到，叫做“嘎拉”。这种苹果个头并不是特别大，但脆甜汁多，在各大超市中都可以买到，也是最受欢迎的一个品种。 接下来说说我最为喜欢的一个品种：Braeburn。这种苹果的果汁也很多，但其味道酸甜，更为爽口。这也是我为什么自己栽种的原因。但不知道为什么，自家的苹果果实太过于硬，没有任何脆劲。 还有一种我很喜欢，名字也很文艺小清新范的苹果：Pink Lady。这种苹果呈粉红色，果实的味道非常独特，带有一种淡淡的香气，对，Pink Lady的香气。其价格经常会是Gala的两倍。 还有一种苹果叫做Golden Delicious，应该就是国内的黄元帅吧。成熟后果实为黄色，味道甜美多汁，也含有特殊的香气。","link":"/apple/"},{"title":"欣赏《哪吒之魔童降世》电影","text":"《哪吒之魔童降世》在英国上映了，今天全家专门开了40多分钟的车去先睹为快。影片确实好看，我们全家都非常喜欢。尤其是看惯了英文电影后，在欣赏这部中文电影，同时剧中的哪吒又是从小就非常熟悉的神话人物时，整个观剧过程就是一种莫大的享受。这也难怪这部电影的票房如此之高了。","link":"/anmhach9/"},{"title":"英国的学徒制apprenticeship","text":"最近在家中干活的建筑工人是一个很小的团队，也是英国这里众多建筑工人普遍采用的一个经典组合：一位经验丰富的老师傅带着两位学徒：一个是有些经验的小伙子，另一个学徒则是只有16岁的少年。 这三个人的分工是这样的。老师傅所有的活都会参与。尤其是一些关键步骤，比如：房子的边边角角，一般都是由老师傅来亲手操作。同时，老师傅还兼任项目经理的角色，负责和水暖工，电工等的沟通，和我们协商建房细节，同时还负责采购建材等。另外一个有些经验的小伙子除了一些最关键的部分之外，几乎可以干所有的活。而那位16岁的少年则只能充当小工的角色，只是打打下手。 其实学徒制在英国，甚至欧洲各国的历史都非常悠久。在英国，学徒制源于中世纪，后来经过立法规定了学徒的工作条件，工作环境，学徒休息时间等，保障了学徒的基本权益。就这样一直发展到19世纪末期，英国的学徒制由早期的艺术工匠发展到了各种行业，比如水暖工，电工，建筑工人，甚至造船师和各种其他工程师。 自从1997年开始，英国的学徒制慢慢走向了所谓的现代学徒制。参与学习的学徒不仅需要跟着有经验的师傅学习实践技能，同时还需要学习理论知识。这样通过学徒制学习的各种学徒们的整体水平不断提高，也成为很多高中毕业生的选择。 很多英国的高中生在毕业后并不是很想继续读大学，而是选择通过这种学徒制培训直接边工作边学习。他们做出这种选择的原因也比较现实。毕竟，很多工种，比如水暖工，电工的收入非常高，通过学徒制在这些行业就业，照样能够获得不错的收入，享受生活，为什么还要去读大学呢？ 英国的学徒制有点类似于国内的职业教育，但又不尽相同。在英国，主导学徒制的不是政府和学校，而是各家企业。很多大型企业都提供各种学徒制的岗位，比如：奔驰，雀巢，BBC，Sky，空客等在英国甚至欧洲都提供学徒制的工作机会。 其实，客观的讲，这种学徒制还是有其优势的，毕竟，有着经验丰富的老师傅在旁边指点，还能能够很快入行的。尤其对于那些实践性很强的行业，这些经验往往比书本上学到的知识更难得。","link":"/apprenticeship/"},{"title":"通过程序自动获得Hive免费账号","text":"前几天写了一篇文章总结了如何使用第三方工具获得免费账号。但作为一个懒人，肯定还是想要通过程序自动实现的好。下面介绍一个完整的步骤。 首先说一说前提条件。你的账户需要足够的HP才可以，我现在有5000多的HP，满血时只能获得两个免费账号。同时需要事先安装好Beem。 程序的基本思路就是根据目前Resource Credits的百分比来决定是否要领取免费账号（Claim account）。比如：可以设置为如果RC &gt;= 80%，就进行领取。 至于目前RC百分比的判断，可以采用如下的代码： from beem.account import Account creator = Account(&apos;aafeng&apos;) current_rc = float(creator.get_rc()[&apos;rc_manabar&apos;][&apos;current_mana&apos;]) max_rc = float(creator.get_rc()[&apos;max_rc&apos;]) print(100 * current_rc / max_rc) 其输出结果为： 76.26412538197629 这个数字就是目前RC的百分比。接下来需要定义一个RC_THRESHOLD,再用上面的百分比和RC_THRESHOLD进行比较，从而决定是否要Claim account。使用Beem claim account的代码片段如下： RC_THRESHOLD = 75 hive = Steem(node=&quot;https://anyx.io&quot;, keys=[active_key]) if 100* current_rc / max_rc &gt; RC_THRESHOLD: hive.claim_account(‘aafeng’) 把上面的代码放在一起： from sys import argv from beem import Steem from beem.account import Account RC_THRESHOLD = 75 if __name__ == &quot;__main__&quot;: user = argv[1] active_key = argv[2] hive = Steem(node=&quot;https://anyx.io&quot;, keys=[active_key]) creator = Account(user) current_rc = float(creator.get_rc()[&apos;rc_manabar&apos;][&apos;current_mana&apos;]) max_rc = float(creator.get_rc()[&apos;max_rc&apos;]) if 100* current_rc / max_rc &gt; RC_THRESHOLD: hive.claim_account(creator) print(&quot;Claimed an account&quot;) else: print(&quot;Below RC threshold&quot;) 运行这个程序： python autoca.py aafeng YOUR_ACTIVE_KEY 已经成功的Claim了一个账号。再把这个程序加入Cron job，就可以完全不用管它了。。。 当然，对于HP值很大的账号来说，可以在程序中多次Claim账号，这就需要把上面的程序稍作修改，每次Claim完之后再检测一下当前的RC百分比，然后再次进行判断来决定是否继续Claim。这里需要注意每次Claim账号之后，需要在程序中停顿几秒，等待节点信息更新后，否则可能获取不到最新的RC百分比。","link":"/autoclaim-hive-account/"},{"title":"使用AWS Amplify自动部署Hexo静态站点","text":"最近尝试了一下Amazon AWS的Amplify，感觉非常好用。下面介绍一下如何使用Amplify自动将Hexo生成的静态站点发布到AWS。 其实使用AWS的优点还是有很多的。 比如： 前12个月免费，12月后对于访问量不是很高的个人站点而言，费用也非常低，每个月可能都不到1美元； 全球CDN网络支持，和众多AWS服务的无缝集成等等。下面把具体步骤总结一下： 安装并配置AWS Amplify首先运行如下命令安装Amplify： npm install -g @aws-amplify/cli 如果还没有在~/.aws/credentials中创建profile，运行如下命令配置Amplify: amplify configure 其运行结果就会在credentials中创建一个profile: [amplify] aws_access_key_id=XXXXXXXXXXXXXXXXXXX aws_secret_access_key=XXXXXXXXXXXXXXXXXXXXXX 当然，如果想要使用现有的profile，可以忽略上面的这一步。 生成Hexo静态站点下面以一个简单的静态站点为例。运行如下命令生成一个静态站点，并安装Node.js的依赖库： hexo init amplify-test cd amplify-test npm install 在本地测试一下Hexo是否能正常工作： hexo s 访问 http://localhost:4000/ 应该能看到刚刚生成的站点。 使用Amplify初始化/部署静态站点进入到站点目录并运行： amplify init 会有一系列的问题需要回答，我的选择如下： amplify init Note: It is recommended to run this command from the root of your app directory ? Enter a name for the project amplifytest ? Enter a name for the environment prod ? Choose your default editor: IntelliJ IDEA ? Choose the type of app that you&apos;re building javascript Please tell us about your project ? What javascript framework are you using none ? Source Directory Path: source ? Distribution Directory Path: public ? Build Command: npm run-script build ? Start Command: npm run-script start Using default provider awscloudformation ? Do you want to use an AWS profile? Yes ? Please choose the profile you want to use amplify Adding backend environment prod to AWS Amplify Console app: XXXXXXXX 运行结果会显示初始化成功的信息： ✔ Successfully created initial AWS cloud resources for deployments. ✔ Initialized provider successfully. 添加额外站点信息： amplify hosting add 这是我的选项： ? Select the plugin module to execute Hosting with Amplify Console (Managed hosting with custom domains, Continuous deployment) ? Choose a type Manual deployment 发布站点： amplify publish 发布成功后会有提示： ✔ Zipping artifacts completed. ✔ Deployment complete! https://prod.XXXXXXXX.amplifyapp.com 进入到AWS Amplify，可以看到已经成功部署： 连接到自己的域名在AWS Amplify的Domain management中，选择”Add domain”并进行配置： 接下来Amplify会验证你对域名的所有权，按照提示在你的域名管理站点中添加相应的CNAME记录。 然后在你的域名管理网站中添加对应的CNAME。需要等待一定时间DNS更改才能生效。","link":"/aws-amplify/"},{"title":"五花八门的课外班，贪心的父母","text":"现在的各种课外班可谓五花八门，包括以学习为目的的英语，数学，科学等课外班，艺术类的舞蹈，绘画，声乐，戏剧等课外班，体育类的游泳，跆拳道，羽毛球，网球等等。每个家长如果不给孩子报上几个课外班，似乎都觉得对不起孩子。 从家长角度来说，似乎给孩子报了课外班，孩子就会多了一门特长。同时也为自己节省了一些时间。很多家长更是用各种课外班把孩子们的时间填的满满的。可是，报了这么多课外班，效果真的好吗？ 在选择兴趣班的时候，尤其是选择了多个兴趣班后，后期的坚持就非常重要了。很多孩子在开始的时候会觉得新鲜，但随着学习的深入，进入了瓶颈期，很多孩子，包括家长就知难而退了。岂不知，这样任性的放弃，在学习前期投入的时间和精力就白白浪费了。 我家孩子报的兴趣班确实也不少。由于妈妈的原因，偏音乐艺术类的占据主要。每周的钢琴课，小提琴课，乐理等占据了他们的主要时间。除此之外，还有国际象棋，游泳课等作为辅助。还好，近几年下来，两个孩子由早期瓶颈期的抗拒到最后真正的喜爱，慢慢也都坚持了下来。也获得了英皇考试的各个级别证书，同时还有各种比赛的奖杯。 当然，也有一些不太成功的例子。儿子小的时候曾经学过一段时间的马术。但由于学习场地离家比较远，又都是在室外上课。英国这里冬天的天气又比较差，所以坚持了一年多之后还是放弃了。前期所作的各种努力也彻底白费了。 慢慢的，我们也明白了，所谓贪多嚼不烂。与其让孩子学习各种不同的兴趣班，还不如针对他们的兴趣，有针对性的重点培养一到两个方向，让他们能够在某个方面能够深入的学习，这样无论对于他们所学知识的培养，还是他们意志品质的培养，作用都应该更加明显。","link":"/afterschool-club/"},{"title":"每天进步一点点： AWS DynamoDB中的坑","text":"最近这段时间对AWS，尤其是它的无服务器架构非常感兴趣。这两天尝试了一下AWS中的非关系型数据库(NoSQL)： DynamoDB，感觉到里面有不少坑，最近写的一个应用原型最初的设计是基于DynamoDB的，但进行到后期，感觉因为性能问题完全进行不下去了，又推翻了改成关系型数据库，轻松搞定。下面总结一下： 首先，对于有些应用场景，DynamoDB并不适用。甚至可以说，对于大多数应用场景，DynamoDB都不适用。 如果只是中小型应用的话，能够用关系型数据库解决，就不要考虑DynamoDB了。非要用DynamoDB？你真的想多了。。。 其次，DynamoDB最适合的引用场景就是典型的键/值类型的存储，而且是海量数据的存储。如果你需要进行复杂的查询，还是老老实实的用关系型数据库吧。用DynamoDB的Scan进行复杂的查询，真的是龟速，你还是想多了。。。 还有，使用AWS API对DynamoDB进行读写操作很简单。但是，要把DynamoDB设计好，真的有很多因素需要考虑，你需要想很多。。。 最后，给出在网上看到的一个图表，非常清晰的指出了什么时候才需要考虑使用DynamoDB:","link":"/aws-dynamodb/"},{"title":"使用AWS Step Functions定制工作流","text":"最近看上了一款Thinkpad的笔记本，但钱包不够鼓。于是想等价格降下来再考虑。难道去天天刷网页看价格吗？似乎不是一个程序猿该有的思维。最简单的方式就是写一个程序，检查该页面中的价格，然后设定为cron job，每天检查一下，给自己发邮件/短信通知。但这种方式实现起来一点刺激都没有，于是想到了AWS中的Step Functions。于是把整个过程用AWS实现了一下，通过一种无服务器的方式来实现这个功能。 首先做一个对比： 流程控制：在传统方式中，通过编码来实现。在AWS中，通过Step functions实现。检查价格：在传统方式中，通过Python抓取网页并分析网页获得。当然，如果有API可用就更简单了。在AWS中，将这个步骤封装到Lambda。消息通知：这里可以调用一些第三方库来实现。在AWS中，这部分都已经做好了，直接使用SNS就可以。定时运行程序：在传统方式中，可以设定一个cron job。在AWS中，可以通过使用Eventbridge (过去叫做Cloudwatch)来实现。 可以看到，相对于传统方式，AWS栈的最大优势就是无需管理自己的服务器。安全补丁，系统升级等等都无需考虑。下面看看如何来实现这个功能把。 第一步：创建主题和订阅(Topic/subscription)在AWS中创建一个Topic，比如：ThinkpadPriceAlert 针对这个Topic，添加一个订阅者。这里选择邮件订阅方式。 需要去邮箱中确认这个订阅。 第二步：创建Lambda接下来创建Lambda，去读取最新价格。这里直接读取网页，然后使用正则表达式提取价格，再以json方式返回价格： import json import re from urllib import request def lambda_handler(event, context): req = request.Request(&apos;https://www.lenovo.com/gb/en/laptops/thinkpad/thinkpad-x1/X1-Carbon-Gen-8-/p/22TP2X1X1C8&apos;) req.add_header(&apos;User-Agent&apos;, &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0&apos;) response = request.urlopen(req) html = response.read().decode(&apos;utf-8&apos;) price = float(re.search(&apos;&lt;dd itemprop=\\&quot;price\\&quot;&gt;(.*)&lt;\\/dd&gt;&apos;, html).group(1).replace(&apos;£&apos;, &apos;&apos;).replace(&apos;,&apos;,&apos;&apos;)) return { &apos;statusCode&apos;: 200, &apos;price&apos;: json.dumps(price) } 第三步：使用Step function创建价格查询流程定义如下的Step functions： { &quot;Comment&quot;: &quot;Thinkpad laptop price checker&quot;, &quot;StartAt&quot;: &quot;Check Thinkpad Price&quot;, &quot;States&quot;: { &quot;Check Thinkpad Price&quot;: { &quot;Type&quot;: &quot;Task&quot;, &quot;Resource&quot;: &quot;arn:aws:states:::lambda:invoke&quot;, &quot;Parameters&quot;: { &quot;FunctionName&quot;: &quot;arn:aws:lambda:eu-west-1:xxxxxxxxxxxx:function:ThinkpadPriceChecker:$LATEST&quot; }, &quot;Next&quot;: &quot;Notify Me&quot; }, &quot;Notify Me&quot;: { &quot;Type&quot;: &quot;Task&quot;, &quot;Resource&quot;: &quot;arn:aws:states:::sns:publish&quot;, &quot;Parameters&quot;: { &quot;Message.$&quot;: &quot;$.Payload.price&quot;, &quot;TopicArn&quot;: &quot;arn:aws:sns:eu-west-1:xxxxxxxxxxxx:ThinkpadPriceAlert&quot; }, &quot;End&quot;: true } } } 需要注意，上面的$.Payload.price需要和前面Lambda中的返回值相匹配。至此，就可以运行这个Step Functions了，运行的结果就是收到一封包含最新价格的邮件。 第四步：创建EventBridge Rule来定期调用Step Functions。类似于Cronjob，可以设定事件被调用的频率，还有在指定时间需要调用的目标，比如一个Lambda，我们这里可以选择前面创建的Step Functions。 至此整个程序就做好了，每天在邮件中都会收到价格提示。当然，Step Functions中可发掘的功能还有很多，比如：条件选择，并发执行，容错处理等等。讲了这么多，回到主题，希望哪天价格真降下来。。。","link":"/aws-step-functions/"},{"title":"在线参加年度AWS Summit EU","text":"近期单位的IT系统逐步向AWS转型，因此今年的这次AWS在线峰会自然是要参加了。 整个会议排的很满，从早上9点开始，一直到下午2点左右。共有11个不同的主题，55个分组讨论，其内容涵盖新手区，高级架构，应用程序开发，机器学习，数据处理等。信息量非常大。 这次峰会由Amazon的CTO Werner Vogels致开幕词(Keynote)。在Keynote中强调了架构的重要性。系统架构就如同盖房时的地基，对整个软件系统的影响非常大。 在构建系统初期，就要考虑到很多因素，例如： 安全性，可靠性，性能，成本，部署等等。 AWS专门为此构建了一个资料库： AWS Builders’ Library。 在这个资料库中由很多关于系统架构方面的讨论，帮助我们如何更好的使用AWS架构软件系统。 在Keynote中还提供了一组有趣的数据，在整个疫情期间，各行各业对流媒体服务(streaming services)的需求量暴增，比如： 每周播放的流媒体的分钟数达到千亿级。可以设想，如果没有强健的底层架构支撑，很难应对这样的需求。同时还强调了一个重要的设计考虑，整个系统应该有一个内置的机器学习引擎，通过对以往数据的分析，预测将有可能发生的系统负载，提前对系统进行自动扩容，以应对即将到来的峰值访问。 “ML is no longer an emerging technology”。现在机器学习已经被大幅度应用在IT系统中，影响着众多企业的决策。而且借助AWS这样的平台和其上丰富的服务，开发人员无需过多的ML背景，也可以将ML集成到自己的核心业务之中。这些服务包括：Kendra(数据检索和交互), CodeGuru(代码审核), Fraud Detector(欺诈监测), Augmented AI(对基于机器学习的预测进行人工审核)等等。 总而言之，这次大会上的信息量非常大，我所感受到的重点包括系统架构和人工智能/机器学习。需要一些时间来消化这些信息。","link":"/aws-summit/"},{"title":"在AWS资源中使用tag","text":"今天收到AWS的账单，发现按照项目分类的账单明细中，有些项目没有添加特定的标签，以至于相应的费用不是很清楚。比如：不清楚那些“UNTAGGED”的资源都是在哪些项目中创建的。如果费用接近或超出预算，是需要查找原因的。 相信使用过AWS的人可能都有一个感觉，就是“乱”。在AWS中的各种计算资源太过庞杂。而创建一个服务或者APP所需使用的AWS服务又是各种各样的。因此在开始接触AWS的时候总是不清楚最终费用可能是多少。即使账单出来了，也很难一目了然的看到究竟是哪个项目的运营成本更高。 AWS的tag（标签）就可以解决上述问题。其实，在AWS中的所有资源都应该添加标签(tag)。这样便于按照标签对资源进行分类和管理。在越来越多的使用AWS资源时，这种方式绝对能够帮我们更好的管理各种资源。 在AWS种使用tag时，最好事先约定好一个规则。比如： tag名称全部用小写字母和下划线 tag值全部全部用小写字母和下划线 也可以规定一些必填的tag，比如： user: 你的用户名 team: 定义自己所属的团队 project: 哪个项目使用这个资源 status: 这个资源是用于那种环境的，比如：prod, test, 或者dev source: AWS资源的创建方式，比如：manual(手工), serverless, cloudformation 至于tag的创建，就非常简单了。你可以在每种资源中分别定义这些tag。以Lambda为例，我们可以在定义Lambda的时候同时添加tag： 只不过上面这种方式比较麻烦，如果一个一个的资源的添加的话非常耗时。最好的方式还是使用一些框架，比如serverless，在其配置文件中定义这些tag。比如： provider: name: XXX tags: project: your_project group: your_group team: your_team 上面的tags是全局性的，如果只想针对某个资源定义tag： functions: myFunction: name: myFunction handler: myFunction.handler tags: tag1: value1 tag2: value2 有了这些tag，以后在管理AWS资源的时候就事半功倍了。","link":"/aws-tags/"},{"title":"英国的历史文化遗产保护","text":"我家附近教堂的围墙因为年代有些久了，有些部分有些风化。最近有些工人来进行维修，让我感到吃惊的是他们修护的方式。我感觉最快的方式应该就是拆掉重建。像这么矮的墙重建的话估计一天就可以了。可是工人们在这里干了一个多月了还没有结束。主要是他们的维修方式很特别，把风化的砖一块一块的都掏出来，换上新的砖放进去。这样一来进度就大大的慢下来了。 后来和朋友们聊天才知道原来是因为在约克这座文化小城，很多区都是文化保护区。而对文化保护区内建筑物的维修不仅程序复杂，而且对具体的施工标准都是有规定的。要在修缮后最大程度的保持建筑物的原貌。这也是在英国的一些文化名城比如约克，爱丁堡的新建筑很少的原因了。","link":"/2bsmjc/"},{"title":"学校开学,神兽归笼","text":"尽管英国疫情仍然不容乐观，多地还有进一步封城的可能。但是，学校仍然如期开学了！众多家长的心情非常复杂，既想尽快开学，把孩子送回学校，自己可以集中精力工作。但同时又担心疫情和学校的防护措施是否到位。。。 孩子们，尤其是那些年龄较小的孩子们在家期间，很多家长一边工作，一边看娃，其内心是近乎崩溃的。一些朋友不得不在晚上加班，把落后的进度不回来。因此很多家长都梦想着开学的这一天，能够专心的工作。这也是政府在目前疫情仍不乐观的情况下坚持开学的原因吧。 对于孩子们来说，这是一个难得的大假期。每天睡到自然醒，功课，作业也不像在学校那样有老师全天监督。如果家长抓的紧的话，孩子还能按时完成作业，查缺补漏，甚至弯道超车。而对于那些工作忙的家长，很多孩子就彻底在家放羊了。因此很多孩子对开学的反应是抵触的。。。 对于我个人而言，还是赞成开学的。毕竟长时间宅在家中，缺少和同龄人的交互，对孩子的心理健康不利。在有效疫苗被开发出来之前，人类是需要学会和病毒共存的。生活要继续，上学，上班，购物等必要的活动都不可少。 在学校给家长的信中，提到了很多新的措施，比如：每个孩子只能带自己的午餐，课间零食，和水瓶。其余的文具，书包等都不能带到学校；只是班级之内的同学可以一起玩，和其他班级的同学没有接触；家长只能把孩子送到学校门口，不能进入；每天中老师会监督所有小朋友多次洗手并消毒；使用公共设施后需要对其消毒；取消所有校内集会；所有午餐地点将由学校餐厅改为教室中。 感觉学校的各项措施已经非常到位了。希望孩子们返校后能在学校度过快乐，健康，安全的新学期！","link":"/back-to-school-sep/"},{"title":"英国小学即将复课","text":"英国政府最近宣布，小学Early Years，Year 1，Year 6将于6月1号复课。但并不是强制性的，家长如果觉得想继续在家Home schooling，可以不去学校，不会计入旷课。 和很多朋友以及家长群中的众多家长沟通过后，家长们明显是两个态度。有些家长认为虽然目前英国疫情有所缓解，但还不放心把孩子送回学校。毕竟让孩子们一整天在学校这么小的空间中严格遵循社交隔离，似乎不太可能。而且，如果孩子们被限制到一个特别小的空间中，完全不能和别的小朋友们互动，那在学校该有多么难受？？？况且，如果老师们的精力都用在监督和提醒小朋友们之间的社交隔离，哪里还有精力进行教学？ 另一种意见则认为，孩子们在过去两个月中在家，由家长负责教育，而家长们同时还要工作。很多家长们的心理几乎快要崩溃。听到这个消息后，感觉终于有盼头了。盼着到了6月1号把孩子们送回学校，自己可以专心工作。 其实，我个人倾向于第一种观点。虽然现在疫情有所好转，但并没有完全消除。现在直接把孩子们送回学校，增加互相接触的机会。万一再引发第二波疫情，后果将不堪设想。况且，经过最近一段时间的在家工作/辅导功课。似乎也没有最初想象中的那么糟糕。尽管工作效率比不上在办公室的时候，但和媳妇分好工，分别在不同时段兼顾孩子。在该工作的时段精力高度集中的工作，感觉也还比较出活。 最近听一位护士朋友说，英国的各大城市疫情数据都非常看好，但在一些旅游景点的确诊病例却在增加。可见形式还没有那么乐观。我决定先不送孩子自己上学，在家给他们辅导一下，顺便检查一些知识点上的欠缺，似乎比在学校时学到的东西还多。 不过无论如何，该放松的时候也要放松一下。趁着这两天有风（话说英国的天气，经常妖风肆虐），把从国内拿来的风筝装好了，去家附近的草地上去试玩了一下。英国的风还真的给力，不用任何技巧，我站着不动，风筝自己就飞了起来。你能看到下面图片中的风筝吗？ 照片摄于2020.5，在家附近大草坪上放风筝","link":"/back-to-school/"},{"title":"BBC Children in Need day","text":"今天又是儿子学校一年一度的Children in Need慈善活动日。在这一天，小朋友们可以不穿校服，而是穿上各种特殊的衣服，比如有的学校的孩子们穿的都是睡袍，有的学校则是穿上平时的衣服就可以。同时家长们完全自愿的向这个活动募捐。 这个慈善活动的主旨是让每一个孩子都有一个安全而快乐的童年，从而充分激发孩子们的潜力。这个慈善机构每年资助两千多个全英的慈善项目，重点帮助各种需要特殊帮助的儿童，比如：家境贫困，遭受暴力的儿童，还有一些有残疾的儿童。每年英国都会组织明星义演，获得的资金都会用来赞助这个慈善机构。这种募捐完全自愿，在2016年获得总共6000万英镑的收入。","link":"/bbc-children-in-need-day/"},{"title":"英国的烧烤","text":"最近两天英国的天气突然好了起来。大家宅家几个月，早就憋坏了。趁着现在疫情有所好转，以及政府公布的相对宽松的政策，朋友们纷纷约起来了，这个周末连续两天在朋友家烧烤。 英国这边的烧烤一般在下午四点左右开始，大家边聊边吃，通常会吃到傍晚时分。其实对于很多英国人来说，吃还是次要的。只要有酒喝，能和朋友们一起聊聊天，吹吹牛，那就足够了。一个英国朋友前一段举办烧烤聚会，邀请了好几十号人，好不热闹。 这英国这里吃烧烤的话，最为经典的食材当属汉堡和香肠了。一个配有奶酪的汉堡下肚，基本上也就饱了。除此之外，还会有烤五花肉，鸡翅，玉米，肉串，海鲜等。 但中国家庭一般都会使用中餐调料，比如：孜然粉，生抽，料酒等腌制各种食材，然后放在烤炉上烤，其味道远胜于那些购买的半成品。 要想让朋友们吃好，各种冰镇饮料和酒类就必不可少了。和烧烤最为搭配的就是各式冰镇啤酒和果酒了。这几年在英国超市中经常会见到青岛啤酒，哈尔滨啤酒等地道国货。对于有小朋友们参加的聚会，餐后的冰激凌也是非常受欢迎的。 一般要在家举办烧烤聚会，一个给力的烤炉是必备武器。大家一般都喜欢碳烤的，因为这样味道更为地道。为了省事，也有使用煤气炉的。现在的碳烤方式非常简单，只要去买些用油纸包裹的碳包，直接点火就好，非常便捷。 最后晒晒我们最近烧烤的各种美食：","link":"/bbq202008/"},{"title":"第一次在家烧烤","text":"家里的烤炉已经买了好几年了，但一直没有拆开包装。最近几天天气出奇的好，同时因为lockdown已经没有任何social活动了，于是决定趁着现在有时间尝试在家烧烤一次。 整体而言还是很成功的，上面是一张成品图。 首先把烤炉从车库中翻了出来，花了两个多小时进行组装： 终于装好了： 在超市买的易燃炭，非常方便，只需要把外面的油纸点着就好，过一小会火就会烧的很旺。只不过需要注意的是，有浓烟和大火苗的时候是不能食材放上去的，否则食材很容易被烤糊。 主要烤的是五花肉串和羊肉串，这两种串是事先腌制好的。在网上找的食谱。羊肉串只用洋葱和蛋清腌制，五花肉串用食盐，料酒，洋葱，鸡蛋腌制。总共腌制了大约4个小时。 过了一会，炭已经烧好，没有什么烟了，可以开始烤了！ 很快就烤好了，开吃！","link":"/bbq/"},{"title":"在霍华德城堡进入Beatrix Potter的童话世界","text":"以前每次去英国湖区都必定要到Beatrix Potter去看望Peter rabbit和它的小伙伴们。这次正好赶上有一个剧组在霍华德城堡进行三天的演出，当然不能错过。于是带娃去体验了一番。 今天的天气格外热，毒辣辣的太阳也不能阻挡孩子们和Peter rabbit的约会。 整个表演过程中让人如同穿越到了Beatrix Potter所生活的年代，也和童话中的人物，Peter，Tom等等来了个近距离接触。","link":"/beatrix-potter/"},{"title":"Panda fighting video &#x2F; 两只大熊猫在秋千上打闹的精彩表演","text":"Why are pandas so cute? Watch this panda fighting video, you will know why! 这次去成都大熊猫基地，看到了两只大熊猫在秋千上打闹的精彩表演。两只熊猫争抢了近半个小时，最后两只熊猫双双滚下了秋千，萌翻了所有游客。 My video is at DLive","link":"/bef2df30-3f33-11e8-bfed-63766378c43c/"},{"title":"最大的问题就是不知道哪里出了问题","text":"最近这两天被工作中遇到的一个问题搞得非常郁闷。客户反映软件系统中有一项功能有问题：使用这项功能时偶尔会导致数据存储出错。但也就是千分之一的情况下会出现这个问题。而用户并不是在出现问题的时候立刻发现问题的，而是在过了一段时间后，负责审核数据的人发现的问题。因此，不知道什么样的操作会导致这个问题。 图源：pixabay 针对这个问题，我做了很多工作，进行了各种测试。甚至把出问题的数据又重新尝试了一遍，但却没有找到一个可靠的重现问题的方法。说白了，最大的问题就是知道有问题，但不知道哪里出了问题。同时，也没有一个有效的操作来重现这个问题。 其实这种”不知道哪里出了问题“的问题在生活中比比皆是，有时甚至让人抓狂。比如：当客服和客户沟通的时候，会觉得整个沟通过程都非常愉快，但事后却遭到客户投诉。在工作面试的时候，各方面的表现自我感觉非常好，但却拿不到OFFER。 在育儿方面也是如此。让有些家长非常抓狂的问题就是，找不到自己孩子究竟是哪里出了问题，总是不如别人家的孩子。感觉自己孩子也是天天认真上学，写作业，很少打游戏，但成绩总是不如别人家的孩子。为什么上了同样的课外班，别人的孩子级别不断升，而自己的孩子却原地踏步？ 哪怕就是在家做饭，做糕点，明明找的都是同一个菜谱，但做出来的味道和效果却天差地别？问题又是出在哪里呢？ 因此可以说，对于种种的问题来说，最大的问题是发现问题的所在。只有知道了问题所在，那么再有的放矢，距离解决问题也就不远了。 说了这么多，似乎道理很明白。我还是回到现实，去找找我现在遇到的问题究竟出在哪里吧。。。","link":"/biggest-problems/"},{"title":"AWS学习资源总结","text":"下面把AWS的学习资源总结了一下。这个列表会不断更新。 系统架构Architecting Serverless Solutions Dynamodbhttps://www.dynamodbguide.com/what-is-dynamo-dbhttps://www.dynamodbguide.com/https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/workbench.htmlhttps://hub.docker.com/r/amazon/dynamodb-local/https://www.youtube.com/watch?v=HaEPXoXVf2k&amp;ab_channel=AmazonWebServiceshttps://www.youtube.com/watch?v=lh7q5hCrCSU&amp;list=PL6oNLEZTnXshgy4iHFULjYvcwbeMTotJphttps://www.youtube.com/watch?v=BnDKD_Zv0og Layershttps://github.com/mthenw/awesome-layers","link":"/aws-learning-resources/"},{"title":"英国的国民运动 - 自行车","text":"疫情期间，最频繁的运动项目就要属和孩子们一起出去骑自行车了。每次出行必然都会遇到他们的同学。想想我们每次出门的日期，时间都是很随机的，路线也总有变化，但每次都能遇见他们的同学也在骑车，可见自行车运动是多么的普遍。 其实要说起来，欧洲很多国家对自行车都是真爱，英国就是其中之一。我的同事几乎都是骑自行车上班，远的可能需要骑行三四十分钟才能到办公室。甚至有位同事，住在另一座城市，每天都骑自行车到当地的火车站，然后做火车到办公室所在的城市，下火车后再骑行到办公室。可能正是有了这么好的群众基础，英国在奥运会的自行车项目中表现一直非常出色。 每次和同事们聊天，经常聊到的一个话题就是周末骑车去了什么地方。如果出去度假，在度假所在地经常会租自行车，然后把自行车作为当地的交通工具。 在英国这里，很多地方的政府都会对自行车运动大力扶持，给与相应的政策。比如：修建专用的自行车道，提供自行车培训课程，设置自行车防盗设施等等。 为了让更多人选择自行车作为交通工具，英国很多政要都骑自行车上班，比如，英国首相卡梅伦，鲍里斯等。同时，这也成了很多政要为自己拉选票而打的环保牌。在英国各名校中，很多教授都会选择骑行，来减少环境污染。 我也是到了英国之后才开始接触了不同类型的自行车。比如：山地自行车，室内场地自行车等，也慢慢体验到了其中的乐趣。 在这里骑车上路的话是需要整套行头的：头盔，黄色马甲，自行车前后车灯，反光用的绑腿。记得刚来英国的时候由于不了解，有一次在黄昏时分骑车忘记打开车灯，被一位老爷爷善意的教训了一顿。不过客观的讲，这些规矩还是能够在最大限度上保护骑行者安全的。","link":"/bike/"},{"title":"在英国小学生日Party的那些事","text":"近几个月由于疫情的关系，两个孩子班中所有小朋友的生日Party都被取消，或者改为线上，大家一起为小寿星唱首生日歌，然后聊会天就结束了。这让我不禁想起了疫情之前各种各样的生日Party，最忙的时候甚至一天要串几场生日Party才行。 自从孩子开始上学后，就一直被这个问题困扰着：到底该不该给孩子举办生日Party？如果办的话，举办什么样的Party？是邀请所有小朋友还是部分？如果是部分的话，该邀请哪些小朋友？ 关于请谁的问题，似乎有点小复杂。一般在低年级的时候，家长们一般都会邀请全班的小朋友。之后在轮到别的小朋友过生日的时候，如果自家孩子没有被邀请的话，那就没有以后了。当然，对于那些关系特别好的，对方又没有举办生日Party的情况除外。 随着孩子年龄的增大，慢慢他们都会有自己的好朋友，生日Party也就成为了小范围的聚会。到了小学快毕业的年龄，甚至会只邀请2，3个最好的朋友，一起玩一天，晚上还住在自己家中。 在生日礼物的问题上，整体感觉中国家长非常大方，送的礼物都非常像样，但有很多本地家长送的礼物就有点那个了，玩也不好玩，送人又有点拿不出手，最后基本上都捐给了慈善店了。其实，这可能就是文化差异吧，他们觉得生日Party就是家长们轮流做庄，请小朋友们一起嗨。至于礼物，就没有那么重要了。 还有另外一种特殊的生日礼物，那就是直接给现金。当然，一般也就是10英镑，甚至5英镑而已。其实我更喜欢这种方式，送的礼物经常会不合心意，最终的结果就是浪费。 现在不能举办生日Party了，至少还有一个好处，那就是省钱了。随着孩子们年龄越来越大，他们感兴趣的生日Party也越来越贵了。不过还是希望疫情快点过去，该社交的还是要社交，该花的钱要花。","link":"/birthday-party/"},{"title":"使用Bitbucket Pipelines自动部署Serverless项目到AWS Lambda","text":"最近越来越多的在项目中用到AWS Lambda，也就是AWS无服务器架构中的核心编程单元。其最大的优势就是开发人员不用操心底层系统的架构和维护，只需要专注于核心代码。但AWS整个系统的部署要涉及的步骤非常繁琐，因此这里推荐使用serverless框架。就算使用这个框架，似乎还不够自动。因此下面介绍一下如何使用Bitbucket Pipelines将上面的所有环节都连接到一起，开发人员只关注Lambda代码的实现，一旦提交代码到Bitbucket，就会自动构建并部署到AWS。 首先，添加一个AWS用户，具有对Lambda和Cloudformation的访问权限。当然，如果你的Lambda需要访问其他AWS资源，比如S3，DynamoDB等等，需要添加额外的权限。记录下该用户的ACCESS_KEY_ID和SECRET_ACCESS_KEY，后面要用到。 接下来，使用serverless创建一个项目： serverless create --template aws-python3 --name data-api 注意将region添加到serverless.yml中，否则系统默认的region可能不是你想要的。最终的serverless.yml文件内容： service: data-api provider: name: aws region: eu-west-1 runtime: python3.7 functions: hello: handler: handler.hello events: - http: path: hello method: get 处理逻辑集中在handler.py中： import json def hello(event, context): body = { &quot;message&quot;: &quot;Lambda + Bitbucket pipelines test&quot; } response = { &quot;statusCode&quot;: 200, &quot;body&quot;: json.dumps(body) } return response 将整个项目提交并推送到Bitbucket中。 接下来需要在Bitbucket repository中激活Pipelines， 添加Repository级别的环境变量AWS_DEFAULT_REGION, AWS_ACCESS_KEY_ID以及AWS_SECRET_ACCESS_KEY： 最后需要创建一个针对Bitbucket Pipeline的配置文件bitbucket-pipelines.yml。在Bitbucket中有很多现成的模板可以使用，这里输入serverless，就可以看到这个专门针对serverless框架的模板，可以选择这个并在此基础上进行修改： 最终的bitbucket-pipelines.yml文件内容： image: python:3.7.3 pipelines: default: - step: caches: - pip script: - pipe: atlassian/serverless-deploy:0.1.4 variables: AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY 至此，配置完成。 以后一旦代码提交到Bitbucket，Pipeline就会自动构建并部署到AWS，是不是很方便？ 也可以在pipeline配置文件中定义不同的pipeline，比如针对production的pipeline: branches: production: - step: caches: - pip script: - pipe: atlassian/serverless-deploy:0.1.4 variables: AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY EXTRA_ARGS: &apos;--stage prod&apos; 这样就可以人工构建产品环境下的服务了。 关于pipelines的更多配置，请参考：https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html","link":"/bitbucket-pipelines-serverless/"},{"title":"彩虹胡萝卜","text":"第一次在超市中见到了彩色的胡萝卜。味道竟然出奇的好。而且五颜六色的，颇受小朋友们的喜爱。 在网上查了一下，原产地就是英国。这种胡萝卜不仅好看，而且营养价值也高于普通的胡萝卜。","link":"/bldgqv9j/"},{"title":"Get新技能 - 百叶窗的选购","text":"最近进入扩建工程的尾声，开始选择百叶窗了。在仔细比较了一下之后才发现，现在的选择还真不少。有些产品的设计亮点很多，是以前从来没有听说过的。 目前我看过的百叶窗种类有以下几种：Roller blinds, Vertical blinds, Wooden blinds, 还有Day Night blinds。 Roller blinds就是卷轴百叶窗，可以根据需要遮挡光线的程度自上而下调整。这种blinds一半用在卧室和厨房的时候较多。 Vertical blinds顾名思义就是那种垂直的百叶窗，这种百叶窗在办公室中用的较多。但如果颜色选择的合适的话，家用也没有问题。 Wooden blinds就是用一个个木片做的百叶窗。这种百叶窗的优点是非常美观大气。但缺点就是有些重，因此很多人在使用的时候就常年把百叶窗完全放下来，只是通过卷轴调整采光度。 另外还有一种我之前没有听说过的百叶窗，叫做Day Night blinds。这种百叶窗的设计非常巧妙，有点类似于万花筒，通过卷轴来控制，将百叶窗的不同部分卷到窗户对应的位置，来达到调节光线的作用。比如：白天的时候会把透光性较好的一面卷到窗户对应的位置。而到了晚上就会把遮光较好的部分转到窗户的位置。 在选择家中的bifold door（双折门）上的百叶窗的时候，还发现了一种叫做“perfect fit”的百叶窗。这种百叶窗在安装的时候不需要在墙上打眼，只需要在玻璃和门的间隙中插入用于固定的金属片，再通过这些金属片把百叶窗固定就可以。 百叶窗的种类，样式，和颜色的选择简直太多了。有时候真的有点让人无所适从。目前基本选择再bifold door上安装Vertical blinds；在厨房窗户上选择Roller blinds；在客厅的窗户上选择Wooden blinds。不过所有百叶窗的颜色都选择一样的，这样就能在整体风格上保持一致。","link":"/blinds/"},{"title":"英国最美花园之一Bodnant Garden游记 &#x2F; A nice day in Bodnant Garden","text":"这次威尔士之行的第二天主要在号称英格兰最美花园之一的Bodnant Garden参观。 这是花园的入口 我也拿了一个trial，试着找到图中的各种鸟 这是这些鸟的名字： 到了著名的睡莲池，略有遗憾的是错过了5，6月睡莲盛开的季节，只剩几株睡莲在开花 盛开的莲花 一汪碧绿 有点感觉到秋天的味道了 花丛中忙碌的蜜蜂 我看这是一对情侣树 深绿中隐藏着不知名的小果 转眼又转到另一个漂亮的池塘 好漂亮的莲花 超过百岁的人面狮身像，它的旁边专门写着，我已经超过百岁了，请不要骑在我身上 高耸入云的松树，听工作人员将树的种子都是从中国进口的，历经百年经过几代人的培育才长成这片松树林 处处都是色彩斑斓的鲜花： 花园非常大， 里面还有不小的瀑布： 这里著名的绿色走廊 中午就在花园外面的Cafe吃的午饭，我和儿子终于吃到了心心念的威尔士兔子。不过不要以为是兔子肉喔，这就像鱼香肉丝里没有鱼，老婆饼里面没有老婆一样。。。 下午一直阴雨连绵，由于时间不够了，就没有进到康威城堡里面参观，只是在外围照了照像 在海边散步时还看到了号称英国最小的房子(the smallest house in Britain，地址：11 Lower Gate Street, Conwy)。 据工作人员介绍，这栋房子曾经住过好几代人，现在已经不再住人了，只是作为一个景点供游客参观。","link":"/bodnant-garden-a-nice-day-in-bodnant-garden/"},{"title":"英国的Bonfire night","text":"今晚是英国的Bonfire night，也叫Guy Fawkes Night。全英各地举行各种活动，所有活动的主题就是篝火和烟花。据说是为了纪念历史上的一个著名的阴谋被破坏的事件。当年一个名叫Guy Fawkes的人因为不满国王James I，也就是苏格兰历史上的James VI的宗教迫害，带领一群极端的天主教徒准备在国王开会期间将国王炸死，后来事情因为一位猪队友泄密而被国王发现。Guy Fawkes被国王处死，而这一天则被人们庆祝阴谋被粉碎，慢慢的成了英国最热闹的一个夜晚，而这一天慢慢的变成和宗教无关了。 本来打算去York Maze参加一下活动，可没有想到票竟然早早就卖光了，只好自己买了些烟花在家意思一下了。好在今年邻居家好大手笔，燃放各种漂亮烟花近半个小时，我们也算免费欣赏了一下。","link":"/bonfire-night/"},{"title":"英国Boxing Day抢购体验","text":"今天在老婆的要求下起了个大早，体验了一下英国Boxing Day的大抢购。我的主要目标是NEXT家的童装。 我今天起的很早，在6点钟就来到了购物中心门口，门前已经排起了几百米的长队。NEXT是6点钟开门，看这队的长度，估计排在最前面的人应该5点就到了吧。 商店橱窗上几天前就贴满了各种促销宣传，让人们早做准备。其实很多人都是事先看好要买的商品，在Boxing Day这天一冲进商店就直奔目标而去。 媳妇早就给列好了购物单和尺码，我也是很快就结束战斗了，哈哈，这是我今天半个小时内的战利品： 其实他家的东西在这个时候买非常合适，经常打折到半价不到。童装的设计很好看，也基本都是纯棉的，穿着也很舒服。","link":"/boxing-day/"},{"title":"英式下午茶","text":"在英国住久了之后，也慢慢喜欢上了英国文化。而英式下午茶则是英国文化中不可或缺的一部分。我也慢慢的喜欢上了英式下午茶，也喜欢和朋友们约上一起去喝茶。 英国下午茶源于17世纪。当时英国人只吃早饭两顿饭（现在明白了为什么有的同事中午不吃饭，只吃一个香蕉或酸奶了，原来是一个古老的习惯。。。）。当时一位公爵夫人无法忍受晚饭前的饥肠辘辘，就在晚饭前喝点茶，吃点点心。慢慢的这种习惯就沿袭了下来。 在英国的上流社会只是把下午茶当作正餐前的小零食，时间一般选在下午4-6点。其主要目的是社交。因此也管下午茶叫做”Low tea”。而劳动阶层没有过多时间去悠闲的品味下午茶，因此将下午茶和晚饭合并在一起，通常选在下午5-7点。吃的东西也比较抗饿，包括茶，面包，奶酪，肉类。因此这种下午茶叫做”High tea“。这也是为什么现在很多英国人管晚饭叫做”tea“，而另一些英国人管晚饭叫做”dinner“了。 现在去茶室喝下午茶的时候，喝茶配套的是一个非常精致的托盘，盘中会放置糕点，英国司康饼，和三明治。一般是从下至上，从咸到甜一层一层的吃。在喝茶的时候是先放牛奶还是先放茶的问题英国人现在仍分为鲜明的两个阵营。那些比较传统的英国人似乎更倾向于先放奶再放茶，然后用开水冲茶。而另外一些同事则先用开水把茶冲好，再放入牛奶。 去办公室工作的时候，每天上午和下午各有一个Tea break，专门就是让大家去员工室，一起喝上一杯茶，聊一聊天。有些时候，还有同事会把自己做的糕点，饼干之类的零食拿来和大家一起分享。 在疫情期间一切都变成了虚拟的，在网上进行。尽管大家仍会在slack上进行tea break，彼此视频聊天。但不得不说，现在还真有些怀念当初那种彼此之间面对面，一起聊天，一起喝茶的日子。","link":"/british-afternoon-tea/"},{"title":"直播带货，自带流量成了CEO的必备技能？","text":"这两年似乎又兴起了一种新的销售模式：直播带货。从而也催生了很多新生代网红：号称“淘宝第一主播”的薇娅，“口红一哥”李佳琦等在去年双十一的销售额竟然能过亿。 图源：Pixabay 由于女儿喜欢一个叫做LOL的玩具而看了Youtube上的一些小网红直播各种玩具的拆箱过程。出于好奇心，Google了一下他们的收入，真的很吓人，最火的小网红能拿到近千万美元的年收入。 今天读了一篇罗永浩的访谈，感觉讲的很好。最早老罗开始直播的时候，周边人似乎都不能理解，似乎觉得不上档次。但现在这种方式被普遍接受，似乎成为了众多CEO的必备技能之一。 通过超强的表达能力，自带流量，似乎成为众多CEO的核心竞争力。众多CEO纷纷上场，除了老罗之外，格力的董明珠，小米的雷军等纷纷都成了流量王，在直播间玩的不亦乐乎，同时也在享受着直播带来的巨大利润。 不可否认，现在无论做什么事，都需要人气和流量。而最迎合现代人的快生活节奏的就是短视频。这么说直播带货成为一种标准营销方式就不足为奇了。 做直播带货的目的其实主要就是卖货，或者做品牌。前面提到的薇娅，李佳琦就是通过自己的超人气流量卖货。对于众多的CEO来说，似乎主要是在做品牌。其实在币圈中，孙老板可以说是营销高手，通过一次次炒作，吸引流量，只不过他带的货，是币罢了。 其实，对于众多草根创业者，一边干事，一边做UP主，走的也是同一套逻辑。无论做什么事情，都需要营销，让众人知道。 但不得不说，这种直播真的不是一般人能扛得住的，一般口才好的人，搞个几次也许还行，但要源源不断的找到好的素材，并通过吸引人的方式表述出来，不是一件简单的事，需要背后团队的共同努力才能做到。 话说回来，在隔壁的S链，有孙老板站台，个人估计在合适的时机肯定会炒一把。那么Hive这里谁来做这件事呢？也许我并不是很了解，感觉排名最靠前的见证人似乎都是技术大牛。似乎缺少一个能讲故事的人。","link":"/broadcast-sale/"},{"title":"泡泡小组 - 孩子们重返校园","text":"经过反复考虑，决定从这周开始，送孩子回学校上学。尽管目前疫情仍不容乐观。但我们所住的小城还是相对安全的。同时考虑到孩子的社交需求，心理健康等因素后，还是把他们送回了学校。 图源：Pixabay 学校采用了一种叫做泡泡小组(Bubble Group)的方式。我觉得这个比喻非常形象，就像孩子们吹的泡泡一样，不同泡泡的内部之间是完全隔离，彼此不接触的。在学校的每个小组中有15个学生，同处于一个教室，但需要保持社交距离。不同的小组之间没有任何接触。同时学校在每周三关闭，进行深度清洁。一旦有一个小组中的任何人感染病毒，整个小组成员都需要隔离。 其实算起来已经宅家三个月了。距离学校放暑假也就还有四周多的时间，如果选择不送学校完全能坚持到正式放暑假。但我们考虑到孩子们的社交需求和心理健康因素，毕竟他们需要和别的小朋友们互动。最近英国逐步解封的过程中，发生了很多暴力事件。据说很多起是由于个别人隔离时间过长，引发了很多心理疾病，甚至暴力倾向所致的。 说的现实一点，可能很多人宅在家中三个月已经到了强弩之末，心理上已经不能再承受更长时间的隔离了。孩子们也是一样的，也许隔离三个月没有问题，甚至再过一个月，以及暑假都没有问题。但是如果等到九月份开学的时候仍旧需要隔离怎么办？甚至是第二波疫情爆发怎么办？我感觉在现在疫情稍微缓和的时候，送孩子回学校四周，孩子和家长从心理上能稍作调整，以应对接下来可能的进一步隔离。 还有另外一个原因。就像两个月前就有科学家预测，人类将会与新冠病毒长期共存。无论疫情如何，生活仍将继续。和别人的接触似乎无法避免。只能说在各个方面尽最大程度的保护自己吧。 图源：Pixabay 在今天把孩子从学校接回来的时候，感觉他们明显的比前一段时间更加活跃，话也明显的多。希望这份简单的快乐能够持续下去吧。","link":"/bubble-group/"},{"title":"Build a bear, 只属于你的小熊","text":"家中小公主的生日马上就要到了。今天终于有机会带她去领会了一只只属于她自己的小熊。 这家店的最大特点就是，你选择的小熊从样式，填充，配套的衣服，各种配饰，都是由小朋友自己选择，甚至，每只小熊都有自己的出生证！这样，每只小熊都是独一无二的。 首先，小熊的选择就很多： 选择好小熊后，交给工作人员，他们会给小熊填充： 填充完毕后，则要给小熊选择衣服和各种配饰： 然后可以给小熊打印出生证明 终于可以抱上自己的小熊回家了：","link":"/build-a-bear/"},{"title":"孩子受欺负了怎么办？","text":"自从孩子上学后，就一直被这个问题所困扰。毕竟作为家长，没法时时刻刻守在孩子身边，自己的孩子也需要学会如何和别的孩子相处。在遇到自己的权利受到侵犯的时候，应该知道如何应对。 图源：Pixabay 先来说说我听到的两种教育方式： 第一种就是以牙还牙式。教育孩子不能欺负别的小朋友。但如果别的小朋友欺负上门了，那么也不用客气，打回去就可以了。但这种教育方式可能会误导孩子，导致暴力倾向，影响他们的情商发展。在最初可能是一种自我保护，但久而久之孩子可能会想，看来拳头还真好使，由自我保护慢慢变成了主动去欺负别的孩子。 说说我家儿子吧。其实我们并没有教育他要打回去。但在学校他有个老铁，拳头比较硬，总是罩着他，只要有小朋友来欺负他，朋友就会替他出头。久而久之，受朋友影响，儿子偶尔也跟着他的朋友去欺负别的小朋友了。在我们的严厉恐吓教育下，总算是刹住了他的这个势头，想想真是头疼。 第二种方式则是另一个极端。遇到别的孩子欺负上门，躲开就是了。殊不知这种方式更是会影响孩子的性格发展，会让他们变得胆小懦弱。更容易受到别的孩子的欺负。 我感觉首先是要让孩子明白，暴力不是解决问题的办法。更有效的办法是沟通。首先要大声喊出来，你不能抢我的玩具！你打人是不对的！你不能这样对我说话！让欺负人的孩子知道他们的行为是错误的，也觉得这个人不好惹。如果这样还不能解决问题，可以和老师沟通，让老师来协调解决问题。当然，在最极端的情况下，比如当自己的人身安全受到威胁的时候，可以自卫。 其实我们一直也是在摸索，哪种方式最好，大家有什么好的建议？","link":"/bullied/"},{"title":"在Burnby Hall渡过的愉快周末","text":"难得孩子们的Half term，周末没有任何课外班，于是带着孩子们到Burnby Hall去玩。其实这个地方已经来过很多次了，每次的活动也都相对固定。但是感觉只要带着他们出来，孩子们就很高兴。我非常认可这句话：陪伴是给孩子最好的礼物。 首先拿着专门的鱼食到湖边喂鱼。 湖边的一家三口的长颈鹿造型 鸟舍旁的花圃中依然盛开的鲜花 非常精致的鸟舍中，鸟儿们在欢快的玩耍 转眼就到了午饭时间，到Cafe中点了一些Panini和toast Cafe里面还有一个小博物馆 这只狮子在被击毙前杀了好几个人 午饭后虽然还下着小雨，孩子们依然兴高采烈的在花园中奔跑 雨后彩虹 花园中有艺术家用铁丝网编制的各种动物造型： 公园中的无敌湖景 专门给鸽子搭建的小房子","link":"/burnby-hall/"},{"title":"龙井茶文化","text":"今天去体验了这里的茶文化，先去了当地人推荐的九溪烟树，然后徒步九溪十八涧至龙井村，品尝了清明节前的龙井，造物真的很神奇，清明前后差一天茶的味道就会有明显差别。","link":"/c839e61cfb1a4/"},{"title":"益智游戏推荐 - Calculator The Game","text":"最近偶然发现了这个益智游戏：Calculator: The Game，非常适合小朋友们练习算术。当然，由于这个游戏分为很多级别，也适合成人。对于成人来说，特别适合利用碎片时间锻炼自己的大脑。游戏的界面非常简单，规则也很容易理解。在苹果和安卓系统下都能安装。 游戏中有两个主要的信息：GOALS代表最终要通过运算得到的结果。MOVES则代表要求的步骤。比如：如下图所示的第一个级别的游戏中，如果GOALS是2，MOVES也是2的话，则代表通过运算两次要得到数字2。而系统只提供了一个”+1”的按钮，因此连按两次就可以。 完成这个级别后，会有相应的提示： 在第二个级别中，题目相对复杂一点，例如：通过+2或+3的操作运算三次得到数字8： 随着级别的增长，题目的难度越来越大，涉及到的知识面也越来越广，后面会有负数，多位数加减法，数字的替换等等。 我家儿子正上三年级，非常喜欢这个游戏。我自己也装了一个，时不时也玩一玩。不知道到最后级别会难到什么地步？","link":"/calculator-the-game/"},{"title":"国外经典儿童图书推荐之 - Can&#39;t You Sleep, Little Bear?","text":"今天给大家推荐一本非常温情的睡前读物：Can’t You Sleep, Little Bear? 在故事中一只小熊和一只大熊生活在一起。白天它们一起玩耍，晚上小熊上床后大熊坐在旁边读书。可是小熊总是说害怕黑，于是大熊先后给小熊拿来了一盏小灯，稍大的灯，和最大的灯，希望小熊能够入睡，可是小熊总是能够找到各种理由说房间里仍然黑，它害怕。最后在月光的沐浴下，小熊终于达到了自己的目的：在大熊的怀抱中睡着了。 图源：Amazon 这个故事告诉了我们孩子们对于陪伴的需要。在孩子们提出种种要求的时候，要透过现象看本质，看看孩子们究竟需要的是什么，而不能一概而论的打断和拒绝。同时书中的对话也堪称经典。比如：“I’m scared,” said Little Bear. “Why are you scared, Little Bear?” asked Big Bear.“I don’t like the dark,” said Little Bear. “What dark?” said Big Bear. “The dark all around us,”语言非常简单，但是充分表达出了小熊的心里活动。因此不仅故事本身，故事中的语言也非常适合孩子们学习。","link":"/can-t-you-sleep-little-bear/"},{"title":"比特币减半了，可你的信仰还在吗？","text":"比特币已经如期在区块高度630000处完成了第三次减半，随之而来的是挖矿难度增大，加上各种丢失密钥的情况时有发生，比特币应该是越来越稀缺，越来越值钱才对。但让众多持币者失望的是，比特币并没有迎来大家期待的暴涨。 记不清在哪里看到有人做过统计，比特币的最大持有者已经由早期的矿工慢慢变成了大的虚拟货币交易所。交易所在每一笔交易中收取交易费。伴随着比特币的减半，更加加剧了这种趋势，让最大的几家交易所越做越大。那么交易所有动力让币价一直暴涨吗？似乎有，但动力不足。因为交易所有着更为赚钱的手段：合约。 其实看看周围的朋友熟人，无论是新老韭菜，还是一些大佬，似乎没在合约市场爆过仓都不好意思说自己是玩币一族。但看看那些惊心触目的数据就可以知道，在合约市场上，用暴利来形容庄家的赚钱速度似乎都嫌不够。交易所则更像是一个大赌场，它自己不仅是玩家，更是庄家，同时每一笔交易还收取手续费。有这么赚钱的方式，干嘛着急把比特币的价格拉高，让比特币的价格不断震荡，多空双爆，多香！只要不把比特币玩死，就足够了。 其实在2013年的时候，就有朋友向我推销比特币，但很遗憾的是，我没有被朋友洗脑，和比特币就那么华丽丽的错过了。现在不能想，不然错过了着几个亿，大腿都要拍断了。。。 后来到了2017年的时候再次接触比特币，可能也有些FOMO的心理吧，成了坚定的持币一族。近两万美元的比特币见过，3000多美元的比特币也见过。但自从买了硬件钱包后，因为嫌麻烦，只往钱包里存过两次，再也没有碰过钱包。现在想想，反正投入的也不多，就接着放着吧。 你的信仰还在吗？","link":"/btc-halving/"},{"title":"好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。","text":"这两天朋友圈被这位叫做Captain Tom Moore的英国老爷爷刷屏了。曾经参与二战的英国退伍老兵Tom Moore将于月底迎接他的100岁生日。近几日他在著名的justgiving网站发起了一项为英国NHS(National Health Service，国家医疗系统)的募捐活动 (募捐活动网址：https://www.justgiving.com/fundraising/tomswalkforthenhs)。善款将被捐赠给NHS，以支持那些在NHS工作的众多无名英雄们。 老爷爷设定的目标对于年轻人来说是轻而易举的一件事：绕着自己家花园走100圈 Cpt Tom Moore is walking 100 lengths of his garden for NHS Charities Together because our fantastic NHS workers are national heroes 但作为一位百岁高龄的老人来说，这的确是一项巨大的挑战，老爷爷需要借助于自己的助步器，步履蹒跚的来完成这项挑战。网友们得知后非常感动，纷纷慷慨解囊。起初他设定的目标为50万英镑，但截止到我写这篇文章的时候，已经收到来自世界各地，共近90万人的捐赠，总共募集到1800万英镑，为设定募捐目标的3625%！ 看了一下 justgiving 上对老爷爷的介绍。他曾经被派往印度和日军作战。说起来也是一位抗日英雄！ Tom was born and brought up in Keighley, Yorkshire. He went to Keighley Grammar School and later completed an apprenticeship as a Civil Engineer. Tom went onto being enlisted in 8 DWR (145 RAC) at the beginning of the war, and in 1940 was selected for Officer training. He was later posted to 9DWR in India, and served and fought on the Arakan, went to Regiment to Sumatra after the Japanese surrender and returned to be Instructor at Armoured Fighting Vehicle School in Bovington. 老爷爷说的一句话让我非常感动：“当你看到我胸前这些勋章时，就能明白好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。”。的确，在面对敌人，面对可怕的病毒时，可能每个人都曾经害怕，但我们必须勇敢。如果每个人都畏惧不前，只能让病毒更加肆虐，让更多的人遭受不幸。正是奋斗在抗疫最前线的众多无名英雄，给了众人希望，让我们有了前行的动力。","link":"/captain-tom-moore/"},{"title":"公路惊魂","text":"前两天英国刚刚放宽了疫情封锁政策，很多商家从12月2号重新开张营业，于是决定去宜家一趟，把前一段没有处理完的事情办完。但没有想到的是，今天遭遇了在英国开车十几年来最为惊险的一幕。 Source: Pixabay 昨天在出发前发现车胎有些瘪了，于是约好今天一大早去车厂检查。发现有一个后轮扎了螺丝钉，漏气了。车厂建议可以补胎，也可以换新轮胎。由于考虑到最近用车比较频繁，同时今天要去宜家，怕刚补好的胎不靠谱，于是就换了一款质量很好的车胎，心想这下应该没问题了吧。 在宜家紧紧张张的把所有事情都办完后，看了看时间，还不是很晚，于是很放松的开上车往回返。从宜家上高速只有一小段距离，车行进途中并没有发现任何问题。但在上高速前的最后一个红绿灯那里正好被红灯拦住了。 这时候，从我们后面的车中下来一位男士，跑到我们车窗前告诉我们车胎没气了。我下车一看，果然如此，车胎彻底瘪了，甚至还不如换之前被扎了的车胎。现在想想还有些后怕，如果后面的人没有告诉我们，再过一分钟我们就要开到高速上了，其后果真的不堪设想。。。 于是立刻把车的双闪打开，打电话通知了AA，被告知大约半小时左右能到。也曾经尝试这把车换道停在路边，但由于正处在最为繁忙的高速路入口，根本就没有可能并过去。于是没招了，只能在车里干等。在等待的过程中有好几辆车专门停下来问我们是否需要帮忙。想想大家都有自己的事要忙，我们还是等AA来吧。真的很感谢这些热心人。 好不容易预约的时间快到了。果然看到两辆车打着警示灯停了下来，但他们却不是AA公司的。看了下他们的制服，原来他们是Traffic Officer，应该是有热心人报告了，于是他们过来协助。他们中的一位将后面的车都拦住了，而另一辆车打着警示灯给我们开路，我们的车跟着它，这样一直把我们带到了一个安全的停车带。 再等了一会后，AA的车终于到了，车上的工作人员迅速帮我们把备胎换好，并对车况做了一个快速的检查，确认没事了，我们这才慢慢的把车开回家（备胎最快只能开50英里）。 现在回想一下，真的很感谢车后的热心人，否则等我察觉到车的异常后可能就很危险了。另外，对于AA的服务质量和服务态度真的100%满意。想想已经给AA交了10多年的年费了，这还是第一次使用他家的服务。","link":"/car-tyre-problem/"},{"title":"因果关系","text":"前两天在写自己DIY那篇文章的时候，对于事情的因果关系，感觉有些困惑。我是因为不擅长DIY而对它没有太大兴趣呢，还是因为对它没有兴趣而变得不是很擅长呢？ 图源：Pixabay 从小接受的教育就是“种瓜得瓜，种豆得豆”，“一分辛苦，一分收获”。在数学上更是相信充分条件所体现的逻辑，比如：如果条件A满足，必然会有结果B。但最近我的想法在发生变化。很多事情的因果关系并不是绝对的。有时候因果关系是可以互换的。 首先拿我家孩子练琴的事来举例。刚开始的时候，儿子并不喜欢弹琴，但在妈妈的威逼鼓励下，慢慢取得了一些成就，获得很多奖杯/奖牌，同时也得到了老师和同学们的认可。这样他的信心越来越足，也越来越喜欢。在学琴这件事情上，喜欢弹琴和取得成绩之间是什么样的因果关系呢？在我看来，只有喜欢弹琴，才能越弹越好，才能取得好成绩。同样因为取得了好成绩，有了动力，会越来越喜欢弹琴。如果深究下去，终会陷入先有鸡，还是先有蛋的逻辑之中。 在工作问题上，很多人都会说，要选择一份自己喜欢的工作，这样才会把工作做好，就是所谓的“爱一行，干一行”吧。可我在读书期间，导师曾经说过一句话：”Do it, then like it”。如果用中文表述，应该是：“干一行，爱一行”吧。只要认真做一件工作，慢慢的就会培养对工作的自信，同时也会慢慢真正的喜欢上工作本身。 曾经听过一个说法：每天早上亲吻自己伴侣的人，收入会比没有这种亲密表现的人高出20%甚至更多，同时他们的平均寿命也更长。想想似乎有道理，早上一个吻，能够增进夫妻感情，精神状态会比较好。这样在工作的时候能做得更好，从而升职加薪。长期保持好的心理状态，就能增长寿命。但反过来一想，收入更高的人似乎更有时间来维护夫妻之间的感情。那么这里哪个是因，哪个又是果呢？ 不过，无论怎么讲，每天不要忘记给TA一个吻，好处似乎还真不少。。。","link":"/causal/"},{"title":"唯有变化才是永恒的","text":"古希腊哲学家赫拉克利特曾经说过一句名言：“The only constant in life is change” (唯有变化才是永恒的)。这真的可以说是一句至理名言。有些变化可能带来的影响很小。有些变化则会对无数人的人生和命运带来巨变。 就拿新冠病毒来说吧，这场变化可以说对很多人而言都是事先无法预料的。很多行业因为新冠遭受致命性打击，很多公司被迫倒闭。但很多在线教育，在线会议为主的公司反倒是这场变化的受益者，股价暴涨，收益暴增。 再来说说在家工作这件事。我对它的认知也是一直变化的。在新冠爆发之前一直不太喜欢在家工作。我所在单位的相关规定比较灵活，即使在新冠之前，也可以自行选择是否在家工作。但我一直觉得在家工作干扰太多，工作效率低，因此很少要求在家工作。 几个月前新冠在英国爆发后，我被迫开始在家工作。对在家工作的看法也从最初的怀疑，到慢慢接受，到喜欢。以至于前一段时间大家在讨论今后的工作模式时，我实在想不出还有很么理由要回到办公室了。 再后来，单位做了决定，我们部门将会永久性的在家工作。而我的办公室也被转换为了一个公共区域。虽然一直想在家工作，但要永久性的在家工作，需要准备的东西还是非常多的。因此可以说是喜忧参半。 不知道以后还会发生些什么，但只要把心态摆正，无论遇到任何变化就都能泰然处之了。最后以金庸小说中看到的一句话来结尾：“他强由他强,清风拂山岗；他横由他横,明月照大江.他自狠来他自恶,我自一口真气足。”","link":"/changes/"},{"title":"Chester Rows","text":"Half term到了，全家来Chester这里来度个长周末。 这座小城非常漂亮，给我印象最深的是Chester Rows。说起Chester Rows风格的建筑，其实很多人都见过，但却未必知道其源于切斯特。 其实在英国的很多地方，比如伦敦Liberty商场，都能见到由木头搭建，黑色木梁，白色墙壁的建筑。 这种建筑采用的是中世纪都铎风格，看起来黑白格外分明，一般最低两层为商铺。这种建筑风格就叫做Chester Rows，其最大特点就是那两层由成排房子搭建并连接的长走廊。顾名思义，切斯特就是这种建筑风格的发源地。 Posted using Partiko Android","link":"/chester-rows-pxhivo4c/"},{"title":"制作网红巴斯克芝士蛋糕","text":"最近孩子们看上了丑萌的巴斯克芝士蛋糕，于是在妈妈的带领下进行尝试，成功的做出了这款网红蛋糕。而我的角色是摄影师，全程记录了整个制作过程。整体感觉这款蛋糕真的很丑，但做法超级简单，失败率极低，而且真心好吃！ 这款蛋糕的名字巴斯克源于其发源地西班牙巴斯克地区。其实这款蛋糕在几十年前就被发明了出来，但在2019年才成为了网红，据说其最大的卖点就是看起来像是烤糊了。。。 这款蛋糕的主要原料就是软芝士，我们用的是两盒180克的Philadelphia奶酪。再配以糖，鸡蛋，面粉，奶油和黄油。注意这个奶酪千万不要买错了喔，曾经听过一个悲催的故事，有人用Cheddar Cheese试图做芝士蛋糕，其结果就可想而知了。。。 Philadelphia奶酪需要在室温下放置一段时间以便于搅拌。随后和其他原料一起搅拌，需要注意搅拌器的速度应调至最低，待拌匀无颗粒后倒入蛋糕模具中。 可以在模具四壁涂上些黄油，这样就比较容易把烘培纸放好，也便于在制作完毕后脱模。 所有准备工作都做好后，把模具放入预热到200度的模具中烤30分钟就可以了。乍一看，似乎真的是烤过了。。。 在蛋糕冷却后最好放入冰箱冷藏几个小时后再食用，效果更好！看看最后装盘的效果，Yummy！","link":"/cheese-cake/"},{"title":"Chester动物园游记","text":"前一段时间全家去Chester动物园去玩，今天简单整理一下。Chester动物园据说非常有名，在欧洲能排在前几名。我们共两家人在动物园中暴走了一整天，直到闭园还没有看完。而且在这里看到的一些动物是我在其他动物园中从未看见过的。 Chester动物园入口 动物园中的犀牛，真心替它们觉得冷。也许这些犀牛都已经是第N代移民，已经适应英国这里的气候了。 Chester动物园中的大象 原来一直知道Hyrax这种动物，但没有见过，今天终于对上号了： 在别的动物园从没见过这货，感觉又像斑马，又像野驴，其实它的名字叫做Okapi 动物园中也有一个小型的水族馆，里面的热带生物也不少。","link":"/chester/"},{"title":"大自然的馈赠","text":"秋天到了，收获的季节到了。这个周末的天气不错，于是带上孩子骑车，顺便去看看周边的栗子是否已经可以收获了。 其实，在英国这里，有很多野生的蔬菜和水果，只要稍微留意一下，就会有不少惊喜。 最为常见的就是黑莓Blackberry和覆盆子Raspberry。这两种灌木的生命力极强，在很多地方都能看到。而且它们的繁殖力也很强。只要有一株成活，很快就会长成一片。在我家的花园中有一块菜地，两年前我种下了一株Raspberry，现在整片菜地都成了Raspberry的天下了。 再有的就是野生的李子树，樱桃树，核桃树，和栗子树了。尤其是栗子树非常常见。当栗子树树干长到一人无法抱住的时候，其结下的栗子就非常多了，通常会又大又甜。 几年前我就开始带着孩子们在周边寻找大的栗子树，但苦于一直没有找到足够大的。因此每年只能收获一下非常小的栗子。同时也只能把这作为一项户外活动，而没法享用到美味的栗子。 摄于2020.10.11 这次本来是带着孩子们去往年去过的栗子树捡那些小栗子的。尽管捡到的栗子很小，但女儿已经开始在计划到家后如何烹制这些栗子了。。。忽然想到，记得原来曾经有朋友和我提过，在某片我们不曾去过的地方有一棵大栗子树。那今天就去碰碰运气吧。 不得不说，这个周末的运气出奇的好。竟然真的找到了这颗传说中的栗子树。可能是因为还没有到栗子彻底成熟的时候，树下只掉下了零星的一点点的栗子。但已经能够看出，这些栗子非常饱满。 ![Chestnut](/images/life/chestnut-2.jpg 这些栗子还介于半生半熟的状态，但既然是它们自然掉落在地上的，应该是可以吃的了。(果然，在家放置一天后彻底变色了。。。) 期待着再过两个星期，应该可以大批收获栗子了。哈哈哈，到时候可以糖炒栗子，板栗烧鸡。。。","link":"/chestnuts/"},{"title":"中国文化","text":"今年的中秋节正好是周四，孩子去学校上学。学校老师在给所有小朋友们讲中秋节的时候，问了女儿一个问题，为什么月亮上会有一个小兔子呢？女儿没能回答这个问题，但自告奋勇的和老师说，家中有本讲中秋节的书，可以在书中寻找答案，之后讲给全班小朋友听。 于是在放学后，女儿就找到了家中专门讲各种中国节日的书，认真的开始“备课”。估计是因为在学校给大家都讲明白了，在放学后收到了老师的一个奖状，“文化传播奖”。 这些年由于祖国的不断强大，中国文化在世界范围的影响力越来越大。在英国这里，越来越多的本地人对中国文化，中国美食等都产生了浓厚的兴趣。我和我很多华人朋友都被当地的学校/机构邀请，做了不少传播中国文化的活动。 比如，每逢中国春节的时候，英国这边的很多学校中都会组织和中国春节有关的庆祝活动。我曾经为儿子参加的童子军组织过一次中国饺子的体验课。在课上带领着很多当地小朋友包饺子，煮饺子，吃饺子。当然，还回答各种相关的问题。通过这种方式，很多英国小朋友从小就对中国春节，中国饺子有了深刻印象。 在中国春节的时候，很多中餐馆中还会举行舞龙，舞狮表演。一些城市也会在市政厅中举办新春庆典活动。大家在分享美食，欣赏节目的同时，感受到了中国的传统文化。 另外一个比较知名的节日就是中国的端午节。在英国这里的很多城市都会在端午节的时候举行龙舟赛。国内也曾经有代表队受邀参加过英国这里的龙舟赛。 很多当地人对中国文化传统有了较深入的了解，尤其是中国美食，更是受到很多当地人的喜爱。而在中餐馆中，很多本地人已经不仅仅只会点宫保鸡丁，古老肉了。很多人早就抛弃了那种符合当地人口味的“改良版”中餐，而是更加喜欢地道的中餐了。","link":"/chinese-culture/"},{"title":"童年的乐趣","text":"前两天由于买到了脆枣，让我想起了家乡的味道，也想起了童年时的那棵枣树。从而打开了对很多童年趣事的回忆。 我自从上小学的时候就来到了父亲工作的地方。这是一座中国北方的小城。当时住在父亲单位分的房子中。因此邻居住的都是父亲单位的同事。而那些邻居家的孩子们自然就成了我的发小。 当时孩子们除了电视外，基本上接触不到什么电子设备。因此，小伙伴们每到放学和周末的时候就约在一起，在户外玩着各种游戏。 最常去的地方就是周边的一个小农场。农场主租用的是父亲单位的地方种菜和水果。因此对于我们这些不速之客也就睁只眼闭只眼了。其实我们去农场中主要是捉蚂蚱，挖蝗虫等。有时候玩嗨了难免会踩到农场中种的菜。那时候农场主会象征性的叱喝我们几声，吓得我们四散奔逃。等到过了几天，还会重新造访。用现在的一句话来说，那位农场主的心理阴影面积肯定大的不得了。 还有一个很多男孩子都喜欢的游戏自然就是打仗了。当时大家配备的一般有两种“枪”。一种使用铁丝和皮筋做成的，子弹则是用纸叠成的。被这种枪近距离打一下还是很痛的。另外一种是买的一种塑料枪。子弹则是从家中偷拿的黄豆。这种枪的特点是射程远。当时大家一般是到家长们所在的单位，趁着大人午休或者周末的时候，根据地势分为两拨人马开战。 除了这些之外，还有捉迷藏，跳格子，打水仗等等各种有趣的游戏。 想想自己的童年，和现在自己的孩子们的童年相比，虽然当时物质相对匮乏，但似乎更为快乐。不知道自己的孩子们长大了，还能记起些什么来？","link":"/childhood/"},{"title":"英国的中餐馆","text":"最近因为家中没有厨房，几乎每天都是靠外卖来解决晚饭问题。于是把周边的中餐馆几乎都吃了一个遍。这其中既有符合中国人口味的地道中餐，也有符合当地人口味的“改良版”中餐。下面来聊聊英国这里的中餐馆。 记不清在哪里看到过一个报道，中餐在英国最受欢迎食物上名列第二（第一是印度餐）。可见英国人对中餐的喜爱程度。因此，在英国这里不论城市大小，几乎都能找到中餐馆的踪迹。在像伦敦，曼彻斯特这样的大城市，还有中餐馆扎堆的中国城。在一些很偏僻的小镇上，即使找不到中餐馆，也能看到一些中餐外卖。 在英国这里的中餐馆分为几大类。 首先是早期香港移民在这里开设的众多粤菜餐厅。我还是很喜欢这些餐厅的广式点心的，味道非常正宗。通常在每年春节期间还会有舞龙舞狮表演。随着大陆来英国定居的人越来越多，同时由于川菜的流行，在很多粤菜餐厅中也能吃到一些川菜了。 再有的就是后来陆续来英国定居的大陆人开设的众多口味的中餐馆，包括川菜，湘菜，东北菜等等。由于这些餐厅的老板是大陆来的，因此菜的味道非常符合国人口味。 随着中餐市场的不断繁荣，众多国内餐饮巨头纷纷看上了英国的中餐市场。像全聚德，海底捞，小肥羊等等纷纷在英国开设分店。 还有一种就是在英国各个大中小城市中星罗棋布的中餐外卖店。这些外卖店主要顾客是本地人。因此他们做的中餐都是经过“改良”的，整体口味偏甜。不过我个人并不是很喜欢这种“改良”版中餐的。 其实很多人有个误解，英国人都好酸甜口，喜欢吃那种改良过的中餐。其实这绝对是一个误解。我接触过本地人，超级喜欢地道川菜，无辣不欢。有时候邀请本地朋友来家中吃火锅，开始时为了照顾他们，专门把鸳鸯锅中不辣的一面给他们吃。但一旦他们开始尝试辣汤后就一发不可收拾，彻底停不下来了。还有一些朋友因为喜欢地道的中餐，要求我把他们喜欢中餐的菜名写在纸上，去餐厅点餐时用。。。 感觉随着祖国的越来越强大，中国文化，中餐在世界上的影响力也越来越大了。我们这些海外华人也越来越有口福了，在英国就可以吃到各种口味的家乡菜了。","link":"/chinese-restaurant/"},{"title":"选择","text":"前几天在看到Susan的一篇文章时，提到了选择这个我们经常会遇到的问题。其实，我们命运的轨迹就是在一次次的选择中被不断确定的。我们无法比较每一次选择的正确与否。如果平行宇宙真的存在的话，也许，另外那些的我也在想着同样的问题？ 莎翁的一句名言：“To be or not to be, that is the question.” 道出了人们在面临选择时候内心的挣扎。其实，在我们的生活中，经常遇到这样或者那样的选择。在面临选择的时候，很多人都是“关心则乱”，不知如何选择才好。 就拿当前英国疫情下是否送孩子上学这件事来说，其实我的内心是十分纠结的。按照孩子学校的官方说法（当然是政府统一规定的），所有孩子都必须正常上学，我们没有权利剥夺孩子们受教育的权力。在前几个月lockdown的时候，很多孩子彻底放羊，把学业都耽搁了。 当然，从校方来说，早就做好了各种预案。比如：一旦在某个班级中发现新冠病例，整个班级将会被迫暂时改为在家学习。同时各个班级之间形成了不同的bubble，彼此之间互不接触。 但从另一个角度来看，英国的疫情整体处于反扑状态。每个孩子的家庭会和不同的人群接触，从概率角度来说，还是有被传染风险的。但如果我坚持不送孩子上学，不仅会面临政府的罚款，同时将会对我和媳妇的工作产生负面影响。 送，还是不送，这真的成为了我所面临的一个问题。尤其是儿子上周因咳嗽几声后被学校送回家并要求做新冠测试后，我更是曾经动过念头，索性不去做监测，在家宅上几周再说。但最终还是选择把孩子们送回了学校。 中国有句古话，“塞翁失马，焉知祸福”。希望，把孩子们送回学校，能够平平安安。至少我们能够看到，每天去上学的他们比在家的时候明显要快乐。","link":"/choice/"},{"title":"威尔士Chirk Castle一日游","text":"和朋友一起去威尔士的Chirk Castle游玩。Chirk Castle于爱德华一世时期, 1310年建成，是英国十大古堡之一。 它坐落于一个美丽的庄园内，周围山峦迭起，郁郁葱葱，景色宜人。下面记录一下： 眺望远处美景 首先到里面的果园逛了逛。 被园丁修过的苹果树 熟透了的Rasberry 无花果 不知名的植物 紫色的萝卜 南瓜 豆角 天气非常好： 从城堡山坡上往下望，视野开阔，景色很美，这里还有英国这里的特色大草垛 城堡内部人很多： 城堡内部有孩子们扔绳子的游戏： 格子游戏： 城堡内部的各种武器： 威尔士的标志： 这些老古董椅子可能都已经不堪重负了，因此上面放了一些带刺的叶子以防游客不小心坐上去, 可是如果真的不小心坐上去了呢？画面太美不敢想。。。 餐厅： 客厅 猜猜这个是干什么用的？ 展示的盔甲 窗外的风景： 孩子们在修建整齐的花园中奔跑： 大树桩做成的椅子：","link":"/chirk-castle/"},{"title":"一个奇葩但**貌似**很实用的Chrome浏览器扩展","text":"今天偶然看到有人推荐这个Chrome浏览器扩展。它的基本用途就是能够在你看Youtube视频的时候能够对你进行人脸识别，一旦你走开，就会自动暂停播放，等你回来了继续。乍一看，这个扩展就是我一直想要的啊！平时看Youtube视频的时候，如果有事走开，回来后可能会错过一些剧情，还要倒回去重新看。但看了看review，打消了我要安装的念头，绝大多数人都喜欢这个idea，但是人脸识别这块似乎不能正常工作。希望开发团队早日解决这个问题。或者，Youtube直接自己搞定。总之，非常期待这样的功能！ 感觉，AI离我们的生活越来越近了，听说美颜相机都发展到AI阶段了，我们的生活越来越多的暴露在各种AI APP的监控下了。。。","link":"/chrome/"},{"title":"使用AWS CloudWatch监测Lambda运行，并通过SNS发送通知","text":"在运行Amazon AWS的众多服务时，一旦某个服务出现了故障，我们肯定想要第一时间得到通知。 或者当某项服务的资源使用超过某个阀值时，我们可能想要赋予其更多资源。 要实现类似的功能，我们可以使用SNS（Simple Notification Servivce)和SQS(Simple Queue Service)。下面通过一个简单的例子来说明如何使用AWS CloudWatch监测Lambda运行，并通过SNS发送通知。 创建SNS Topic及其订阅在任何消息系统中，最常见的方式就是设定一个主题(Topic)，然后添加一些订阅者(Subscription)。这样一旦有任何新的消息发送到Topic，所有的订阅者都会收到消息推送。下面说说如何在SNS中设置Topic和Subscription。 首先再AWS SNS中创建一个Topic 接下来我们分别创建两个订阅：Email和短信。先来看看Email方式的订阅： 创建结束后，需要打开自己的邮箱进行确认。 接下来创建一个通过短信方式的订阅。 我们可以看到，除Email和短信外，订阅消息的方式还有很多种。这样当消息抵达队列中时，可以调用一个HTTP/HTTPS的地址，可以触发一个Lambda，可以转发到Amazon的消息队列中。 创建一个当Lambda发生错误时触发的消息在CloudWatch中创建一个Alarm： 这时候需要选择一个Metric，这里选择“Lamba - errors”这个Metric。 同时还要设定一些触发条件，比如当错误数超过某个阀值时会触发，或者当Lambda被调用的次数超过某个阀值时会触发。 接下里需要配置，当Alarm被触发时需要做的动作： 对于某些资源，还可以触发”Autoscaling“，这样在资源不足的情况下就可以非常快速的升级配置，实现更快的响应率。可以说这里的这些Action非常灵活，可以符合众多应用需求。 由于我设定的是当Lambda被调用次数超过0次时会触发Alaram，因此在调用一次Lambda后很快就收到了消息提示。","link":"/cloudwatch-sns/"},{"title":"CN区，CN区","text":"最近Steem大涨，大家发帖的热情空前高涨，毕竟Steemit的口号还是管用的：”Money talks”，同时CN区也迎来了一大批新人，哈哈，我也才加入了几个月。不过，感觉有些乱，比如：好多和CN区一点关系都没有的，甚至一点中文也没有的都打上cn区的标签。记得几个月前，@dapeng 误用了 (可能都不能算作是误用) 德语区的标志还导致了一场辩论。 我个人的能力有限，这里只能呼吁大家一起行动起来，净化一下CN区，看到那些滥用CN区标签的作者提醒一下。当然，没有人有这个义务，所以大家有时间又愿意的话，可以顺手给那些作者留个言。最后祝大家发帖赚的满满的，乌托邦等大腿抱的紧紧的。。。","link":"/cn-cn/"},{"title":"择校","text":"儿子马上要升中学了，作为家长，马上就要面临择校的问题了。究竟是选择公立学校还是私立学校？选择相对而言学术性较强的学校，还是注重培养孩子综合能力的学校，这真的是一个不太容易决断的问题。 首先需要考虑的是学校是否有位置以及申请难度。英国的一些顶级公学需要提前很长时间进行申请。同时，很多私立学校都会组织自己命题的入学考试，因此更是需要提前很长时间开始准备。 如果是公立学校的话，英国这里基本上是按照住址进行分配。很幸运的是，我们当初选择当前住址的时候就考虑到这个因素，因此选择了一个非常好的学区房。我们按片分的初中就是一个非常好的公立中学，每年都会有一些考上牛津剑桥大学的学生，整体排名在全英国表现都不错。但公立学校的一个问题就是，学生太多了，老师再好，可能也不能照顾的面面俱到。 如果是私立学校的话，其老师和学生的比例相对更好一些。每个学生都能得到充分的照顾，进而挖掘出其潜力来。其组织的各种活动也很丰富。但我们周边的私立学校只能说还可以，并没有特别出色的私校。 在选择学校的时候还需要仔细看看学校的年度报告，看看每年学校的GCSE以及A Level成绩如何。这一点很能说明问题。同时还要看看学校是否每年都能有上顶级大学的学生，这也很能反映学校的教学质量。 当然，学校的师资力量也是要必须考虑的因素之一。而了解学校师资的最好方式就是参加学校的Open Day，和老师面对面的交流，直接问老师一些问题。现在由于疫情，大多数学校都改为虚拟的Open Day了，这就增加了了解老师的难度。 同时，一所学校的校长绝对是学校的灵魂。如果校长有一个非常高的视角，秉承一个好的办学理念，那么，这所学校才有可能办好。关于校长对学校的影响，可以说对于正反两方面的例子，我都曾经见到过。 总而言之，学校的选择，需要考虑的因素太多了。到现在为止我还没有一个明显的倾向。","link":"/choose-school/"},{"title":"在没有大鲸的日子里 - CN区近几日变故有感","text":"深秋中的约克，枯黄的树叶中令人惊奇的绽发了新枝 最近中文区几位临时大鲸被取消代理带来了一系列的反应： 中文区发文数量锐减，收入也是少的可怜。有个别人开始找各种所谓的证据落井下石，无中生有。我们中文区的一些热心的，也是让人敬佩的朋友也是进行了各种反击。我在一方面敬佩他们的侠肝义胆时也是深感有心无力。Money talks，这句让我不是很喜欢的口号道出了一个无奈的事实，没有了强有力的大鲸支持，要想让一个社区茁壮成长，太难了。 最早加入Steemit社区是受朋友的影响，说起来也正好赶上了中文区最为火爆的两个月，慢慢的也就养成了写些文字记录日常点滴的习惯。也有幸受几位大鲸的眷顾，一直在Steemit下坚持了下来。现在整个中文区这个美好的平衡突然被打破，估计很多人都会想到一个问题，就是写还是不写。其实，我觉得完全没有必要勉强自己，如果你心中还在问这个问题，那么说明你可能有其他更重要的事情要做，那么做你心中真正想做的事吧。如果你真心还想在steemit上写，可能也不会问这个问题了。 我感觉自己目前还没有要停下来的打算，即使不在steemit发，这两个月的时间也养成了在自己博客上记录生活中的各种趣事，还有琐事的习惯。反正也要记录，顺便也就发在steemit上了。 只是希望中文区就像我所看到树上的新枝一样，有新的希望在萌芽中，希望不要太久。Steem on，与大家共勉。","link":"/cn/"},{"title":"好用的在线代码编辑工具 - codesandbox","text":"刚发现了一个不错的在线代码编辑工具 codesandbox。支持目前的各种主流JS框架，Angular, React, Vue等： 创建了一个Vue Sandbox，在其中可以编辑调试代码： 可以把这些模板fork到自己的repository，可以和github集成进行commit，PR等，也可以和ZEIT集成进而部署到production server。","link":"/codesandbox/"},{"title":"盖房和编码真的是同一工种啊","text":"最近尽管一直独自在家工作，但丝毫不感觉寂寞。因为家中房屋扩建的原因，室外的建筑工人在一砖一瓦的搭建房屋，室内的我在一行一行的堆代码。这是一种很奇妙的感觉。让我不禁在想，这分明就是同一个工种啊！ 图源：Pixabay 先来说说房屋扩建工程。由于现有房屋不能满足我的需求，因此在现有基础上需要扩建。这不就像极了软件系统中添加的新功能吗？当一个软件系统无法满足用户的某些需求的时候，程序员需要做的就是在现有软件中添加新的功能，再和现有软件有机的结合在一起。两个工种完美匹配！ 在扩建工程初期，需要打下坚实的地基。建筑工人花费了好几天的时间，用挖掘机掘地三尺，然后浇筑了水泥。同时还有防潮层，第二层的混凝土等。这样做的目的就是为后续的房屋搭建一个坚实的基础。在软件开发的工程中，也是如此啊！在真正的写代码之前，对系统架构的设计，底层存储层，数据通讯协议，采用的软件框架等等，都要先于软件的实现。这正是一个软件系统的地基啊。再次匹配！ 在施工的过程中，建筑工人在一砖一瓦的搭建房屋，在搭建的过程中，他们会不断的用水平尺等工具检验自己搭建的一砖一瓦是否正确无误。而在软件开发的过程中，我们不也是这样吗？在写完代码之后，我们需要进行测试以保证代码的正确性。完美匹配！ 在修建房屋的工程中，工头需要不断的和我们沟通，比如：门窗的尺寸和位置如何选择，暖气的位置，选择地板的种类等等。而在软件开发的过程中，我们同样需要和客户不断沟通，以避免误解了用户需求。匹配！ 在房屋最终交付后，如果出现任何的问题，我们都需要和施工方沟通，协商解决。而在软件开发过程中，同样存在维护阶段。在该阶段中，用户如果发现问题，需要和程序员沟通，协商解决。匹配！ 鉴定完毕：程序员真的和建筑工人是一个工种！","link":"/coding-vs-building/"},{"title":"从今天的Coffee Morning想到的，慈善+区块链技术也许是下一个热点？","text":"今天单位发邮件鼓励大家在明天Tea break休息的时候参加The World’s Biggest Coffee Morning。这个活动是由Macmillan发起的一个为癌症患者募捐的活动。在去年的活动中共募得了2950万英镑的。今年希望超过去年的捐款总数。这项活动发起于1990年，最早只是小范围的活动，但从第二年开始在全英国推广并获得越来越多人的支持，迄今为止一共募得一亿六千五百多万的资金。 在英国有很多这样的民间公益组织，它们的目的各不相同，有的是为癌症患者，有为心脏病人的，有的是为有特殊需要的儿童的，有为男性健康的。我查了一下2017年的最新数据，有16万这样的组织。当然这样的组织是需要在英国慈善委员会注册等级并接受监督管理的。我还是很喜欢英国这边的这种募捐方式，完全自愿，自己选择喜欢的慈善组织，捐多少也是随意。 感觉区块链技术似乎特别适合做这种慈善项目，账目完全公开透明，有没有哪位对这方面感兴趣的？可以做个类似Steem/Steemit的平台，哈哈，完全是我自己的YY。。。","link":"/coffee-morning/"},{"title":"沟通","text":"在近期的扩建工程中，对负责的工头满意度为100%，不仅是因为他干活的质量高，同时感觉和他的沟通非常高效，没有任何障碍。 与他截然相反的是负责门窗安装的公司。在这次整个工程中，计划要把户门都换掉。于是找到一家专门做门窗的公司。在经过了初始报价并接受后，这家公司彻底就失联了，手机不接，email不回。如果不是已经付过押金，肯定会把这家公司炒掉。 和工头讨论过这个问题，他也觉得很不理解。这家公司的目的肯定是为了盈利。要想盈利，却连正常的沟通都不能做到，这怎么可能？的确，很多人在工作的时候不想被打扰，但完全可以在有空的时候给客户回个电话啊？？？ 无独有偶，在英国生活了很多年，也接触了不少各种技工，园丁等。但给我的整体感觉就是，大多数人的沟通都有问题。经常电话不接，短信不回。我是怎么也想不明白他们到底为什么会这样。 之所以对现在的工头超级满意，就在于和他的沟通彻底没有障碍。他不能保证每次都能及时接电话，但他会每次都把电话打回来，保证沟通没有任何问题。这样，任何问题就能及早沟通解决。 和工头慢慢的成了朋友，感觉他更像是一个项目经理。不仅自己带人把房子搭建起来，同时还负责和其他工人，比如：电工，水暖工，木工的沟通，同时还负责协调整个项目的进度和人员的调度。 其实关于沟通的这个问题，估计每个人都会遇到这样的时候。有的人看到有未接听电话的时候，一定会打回去。看到有短信/电子邮件的时候，也一定会回复。但另外一些人在看到朋友的未接听电话时则什么都不会做。久而久之，和这样的朋友自然就会越来越疏远了。","link":"/communication/"},{"title":"新冠测试","text":"自从孩子学校开学后就一直提心吊胆，但该发生的还是发生了。今天上午突然接到儿子学校的一个电话，通知我们说儿子有些冠状病毒的症状: 轻微咳嗽和低烧。要求我们立刻把儿子和女儿接回家，并尽快做冠状病毒测试。 当时感觉有些震惊。尽管早就做好了这个心理准备。但一时间还是有些不能接受。很快媳妇就把两个孩子领了回来。给儿子量了下体温，一点都不高。但他确实时不时有轻微的咳嗽。据他说是嗓子有些痒。 但无论如何，按照学校现在的规定，除非做过测试同时结果呈现阴性，否则需要在家隔离两周后才能返校。于是临时决定带儿子去就近的测试中心进行测试。 在NHS官网查看了一下，其实本可以要求NHS寄送测试包过来，但由于现在新冠检测物资短缺，NHS已经没有测试包可以寄了。因此唯一的选项就是去测试中心进行测试。查找了一下，距家最近的测试中心将近40英里的车程。于是迅速预订了一个测试。听朋友说现在连预订都很难，在官网看了一下，确实如此，再往后几天的测试都已经被订光了。 开到测试中心后，看到每过几步路就有工作人员在指挥。基本上就是先注册，然后开车进入测试中心并领取测试包，然后把车停在停车场上进行取样，之后把取样结果交给工作人员后离开。在整个过程中车窗基本上都要求封闭。 测试的过程非常简单，就是把一个棉签放在咽喉处10秒，然后再插入鼻孔中10秒就好。整个过程中儿子非常配合，不像有些朋友家孩子那样拼命挣扎，很难符合要求。 现在又要开始Homeschooling了，希望儿子这次只是普通的感冒才好。","link":"/covid-test/"},{"title":"Conference pear","text":"现在正好到了英国当地蔬果成熟的季节，除了前面提到过的各种苹果外，还有李子，无花果，和一种叫做Conference pear的梨。尤其是最后这种梨，是我全家最爱吃的水果之一。 当年父母来英国小住的时候，本地的食物，像Cheese，各种pie，英国国菜炸鱼薯条等，没有一样能让他们喜欢的。唯有这个Conference pear，过了很多年了仍然让他们念念不忘。 其实在国内的时候也吃过很多品种的梨，比如：(赵县？)雪花梨，新疆库尔勒香梨等。感觉除了雪花梨外，其他的梨都需要软了才好吃。 说到Conference Pear，很多人都会非常奇怪，为什么有这么一个怪异的名字？会议梨？其实这个梨的名字确实和会议有关。它的名字源于在1885年的时候，这种梨在伦敦的British Pear Conference（英国梨会议）中获奖从而获得了”Conference Pear”这个名字。 这种梨的果实是绿色和褐色相间的，彻底成熟后，果皮会泛黄。它在没有彻底成熟的时候就可以吃。那个时候是脆甜的。等到彻底成熟后，果汁绵软，甜蜜多汁，让然欲罢不能。而且，这种梨还有一个特点就是，梨核非常小，有时甚至都看不到种子。因此有些懒人直接把梨洗洗就全部吃下肚了。 由于成熟后的Conference Pear非常甜，因此也非常适合做冰糖梨水。如果偶尔咳嗽嗓子疼，多喝些熬制的冰糖梨水的话效果也是不错的。 俗话说”一方水土养一方人“。在英国生活多年，慢慢也适应了这边的饮食习惯，尤其是这种Conference Pear，偶尔回国住的时间长一些的时候，还会想起它来。","link":"/conference-pear/"},{"title":"英国疫情更新+吐槽","text":"在两周前英国中小学开学后，这两周迎来了英国各所大学的开学。其实在开学之前，很多地方就已经出现了疫情的反弹，疫情曲线呈现了一个让人担忧的“V”字型。现在伴随着大学开学，大学陆续出现新冠确诊病例，很多大学宿舍发生集体传染，被迫隔离。 其实这是完全可以预料的。在英国的大学宿舍，尽管住宿都是单间，但通常大家会共享厨房，卫生间，活动室等公共设施。一旦有人被感染，其他人大概率会被传染的。 最近英国政府调整了相应的策略，整体而言，是更严格了。比如：在公共场所未戴口罩的话，罚款金额上调至200英镑；所有酒吧和餐厅必须在晚上10点前关门；如果有可能的话，尽量在家工作；聚会时人数不得超过6人等。同时，如果民众不遵守这些规定的话，不排除再次全国封锁的可能性。 从我们收到的学校邮件来看，基本上现在的政策就是：学照开，但一旦发现确诊，只有密切接触的才需要隔离。 在媳妇工作的学校中，她教的班级中出现了一例确诊，所有学生需要在家隔离两周，但老师则不需要。原因是老师和学生之间没有“密切接触”。OMG, 老师和学生同在一个教室，有时还需要交谈，老师竟然不需要隔离？？？ 孩子所在的学校中，某位学生的家长新冠确诊。但是，孩子所在的班级照常上课。同时，学校中不同年龄的同学分在不同的Bubble，Bubble之间不能接触。但种种规定就形同虚设。首先是老师之间没有Bubble的概念，彼此还是需要沟通的。同时，兄弟姐妹如果在不同的Bubble，上学前和放学后肯定会接触，也就是说，不同Bubble之间是会接触的。 种种迹象表明，英国政府是大踏步的走向所谓的“群体免疫”了。对现在的防疫政策，我真的是无语了。抗疫是整个国家的行为，如果从政策上没有必要的保障，只靠个人保持清洁卫生的话，可以说是无济于事的。","link":"/covid0923/"},{"title":"病毒距离我们越来越近了","text":"今天收到孩子学校给家长的一封邮件。主要是通告所有家长，有一位小朋友的家长冠状病毒检测呈阳性，因此这位小朋友要在家隔离两周。但由于除了这位家长外，目前他家人没有确诊，因此学校并没有采取任何措施，该上学的照常上学。 这不禁让我有些担心。尽管孩子所在的学校把孩子们按照班级分到了不同的Bubble，但孩子们毕竟在同一所学校，难免会接触到同样的器材和公共设施等，如果真的有孩子不幸感染了病毒，传染到其他孩子的机率还是非常大的。 在家长群中很多家长都表示了对孩子上学安全性的担心。同时也不理解为什么学校不采取积极的措施。比如该学生的整个班级在家隔离两周，孩子在教室中应佩戴口罩（目前不允许）等。 话说英国目前的疫情大有反扑的势头，很多城市都濒临lockdown的临界点。但政府似乎并没有采取积极有效的措施，仅仅是限制了聚会的人数。 个人感觉可能英国政府也在经济损失和控制疫情之间在不断权衡。毕竟前几个月全国lockdown对经济打击非常大，很多企业倒闭。如果再次全国性的lockdown，造成的负面影响也许不比疫情小。因此综合考虑的结果就是，能不lockdown就不lockdown。如果被迫走到这一步，也尽量限制在一个小范围内。 作为一个家长，看着自己的孩子高高兴兴的去上学，却有可能面临着被病毒感染的风险。如果不送到学校去，可能会面临政府的罚款。不过罚款还是小事，毕竟家长们还需要在家工作，孩子在家的话，对工作的负面影响还是很大的。在病毒面前，真的感觉很无力。也许，我们只能选择和病毒并存。希望孩子们都健康快乐。。。","link":"/covid19-0920/"},{"title":"在家办公的进一步体验","text":"跟国内的朋友们聊天得知，很多地方都开始复工了，有些餐厅也陆陆续续开始营业了。可反观英国这边，这周五全英国的大中小学全面听课，孩子们带回了很多作业，课外书，准备开启在家自学的节奏。众多单位也正式要求员工们开始在家办公。这节奏整个比国内滞后了一个多月啊，希望再过几周也能也能同样赶上国内现在的节奏。。。不过目前我接到的信息是要做好在家宅几个月的准备。。。 虽然在家办公能够节省在路上的时间，但在家的干扰可能比较多，因此首先需要选择一种让自己注意力集中的方式，比如：Pomodoro番茄钟。 对于在家办公族来说，大多数人选择的都是使用笔记本电脑，这样身体和电脑的距离，角度都和使用台式机不一样，因此时间长了，特别容易引起腰部，颈部肌肉的疲劳。我目前仅仅在家工作了两天，就已经感觉到肌肉酸痛了，因此一定要注意多舒展筋骨。 还有一个问题就是，在家宅时间长了，都会觉得很难受，这就要注意各种心理疾病，因此单位提议每天两次休息的时候，大家在slack上聊聊天，分享一下好玩的事情等，单位老大首先带头发了自己烘培的蛋糕。。。 不知道下周孩子们都在家了会怎样，现在想想就头大。。。","link":"/293cvd/"},{"title":"疫情对生活习惯的改变","text":"今天收到单位的邮件，通知了一个坏消息：有一位同事不幸感染新冠病毒去世了。在接下来的例会中，大家更多的是彼此间的问候，工作谈的并不是很多。最近很多同事，尤其是家中有孩子的，感觉和之前坐办公室时的效率相比，简直是差了太多了。还好单位HR在开始在家办公不久就发了一封邮件，大意是在当前形势下，充分信任大家，不要感觉需要和原来坐班时一样出活，只要try your best就可以了。更多需要注意自己的心理健康，以及工作/家庭之间的平衡。 我感觉对一般人影响最大的就是购物方式基本上都在网上进行了。现在经常需要在固定的时段刷各个超市的网站，希望能够订到送货时段。和朋友们也经常交流如何能够订到合适的送货时段，在哪家超市可以买到想要的食材等等话题。 由于很多东西网购经常没货，而且网购的slot经常订不上。因此今早又去了一趟超市。不像疫情刚开始大家纷纷囤货时超市的热闹，现在超市门口没有几个人。而且很多超市都有工作人员控制人流，在入口处还帮助顾客对购物车进行消毒。很多超市还要求在购物时只沿着一个方向走。 除此之外，各种在线活动，在线教育网站，Youtube频道等越来越火爆。就连小学的小朋友之间也时不时在网上约着群聊。不知道等到疫情过后，已经习惯在网上进行各种活动的我们是否还能再适应回去？？？","link":"/covid19-20200414/"},{"title":"我的疫情记录 - 2020.04.21","text":"至今已经宅家三周了。这两天英国政府又宣布继续封城三周。三周后再讨论下一步的措施。下面说说我周边一些人的心态和变化。 有一个朋友在市中心开了一家咖啡店。但从开始封城，他们就决定把店关了。因为各种费用的确是一笔不小的负担。尽管政府有一定的补助，但也是杯水车薪，让他们入不敷出，不如早做决断，哪怕等疫情过后东山再起。还有另外一家很有名的中国超市老板说，他们也就能再撑几个月的时间，如果几个月后还不能恢复正常的话，他们也只能关门了。由此可见，这次的疫情对这些小公司，自雇者的冲击太大了。与之相反的是各大超市越做越大，销售额暴增，甚至想订一个送货时段都要靠拼人品。和同事的聊天中同事提到了一点就是：尽量去照顾那些比较小的店铺，便利店等，尽量不要让他们倒闭，否则等疫情过后，作为消费者也会感受到不便和损失的。 第二是人们心理的变化。以封城为例，众多民众从最初的抵触，到现在的接受，甚至是过度的担心。甚至有的家长说即使是复课了，短期内也不会让孩子回到学校上学。可以说，除非有效的疫苗能够很快的被研发出来并量产，否则人们的生活很难恢复正常。 第三是各种在线服务的火爆。举一个简单的例子，最近专门支持在线会议的软件Zoom股价暴涨。可见众多企业和机构的需求量有多大。可以预见，众多提供在线服务的平台一定会得到一个高速发展。 等到有一天疫情彻底过去，它对人们的影响也不会消失。忘记在哪里看到了一个可悲的事实，在疫情期间家暴明显增加，有心理问题的人数明显增加。在疫情过后，人类社会将会面临一个长期而缓慢的恢复过程。","link":"/covid19-20200421/"},{"title":"幸运的新冠病毒患者?","text":"最近各个国家纷纷宣告自己的疫苗研发进度。英国牛津大学的疫苗也要开始进行人体实验了。最近在一个微信群里看到有人分享了自己感染/治愈新冠状病毒的经历。 有小两口说最近使用冠状病毒的试剂进行了测试，其结果有三个指标：C线表明测试有效，G线为红色表明体内存在长期抗体，M线表明是最近感染了冠状病毒。但他们检测的结果是只有C/G线，但没有M线。说明他们早感染过了，并且体内有了抗体。 他们回想了一下，小两口在二月份的时候曾经有过感冒症状，嗓子疼了好几天，有一点咳嗽，感觉非常疲惫，总想睡觉。曾经有一天发烧38度，但第二天就好了。嗅觉和味觉都变得不是很敏感。 现在回想起来，在今年一月份的时候，我曾经非常诡异的连续感冒了近一个月，嗓子疼的要冒烟一样。其实最近几年来，我时不时的会得个感冒，一般也就是3，4天左右就好了。而且我已经养成了习惯，感冒了从来都不吃任何药，只是多喝水，靠自身的免疫系统慢慢恢复。但一月份的感冒和以往相比非常异常。而且在同一时间，我有个同事身体超级棒，这辈子从未生过病，但他也得了类似的症状，修了有生以来的第一次病假。 微信群里顿时有人开玩笑说，好希望早点感染那种轻症的病毒，早点产生抗体，这样就不用太过担心了。哈哈，希望我也有抗体了吧。。。","link":"/covid19-20200423/"},{"title":"英国疫情日记2020-04-28 - 没有他们的负重前行，又哪来的岁月静好？","text":"英国疫情这两天似乎有所缓解，近几天新冠病毒死亡人数有所下降，曾经进入重症监护室的首相Johnson重新回到唐宁街10号主持工作。尽管大多数议员还是通过网络方式参与，但英国议会已经重新开始工作。似乎一切都在往好的方向转变。 大家似乎在家中已经宅够了，都期待早日走出家门。甚至在一些公共场合已经有了拥挤的人群。路上的车辆也明确多了起来，在伦敦的部分区域竟然又开始堵车。很多人开始讨论何时复工和复学。但大病后复出的Johnson对复工/复学还是非常谨慎的。在经济损失和人身安全之间选择了后者。其实，不难想象，近几天的疫情有所缓解不正是两周前大家宅在家中的结果吗？如果现在放飞自我，疫情只会再次加重。 但无论如何，自己还是做好充足准备吧。除了早期高价购买的一些口罩，最近通过不同渠道又准备了一些口罩。最给力的是京东前一段免费为海外华人赠送的口罩。本来以为是按照报名人数随机抽取的，没有想到一下收到了120个口罩，感觉一下变身土豪了： 今天上午11点，全英国集体默哀一分钟，向在抗疫最前线牺牲的英雄们致敬。就连天公似乎也感受到这这种气氛，一改前两周的风和日丽，转为更为“英国”的阴雨天。向这些英雄们致敬，没有他们的负重前行，又怎么可能迎来岁月静好？","link":"/covid19-20200428/"},{"title":"英国疫情现状，我感受到的变化","text":"伴随着疫情的逐步缓解，英国政府颁布了下一步解封计划，包括对社交规则的改变，即将逐步开业的店铺，即将开放的户外场所和活动等。比如：独居的人或者单亲父母可以按照“Support Bubble”政策，和另外一个家庭互相支持，无需保持社交距离，可以进行正常接触。同时允许一些户外场所开放，比如野生动物园和户外影院，可以让人们坐在车中去这些场所。各个商家在保证安全的前提下可以开门营业。 昨天带孩子们出门骑自行车放风。沿途看到了很多人似乎是不想辜负这大好阳光，已经开始在公共场合聚会和野餐。也见到了很多熟人，似乎大家对当前的疫情都是比较乐观的态度。沿途经过的湖边，习惯于游客喂食的各种大雁，野鸭等似乎也感觉到了这个世界的变化，为什么没有人喂我们吃的了？看到有人走过来就围上前来，期待着有所收获。 摄于2020.06.14 家中的扩建工程已经开始一周了。和建筑工人的接触可以说是不可避免的。刚开始的时候似乎大家还注意社交距离，但随着越来越多的问题需要讨论，似乎这个社交距离已经越来越近了。只能在心里安慰自己，我们所在的地方毕竟是一座小城，最近新发现病例已经很少了，应该没有问题。 最近最为犹豫的就是，随着英国小学的开放，我家孩子所在的学校针对Early Years和Year 1的小朋友们开放。而我家女儿正好在Year 1。去还是不去上学，这真是一个难以抉择的问题。貌似大多数的家长都选择了送孩子去上学。最终决定还是在家再观望一下吧，毕竟疫情还没有完全消除，在家Homeschooling也就是家长累一些，应该还是更安全吧。","link":"/covid19-20200614/"},{"title":"病来如山倒，病去如抽丝 - 英国疫情更新","text":"英国近期疫情有所好转，但正所谓病来如山倒，病去如抽丝。在几个月前疫情最严重的时候，由于封城的政策，很多企业被迫暂停营业。在过去的几个月中，很多企业都没有撑下来。现在政府斥资300亿英镑，出台了一系列的政策来刺激经济，降低失业率。 首先是针对房产市场的政策。为了刺激目前低迷的英国房地产，英国政府将土地印花税的起征点由12.5万英镑调整到了50万英镑。呵呵，如果考虑在英国投资房产的化，现在这个机会真的不错。 其次是对娱乐业和旅游业的政策扶持。首先开放了户外游泳池，足球，篮球等运动场所。同时恢复了各种户外的音乐表演。但是对这条政策，个人感觉有些不靠谱，游泳池这种公共场所，如果有一人感染，估计整个泳池中的人都会遭殃。 再有就是酒吧，餐厅的重新开放。甚至为了刺激消费，在周一至周三，所有在餐厅中就餐的费用会打对折，每人最高折10英镑。今天是近几个月来第一次去吃麦当劳。整个过程感觉还是很安全的。首先只限外卖，同时所有麦当劳员工都是口罩，手套全副武装，所有顾客进门时要求必须用消毒液消毒，严格保持两米社交距离。只支持用银行卡付款。 最近英国首相带头，倡议在所有公共场所佩戴口罩。在公交系统上如果不戴口罩，还有可能会被罚款。 整体感觉，这一系列的政策还是比较靠谱的。整个英国经济正在重启中，人们在慢慢适应和病毒并存。","link":"/covid19-20200711/"},{"title":"疫情这个怪兽正在慢慢吞噬着我们的生活","text":"今天听到一个让人非常遗憾的消息，位于约克的英国千年古校York Minster School由于缺少资金，被迫关闭。校中学生部分转到另一所私校，部分自己需要找下一家。 这座古校建于公元627年，由于依附于约克大教堂，因此该校的唱诗班以至音乐都非常强。而且这座学校还是英国著名的prep school，为英国很多的顶级私立学校输送了众多优秀的学生。最近由于封城，约克的旅游业遭受了致命性打击，而作为约克最著名的景点之一，约克大教堂也遭受了重创。关闭Minster School也是在当前疫情下的无奈之举。 很不幸的是，在同一天听到了另一个坏消息。由于游客锐减为零，英国乃至欧洲最大的动物园之一Chester Zoo也面临闭园的厄运。去年年底还曾经去Chester动物园玩过，没有想到目前会是这样一个局面。目前动物园在官网呼吁大家的帮助，以渡过难关： 可以选择在线捐款，也可以选择“收养”一个动物。如果选择“收养”，动物园还会照看动物，只不过你的名字会被打印出来，并会陈列在动物名牌旁边的致谢列表中。看看这些可爱的动物吧，要不要收养一只？ 最近听到的类似信息有很多。可以看到，疫情对人们生活的负面影响已经慢慢的显现出来了。接下来可能还会有更多的公司倒闭，就连英国的很多大学也会收到重大影响，毕竟海外学生的学费是很多大学的重要收入来源。在这种形式下，只能是大家互相帮助，共度时艰。希望学校能够早日复课，动物园能够重新开放，我们的生活也能早日恢复正常。","link":"/covid19-impacts/"},{"title":"英国最新疫情+溜娃","text":"伴随着英国小学和中学的开学，部分地区出现了疫情的反扑，很多学校都出现了疫情。为了加强对疫情的控制，英国政府出台了最新的政策：从14日开始，超过两个家庭的聚会，如果人数超过6人，将被禁止。如果违反将会面临罚款。 其实我个人还是很赞成这个政策的。毕竟和社交需求比起来，人的生命安全更为重要。在孩子学校的家长群中，很多家长都表示了对疫情的担忧。甚至不理解为什么学校不让孩子们戴口罩上学。个别的家长还拒绝把孩子送到学校。 针对这一政策，我的同事开玩笑说，大家已经半年多没有聚过了，不如找一家酒吧，带露天桌子的那种。我们可以分成不同的组，每组六人，可以选择相邻的两个桌子。期间还可以换人。哈哈哈，有点掩耳盗铃了。不过这也说出了大家心中的无奈。 不过再怎么说，人还是需要放松的。何况在户外活动，只要保持社交距离，也不算违反规定。于是，和孩子学校同学的两个家庭，去家附近的一个游乐场去溜娃，顺便也享受一下最近以来难得的好天气。 在英国这里有很多带有社区性质的游乐场。在这里有着大片的草地，同时还配有秋千，滑梯，篮球场，足球场等各种户外健身设施。其实只要孩子们只要在一起，哪怕只是在户外跑跑也会非常开心的。 朋友还带来了篮球。算一算已经好多年没有摸过篮球了。不过篮球似乎就像骑自行车一样，只要会打了，似乎就很难忘记。手只要一摸球，感觉似乎就回来了。跳投，三步上篮，似乎都还对付。看样子，需要找个时间多约几个人打个半场了。 尽管在大家心头都有疫情的阴影，但孩子们在蓝天白云下还是玩的非常开心的。以后这种户外活动还是需要经常有的。","link":"/covid19-sep/"},{"title":"最近遇到的一个Cron job的坑","text":"最近写了一个Python程序，将其添加到了cronjob中，希望让其定期自动运行，但一直不能正常工作。其实在这之前一直在使用cronjob，也从没遇到过什么问题，因此感觉肯定是一个很初级的错误导致的。 下面把这次排错的经历记录一下。 其Cronjob设置如下： 30 04 * * * /home/aafeng/batch/liker/aafeng_liker.sh &gt;&gt; /home/aafeng/cronjobs/logs/aafeng_liker.log 它就是不工作，而且日志文件为空，根本就没有任何线索。 首先想到的是环境变量的配置有问题。于是添加了这一句： . $HOME/.bash_profile 其作用就相当于运行： source $HOME/.bash_profile 这样就能保证在运行脚本之前装载所有环境变量，于是Cron job就成为了： 30 04 * * * . $HOME/.bash_profile; /home/aafeng/batch/liker/aafeng_liker.sh &gt;&gt; /home/aafeng/cronjobs/logs/aafeng_liker.log 但仍然没有任何作用。 检查一下系统日志文件/var/log/syslog，发现这条错误信息： Apr 20 11:11:02 vmi164206 CRON[16662]: (CRON) info (No MTA installed, discarding output) 这条错误消息说明，Cron job产生了输出，Cron守护进程想要将这些输出通过email发送给我，但是我的MTA (Mail Transfer Agent) 并没有正确配置，因此才出现上面的错误提示。 要想解决这个问题，有几种不同的方法： 安装并配置MTA，比如：postfix，但我在VM上根本就不使用mail，因此并不想采取这种方式 进行错误输出重定向，添加： 2&gt;&amp;1，将错误输出到日志文件中 我选择了第二种方式，这样Cron job就成为了： 30 04 * . $HOME/.bash_profile; /home/aafeng/batch/liker/aafeng_liker.sh &gt;&gt; /home/aafeng/cronjobs/logs/aafeng_liker.log 2&gt;&amp;1 再检查自己的日志文件，终于有输出了： Traceback (most recent call last): File &quot;likercli.py&quot;, line 3, in &lt;module&gt; import mysql.connector ModuleNotFoundError: No module named &apos;mysql&apos; 提示找不到mysql这个库。但我明明已经安装了啊。 将Python的完整路径添加后问题解决： /home/aafeng/environments/myenv/bin/python xxxxxx 其实这并不能完全解释为什么找不到mysql这个库。因为前面已经通过 . $HOME/.bash_profile 装载了所有配置，包括Python virtual env，这样应该就能直接定位到/home/aafeng/environments/myenv/bin/python 啊，但就是无法直接工作。算了，既然加上完整的Python路径能正常运行，就先不管它了。","link":"/cronjob-problem/"},{"title":"赞一下Crowdin的新界面","text":"一直在用Crowdin进行Utopian的翻译。今天在使用的过程中其界面发生了热切换，当我点击下一步切换到下一个string的时候，界面瞬间被更新到了新的版本。可以说这次升级非常赞，解决了很多用户在使用过程中的痛点。 首先就是增加了如下的“Text selection mode”，这样对于先前的翻译，你可以选取部分。而在之前版本中，要么都选，要么不选，非常的不方便。 其次，实在左边增加了新的菜单栏，可以方便的进行各种语言的切换： 还有就是在建议面板中，除了先前翻译和机器翻译外，增加了其他语言可以作为参考。这点非常有用。尤其是在翻译较难的段落时，可以参考其他语言的翻译，比如：对某个关键字是否进行了翻译。","link":"/crowdin/"},{"title":"卓越客服Customer Service Excellence","text":"最近一次网购的时候订了一些做冰激凌用的专用巧克力。由于超市工作人员在选择商品的时候没有找到我们想要的品牌，就用其他品牌做了替换。但媳妇只钟爱一个品牌的巧克力，于是在东西收到后给超市客服打电话，说我们对他们所做的替换不是很满意。超市那边非常痛快的给我们退了款，那种我们不喜欢的巧克力也不要了，随便我们怎么处理。 图源：Pixabay 类似这样的事情遇到过几次，无一例外的都是无条件退货/款。以至于在购物的时候从没有考虑过如果不满意的话，退款时会遇到任何麻烦。一般商家都会指定一个期限，比如：购物后28天内无条件退款。其实，在有些商家，即使过了这个期限，还是有可能退货/退款的。 其实，这些行为的背后是一种客户至上的理念。只有把客户都服务的满意了，企业才能从客户身上获取更大的利益。 说到客服，就不得不说这里非常流行的一个标准：Customer Service Excellence卓越客服。Customer Service Excellence是英国这里的一个众多大企业/组织都推崇的标准。很多单位都以获得其认证为荣。我所在的单位还专门成立了一个团队，负责不断改进客服。 Customer Service Excellence是这样定义的： Providing excellent customer service means going the extra mile in making sure a customer is happy and satisfied with a company’s products or services. It also involves providing service to a customer in a timely, pleasant manner. 其最核心的要素就是让客户满意。也就是以令人愉悦的方式提供服务，让客户对公司的产品和服务满意。 说起来，做好客服似乎需要更多的时间和精力。甚至需要专人来负责这件事情。而且，要“going extra mile”。但这有这样，不断提高自己的服务质量，获得客户认可，企业才能生存和发展。其实做什么事情都是这样，差距就在于你是否能够做到那个”extra mile”。","link":"/customer-service-excellence/"},{"title":"莎士比亚玫瑰剧院","text":"今年的莎士比亚玫瑰剧院今年新添了儿童剧Billy Shake Wonder Boy，讲述了莎士比亚童年时期的故事以及一些经典戏剧作品的创作过程。三个演员精彩又互动性极强的表演时不时把观众逗得哈哈大笑，最后还邀请小朋友们跟他们合影。 剧院设在建于13世纪的克利福德塔内部，在这里陆续演出一系列莎士比亚最著名的戏剧。剧场还会有一系列伊丽莎白时代的娱乐活动和传统美食。受到16世纪的传奇伦敦玫瑰剧场启发，玫瑰剧院将可以容纳950名观众，其中阳台上有600个座位，房间则可容纳350人站着欣赏演出。","link":"/cxxgssb4/"},{"title":"家乡的味道 - 脆枣","text":"最近经朋友推荐在中国超市买到了脆枣。虽然价格并不便宜，非常小的一盒就要12英镑，但其味道确实超级赞，个个都又大又红又甜。在包装上看不到产自哪里，但这脆枣带给我的确是永远难忘的家乡的味道。 中国北方的很多地方都种有这种脆枣。每年秋天瓜果飘香的时候，大家就可以尝到这种脆甜的大枣了。 小时候在上学前一直在北方农村长大，当时家中就有一棵枣树。每年春季的时候，枣树开花后就会结出很多绿色的小枣。这些小枣在夏季中不断长大。记得当时天天盼着枣子变红。甚至在枣还没有变红的时候就偷偷的摘些下来吃。其实在即将变红但没有变红的时候，枣仍然很甜。 当然，最为盼望的就是秋天丰收的时候。当时大人用一根长长的棍子把枣一个个的敲下来。而我就在地上把枣捡起来放在盆中。这种方法的效率非常高。如果是摘枣的话非常被枣树上的刺伤到。同时，枣树上还会有毛毛虫，不小心的话也会被毛毛虫蛰到。丰收之后就盼着大人给洗干净，然后开心的吃枣了。 除了收获脆枣，还有很多童年趣事。比如收获玉米，桃子等。记忆最深的事就是去河中捉小鱼。当时会用自制的小渔网去小河边的水沟中去捉小鱼。当时还是团队协作，有的小伙伴从一遍佯攻，吓的小鱼们往另一个方向逃窜，岂不知我和另外一些小伙伴们早就在这里等着它们入网呢。 后来自从上学后就搬到了父母所在的城市，也失去了很多乐趣，尤其是秋天的时候收获各种瓜果蔬菜的乐趣。但在记忆深处仍然刻有老家带给我的种种印记。 这么说来，这盒脆枣买的有些物超所值了。不仅满足了我得味蕾，还带给我的精神上的享受。","link":"/dates/"},{"title":"哥本哈根之行 - Day 1 万圣节主题酒店The Square Hotel + 市政厅广场","text":"这次在哥本哈根入住在The Square这个四星级酒店，除了感觉作为一家酒店应有的整洁干净外，给我最大的惊喜就是酒店在临近万圣节时对整个酒店的装饰，让客人仿佛感觉不是入住酒店，而是来参加一个万圣节Party。 酒店大厅正中的南瓜池 各种万圣节的装饰和道具 就连楼层也有南瓜装饰 我们预定了一个家庭房，房内空间不是特别大。酒店提供个upgrade的option，但想了想这里高昂的物价，还是省了吧。 最早以为丹麦人很喜欢苏格兰人，后来和本地人聊天才知道主要原因是在早期很多苏格兰人移民到了丹麦，自然也就有了当地的苏格兰人社区和酒吧。超市里也有很多苏格兰黄油饼干卖。 在酒店稍作休整后就来到市政厅广场。广场距今已有800多年历史，是哥本哈根最热闹的地方。市政厅广场的建筑体现了传统的丹麦建筑风格和意大利文艺复兴风格的融合。略有点遗憾的是正赶上市政厅广场这里修建地铁， 因此这里也成了施工现场， 因此无法看到市政厅广场原貌。 在市政厅广场有一些雕像。所谓靠海吃海，就连这些雕像一看都是水里的。。。 在广场的一角就是丹麦的国宝级人物安徒生的铜像Hans Christian Andersen Statue。据说安徒生未了的心愿就是想去一次游乐场，而如今他可以一直遥看对街的TIVOLI乐园，听着孩子们的欢声笑语。也算了却了他的这番心愿。","link":"/day-1-the-square-hotel/"},{"title":"脑洞大的段子手绝对是个好司机","text":"今天是预定好的新厨房送货日期，送货的过程可谓一波三折，最初预定的时间是中午12点到2点之间，但后来客服打电话说出库有些问题，可能会迟5个小时，也就是下午5点多送到。结果等到晚上也没个人影，就在我们都以为不会送到的时候，有人敲门了，看看时间，已经晚上8点半了。 把厨房都搬进来之后，清点了一下，发现少了几个配件。本来是十分失望的心情，可在和送货司机的交谈中，顿时心情好了起来。这位英国小哥不仅服务非常专业，而且脑洞超大，表情更是无比夸张，真可以说一个优秀的段子手。 我：非常抱歉，新厨房还没有装照明灯，你们只能擦黑搬了。 司机：没关系，这不是你的错，当然，也不是我的错，都是W公司的错。 终于都搬进来了。小哥拿着清单问我和媳妇 司机：你们两个谁是老板，谁来签字？喔，对不起，这是一句废话。说着把单子递给了我媳妇。 我：你很聪明。 司机：我知道你们不是很高兴，这么晚才送到，还缺少配件。 我：。。。 司机：这样吧，我给你留个电话，你明天一大早就打电话。 我：OK 司机：告诉我的同事你很不高兴我们的服务 我：嗯 司机（脑洞开始打开）：在你正在给孩子们讲睡前故事的时候，有人敲门了。。。 司机：送货的时间真不合适，是开门，还是不开呢？这是个问题。。。 司机：当你把门打开的时候，发现新厨房中漆黑一片。 司机：你被迫在黑暗中收货， 司机：而你在孩子还在楼上苦苦等待你的睡前故事。。。 司机：这时你简直有些愤怒了，这是什么样的服务！ 司机：放心吧，故事讲到这里，我的同事们肯定会把送货费全部退给你的。 其实，在第二天和客服沟通的过程中，我只是把过程简单的说了一遍，客服主动就把送货费给免了，并尽快安排把缺少的配件送过来。不过，还是很感谢那位司机小哥，让我们本来不太好的心情顿时好了起来。","link":"/delivery-driver/"},{"title":"DIY菜鸟","text":"今天媳妇告诉我家里的锅炉坏了，水管里没有热水了。于是我去看了一下，发现报警指示灯一直在闪。首先检查了一下水压，发现水压不足。于是立刻把水压调整了一下，但报警灯仍然还亮着。接下来找到了锅炉的说明书，在排错章节找到了这个问题的解决方案。把锅炉重置了一下，问题解决。整个用时不足20分钟。 其实，我本是一个DIY菜鸟。原因很简单：第一自己对这类东西不感兴趣，第二在这方面的动手能力似乎不强。久而久之，能够花钱找人的就都尽量找人来解决了。但在英国这里的人工很贵。而且很多电工，水暖工只要一请到家中，无论是否修好都要收费。记得上次家中的下水道堵了，自己尝试了一下无法解决。于是叫了一个水暖工来帮忙。水暖工来干了一个下午都没有疏通，当时感觉一百多英镑可能要白扔了。还好在水暖工打算放弃，要收工的最后一刻，下水终于通了。后来，通过和朋友打听，以及网上搜到的资料，学会了定期向下水道中灌些碱性的Soda Crystal来溶解其中的油脂。同时也购买了相应的工具。慢慢的掌握了保持下水道畅通的诀窍。 后来慢慢的接触到了很多DIY大神。记得当时读书的时候，自己的导师是计算机科学的教授，同时也是一位DIY高手。他在业余时间自己组装过摩托车，汽车，甚至花费了几年的时间自己组装了一艘游艇，而且第一次下水试航就成功！后来周边也有很多朋友是DIY高手，自己重做浴室，重新装修厨房，把电工，水暖工，瓦工的活全包了。慢慢受这些高人们的影响。有些家中的电器或者设备出现故障，首先就会想到自己能不能修好。自己对着Youtube视频，磕磕绊绊的也修过不少东西，慢慢也对DIY产生了一点点兴趣。 中国有句古话叫做庖丁解牛，其实很多事情都是这样的，练久了就成了高手和专家。我不能奢望自己能成为DIY高手，但对着Youtube视频，把家中电器，设备的常见故障已经解决了不少了，应该也算是半个DIY爱好者了吧。","link":"/diy/"},{"title":"真实 or 梦境？","text":"从新冠状病毒爆发开始，我就有一种奇怪的感觉，感觉自己似乎生活在梦境中，也劝说自己相信这是一个噩梦，很快就有梦醒的时刻。最近这两天一则噩耗让我更加希望自己是生活在一个梦境中。有一位关系最好的前同事不幸病故，更让我不敢相信，也不愿相信其真实性。以至于这两天我感觉有些精神恍惚，每天早晨醒来后都希望自己刚刚做过了一个噩梦，现在梦醒了，一切都过去了。我究竟是在梦中，还是醒着？那位同事是在我的梦中去世的？我很困惑。 图源：Pixabay 中国古代就有庄生梦蝶的故事，庄生也感觉非常困惑，是他梦到了蝴蝶，还是蝴蝶梦到了他。可见古人很早就开始思考我们处于一个真实世界的可能性。 马斯克曾经说过一句让世人震惊的话：“我们活在真实世界的概率只有十亿分之一”。对此，我还是比较赞同的，觉得我们生活在虚拟世界中是一个大概率事件。这可能是源于我的职业。作为一名IT工作者，我们可以创造很多程序，包括一些游戏。在这些游戏中，我们更像一个能够创造一切的“神”，我们可以定义角色，赋予其各种属性，比如：外貌，财富值，生命值等等。我们也可以在游戏世界中创造很多规则和事件，比如：游戏中的国家，社会，战争，甚至，某种叫做新冠的传染病。。。游戏中的玩家都有所追求，比如游戏中的财富，武力，等等，可能也想规避某些东西。。。 想象一下我们所处的世界，以及我们周边的一切。为什么一个没有生命的小小病毒，就能够重创整个世界？为什么在病毒体中的DNA能够在被感染的人体内疯狂复制自己。那这个如此精妙的DNA又是谁来创造的？为什么人类之间会有爱，亲情，嫉妒，愤怒等等复杂的感情？为什么这些感情会左右人们做出很多自己无法控制的事情？为什么人类的寿命是有限的？那么是谁设定的这个限制？为什么光速是速度的极限？难道超过了这个限制运行这个“程序/游戏”的服务器就会宕机？ 有人在验证自己在梦中还是醒着的状态的时候经常会掐自己一把，如果能够感觉到疼痛，就不是在做梦。可是现在科技如此发达，虚拟现实(VR)完全可以让你感觉到痛感，愉悦感等等。 我无法解答这些问题，也无法证明/证伪我究竟是生活在一个真实世界，还是一个虚拟世界/梦境中。只是希望，无论真实还是梦境，珍惜身边的一切，体验真实/游戏中的每一刻。","link":"/dream/"},{"title":"绑定了dtube账号等待空投","text":"看到中文区不少人在说绑定dtube账号等待空投的事，于是把自己的账户也绑定好了，等待空投。 整个操作非常简单明了，只要按照网站的提示走就可以。 绑定好之后，想试用一下dtube的点赞，于是选择了一个视频赞了下去，哎，怎么是100%呢？？？后来仔细找了一下，原来在这里设置： 还有dtube的点赞比例是单独设置的： 不太理解这种设计的好处在哪里，反正我觉得不如将两个app完全同步的好。","link":"/dtube/"},{"title":"断舍离","text":"今天对车库进行了一次大扫除。在整理的过程中才发现，占据车库90%空间的，都是孩子们从小到大的各种玩具，以及各种用品。但其中有些玩具从来都没有玩过，就已经不适合孩子们现在的年龄了。还有很多是孩子们过生日时小朋友们送的玩具，有的没有拆封，有的也只是玩过几次就尘封在车库中了。我和媳妇开玩笑说，家中车库现在之所以堆的这么满，都是她母爱泛滥的结果啊。。。 图源：Pixabay 在这次整理的过程中，发现更多的还有很多书籍，从孕期胎教，到婴儿辅食，各种启蒙读物，各种游戏，包括国内的，和英国这里买的，中英文的都有。同样，很多书买了之后从未翻开过，现在就变成彻底的累赘了。我还需要花费时间和精力在考虑怎么把它们送到回收站去。 其实很多人，包括我在内，都有一种错觉，很多东西，只要花了钱买回家中，就属于自己的了。其中包括，书籍，玩具，甚至包括孩子的课外班。其实仔细一想，似乎不是这么回事。记得当初在国内工作的时候，特别喜欢购买各种计算机图书，似乎只要把书买回家，它们就属于自己的了。但很多书根本就没有时间读，最后的结局就是束之高阁，慢慢等书中介绍的技术过时了，书也就变成了废品。 其实，如果仔细盘算一下自己的时间，出去工作，吃饭，睡觉，陪伴家人之外，每天剩余的时间就非常有限了。那么在购买书籍的时候就应该考虑到这个因素，看看自己是否有时间去读，然后再决定是否购买。 慢慢的，我就养成了这个习惯，书不到必须要读的时候，不再轻易买书。可能这也和我的职业有关吧，绝大多数的信息都是通过网络获得的。但这样下来，似乎感觉没有了原来的那种“读书债”，也没有了那种压力。 现在很多人都极为推崇极简主义，我周边也有朋友这样做。去他们家中感觉非常舒服。无论在客厅，还是在厨房，车库，都有很大的活动空间。 目前我似乎还没法做到极简主义，但每次清掉一些不用的东西之后，感觉心中都有一种搬掉大石的轻松感，倍感轻松愉快。看样子还要继续扔扔扔啊。","link":"/duansheli/"},{"title":"在DynamoDB中使用GSI","text":"由于DynamoDB是一个基于键/值方式存储的数据库，因此其性能卓越，能够快速返回待查询的信息。不过，当要进行稍微复杂查询的时候，就要在设计初期考虑清楚，其Partition Key(PK)，Sort Key(SK)，以及Global Secondary Index(GSI)的设计了。 下面举一个例子来说明： 首先创建一个表：studentsPartition key: StudentIdSort key: RegistrationDate普通字段：OriginCountry 这个例子主要是说明GSI是如何使用的。因此不要在数据库设计上较真。 之所以这么说，是因为在DynamoDB的数据库设计中，尤其是其PK和SK的命名尽量要保证能够描述所有即将保存的数据。这点和传统的关系型数据库不同。在关系型数据库中，把不同的信息保存在不同表中，再建立表和表之间的关系。但在DyanmoDB中，可以把很多不同种类的信息放入同一个表中。比如：学生的基本信息，考试成绩可以放在同一个表中。这里的PK描述的是“这是关于谁的信息”，而SK描述的是这个信息是关于什么的。这也是为什么PK叫做Partition Key的原因了，如果用DynamoDB存储海量数据，那么不同PK值对应的数据可能存储在不同的分区中，在同一个分区中，则可以使用SK快速定位数据。 添加数据添加如下的记录到上面的表中： 可以使用AWS DynamoDB控制台来手动添加数据，也可以通过编码方式来实现。比如，在Node.js中通过编码方式实现数据的添加： 首先，将KEY/SECRET添加到.env文件中。其文件内容为： KEY=XXXX SECRET=XXXX 运行如下Node代码添加一条记录： const AWS = require(&apos;aws-sdk&apos;) require(&apos;dotenv&apos;).config({path: &apos;.env&apos;}) const dynamoDb = new AWS.DynamoDB.DocumentClient({ region: &apos;eu-west-1&apos;, credentials: { accessKeyId: process.env.KEY, secretAccessKey: process.env.SECRET } }) const addItem = async data =&gt; { const params = { TableName: &apos;test&apos;, Item: { StudentId: &apos;20200106&apos;, RegistrationDate: &apos;2020-01-02 09:08:30&apos;, OriginCountry: &apos;China&apos; } } await dynamoDb.put(params).promise() } addItem() 通过get查询单一数据const AWS = require(&apos;aws-sdk&apos;) require(&apos;dotenv&apos;).config({path: &apos;.env&apos;}) const dynamoDb = new AWS.DynamoDB.DocumentClient({ region: &apos;eu-west-1&apos;, credentials: { accessKeyId: process.env.KEY, secretAccessKey: process.env.SECRET } }) const getItem = async data =&gt; { const params = { TableName: &quot;students&quot;, Key: { StudentId: &apos;20200101&apos;, RegistrationDate: &apos;2020-01-02 09:01:00&apos; } } const result = await dynamoDb.get(params).promise() return result.Item } getItem().then(x =&gt; { console.log(x) }) 运行后返回结果： { RegistrationDate: ‘2020-01-02 09:01:00’, OriginCountry: ‘UK’, StudentId: ‘20200101’ } 使用GSI进行多维度查询现在问题来了，如果我们想要查询所有来自于“UK”的学生，怎么办？目前只有一个笨办法：Scan。也就是一条一条记录的读取比较。可以想象，如果数据量比较大的时候，这种方式是不可行的。 如果要想高效查询的话，需要建立GSI。 接下来就可以通过GSI进行查询了。 const AWS = require(&apos;aws-sdk&apos;) require(&apos;dotenv&apos;).config({path: &apos;.env&apos;}) const dynamoDb = new AWS.DynamoDB.DocumentClient({ region: &apos;eu-west-1&apos;, credentials: { accessKeyId: process.env.KEY, secretAccessKey: process.env.SECRET } }) const getAllItems = async data =&gt; { const params = { TableName: &apos;test&apos;, IndexName: &apos;GSI1&apos;, KeyConditionExpression: &apos;OriginCountry = :country AND begins_with(RegistrationDate, :date)&apos;, ExpressionAttributeValues: { &apos;:country&apos;: &apos;UK&apos;, &apos;:date&apos;: &apos;2020&apos; } } const result = await dynamoDb.query(params).promise() return result.Items } getAllItems().then(x =&gt; { console.log(x) }) 可以看到返回了多条记录： [ { RegistrationDate: &apos;2020-01-02 09:01:00&apos;, OriginCountry: &apos;UK&apos;, StudentId: &apos;20200101&apos; }, { RegistrationDate: &apos;2020-01-02 09:05:00&apos;, OriginCountry: &apos;UK&apos;, StudentId: &apos;20200102&apos; }, { RegistrationDate: &apos;2020-01-02 09:07:00&apos;, OriginCountry: &apos;UK&apos;, StudentId: &apos;20200104&apos; } ] 总结一下，GSI其实就像是从另一个角度来建立PK。一旦建立了GSI，就可以像PK+SK一样，使用GSI+SK来快速检索数据。","link":"/dynamodb-gsi/"},{"title":"关于DynamoDB的一个误解 - 多表查询","text":"刚开始接触到DynamoDB的时候，对它有一种误解：和传统的关系型数据库相比，使用DynamoDB无法有效的进行多表查询。 但随着学习的深入，慢慢明白了，其实DynamoDB和传统关系型数据库可以说是各有所长。DynamoDB如果设计上没有问题，可以进行类似的多表查询，而且效率奇高。但对于超级复杂的多表查询，DyanmoDB并不擅长，这是关系型数据库最为擅长的。 其实，说到DynamoDB，其最大的优点包括： 由于基于键/值对的设计，其查询效率超高 基于AWS serverless，无维护成本 可以auto-scaling，可扩展性好 在传统的关系型数据库中，要进行多表查询，往往会把不同表中的数据通过外键关联之后再进行查询。这样就可以组合出非常灵活的查询条件来。 在NoSQL数据库中，其设计思路从根本上是不同的。因此如果用传统的关系型数据库设计思路来理解，就会很难理解。比如在DynamoDB中，可以把在关系型数据库中的多个表放入在DynamoDB的一个表中，再通过Partition Key, Sort Key以及Global Secondary Index进行”多表“查询。 可以这么说吧，如果DynamoDB在设计时考虑到了这种组合查询的话，在后期进行开发的时候是没有问题的。由于DynamoDB是完全基于键/值进行存储的，因此其查询速度超快。但对于设计时没有考虑到的字段，就无法进行这种查询了。 因此，总结一下：如果有大量多表之间的复杂查询，选择关系型数据库。如果只是简单的”多表“查询，则应该选择NoSQL。可以这么说，90%左右的数据库选用NoSQL更为适合。只有10%左右的用例更适合选择关系型数据库。","link":"/dynamodb-joins/"},{"title":"安装并配置DynamoDB本地版","text":"在学习和使用DynamoDB的时候，常常是先需要做一些尝试，等到一切都准备就绪后，才会在生产环境中创建数据库并导入数据。那么，能够在开发/实验阶段不使用AWS中的DynamoDB呢，毕竟要交费的？答案是肯定的。其实，AWS早就提供好了DynamoDB的本地版。一旦安装，配置好之后，所有的操作都可以针对本地的DynamoDB，这样就不会产生任何的费用了。下面总结一下如何进行安装和配置。 首先下载DynamoDB本地版压缩包： curl -O https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.zip 解开压缩： unzip dynamodb_local_latest.zip 可以看到，在dynamodb_local_latest目录下有这些文件： DynamoDBLocal.jar DynamoDBLocal_lib LICENSE.txt README.txt shared-local-instance.db third_party_licenses 原来，DynamoDB使用Java实现的。运行如下的命令启动本地的DynamoDB: java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb 默认方式下，DynamoDB占用端口8000。可以进行一下测试，比如：列出所有的表来，当然，刚开始的时候没有任何的表： aws dynamodb list-tables --endpoint-url http://localhost:8000 尝试着创建一个表： aws dynamodb create-table \\ --table-name Accounts \\ --attribute-definitions &apos;[ { &quot;AttributeName&quot;: &quot;AccountName&quot;, &quot;AttributeType&quot;: &quot;S&quot; } ]&apos; \\ --key-schema &apos;[ { &quot;AttributeName&quot;: &quot;AccountName&quot;, &quot;KeyType&quot;: &quot;HASH&quot; } ]&apos; \\ --provisioned-throughput &apos;{ &quot;ReadCapacityUnits&quot;: 1, &quot;WriteCapacityUnits&quot;: 1 }&apos; \\ --endpoint-url http://localhost:8000 查看一下表的结构： aws dynamodb describe-table \\ --table-name Accounts \\ --endpoint-url http://localhost:8000 至此，就可以在本地愉快的和DynamoDB玩耍了。。。","link":"/dynamodb-local/"},{"title":"又一个赛季结束了","text":"今晚打完了本赛季的最后一场比赛，可以休息一下了。自从上个赛季晋级后，虽然对手更强了，但队友们都很给力，在本赛季成绩非常好，虽然未能连续晋级，但总成绩应该非常靠前。加油！期待下个赛季的到来。","link":"/e5cef92cefb03/"},{"title":"魔幻的操作-英国即将全面解封","text":"就在全球都在为第二波疫情担心的时候，英国政府公布了一系列的政策，人们将在7月4日“重获自由”。这些政策包括：博物馆，艺术画廊，电影院，酒吧，餐厅，酒店等将于7月4日开张；社交距离降低为1米+；从7月4日起，两个家庭之间可以聚会，但仍需保持社交距离。 英国的主流媒体似乎也在一边倒的支持着这些政策： 这一系列的政策似乎在民众中很受欢迎。目前我们周边已经有好几家朋友似乎都已经按捺不住，透漏出在7月4日后想要一起聚会的想法。同时在英国的好几个华人家长群的民意调查中，家长们也是一边倒的把(EY和Y1两个年级的)孩子送回了学校，或者计划把孩子送回学校。 真的不是很理解这一系列政策的依据是什么。现在的疫情数据是比前一段时间的要好看很多。但这正是前一段时间大家纷纷宅在家中的结果啊。感觉缓慢的解封是可以理解的。但这步跨的似乎有点大，真的很担心会扯着了。 不过话说回来，女儿是符合返校条件的（Y1）。最初我很坚决的反对返校。但她班中的小朋友们纷纷返校，已经过了一周，似乎情况都很正常。我也有些动摇了，已经向学校提出申请，如果一切正常，下周可能会尝试返校。 哎，无论怎样，生活还要继续。今天晚饭后全家出门散步。沿途看到了很多动物。没有了人类的过多打扰，它们似乎生活的更自在了。 天鹅在距离岸边不远的地方孵化雏鸟。让我第一次有机会这么近距离的观赏这只高冷的大鸟。 就连平时胆小的兔子似乎也变得不怎么怕人了。","link":"/ease-lockdown/"},{"title":"曼彻斯特最爱中餐，没有之一","text":"每次去曼彻底特都要到东馆，他家的铁板玉子豆腐更是每次必点。","link":"/efa5885028aa4/"},{"title":"Elasticsearch的中文分词","text":"以下的步骤都是基于Elasticsearch和Kibana的基础上的，如果还没有安装，建议参考我前面的文章。 什么是分词和默认分词器？所谓分词，就是把一段话拆解为若干词元(token)，再将其保存至索引中以便下一步搜索。在ES中有现成的分词器，只不过这些分词器对中文的处理不尽人意。看一个例子： 在Kibana devtool中输入： GET _analyze { &quot;text&quot;: &quot;are you ok?&quot; } 这等同于： GET _analyze { &quot;analyzer&quot;: &quot;standard&quot;, &quot;text&quot;: &quot;are you ok?&quot; } 可以看到其返回结果为： { &quot;tokens&quot; : [ { &quot;token&quot; : &quot;are&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 3, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 0 }, { &quot;token&quot; : &quot;you&quot;, &quot;start_offset&quot; : 4, &quot;end_offset&quot; : 7, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 1 }, { &quot;token&quot; : &quot;ok&quot;, &quot;start_offset&quot; : 8, &quot;end_offset&quot; : 10, &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;, &quot;position&quot; : 2 } ] } 在这里，将”are you ok?”分成了三个词元：”are”, “you”，”ok”。这样的分词没有任何问题，毕竟在英文中就是用空格来分隔各个单词的。 但如果我们再尝试一段中文的话： GET _analyze { &quot;text&quot;: &quot;我爱我的祖国&quot; } 其输出结果为： { &quot;tokens&quot; : [ { &quot;token&quot; : &quot;我&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 1, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 0 }, { &quot;token&quot; : &quot;爱&quot;, &quot;start_offset&quot; : 1, &quot;end_offset&quot; : 2, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 1 }, { &quot;token&quot; : &quot;我&quot;, &quot;start_offset&quot; : 2, &quot;end_offset&quot; : 3, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 2 }, { &quot;token&quot; : &quot;的&quot;, &quot;start_offset&quot; : 3, &quot;end_offset&quot; : 4, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 3 }, { &quot;token&quot; : &quot;祖&quot;, &quot;start_offset&quot; : 4, &quot;end_offset&quot; : 5, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 4 }, { &quot;token&quot; : &quot;国&quot;, &quot;start_offset&quot; : 5, &quot;end_offset&quot; : 6, &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;, &quot;position&quot; : 5 } ] } 这样的分词结果是明显错误的，或者说是没什么用的。 安装elasticsearch中文分词器常见的elasticsearch中文分词器包括：smartcn和ik。 下面以ik分词器为例来说明如何安装和使用elasticsearch中文分词器。 首先需要注意，分词器的版本一定要和elasticsearch版本匹配。比如：我使用的elasticsearch版本是7.7.0，那么，对应的分词器版本也应该是7.7.0。 完整的ik版本列表可以在这里找到：https://github.com/medcl/elasticsearch-analysis-ik/releases 首先进行安装： ./elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip 验证一下是否成功安装： ./elasticsearch-plugin list 它会显示刚安装的中文分词器。 同时可以看到，在plugins目录下多了一个analysis-ik子目录。 安装结束后，就会有两个分词器：ik_max_word和ik_smart。这两个分词器的算法不同。第一个会尽量分出更多的中文词，但会占用更多空间。而第二个则不会。一般情况下，使用ik_smart就足够了。 比如：运行如下查询： GET _analyze { &quot;analyzer&quot;: &quot;ik_smart&quot;, &quot;text&quot;: &quot;我爱我的祖国&quot; } 其结果为： { &quot;tokens&quot; : [ { &quot;token&quot; : &quot;我&quot;, &quot;start_offset&quot; : 0, &quot;end_offset&quot; : 1, &quot;type&quot; : &quot;CN_CHAR&quot;, &quot;position&quot; : 0 }, { &quot;token&quot; : &quot;爱我&quot;, &quot;start_offset&quot; : 1, &quot;end_offset&quot; : 3, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 1 }, { &quot;token&quot; : &quot;的&quot;, &quot;start_offset&quot; : 3, &quot;end_offset&quot; : 4, &quot;type&quot; : &quot;CN_CHAR&quot;, &quot;position&quot; : 2 }, { &quot;token&quot; : &quot;祖国&quot;, &quot;start_offset&quot; : 4, &quot;end_offset&quot; : 6, &quot;type&quot; : &quot;CN_WORD&quot;, &quot;position&quot; : 3 } ] } 定义自己的词条在ik分词器中，所有的词条文件都保存在elasticsearch-7.7.0/config/analysis-ik中。如果想要定义自己的词条，需要以下几个步骤： 首先在这个目录中创建一个新的词条文件，并将新的词条每行添加一个 新词条1 新词条2 .... 接下来，在配置文件IKAnalyzer.cfg.xml中添加对上一步自建词条文件的引用： &lt;entry key=&quot;ext_dict&quot;&gt;new_dict.dic&lt;/entry&gt; 之后需要重新启动ES才能生效。 在索引中使用中文分词器创建索引： curl -X PUT localhost:9200/ik1 或者在Kibana中： PUT ik1 { &quot;settings&quot;: { &quot;analysis&quot;: { &quot;analyzer&quot;: { &quot;es_std&quot;: { &quot;type&quot;: &quot;ik_smart&quot; } } } } } 查看ik1 GET ik1 试用分词器： GET /ik1/_analyze { &quot;analyzer&quot;: &quot;ik_smart&quot;, &quot;text&quot;: &quot;我和我的祖国&quot; } 在Python交互界面中添加一条数据： from elasticsearch import Elasticsearch es = Elasticsearch() es.index(index=&quot;ik1&quot;, id=1, body={&quot;text&quot;: &quot;我和我的祖国&quot;}) 测试以下查询： POST ik1/_search { &quot;query&quot;: { &quot;query_string&quot;: { &quot;query&quot;: &quot;祖国&quot;, &quot;fields&quot;: [&quot;text&quot;] } } } 其返回值为： { &quot;took&quot; : 5, &quot;timed_out&quot; : false, &quot;_shards&quot; : { &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 }, &quot;hits&quot; : { &quot;total&quot; : { &quot;value&quot; : 1, &quot;relation&quot; : &quot;eq&quot; }, &quot;max_score&quot; : 0.5753642, &quot;hits&quot; : [ { &quot;_index&quot; : &quot;ik1&quot;, &quot;_type&quot; : &quot;_doc&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 0.5753642, &quot;_source&quot; : { &quot;text&quot; : &quot;我和我的祖国&quot; } } ] } }","link":"/elasticsearch-chinese-tokenizer/"},{"title":"购入了两个Engine Miner 4","text":"前天看到有人提到Engine Miner 4，感觉这个币很特殊，于是就购入了一个，到昨天收到了 3.5 ENG。对这个Miner的表现很满意。于是又购入并stake了一个Engine Miner。 今天满怀期待的在Steem Engine查了一下收益，只有1.19 ENG。怎么Miner多了，收益却少了？？？ 百思不得其解，辛亏看到了 @ericet 的这篇文章，才明白了原来全部是靠运气啊？？？这也太不靠谱了吧，我的运气一直不怎么好啊。。。 再观察几天，如果我的运气一如既往的差，还是unstake了吧。","link":"/engine-miner-4/"},{"title":"Eureka! The National Children&#39;s Museum英国国家儿童博物馆游记","text":"这周末带孩子去Halifax的Eureka国家儿童博物馆去玩。这家博物馆的最大特色就是采用北美教育模式的教育机构，主要培养11岁一下孩子的兴趣爱好，同时激发孩子们的灵感和创造力。 进门处这颗树上挂满了博物馆获得的各种殊荣： 这个牌子上动态显示目前世界上的人口数，当然这是估算： 里面有各种让孩子体验的场景，比如有银行，孩子们可以在里面填写取款单，使用ATM取款，还可以参观金库： 还可以坐在这把椅子上体验一下有钱的感觉： 这里面的模拟超市肯定是得到M &amp; S家的赞助了： 在这个展厅里则会科普关于人体的构造，各个器官等等： 这是讲解舌头构造的，人坐上去还会发出Yummy的声音来： 大大的鼻子： 这里通过红外线把人的骨骼都照了出来： 自己也照了一下，怎么看都像一个猪头，郁闷。。。 这里是讲解人的消化器官的： 这个厨房是最受孩子们欢迎的： 如果你来Halifax附近玩的话，强烈推荐去玩一下，另外，这里的门票买一次就可以换一个年票，非常划算。","link":"/eureka-the-national-children-s-museum/"},{"title":"烧烤季到了","text":"难得英国这里有一次这么好的天气，烧烤约起来。","link":"/faa4ltuy/"},{"title":"《Fantastic Mr Fox》- 致那些童心尚存的成年人","text":"疫情期间所有的活动都取消了。不过也有好处，就是一家人在一起的时间多了很多。没有了和朋友们的聚会，孩子们的各种Party，宅在家中总要组织些活动吧。每周末一家人一起看一场电影就成了我们宅家期间的一个习惯。 我们选择的影片一般都是在豆瓣上影评分数比较高的，适合全家看的电影。或者是因为孩子们读过对应的图书，非常喜欢书中的故事。今晚选择的就是2009年由福克斯出品的《Fantastic Mr Fox》。这部电影在Youtube上需要付费才能看到。还好我们付年费订了Amazon Prime会员。其会员包括了很多免费的正版电影。 故事情节还是有一些刺激的。影片开头就是狐狸先生和狐狸太太在农场偷鸡时的场景。狐狸先生得知狐狸太太怀孕，于是承诺两人逃脱后不再偷东西。但两年后狐狸先生购买了三个农场主附近的树屋，同时由于内心中不甘于平凡生活的冲动，背着狐狸太太再次去农场行窃，从而引发了农场主们对狐狸一家的围剿。。。 尽管狐狸先生一直在干着偷鸡摸狗的勾当，但作为一只狐狸，这才是它应该做的事情吧。因此，我从这部影片中还是能看到其《不忘初心》的正能量的。狐狸先生人到中年，有了众多的责任和羁绊，压抑了内心中的真我，它不断寻找自我的过程正是其吸引人之处。影片最后当狐狸先生看到了狼眼中的野性时，泪水禁不住流了下来，是那种为成年人生活中的无可奈何而流下的泪水。而狐狸先生和狼的道别，何尝不是和自己的梦想在道别？","link":"/fantastic-mr-fox/"},{"title":"最好的父亲节礼物","text":"一年一度的父亲节如期而至。在几天前儿子和女儿就神神秘秘的在给我准备礼物，甚至连妈妈都被调动了起来。每天晚饭后他们就凑在一起做准备。今天谜底终于揭晓了，原来每人为我写了一首藏头诗。同时还画了两幅父亲节的画送给我。 下面是儿子写的藏头诗(Acrostic Poem)： Father you are the best,And I really love you the most.The special day is coming,Hope you enjoy our singing.Everything I love about you,Read me a story that is brand new,Sunny days you make us delicious barbecue. Daddy is a special person,And each day we have a nice conversation,You are the best daddy with great imagination. 儿子的画作： 女儿写的藏头诗： Feeling excited we get ready for father’s day,about half past six “Come down daddy!” We say.tea is on the table ready for daddy.he smiles at us happily.extremely hungry we start eating.rabbits are in the garden hopping,sweet ice-creams are in our mouths melting. Daddy enjoys his tea so much,and he gives us a kiss each,you can make your father’s day like this! 女儿的画作： 也真难为他们了，准备了这么多天才好，真的是父亲节的最好礼物了！","link":"/fathers-day-2020/"},{"title":"雨中游西湖","text":"虽然天气不给力，但雨中的西湖别有一番味道","link":"/fe531bf49a695/"},{"title":"Festival of ideas","text":"今天带孩子参加了一个当地的Festival of ideas，收获很大，寓教于乐，将很多科学，历史，艺术的知识通过游戏的方式体现出来，孩子们都是直到散场才走。有的游戏就连成年人都喜欢玩。","link":"/festival-of-ideas-cgetlmtn/"},{"title":"Files Go - Free up space on your phone","text":"Files GoFree up space on your phone Screenshots Hunter’s commentDeveloped by Google, Files Go app is a great tool to help you manage Android phone storage. From the Files Go UI, you can see details storage amount of your phone, such as how much space has been used. Based on these information, you can decide if you want free up some spaces. You can set alerts for things like apps with a large cache of unnecessary files, duplicate files etc. Linkhttps://play.google.com/store/apps/details?id=com.google.android.apps.nbu.files&amp;hl=en ContributorsHunter: @aafeng This is posted on Steemhunt - A place where you can dig products and earn STEEM.View on Steemhunt.com","link":"/files-go-free-up-space-on-your-phone/"},{"title":"如果财务自由了，我会做什么？","text":"今天看到matters上很多人在讨论一个话题，如果财务自由了，我会。。。让我也不禁开始做了一个白日梦，如果我财务自由了，会做些什么呢？ 我首先想到的就是要多陪陪家人。自从在国外定居后，由于年假有限，每年只有几周的时间回国。而每次回去，难免会有很多聚会和应酬，真正能留给家人的时间并不多。因此，如果没有工作的牵绊，希望能多陪陪家人。 世界那么大，我没去过的地方还很多。所谓读万卷书，行万里路。我很喜欢“在路上”的感觉。因此第二个想到的就是旅游。如果真的既有时间又不用担心费用，我会花费更多的时间在旅游上。 要想照顾家人，想去游遍世界，都需要一个好的身体，因此我会花更多的时间在健身上。平时早上送孩子上学后我去上班，看到有些家长一身运动装，肯定是送完孩子去健身的。当时就很羡慕。如果我不用去上班了，肯定也会和他们一样，多花些时间在健身上。乒乓球，游泳，瑜伽，自行车，想坚持的运动似乎还不少。。。 有一件事可能很多人不太理解。如果不用工作了，我还想写程序。只不过现在是为了工作而写。到时候是为了自己的兴趣而写。其实我觉得写代码还是很有成就感的。看着一行行代码按照自己设定的方式准确无误的运行，还是很满足的。 好了，白日梦先做到这里，其实，如果后面的那个条件对于很多人是很难实现的。无论是否能够实现财务自由，该做的还是要做的。比如：还是要尽量多抽取时间，避免不必要的应酬，多和家人在一起。每年去至少2，3个没有去过的地方，感受一下不一样的世界。体育锻炼也不能省，越是工作忙，越应该坚持。","link":"/financial-freedom/"},{"title":"财商教育","text":"经常听到的一个事实是，很多人在同学聚会时，发现班中同学们创业做老板的，最有钱的，反倒是那些当初的学渣。而那些学霸们，通常是在毕业后找到一份不错的工作，老老实实的给别人打工。这其实说明了一个问题，学校中缺乏对学生们的财商教育。 记得在《富爸爸，穷爸爸》中，作者的亲生父亲，也就是穷爸爸，有着一份高学历和不错的工作。但就是财商不够，一辈子过着缺钱的生活。而朋友的爸爸，也就是富爸爸，尽管学历不高，但财商高，有的是办法让钱为他工作，因此成为夏威夷最富有的人，自己有着大把时间做自己想做的事。 富爸爸给作者灌输的就是如何理财的观点。比如：鼓励讨论和钱相关的话题，好好学习钱是如何运作的，并努力让钱为你工作。正是这种早期的财商教育让作者能够不再追寻父亲的老路，实现了财务自由。 有一位好友是做生意的。他自己本身并没有受过高等教育，一路上完全靠的是自己的摸爬滚打慢慢积攒了经验和资产。他家的孩子可能是受父亲的影响吧，从小学习成绩一般，但做生意的头脑似乎天生就很灵光。在上中学的时候就开始自己赚生活费了。后来读大学的时候生意越做越大，但学业却越来越差，最后不幸考试没过而被迫辍学了。但这丝毫没有影响他在生意场上做的风生水起。 周边的一位朋友以投资各种期货，外汇，股票等为生。他本来在投资方面比较有天赋，又在这个圈子里经营多年，工作对于他来说已经是一种可有可无的状态。因此他每天工作的时间比我短，但每年出去度假的次数却远远比我多。 可能是由于受家庭环境的影响，我从小丝毫没有受到任何财商方面的教育。现在应该有意识的让孩子们早些接触一下了。","link":"/financial-quotient/"},{"title":"程序员的专属字体 - Fira Code","text":"最近开始使用Fira Code，感觉非常好用。有了Fira Code之后，代码的可读性大大提高。那么首先来说说，什么是Fira Code。在编程中会有很多多个字符表示的符号，比如：&gt;=, &lt;=, =&gt;等，其实在数学或者人的大脑中，这些组合符号根本上就是一个单一的符号。那么，为什么不用人脑中更为熟悉的方式来显示这些符号呢？ Fira Code就是为了解决整个问题而开发的。其官方介绍如下： Fira Code is a free monospaced font containing ligatures for common programming multi-character combinations. This is just a font rendering feature: underlying code remains ASCII-compatible. This helps to read and understand code faster. 安装从其Github页面下载文件并解压： 这里以Windows 10为例，进入’ttf’目录，选中所有字库文件后，单击右键进行安装。 配置以VS Code为例，进入”Settings” -&gt; “Commonly Used”, 更改字体属性： 关于编程中连字特性的设置： 使用进入VS Code后，尝试一段JavaScript代码： function test(a, b, c) { if (a != b) { console.log(&apos;a != b&apos;); } for (var i = 0; i &lt;= 10; i++) { console.log(i); } if (c === undefined) { console.log(&apos;c is undefined&apos;); } } 可以看到在VS Code中看到的效果： 其实严格意义上讲，Fira Code和编程语言无关。它只是添加了系统字体，并在编辑器中显示该字体而已。因此对于主流编程语言，都能够支持。 最后总结一下，Fira Code不会改变你的源码，但会以更加友好的方式进行显示，从而提高代码的可读性。这对于眼神不好的码农们来说，确实非常有用。","link":"/firacode/"},{"title":"孩子编写的第一个Scratch Game","text":"自从女儿开始学习Scratch编程以来，对其表现出了极大的兴趣。这也难怪，在Scratch中有着各种小女孩喜欢的公主，精灵，还有小动物的角色造型，还有各种背景，音乐等，确实是非常吸引小朋友们。 没学多久，女儿就编出了一个小游戏：藏猫猫。目前还不是完全独立完成的，基本上在网上看了一遍教程之后，她就把游戏编了出来。 游戏很简单，就是在屏幕上的一个随机位置，显示一只小猫，玩家需要迅速用鼠标点击这只小猫，如果点中了，小猫就会叫一声，同时自动加一分。 由于完全是图形化的编程，整个游戏非常容易理解。 首先是针对背景的编程： 可以看到，这里把变量及其赋值，循环结构等使用上了。 而对于小猫的编程，则要分成两个部分。 首先是当程序开始运行后，使用一个循环来不断的在随机位置显示小猫。显示一秒后再隐藏。 同时还需要当小猫被点击后所做的处理：喵一声，同时加分： 整个程序孩子只需要半个小时就可以做出来。现在孩子对编程的兴趣高涨，期待着编出更多好玩的游戏来。看来对于低龄儿童的编程教育，Scratch的确是首选。","link":"/first-scratch-game/"},{"title":"英国经典国菜 - 炸鱼薯条","text":"说到每个国家的美食，似乎很多国家都有很多让人垂涎三尺的美食。中国的美食自不用说，法国的鹅肝酱，大蜗牛，油封鸭等等。但说到英国，有什么好吃的呢？说准确点，不是好吃，是值得一提的？首先想到的就是英国的国菜：炸鱼薯条。 炸鱼薯条在英国的受欢迎程度极高，无论在哪里，都会看到炸鱼薯条店。不仅在各家英式餐厅中必备，就连我单位的食堂中，都固定在每周五提供炸鱼薯条。甚至在孩子上学的学校也是如此，每周五是”Fishy Friday”，供应孩子们最爱吃的炸鱼薯条。 尽管这道菜的而造价不高，但在英国人心目中的地位却极高。以至于在习总访英时，英国前首相卡梅伦就曾经在一家酒吧中用炸鱼薯条来款待习总。自此之后，很多中国旅行团把品尝炸鱼薯条放到了行程之中。 这里炸鱼薯条中的鱼一般选择新鲜的鳕鱼或鲽鱼，将鱼洗净后将其表面的水分擦净，裹上一层薄薄的面粉，然后蘸上用面粉，盐，牛奶配好的浆，下锅炸就好了。一般炸鱼薯条会配上各种酱，比如番茄酱，蛋黄酱，还有英国人喜欢的咖喱酱。同时还会和豌豆泥或者番茄汁焗豆搭配。 不过说起来，英国这道名菜其实源于西班牙的犹太人，是他们在16世纪将炸鱼薯条带入英国的。在一战和二战期间，英国像很多其他国家一样实行食物配给。唯有鱼薯不受限制，只要有钱就可以买来吃。 现在这道英国名吃不仅是众多英国人喜爱的外卖，同时还是在酒吧喝嗨之后肚子饿了（没错，干喝酒不吃东西）之后用来果腹的首选。这也是为什么很多炸鱼薯条店关门很晚的原因。 刚来英国的时候不是很喜欢这道菜，毕竟都是油炸的，感觉过于油腻。吃过一次之后经常会几个月都不想再吃。慢慢的感觉适应了，过一段时间不吃的话还有点想。忘记在哪里看过的报道，在国内也有英国炸鱼薯条店了。","link":"/fish-chips/"},{"title":"Get新技能：各种地板的选择","text":"随着家中扩建工程的不断推进，最近需要考虑扩建后的地板了。早些年的时候，只是知道地毯，实木地板，和复合木地板。但最近在不断的选择过程中，才意识到了里面的学问原来还是很多的。 首先是实木地板(Solid Wood)。说白了，实木地板就是一块一块的木板。这种地板的特点就是取材纯天然，但容易变形，需要定期护理。在早期工程木地板技术不成熟的时候，造价较高，因此很多人选择了实木地板。但现在更多的人选择的是下面要介绍的工程木地板。 第二种是工程木地板(Engineered Wood)。这种木地板其实也是纯木的，只不过不像实木地板，它是由很多层粘合而成的，因此叫做工程木地板。哈哈，就像三明治一样。顶层木的质量最好，其他层的也是纯木，只不过质量不如顶层的好。相较于实木地板，工程木地板的纹理和色彩选择也更多，适用面也更广，比如有地暖的话只能选择工程木地板，而不能选择实木地板。在选择的时候需要注意，其顶层木板越厚，质量一般就越好。比如下图是施工的人推荐的工程木地板，共有9层，顶层非常厚，因此也属于工程木地板中的顶级品质。 第三种就是复合木地板(laminate)了。复合木地板的底层用的是高密度板，上面是特殊处理过的一个耐磨层。其最大优点是耐磨。但真到有一天上面的耐摩层被破坏了，复合木地板就废了。相比较而言，工程木地板的表面如果磨坏了，还能请专业人士来至少翻新一次。 最后一种是塑胶地板(Vinyl)。据卖地板的人说，现在选用Vinyl的人越来越多了。这种地板的特点就是寿命长，特别抗造，防水，使用于各种环境。但是感觉就不像木地板那样自然。现在Vinyl的价格还很高，顶级的Vinyl价格甚至会超过高质量工程木地板价格。但对于这种地板，我实在是提不起什么兴趣。主要是觉得铺上后没有地板的感觉。 虽然施工的人建议我们选择复合木地板。据他说现在选择复合木地板的人最多。不过我们最终还是选择了工程木地板。原因有以下几个：第一，它的材质是天然纯木，同时又很耐磨。第二，即使耐磨层出现问题，还可以再度翻新。第三，可以选择的花色，纹理很多，有我们喜欢的样式。 伴随着工程的推进，需要学的东西还真多，下一步，厨房的选择，房屋结构的改变，想想有些头大。。。","link":"/flooring/"},{"title":"放过烂人烂事，其实就是放过自己","text":"前一段提到过，在更换家中户门的时候，遭遇了一个奇葩的人。和他面对面交流的时候，感觉人很好也很靠谱。但和他打电话预约装门时间的时候，却连续放了我三次鸽子。这两天终于下定决心，不再和这个烂人纠缠。哪怕再找一个更贵一些的公司，也认了。 Source: Pixabay 最开始的时候，还想过要投诉他。毕竟像他这样对客户的，我到了英国这么多年还是头一次见过。但给他公司打电话之后才知道他就是老板。当然，在英国这里还有很多行业的监管机构，但却费时费力，到底要不要投诉？ 后来慢慢想通了，我的时间有限，该做的事情又不少，干嘛把时间和经历浪费在这种人身上呢？就算真的去投诉他。要花费自己不少时间和精力，同时还影响自己的心情。 其实，在生活中难免会遇到各种各样不顺心的事情。这个时候就有两个选择：花时间和精力去较真，或者不与之纠缠，把精力集中到自己该做的事情上。 在这个时候就需要仔细考虑了，当前的烦心事真的需要花费时间和精力去做吗？自己是不是还有更重要的事情去做？有个成语叫做：退一步海阔天空。现在随着年龄的增长，慢慢体会到了它的含义。有的时候，退一步并不代表委曲求全，而是不要把精力和时间浪费到不该浪费的事情上。 举个最简单的例子：如果在街上有一只狗冲你叫了几声，在经历过短暂的惊吓之后，难道你要和它计较吗？ 还曾经听过一个更为极端的例子。有位男士生活非常美满，事业有成，家庭幸福。但有一次在行车的时候自己的车被另外一个人刮蹭了一下。他觉得过错100%在于对方，于是下车理论，两人越吵越厉害，最后动起了手。这位男士受伤后被送到医院，最终不治身亡，留下了伤心欲绝的妻儿。 我想，如果这位男士能够重新选择的话，应该不会再犯同样的错误了吧？他和一个烂人争执，最终受害的是自己和家人。如果当时退一步的话，自己还有大把的美好人生和自己心爱的人一起度过，难道不好吗？ 慢慢的，我明白了这个道理，如果遇到了一些烦心事，可以考虑退一步，毕竟放过那些烂人烂事，就是放过自己。","link":"/forgive-yourself/"},{"title":"使用forwardemail.net为自己域名配置免费邮件服务","text":"在购买自己的域名后，肯定想要设置自己域名下的邮箱。下面介绍一下如何通过forwardemail这个网站的服务+gmail来实现如何接收和发送自己域名下的邮件。 设定邮件转发首先打开 https://forwardemail.net/ ，通过Google或Github账号登录。登录成功后可以看到如下界面： 添加自己的域名： 目前提示尚未通过验证： 设置域名以做邮件转发： 我是在Cloudflare中配置的MX和TXT记录： 整个过程需要等待一段时间，通过验证之后看到的界面是这样的： 至此，所有发送到 XXXX@aafeng.uk 的邮件都会被转发到你所指定的邮箱中。 第二步：通过gmail发送以自己域名为后缀邮箱的邮件 首先需要激活Google账号的二元验证。如未激活，在如下页面中激活： https://www.google.com/landing/2step/ 访问页面：https://www.google.com/landing/2step/ 在App列表框中选择“Mail”，在“Device”中选择“Other”，然后输入你的邮箱。单击“Generate”，生成App的密码： 记录下这个密码。 打开Gmail设置页面，选择“Accounts and Import” =&gt; “Send mail as”, 单击”Add another email address” 添加自己域名下的邮箱，注意取消选中“Treat as alias”： 在下一步中输入你Gmail的用户名（不含@gmail.com)，以及前面记录下的Google app的密码： 输入发送到你邮箱中的验证码后，单击”Verify“，至此设置完毕。可以看到能够在Gmail中通过自己域名下的邮箱来发送邮件了。","link":"/forwardemail/"},{"title":"你是刺猬思维还是狐狸思维？","text":"最近看到了一篇文章，对自己的触动很大。文章说的是狐狸思维和刺猬思维在币圈投资中的体现。但其中所讲的道理，适用于生活中的方方面面。 图源：Pixabay 狐狸和刺猬的故事源于古希腊寓言故事，狐狸想要吃掉刺猬，想尽各种方法进攻，希望能够找到刺猬的弱点。而刺猬只有一招，就是把全身缩成一团，用全身的刺来保护自己。最终狐狸机关算尽还是败在了刺猬的手中。其实这个故事讲的是一个道理：狐狸懂的很多，思维多元化，办法也很多；刺猬却能够懂的最重要的事，思维是集中和单一的，但可以做到一招先，吃遍天。 说白了，刺猬思维是典型的一根筋，认准了一件事情，就不再改变，朝着一个目标努力，直到把事情做完为止。而狐狸思维说的则是很会变通的人，他们脑瓜活络，能够有很多的好点子，但其中的有些人却没有明确的目标，甚至不知道自己想要什么。 在币圈中估计大家身边都有很多典型的“狐狸”和“刺猬”，我也听说过很多类似的故事。在币圈，有些人认准大饼，买入后长期持有，结果跑赢了绝大多数频繁进行交易的人。金庸迷们熟悉的角色郭靖也是典型的一根筋思维，不懂变通，但却能学会降龙十八掌，傲视群雄。 其实，我觉得任何事情都不是绝对的。可以在“狐狸”式思维和“刺猬”式思维中有机的切换和变通。在进行思考的时候选择“狐狸”式思维，而在做事的时候则要“刺猬”式思维。 你是狐狸还是刺猬呢？","link":"/fox-hedgehog/"},{"title":"跨国友谊","text":"最近女儿在学校交到了一个好朋友。这是一位韩国小女孩。她随着父母来到我们所在的城市访问两年。两个小朋友非常要好，可以说是焦不离孟，孟不离焦。上学时手牵手，放学时还经常一起玩。 我有些好奇，在韩国小朋友来之前，女儿也结交了好几个关系非常好的本地小朋友。为什么这位韩国小朋友一来，就成了女儿最好的朋友？难道是她长得很像中国人？因此女儿觉得亲切？ 因此专门问了女儿一个问题：为什么和这位韩国小朋友成为了最好的朋友？女儿的回答是：因为她更nice，更会为我考虑。我想这可能就是最根本的原因吧。韩国人和中国人毕竟都在亚洲，又是邻国，可能在文化传统上更为相近。相对而言，很多英国小朋友更为粗犷，至少在年龄小的时候可能为对方考虑的稍微少了一些。 女儿所在的学校非常多元化，每个年级中都有很多不同国家的小朋友。整个学校的一大特色就是对多元文化的包容。这也是我们作为家长，非常喜欢这所学校的一个原因。 当然，这样也有缺点，比如：由于很多国际家庭来这座小城都是临时性的访问，因此有可能孩子刚在这里熟悉，有了新朋友，就要离开这里了。到时候这些好朋友之间难免会非常伤心失望。 在最早的时候，我们也曾经为女儿担心过，一旦两年之后，她的好朋友要回韩国了，她会不会很难受？后来慢慢的我们自己也想通了，人生中难免有很多聚散离合，只要珍惜当下的这份友情，就足够了。至于两年之后的事，可以暂时先放一放，到时候再说吧。","link":"/friendship/"},{"title":"由VPS到无服务器的迁移之旅-计划","text":"算算自己租赁VPS的时间已经有好多年了。在VPS上主要做两类事情，一类是跑一些cron job，这个需要一个不间断运行的服务器。另一类是测试一些自己感兴趣的技术，和一些side projects。但自从越来越多的接触无服务器架构后，感觉似乎没有必要再继续使用VPS了。 首先来说说使用VPS的缺点。 第一点就是需要不停的维护VPS上的各种软件，比如升级版本，安全补丁。最为头疼的就是当操作系统的版本需要升级了，需要把VPS彻底重新升级一下，再把原来就操作系统上的应用全部安装，配置一遍。在这个过程中可能面临各种版本冲突。。。反正我每次升级操作系统，就没有顺利过。。。 第二点就是费用。VPS的费用可以说是从几美元，到几十，甚至上百美元每月的都有。自己选择了一个不是特别贵，但也不便宜的VPS。月付之后，感觉利用率并不高。也就是说性价比很低。 还有就是性能问题。毕竟是和别人共享主机资源。如果遇到了一个比较“忙”的邻居，你的VPS性能就会急剧下降。在我的VPS就曾经出现过两三次，登陆后键入一个ls命令之后要等上几秒钟才有反应。。。 那么，升级到无服务器架构有什么优势呢？ 首先，也是我最为喜欢的，就是再也不用担心操作系统版本升级的问题了，也不用考虑各种安全补丁了。。。这些维护工作都有提供商负责了。对于最终用户，既然无服务器，自然就没有任何需要维护的了。YEAH！ 关于费用问题，我在使用了一段时间的AWS之后，感觉费用还是很低的。我这里说的不是那些EC2，而是AWS中的诸多微服务，比如Lambda, APIGateway之类的。 接下来就要开始这个迁移了。希望一切顺利，在目前使用的VPS操作系统被迫升级之前全部搞完。","link":"/from-vps-to-serverless-planning/"},{"title":"从Gefion Fountain来说说丹麦和瑞典的百年爱恨情仇","text":"这次哥本哈根之行中抽空去看了看Gefion Fountain吉菲昂喷泉这个著名的景点。 也从网上查到了关于这个景点的一些传说。 wikipedia上是这样说的： 古代瑞典有位戈尔弗国王答应女神吉菲昂可以从瑞典国土挖出一块土地，但是限时一个昼夜。于是吉菲昂女神把她的四个儿子化为四头牛，用犁从瑞典国土挖出一大块土地，并把土地移到海上，就成为现在的西兰岛。 Gefion Fountain吉菲昂喷泉, 摄于2017.10.15 在和丹麦同事们闲聊中才知道原来还有另外一个版本。 相传从远古时代丹麦和瑞典就因为领土问题纷争不断， 于是吉菲昂女神就驾驭神牛耕出了一条分界线， 从而化解了纠纷。 姑且不论哪个传说更受大众承认， 但我听到的第二个传说却更能反应出丹麦和瑞典两国由来已久的各种纷争和百年的爱恨情仇。 其实在早期，也就是1523年以前，丹麦是北欧当之无愧的霸主，他的历史上也是英才辈出，比如哈拉德蓝牙王，玛格丽特女王等等。 周边国家都是俯首称臣。 但慢慢伴随着丹麦皇族内斗和瑞典的崛起， 丹麦在漫长的对瑞典的战争中国力逐渐削弱， 慢慢就变成了现在这样的小国。 而瑞典则实现了从一个跟班小弟到北欧老大的成功逆袭。 发展至今， 两国仍然在各种经济领域竞争。 但在对外时， 他们却都会异口同声的声称自己是北欧人。","link":"/gefion-fountain/"},{"title":"准备客串油漆工","text":"最近随着扩建项目的进展，建筑工人已经开始在砖墙上订Plasterboard，订好后再抹上一层水泥后就可以给墙上刷漆了。由于我很喜欢刷漆这个活，又能省下将近两千英镑，因此决定买套工具自己来刷。 之所以喜欢刷墙漆，是因为感觉这个活非常有成就感。想象一下，把一面水泥墙按照自己喜欢的颜色，及组合刷成自己喜欢的样子，真的是一个很好玩的过程。曾经带着孩子们一起刷过，他们也非常喜欢。 当然，在刷的时候，也有一些比较麻烦的地方。比如：如果天花板和四面的墙刷的是不同颜色的话，其接壤处就需要特殊的处理，否则两种颜色的边界不清晰的话，就很难看了。因此这绝对是一个细活，也是非常耗费时间的。另外，由于房子有的地方的高度超过三米，需要高空作业，也就会大大增加操作难度。 关于墙漆的选择，目前主要有三种质感的漆：Matt，Silk，和High Gloss。其中的High Gloss就是高光墙漆，刷出来墙面非常光滑。除此之外的Matt和Silk两种都属于亚光的，也是目前最为流行的选择。因为家具选择的都是亚光的，因此墙漆肯定也要选择亚光的了。 除了质感之外，就是颜色的选择。首先可以选择市面上已经配好颜色的各种墙漆。当然，这些已经配好的墙漆只有最为常见的颜色。 现在更受欢迎的一种方式则是先选择色卡，色卡的名字也非常有趣，像”gentle kiss”, “little angel”等。选好色卡后，工作人员会给专用机器中输入相关参数，现场就会把漆配好装桶。这种方式能够确保颜色的一致性，同时还能避免过多库存而造成的浪费。 现在已经把刷子，滚筒，墙漆等都准备好，只等一切就绪后开刷！","link":"/get-ready-for-painting/"},{"title":"试用Gitpod在线IDE","text":"在使用Github的时候一直感觉其在线代码编辑功能有所欠缺。要使用Github上的源代码，只能clone到本地，用本地IDE编辑后再提交/推送到Github。这就导致我在写代码的时候严重依赖于自己的本地开发环境。在越来越多应用程序网页化的趋势下，有没有一个这样的APP，可以在网页中同时编辑代码，调试，提交呢？答案是肯定的，Gitpod就是这样一个工具。 Gitpod可以很智能的根据你提供的源码仓库地址来创建Docker镜像并启动相应的环境。这些运行环境是在基于Google云架构的多个Kubernetes集群中运行的。如果需要的化，你也可以自定义docker镜像。一般只需要等待几秒钟的时间，Gitpod就会把在线开发环境创建好，包括云端的Linux容器和在线IDE。 Gitpod的智能化还体现在，它可以根据URL来启动Gitpod工作区。比如：从GH issue启动Gitpod将会自动创建分支，从PR启动Gitpod则会自动切换为Code review模式。 Gitpod对开源软件完全免费，但有每月50个小时的限制。不过这对于自己业余时间的项目是足够用了。如果全职工作想用这个平台，有多种付费选项： 下面看一看如何使用gitpod。 首先需要通过OAuth在Github授权Gitpod访问你的Github账号。 对于任何一个Github项目，只需要在前面添加： https://gitpod.io# 就可以在gitpod中打开该项目。比如：在gitpod打开我Fork过来的HiveAccountRecovery工具: https://gitpod.io/#https://github.com/aafenguk/HiveAccountRecovery 如果把Chrome全屏的话，界面和VS Code非常相似： 如果安装了Chrome扩展，当你访问Github项目时，就会看到对应的Gitpod按钮： 如果想要在浏览器中看看这个基于HTML/JS页面的效果，可以在终端窗口运行： gp preview file://$GITPOD_REPO_ROOT/index.html 或者在命令行窗口运行如下命令，则会热加载代码： npx browser-sync start -s -w 也可以创建.gitpod.yml文件，并加入上面的命令： tasks: - init: &apos;echo &quot;TODO: Replace with init/build command&quot;&apos; command: &apos;npx browser-sync start -s -w&apos; 这样，在每次加载Gitpod的时候，就会自动运行这个应用。 这里只是介绍了如何配置/使用一个基于HTML/JS的简单项目。如果需要更多的定制化配置，可以参考Gitpod建议的开发步骤：","link":"/gitpod/"},{"title":"Java应用程序性能调优的神器 - Glowroot","text":"最近遇到一个Java Web应用中的性能问题。在某个时段整个程序的响应时间过长。在分析了日志后没有任何头绪。于是祭出了Glowroot这个Java性能调优的大杀器，终于将问题找了出来。下面把这个强悍的工具向大家介绍一下。 安装及配置首先在其官网下载压缩包。如果对其源码感兴趣的话，这里是其Github页面。将压缩文件下载并解压缩后会在相应子目录(glowroot)中看到glowroot.jar这个文件。 由于我是对Tomcat容器中的程序进行性能调优，因此需要将Glowroot对应子目录的所有者改为运行Tomcat的用户，我这里是”tomcat”。这么做的主要原因是因为Glowroot在运行时需要创建logs, tmp等子目录并要在其中创建文件。 sudo chown tomcat:tomcat glowroot 接下来需要在启动Tomcat的时候添加JVM的参数。如果是通过apt方式安装的Tomcat，那么配置文件在：/etc/default/tomcat8，添加如下内容： -javaagent:/opt/york/digilib/glowroot/glowroot.jar 至此，就可以进行测试了。重新启动Tomcat，访问本机的4000端口： http://localhost:4000 就可以看到Glowroot的主界面了： 主要性能指标首先，在Glowroot中可以很方便的查看响应时间的瓶颈，甚至能定位到具体的某个类。比如，在下图中可以看到spring controller占用了响应时间的83.9%，这肯定不正常。其实，我性能调优最后的结论就是spring controller出的问题。最终的解决方案也是基于这个发现的。 还可以查看各个线程的资源使用，同样，其分析结果直指spring中的doGet方法： 除此之外，还有对各种REST API调用的分析等。 进一步配置Glowroot有一个配置文件：admin.json。在刚安装的时候，你是找不到这个文件的。你可以选择自己手工创建它。但由于刚开始使用时不知道该如何进行配置，这里建议先不要管它，直接重新启动Tomcat，这样在Glowroot被首次启动后，就会在其目录下创建admin.json这个文件。这个时候你就可以在其基础上进行修改了，这样就会简单的多。 Glowroot的默认配置下，只能从本机访问，如果要从外部访问，可以更改这一段： &quot;bindAddress&quot;: &quot;0.0.0.0&quot;, 如果要更改端口： &quot;port&quot;: 4000, 默认设置下，匿名账户具有管理员权限，这肯定是要改的。以下会添加新用户’admin’，将匿名用户(anonymous)的角色改为’Anonymous’，并添加一个新的角色“Anonymous”： “users”: [ { “username”: “admin”, “password”: “xxxxxxxx”, “roles”: [ “Administrator” ] }, { “username”: “anonymous”, “roles”: [ “Anonymous” ] } ], { “name”: “Anonymous”, “permissions”: [ “agent:transaction”, “agent:error”, “agent:jvm:gauges”, “agent:jvm:threadDump”, “agent:jvm:heapHistogram”, “agent:jvm:mbeanTree”, “agent:jvm:systemProperties”, “agent:jvm:environment”, “agent:config:view”, “admin:view” ] } 总结之前也用过jvisualvm进行Java应用程序的性能调优，但感觉它特别吃内存，会严重影响服务器的性能。Glowroot似乎没有这个问题，添加这个模块后并没有感觉服务器的性能下降。同时，感觉Glowroot更加直观好用，能够迅速定位到出问题的类，以及相应的线程。从而帮助你快速找到问题的根源所在。","link":"/glowroot/"},{"title":"物以类聚，人以群分","text":"中国有句古话，物以类聚，人以群分。说的是东西按照相似的类别来区分，志趣相投的人也会聚集在一起。现在越发感觉这句话讲的真的是非常有道理。它不仅适用于国人，即使对于很多英国人，亦是如此。 最近接触的Builder团队就是如此。由于有一个靠谱的builder牵头，聚在他周围的电工，水暖工，泥瓦工，木工等等，和他的风格都非常相似，对人都非常友好，办事靠谱，善于为他人着想。自从工程开始，我们对他的团队100%满意。 在英国这里有一个有趣的说法：人和人之间是会有化学反应的。如果两个人的气场不对付，那么从第一眼起，两个人就会觉得彼此不顺眼。如果两人投缘，那么很快就能确定，这就是我的菜。 记得早些年参加一些工作面试的时候。感觉只要基本面差不多，就是看彼此对方的感觉了。对于那些气场对的面试官，整个面试过程是非常轻松愉快的，时不时的在面试过程中还会开几个小玩笑。整个面试结束了，不需要等通知，就知道八九不离十了。但对于那些气场不合的面试官，他们会给面试者莫名的压力，整个面试过程也是紧张而痛苦的，其结果也就可想而知了。 其实这一点说大了的话可能就是所谓的企业文化吧。在英国这里有一家大家都喜欢的超市A。他家是我见过客服最好的超市，没有之一。无论任何事情，他们都能站在客户的角度来思考，把客户的利益放在第一位。我接触过他家的所有客服脸上，永远都是招牌式的微笑。 与之相反的是另一家超市M。他家的客服也不能说是不好。但总感觉差了那么一点点。每次需要退货的时候，从客服人的脸上就能看出他们的不友好。他家客服的脸上，似乎在大大的写着，你为什么要退货？ 过去每当我听到“门当户对”这四个字的时候，总是把它当作封建糟粕来看的。现在回过头来一项，其实它也是有一定道理的。当然，我这里说的是概率，不排除个例。对于门当户对的人来说，其生活环境类似，三观基本一致，共同语言就会有很多，因此走到一起的可能性就会更大。 总之，物确实以类聚，人确实以群分。","link":"/group/"},{"title":"H. C. Andersen Fairy-Tale House安徒生童话屋游记","text":"一说到丹麦，很多人的第一印象就是安徒生童话。可以说安徒生是丹麦的国宝级人物。我们的这次丹麦之行自然要去拜访一下安徒生童话屋H. C. Andersen Fairy-Tale House。在童话屋中可以看到各种还原的经典童话场景，比如： 拇指公主， 美人鱼，皇帝的新装等等。在里面还可以看到介绍安徒生的生平， 安徒生的亲笔手稿以及收听安徒生的童话。 下面照片均拍摄于2017.10.14 童话屋的位置很方便，就位于最为热闹的市政厅广场一侧。地址： Rådhuspladsen 57，1550 København V，Denmark 一进入童话屋，首先看到的是这座安徒生的雕像。和市政厅广场的那座相比，这座雕像中的安徒生略显年轻。 同时在入口处还可以购买童话屋旁边的一个冒险屋门票，里面是各种恐龙和怪物，我家两个宝贝对那些东西不是很感兴趣。 购票进入后首先被这个神奇的水龙头所吸引，龙头中的水柱虽然很粗但其中的水一点都不会出来。估计水中掺了一些其他成份吧。 在童话屋中再现了安徒生很多著名图画中的场景，同时配有语音讲解。这是皇帝的新衣，神奇的是皇帝在照镜子的时候有时候镜子中看到的是穿着衣服，有时候则没有穿。这个我本来也没有发现。后来晚上到了酒店察看媳妇照得像片时才发现这个不同。 坚定的锡兵 最著名的小美人鱼，这个故事在讲解的时候，背景灯光会不断变换，在美人鱼面向的城堡那里会显现出一个女巫的影像。 拇指姑娘 在这里介绍安徒生的生平，包括他的童年，以及搬到哥本哈根后的生活和创作。 这里展示了安徒生最著名的童话书 另外，在这里还能收听3种语言的安徒生童话介绍（英语，中文，丹麦语）。其中有两个故事使用中文讲述的，我家两个宝贝听的非常认真。","link":"/h-c-andersen-fairy-tale-house/"},{"title":"理发","text":"最近我和儿子的头发长了，但因为疫情原因，并不太想去理发馆理发。于是理发的重担只能落在媳妇的身上了。 在英国生活这么多年，已经习惯了这边比较“简易”的理发方式。在国内的时候，都是和理发师讲清楚自己想要什么发型，或者有什么特殊要求，然后理发师就会按照要求理发。 在英国的话，理发店分为两种：Hairdressing shop 后者Barber shop。前者收费较贵，由专门的发型师来设计发型，因此效果相对较好。而Barber shop只针对男士，其收费较为便宜，但一般不需要预约，而且理发的时间非常快。我的很多男同事都选择去这种Barber shop。 记得刚来英国的时候，不知道该怎么和发型师沟通。在去理发店之前还专门在网上搜索了一下如何描述自己的发型。到了理发店后发型师似乎还不是很明白。等到最后理好发之后，还是发型师告诉我，以后再到理发店，只需要告诉发型师，两鬓需要2号，头顶需要6号，或者打薄就可以了。 当初刚来英国的时候，英镑十分坚挺，因此当时觉得理个发的话好贵啊。好多男同学们发现到了理发店中理发师也是使用不同型号的推子来理发。既然这样简单，为什么不互相理发呢？经过实践后，大家发现理发确实很简单。哈哈，我的第一套理发用具就是那个时候买的。 但后来慢慢适应了英国这里的物价，同时每次在家理发的时候，事先准备，事后收拾工作都有点太麻烦了。于是把自己的理发工具彻底尘封了起来，彻底改成去理发店了。 自从今年年初，由于疫情原因，众多理发馆都被迫关门。因此只能把尘封多年的理发工具再次拿了出来。记得在视频会议的时候，看到那些单身的同事们，头发长的有些惨不忍睹。好在前一段时间逐步解封后，理发店重新开张。刚开张的前几天，很多理发店门口都排起了长长的队。 期待能够尽快再次封印我的理发工具，生活重返正常。","link":"/haircutting/"},{"title":"说说英国的万圣节Halloween","text":"今天去超市购物的时候发现Morrisons已经在大力促销各种万圣节的商品了，感觉在英国这里的万圣节一年比一年更热闹了。记得去年Morrisons超市的万圣节商品还没有这么多。今年摆满了整整两排货架。孩子们也都超级期盼万圣节，经常会有各种Party，还能挨家挨户的去要糖。下面来看看英国的这个鬼节都需要准备什么。 首先是需要准备各种道具。其实英国人在这方面还是脑洞很大的，除了经典的骷髅，僵尸，吸血鬼，女巫等等，好多人自己动手设计各种恐怖造型。记得两年前在我家搞的一个万圣趴，有一个朋友自己设计了一个恶鬼的面具，看起来超级恐怖，来我家要糖的孩子们被吓哭了好几个。哈哈，打算吓人的小鬼被大鬼给吓走了。 同时还有各种挂饰可以买回去装饰一下，更有万圣节的气氛。 另外英国这里的一个万圣节经典食物就是各种裹上糖的苹果，比如：Toffee Apple和Candy Apple，这个我是从来不买，毕竟孩子的牙齿还是要保护好的。 当然，过万圣节的话，南瓜灯肯定是主角之一。每年都要带着孩子们刻上一个南瓜灯。而且这里的很多学校在万圣节前会举办各种南瓜灯比赛，看看谁的南瓜灯最吸引人。这里似乎还有一个约定俗成，在万圣节那天如果谁家门口有南瓜灯，表示欢迎上门要糖，如果没有南瓜灯也没有任何万圣节装饰代表对万圣节不感兴趣，就不要上门打扰了。 感觉心情受着孩子们的影响，对万圣节也是有些期待了。","link":"/halloween/"},{"title":"国外经典儿童图书推荐之：Handa&#39;s surprise","text":"这次给大家推荐的这本图书是”Handa’s surprise”。最初接触到这本书的时候，只是觉得里面的插图非常漂亮，故事情节非常吸引人。但后来听一位在英国幼儿园工作的朋友介绍这本书时，才明白这本书中讲述的还有一些我没有想到的东西，比如，可以借助这本书的情节和孩子玩角色扮演游戏。后来我自己的两个孩子也是乐此不疲，家里的水果也就遭了殃。经常无数次被摔在地上，或者被遗落在了家中的某个角落了，直到彻底打扫卫生的时候才被发现，已经发霉长毛了。。。 书中讲述的是一个小朋友Handa选择了7种自己喜欢的水果送给自己的好朋友，有又甜又软的香蕉，有甜美多汁的橙子，还有非常creamy的牛油果，等等。在一路上水果不断被各种动物偷吃，快到她好朋友村庄的时候，水果已经快被偷吃完了。这时候正好碰巧遇到一直山羊撞到了一颗桔子树上，树上的桔子落了下来，Handa的水果筐里盛满了桔子。等到了她好朋友的村庄后，两个好朋友一看，满筐的桔子，而桔子正是Handa的好朋友最喜欢吃的水果。想想，这真的是一个大大的惊喜啊。这可能正应了中国的一句古话： 有心栽花花不开，无心插柳柳成荫。","link":"/handa-s-surprise/"},{"title":"丰收","text":"秋天到了，家中苹果树上的苹果已经开始陆续成熟，掉在了地上。收获季节开始了，可以开始不断收获家中自己种植的苹果和梨了。 自从搬到现在的House之后，由于后花园很大，因此专门开辟出一块菜地，基本上每年都会种一些蔬菜。同时也栽种了苹果，梨，李子等果树。 说起来很有意思。当地英国人更喜欢种花种草，把自己的花园装扮的更加漂亮。而我接触到的很多留英华人家庭则更倾向于种植各种蔬菜水果，自给自足。还有一些超级喜欢种菜的人，甚至可以从政府租赁一块菜地，叫做allotment。这种allotment经常需要排队很长时间才能轮到。 说到蔬菜品种的选择，其实很多华人都是颇费心思的，不远万里的从国内带来了各种菜籽。我也曾经带过来一些菜籽，但后来也就习惯从英国这里直接购买了。 我个人更喜欢种一些不太需要打理的蔬菜，比如：小葱，韭菜，西红柿，角瓜，四季豆等。尤其是韭菜，尽管在英国当地的华人超市中可以买到，但其价格较贵。因此很多人选择在自己家中种植。我自家的韭菜，基本上每年也就施施肥，浇浇水就可以吃到韭菜盒子和韭菜馅饺子了。也种过角瓜，扁豆等菜，但往往虫子的速度总比我快，菜长好后往往先被虫子吃了。 除了家中的苹果树，梨树，还种了草莓，黑莓，覆盆子，和蓝莓。对于前三种水果，其生长速度是惊人的，其根茎经常会疯狂侵占周边的空地。因此反倒是要想办法限制它们的生长。 自从今年疫情开始，有了更多时间在家，打算专门再开辟几块菜地，多体验一下丰收的快乐。","link":"/harvest/"},{"title":"英国田园生活 - 养鸡","text":"哈哈，有点标题党了，不是我家养鸡，是邻居家养的。邻居家最近开始养鸡，共有四只个头较大的母鸡，还有5只个头较小的。 从此，我家也跟着沾光了，每天都会听到他家母鸡的“咯咯哒”，也会看到他家孩子们每天都满怀希望的去检查鸡舍，如果能够收获到鸡蛋，孩子们会特别的高兴。让我不禁在想，是不是我家也该养上几只？ 其实在英国养鸡，涉及到的麻烦事还真不少。 首先，是许可的问题，似乎必须经过政府相关部门的批准才可以养，否则会有麻烦。 其次，在英国这里，鸡的天敌-狐狸非常多。因此，在养鸡的时候一定要在鸡舍周边添加防护，以防止那些偷鸡贼。我家邻居几年前养的一窝鸡就曾经被狐狸给一窝端了。 还有，如果哪一天改变主意了，不想养了。你可以把鸡送人，也可以卖给别人。但如果想把鸡杀了吃肉，那么麻烦就来了，你必须以法律规定的方式宰杀才可以。说白了就是不能虐待动物。 记得小的时候，家中就曾经养过几只小鸡，当时就非常喜欢，去照顾它们，把小鸡一点点养大，看着她们下蛋，再去收获鸡蛋。现在想起来也觉得好玩。真的有点动心，是不是该给孩子们养上几只，培养一下他们的责任感？","link":"/hen/"},{"title":"Hive的账户恢复操作及相关工具推荐","text":"在前几天的一篇文章中提到了如何更改恢复账号。那么，如果密码真的被盗，该怎么使用恢复账号来更改自己的密码呢？下面介绍一下账号恢复操作的逻辑，并推荐一个进行账号恢复的工具。 图源：Pixabay 账号恢复操作的逻辑以我的一个测试账号 aafuk 为例，当初我使用了 aafeng 这个账号来创建的 aafuk，因此 aafuk 的恢复账号就是 aafeng。那么，如果 aafuk 的密码被盗，在30天之内是可以通过恢复账号，这里是 aafeng 来重置 aafuk 的密码的。这里 aafuk 对 aafeng 是信任的，因此可以由 aafeng 来恢复 aafuk 的密码。但是，系统设计巧妙的一处就是：在整个密码恢复的过程中，aafuk 既不需要提供被盗的密码给 aafeng，也不需要提供 自己想要设置的新密码给 aafeng，仅仅需要提供新密码对应的公钥就可以。 账号恢复操作步骤感谢 @reazuliqbal 提供的账号恢复工具，其访问地址为：https://reazuliqbal.com/HiveAccountRecovery/ 下面步骤中使用 aafeng 来恢复 aafuk 这个账号的密码： 第一步，由 aafuk 操作首先单击“Recover Account”，并输入待恢复账号(这里是aafuk)，新密码 (可以由这个工具来生成，也可以使用自己设定的密码）。 然后单击“Get Public Owner Key”来生成公钥。嗯，似乎出问题了。原因在于我这个测试账户在过去30天内没有更改过密码，不能往下继续。这也意味着如果你的密码被盗超过30天，似乎就没法恢复了。 好吧，为了进行这个实验，我把 aafuk 的密码改了一下，继续： 这次可以了，得到了一个公钥： New public owner key: STM6e9UQLs5DRKd1ttCeAZWf5Hdqs24aun1rSw459WpgE7Qibcajv 接下来，把公钥发送给你所设定的恢复账号，这里这里 发送的是公钥，不是密码，发送的是公钥，不是密码，发送的是公钥，不是密码。 第二步：由 aafeng 操作 访问这个页面：https://reazuliqbal.com/HiveAccountRecovery/request-recovery.html 依次输入待恢复账号，第一步获取的公钥，恢复账号，以及恢复账号的 Active Key，然后单击 “Submit Recovery Request”。 系统提示这个请求已经被成功提交。 这时在 hiveblock 上查看，从 aafeng 和 aafuk 的账号中都可以看到这个交易： 第三步：由 aafuk 操作接下来可以输入前面生成的新密码，还有你账户的旧密码： 单击“Recover Account” 提示账号已经成功恢复。 使用新密码登录，成功！","link":"/hive-account-recovery-and-tool/"},{"title":"将Hive文章备份到静态站点","text":"这两天做了一件工作：将Hive/Steem上自己发的文章进行了整理，并备份到自己的静态站点上： https://www.aafeng.uk 之所以这样做的原因是因为已经在Steem/Hive链上坚持把自己生活中的一些琐事记录在区块链上。初始时不觉得，最近越来越觉得对自己来说是件很有纪念意义的事。毕竟上面记录了自己生活中的点点滴滴。万一有一天其依托的区块链挂了，我这些信息怎么办？？？ 我选择了自己最熟悉的 Hexo来生成静态站点。主题则选择了 Icarus。 对于我个人而言，使用这个静态站点更为便捷。首先是其分类非常清晰，我自己在每个分类中的文章数一目了然。 其归档功能也让我能迅速的定位到某个时段的文章。 同时还有一个时间线： 这样，无论以后进行浏览还是查找，都非常方便了。更为重要的是，我把自己的数据和图片都备份到了本地（备份图片时还真的有些坑。。。）。万一链真的断了，我也不怕了。当然，还是希望链越做越大的。","link":"/hive-backup/"},{"title":"将Hive文章保存到Elasticsearch的尝试","text":"一直对Hive的搜索功能不是很满意。在工作中使用过不同的框架，这些框架提供的搜索功能中，facet，关键字标红等可以说是标配。但在Hive中一样都没有。其原因我也能理解，毕竟从链上读取数据，这些数据中不包含需要的信息，自然也不太容易实现这些功能。那么，如果把链上数据保存到Solr或者Elasticsearch中，不就能增强其搜索功能了吗？下面记录一下把Hive中的文章信息保存到Elasticsearch中的步骤。当然，下面只是一个简单的实验，想做到一个真正能工作的网站还有很多工作要做。 安装Elasticsearch下载Elasticsearch: https://www.elastic.co/cn/downloads/elasticsearch 解压缩： tar xvf elasticsearch-7.7.0-linux-x86_64.tar.gz 运行： cd elasticsearch-7.7.0/bin ./elasticsearch 在本地用curl测试一下： curl localhost:9200 其输出应类似于： { &quot;name&quot; : &quot;YOUR_SERVER_NAME&quot;, &quot;cluster_name&quot; : &quot;elasticsearch&quot;, &quot;cluster_uuid&quot; : &quot;liHA066AQJeE91lv8lLqig&quot;, &quot;version&quot; : { &quot;number&quot; : &quot;7.7.0&quot;, &quot;build_flavor&quot; : &quot;default&quot;, &quot;build_type&quot; : &quot;tar&quot;, &quot;build_hash&quot; : &quot;81a1e9eda8e6183f5237786246f6dced26a10eaf&quot;, &quot;build_date&quot; : &quot;2020-05-12T02:01:37.602180Z&quot;, &quot;build_snapshot&quot; : false, &quot;lucene_version&quot; : &quot;8.5.1&quot;, &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;, &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot; }, &quot;tagline&quot; : &quot;You Know, for Search&quot; } 安装Kibana其实，要想使用Elasticsearch，不一定要安装Kibana。但有了Kibana，可以实现对Elasticsearch中的数据可视化。 从官网下载：https://www.elastic.co/cn/downloads/kibana 解压缩后进入config目录并修改kibana.yml: server.host: &quot;0.0.0.0&quot; 进入bin目录运行： ./kibana 可以看到如下界面： 导入如下电商数据进行测试： 打开devtool后进行一个简单的查询，可以看到如下数据： Elasticsearch中的重要概念在向ElasticSearch中插入数据之前，把其中的重要概念和传统的关系型数据库做一个对比： ES =&gt; RDB Index =&gt; DatabaseType =&gt; TableDocument =&gt; RowField =&gt; ColumnMapping =&gt; Schema 安装并测试Python elasticsearch模块首先安装elasticsearch模块： pip install elasticsearch 进入Python命令行，依次输入如下命令创建一个新的索引“hive-posts-index”： &gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; from elasticsearch import Elasticsearch &gt;&gt;&gt; es = Elasticsearch() &gt;&gt;&gt; es.indices.create(index=&apos;hive-posts-index&apos;, ignore=400) {&apos;acknowledged&apos;: True, &apos;shards_acknowledged&apos;: True, &apos;index&apos;: &apos;hive-posts-index&apos;} 如果要删除记录： curl -X DELETE &apos;localhost:9200/test-index&apos; 进入Kibana devtool界面，就会看到这个索引已经创建： 测试添加记录 es.index(index=&quot;hive-posts-index&quot;, id=1, body={&quot;any&quot;: &quot;data&quot;, &quot;timestamp&quot;: datetime.now()}) 读取记录： &gt;&gt;&gt; es.get(index=&quot;hive-posts-index&quot;, id=1) {&apos;_index&apos;: &apos;hive-posts-index&apos;, &apos;_type&apos;: &apos;_doc&apos;, &apos;_id&apos;: &apos;1&apos;, &apos;_version&apos;: 1, &apos;_seq_no&apos;: 0, &apos;_primary_term&apos;: 1, &apos;found&apos;: True, &apos;_source&apos;: {&apos;any&apos;: &apos;data&apos;, &apos;timestamp&apos;: &apos;2020-06-02T15:52:40.759337&apos;}} 将Hive中的帖子插入到Elasticsearch中写了一个简单的程序，将我最新5篇文章的标题，正文，分类保存到ES，并以permlink作为ES中的id： from beem import Steem from beem.account import Account from datetime import datetime from elasticsearch import Elasticsearch es = Elasticsearch() hive = Steem(nodes = &apos;https://api.hive.blog&apos;) account = Account(&apos;aafeng&apos;, steem_instance = hive) posts = account.get_blog(start_entry_id=0, limit=5) for post in posts: author = post.author title = post.title body = post.body category = post.category permlink = post.permlink es.index(index=&quot;hive-posts-index&quot;, id=permlink, body={&quot;author&quot;: author,\\ &quot;title&quot;: title,\\ &quot;body&quot;: body,\\ &quot;category&quot;: category,\\ &quot;permlink&quot;: permlink,\\ &quot;timestamp&quot;: datetime.now()}) 在Kibana中进行查询： GET hive-posts-index/_search?q=*:* 从输出可以看出，我的文章已经保存到ES中了: 也可以使用curl验证是否已经将数据保存至ES： curl http://localhost:9200/hive-posts-index/_search?size=5 然后可以使用ES来进行各种查询了，比如： GET hive-posts-index/_search?q=title:必有 GET hive-posts-index/_search?q=category:hive-105017 查看所有索引： GET _cat/indices GET _cat/indices?v 查看一个文档： GET hive-posts-index/_doc/6ulbjb 显示所有Type: GET _mapping?pretty=true","link":"/hive-elasticsearch/"},{"title":"How to save Hive posts into Elasticsearch","text":"Elasticsearch is a great search engine providing a distributed, multitenant-capable full-text search engine. It provides features like facets, keyword highlighting etc in the search user interface. Here is a tutorial to index Hive posts into elasticsearch. Install ElasticsearchDownload Elasticsearch(ES) from the official site: https://www.elastic.co/cn/downloads/elasticsearch Decompress: tar xvf elasticsearch-7.7.0-linux-x86_64.tar.gz Then run the following command to start ES: cd elasticsearch-7.7.0/bin ./elasticsearch Use curl to test: curl localhost:9200 You will the the output like: { &quot;name&quot; : &quot;YOUR_SERVER_NAME&quot;, &quot;cluster_name&quot; : &quot;elasticsearch&quot;, &quot;cluster_uuid&quot; : &quot;liHA066AQJeE91lv8lLqig&quot;, &quot;version&quot; : { &quot;number&quot; : &quot;7.7.0&quot;, &quot;build_flavor&quot; : &quot;default&quot;, &quot;build_type&quot; : &quot;tar&quot;, &quot;build_hash&quot; : &quot;81a1e9eda8e6183f5237786246f6dced26a10eaf&quot;, &quot;build_date&quot; : &quot;2020-05-12T02:01:37.602180Z&quot;, &quot;build_snapshot&quot; : false, &quot;lucene_version&quot; : &quot;8.5.1&quot;, &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;, &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot; }, &quot;tagline&quot; : &quot;You Know, for Search&quot; } Install KibanaYou don’t have to install Kibana prior to using ES. However, Kibana provides lots of additional features to your data. Download from: https://www.elastic.co/cn/downloads/kibana Decompress and modify file: config/kibana.yml, add this line: server.host: &quot;0.0.0.0&quot; Run Kibana cd bin ./kibana You will see the following UI Import the E Commerence data for testing: Open the evtool and run a simple query, you will see: Important concepts in ESLet’s compare the terms in ES with relational database: ES RDB Index =&gt; DatabaseType =&gt; TableDocument =&gt; RowField =&gt; ColumnMapping =&gt; Schema Install and test Python elasticsearch moduleInstall elasticsearch via pip: pip install elasticsearch Enter Python interactive mode, and run the following commands to create ES index called “hive-posts-index”: &gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; from elasticsearch import Elasticsearch &gt;&gt;&gt; es = Elasticsearch() &gt;&gt;&gt; es.indices.create(index=&apos;hive-posts-index&apos;, ignore=400) {&apos;acknowledged&apos;: True, &apos;shards_acknowledged&apos;: True, &apos;index&apos;: &apos;hive-posts-index&apos;} As shown in Kibana devtool, the ES index has been created: Add a test document into your index: es.index(index=&quot;hive-posts-index&quot;, id=1, body={&quot;any&quot;: &quot;data&quot;, &quot;timestamp&quot;: datetime.now()}) Read the document you just added from ES: &gt;&gt;&gt; es.get(index=&quot;hive-posts-index&quot;, id=1) {&apos;_index&apos;: &apos;hive-posts-index&apos;, &apos;_type&apos;: &apos;_doc&apos;, &apos;_id&apos;: &apos;1&apos;, &apos;_version&apos;: 1, &apos;_seq_no&apos;: 0, &apos;_primary_term&apos;: 1, &apos;found&apos;: True, &apos;_source&apos;: {&apos;any&apos;: &apos;data&apos;, &apos;timestamp&apos;: &apos;2020-06-02T15:52:40.759337&apos;}} Add Hive posts into ES indexHere is a demo script to add my latest 5 posts into ES index: from beem import Steem from beem.account import Account from datetime import datetime from elasticsearch import Elasticsearch es = Elasticsearch() hive = Steem(nodes = &apos;https://api.hive.blog&apos;) account = Account(&apos;aafeng&apos;, steem_instance = hive) posts = account.get_blog(start_entry_id=0, limit=5) for post in posts: author = post.author title = post.title body = post.body category = post.category permlink = post.permlink es.index(index=&quot;hive-posts-index&quot;, id=permlink, body={&quot;author&quot;: author,\\ &quot;title&quot;: title,\\ &quot;body&quot;: body,\\ &quot;category&quot;: category,\\ &quot;permlink&quot;: permlink,\\ &quot;timestamp&quot;: datetime.now()}) We can query it in Kibana: GET hive-posts-index/_search?q=*:* The output suggests that my posts have been stored in ES: We also can use curl to test if my posts have been saved into ES: curl http://localhost:9200/hive-posts-index/_search\\?size=5 Now we have flexi way to query post data: GET hive-posts-index/_search?q=body:elasticsearch GET hive-posts-index/_search?q=category:hive-105017","link":"/hive-elasticserach-tutorial/"},{"title":"Hive Engine及5月1日的空投","text":"在说正文之前先说重点。Hive Engine将于5月1日对Steem Engine中ENG，EM，EM4代币的持有者进行空投，但前提是这些代币必须处于锁定 (staked) 状态，且不能处于解锁 (unstaking)的过程中。因此，如果持有以上的三种代币，请锁定并耐心等待空投。 其实自从Hive从Steem硬分叉之后，我一直在想是否会有一个和Steem Engine等同的Hive Engine出来？近期正好看到 @aggroed 的这篇文章。才知道Hive Engine已经上线，并将于5月1日进行空投。 其访问网址为：https://hive-engine.com/ 登录方式可以选择Hive的那些key来登录，或者选择Hive Keychain。我这里使用 Hive Keychain登录： 登录之后看到自己空空如也的钱包:-( 关于5月1日的空投，请参考这篇英文原文。文章中有些信息是针对代币发行者的，下面仅对部分我认为和普通代币持有者相关的信息进行摘要： We’ll be sun setting EMFOUR. Any holder of EMFOUR will receive an airdrop of 4 EM for every EMFOUR they own and we’ll remove EMFOUR from the market. 在Steem Engine上的EMFOUR代币持有者，将会获得EM代币空投，其比例为每个EMFOUR会获得4个EM。之后EMFOUR将被从市场中移除。 Many people hold ENG/EM/EMFOUR and are wondering what the future holds for them. I’m currently targeting a series of airdrops that would commence on May 1st. It will require ENG/EM to be staked and not in the unstaking process for it to count towards the airdrop. 在5月1日起会进行空投，但仅限于将ENG/EM锁定的持有者，且该代币不能处于解锁的过程中。","link":"/hive-engine-airdrop/"},{"title":"作为用户，看好Hive链生态系统，加仓HIVE","text":"自从上周六STEEM发生0.22.8888软分叉，冻结众多前见证人资产之后，昨天HIVE币价暴跌，最低时被腰斩。 关于HIVE和STEEM的硬分叉，双方可以说是各执一词，我就不在这里做过多评论了。但作为STEEM/HIVE用户，就目前而言，我更看好HIVE的生态系统。毕竟大多数的Dapp都迁移到Hive网络上了。包括这两天众多Dapp都要使用的基础服务Steemconnect也已经声明将于六月停止在Steem上的服务，在Hive上的hivesigner则可以正常使用。 由于HIVE有着一个完善的生态系统，因此我相信HIVE的币价会回归正常。在B网加仓了HIVE： 郑重声明，这只是我的个人行为，不能作为你的投资建议，风险自负。 作为一个普通用户，我更赞同早期Steem的宣传口号：Money talks，哪边把用户量做上去，把币价抬起来，哪边就能吸引更多的用户。目前我看到的是硬分叉前Steem中的大多数Dapp都迁移到了Hive网络，这样就会携带其大量用户进入Hive。当然，也期待孙老板能把Steem的蛋糕做大，币价也能做上去。","link":"/hive-hive/"},{"title":"如何在Hive上使用hivepy","text":"最近Hive和Steem分家，一直考虑原来在Steem下的一些程序如何能在Hive继续使用的问题。今天正好看到O哥发的这篇文章,很高兴的点进去看了看，原来O哥和我卡在同样的问题上了。 简而言之，就是提示找不到’hive’这个包。错误提示是： File &quot;/home/aaf/environments/myenv/lib/python3.5/site-packages/hive/cli.py&quot;, line 78, in legacyentry version=pkg_resources.require(&quot;hive&quot;)[0].version)) 其实，导致这个错误的原因是由于这里使用了错误的package名称，只要把这里的”hive”改为”hivepy”就可以了。 再运行： hivepy 可以看到； 需要注意，在调用hivepy库的时候，有些方法的名字发生了变化。必须做出相应调整，下面写了一个检查用户账号的测试程序： from sys import argv from hive.account import Account from datetime import datetime from hive import converter user = argv[1] user=user.replace(&quot;____&quot;,&quot;-&quot;) account = Account(user) cv = converter.Converter() print(&quot;Rep: %s&quot; % account.reputation(4)) print(&quot;HBD: %s, HIVE: %s&quot; % (account.balances[&apos;total&apos;][&apos;HBD&apos;], account.balances[&apos;total&apos;][&apos;HIVE&apos;])) print(&quot;SP: %.2f&quot; % (cv.vests_to_hp(account.balances[&apos;total&apos;][&apos;VESTS&apos;]))) print(&quot;reward_hbd_balance: %s&quot; % account.balances[&quot;rewards&quot;][&quot;HBD&quot;]) print(&quot;reward_hive_balance: %s&quot; % account.balances[&quot;rewards&quot;][&quot;HIVE&quot;]) print(&quot;reward_hp_balance: %.2f&quot; % cv.vests_to_hp(account.balances[&quot;rewards&quot;][&quot;VESTS&quot;])) 运行： python3 checkaccount.py aafeng 其输出为： Rep: 69.8117 HBD: 0.433, HIVE: 47.775 SP: 5344.49 reward_hbd_balance: 0.0 reward_hive_balance: 0.0 reward_hp_balance: 2.14","link":"/hive-hivepy/"},{"title":"试用Hive-js","text":"最近Hive更新了hive-js这个库，在阅读这这篇英文文章文章后，把要点概括一下： 使用steem-js的应用应切换到hive-js上，在下一个HF后极有可能steem-js无法正常在Hive上工作。 增加了节点的自动切换功能(alternative_api_endpoints)，如果一个节点出现问题，会自动切换到下一个节点。 下面进行了一个简单的测试。 首先创建test.js: &quot;use strict&quot; const hive = require(&apos;@hiveio/hive-js&apos;); // Read posts from Hive hive.api.getDiscussionsByCreated({tag: &apos;hive&apos;, limit: 10}, function(err, discussions) { for(var i = 0; i &lt; discussions.length; i++) { let post = discussions[i] console.log(post.title) } }) 运行如下命令安装hive-js： npm install @hiveio/hive-js --save 之后运行： node test.js 可以看到程序能够正常运行，但似乎还有一些hive-js的调试信息。相信开发者很快就会更新的。 整体而言，感觉把现有使用steem-js的程序改成hive-js的工作量不大，建议使用steem-js早做迁移，避免某一天程序突然不干活了。 Hive-js源码：https://gitlab.syncad.com/hive/hive-js 更多关于Hive-js的讨论请参考这篇英文文章。","link":"/hive-js/"},{"title":"Hive Keychain介绍","text":"最近试用了一下 Hive Keychain，感觉非常好用，向大家推荐一下。 Hive Keychain是做什么的？简而言之，Hive Keychain就是把你所需要的各种Key，主要是Active Key和Posting Key保存在Keychain里。这样你在进行相应操作，比如：转账等时不需要每次都输入那些key了。 安装Chrome Web Store 下载地址：https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep 单击“Add to Chrome” 然后按照提示进行安装，整个过程非常简单。 功能介绍单击Hive Keychain的图标，然后设置一个Keychain的密码： 首先需要添加各种需要的key，包括Active key，Posting key，和Memo Key。 这里，添加了我自己的posting key。 添加后就能看到自己账户的基本信息了： 如果要进行转账的话，需要添加Active key，需要在”MANAGE ACCOUNTS” -&gt; “你的用户名” 这里添加： 都设置好后就可以进行各种操作了：比如转账，查看转账历史，对见证人投票等。","link":"/hive-keychain/"},{"title":"Hive和Steem都已经分家了，绝大多数账户的恢复账户还都是Steem意味着什么？","text":"Hive从Steem硬分叉之后，发生了很多事情。其中有一点就是，所有的Steem账户都在Hive上有了一个”分身”，用户名相同，密码相同，所有的设置都相同。其中重要的一点就是：绝大多数账户的恢复账户(Recovery account)是steem这个账户。究其原因，这取决于账户的创建方式。如果是通过Steemit官网创建的，那么默认恢复账号就是’steem’，如果是通过别的账户创建的，那么，恢复账号就是其父账号。 那么，这意味着什么呢？如果你的Hive密码丢失了，那么你所设置的Recovery account是可以帮你找回密码的。过去在Steem网络中，steem属于’官方’账号，在丢失密码时可以向其寻求帮助来找回密码。但是，在Hive中，steem这个账号似乎没有这个义务来帮助用户恢复密码了。 那么，对于众多Hive用户来说，建议更换Recovery账号，这样万一不幸丢失密码，可以多一层保险。推荐设置为自己家人或者好友的账号作为恢复账号。甚至，设置一个小号作为恢复账号都可以。 如果打算修改系统恢复账号，可以有以下几种方式： 首先，可以通过peakd.com来进行恢复。在首页中单击”ACTIONS”-&gt;”Keys &amp; Permissions”， 然后选择：”Recovery account” 然后按照提示进行操作就可以。在操作过程中需要提供Owner Key。 第二种方式：写一段简短的代码来实现这个操作。我是信任peakd.com这个网站的，但还是不想提供自己的Owner key给第三方。这时，可以通过Beem库实现这个操作。毕竟这是开源软件，可以读一下源代码明白是怎么运作的。具体更改恢复账号操作的源代码如下： import beem username = &apos;aafeng.test&apos; wif = { &quot;owner&quot;: “YOUR_OWNER_KEY” } hive = beem.Steem(nodes=[&apos;https://api.hive.blog&apos;], keys=wif) account = beem.account.Account(username, steem_instance=hive) account.change_recovery_account(new_recovery_account=&apos;aafeng&apos;) 运行这段程序，可以看到，我测试账号的恢复账号更改操作已经提交。 需要注意的是，出于账户安全的考虑，这个操作需要30天才能完成。 关于更多恢复账号的讨论，可以参阅这篇英文文章：https://peakd.com/witness-update/@engrave/review-your-recovery-account-if-you-dont-want-to-lose-your-assets","link":"/hive-steem-steem/"},{"title":"实时推送Hive区块链信息到Telegram客户端（1）","text":"Hive的网页客户端有一个消息通知功能（Notificaitons），每次登录Hive之后，就会看到和你账户相关的信息，比如：谁给你点赞，留言，转发，提到你等等信息。 但是，通过这种方式来查看各种通知的体验并不好。首先需要打开hive/peakd的页面，然后需要从菜单中选择查看通知才能够看到。而且，我们不可能总去刷Hive的网页吧。因此，更为便捷和方便的方式就是通过读取Hive区块链的信息，进行分析，找出自己感兴趣的信息，然后发送给自己的Telegram客户端/其他客户端。 要实现这个功能，需要考虑以下这些因素： 1）区块链信息的读取。这部分可以通过调用Hivepy库中的相关功能来实现。2）定义你感兴趣的规则。比如：所有给你点赞的信息你都想得到通知，某位大鲸发的所有贴子你都想得到通知，任何和你账户相关的转账操作。等等等等。3）配置一个Telegram机器人，一旦第二步中有符合条件的消息，发送给Telegram客户端。当然，这里非常灵活，你可以配置自己喜欢的客户端，比如Slack，Discord等等，道理都是类似的。 这篇文章主要来说一说如何检测Hive区块链的信息。 基本思路就是：首先获取当前区块，然后检测当前块中是否有自己感兴趣的信息，如果有的话，存储到一个变量中以便后面发送/处理。之后向前回溯上一个区块，再做同样的检测，如此进行下去，一直检测到指定数目的区块后停止。 这里就涉及一个基本的问题：究竟该向前回溯多少个区块呢？这就取决于你这个程序被执行的频率了。举个例子，如果你这个程序每三秒运行一次，而Hive区块链每三秒生成一个块(印象中Steem区块链是每三秒一块，Hive应该没有变)，那么你的程序就不需要进行回溯了。如果你的程序每一分钟运行一次的话，那么你的程序需要回溯60/3 - 1次。 下面先看看如何读取当前区块： from hive import Hive from hive.blockchain import Blockchain hblocks = Hive() b = Blockchain() cb = b.get_current_block() print(cb) 运行上面程序，可以看到其输出结果为： {&apos;block_id&apos;: &apos;0285ea9524d0cc9609991b4e15f52dfbae4663a5&apos;, &apos;signing_key&apos;: &apos;STM6ZHuTjdyS2vPLsaTyd1bsguGo28jsNcKKASFFTbckBWNKpFqdo&apos;, &apos;timestamp&apos;: &apos;2020-04-07T11:07:54&apos;, &apos;extensions&apos;: [], &apos;transaction_merkle_root&apos;: &apos;ce9c9aea30054f975f69be2bbf852b1804c2eee1&apos;, &apos;transaction_ids&apos;: [&apos;e2134800e3a04dd519d43242d33b938d446508b1&apos;, &apos;e5a979e66d092b5c4c2936bbdc68fa9287a244d9&apos;, &apos;c2cf361839450ab9f3a0176135edeb6d81b9bd90&apos;], &apos;witness&apos;: &apos;blocktrades&apos;, &apos;witness_signature&apos;: &apos;1fd20adda3b1f85adcb864661fef0d696a626b3eb9f4301b0381e69bd3aded604f4d77bfa409554ba4c0a42e43fe368ff992360039f2714e28f5b2fdb20356ad0d&apos;, &apos;previous&apos;: &apos;0285ea94c52b1aeda5ed28063a7c64fb5b881f31&apos;, &apos;transactions&apos;: [{&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 4010214059, &apos;transaction_num&apos;: 0, &apos;signatures&apos;: [&apos;1f116bb1406e8479fd0644e7e8288510f4ea61d65bd1614e03fd67e204c0c2fa0f1a4ebb3d0632131005b0c44f5191b75bec768e96b08c6fc983e049c5d1c61864&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;e2134800e3a04dd519d43242d33b938d446508b1&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:17:45&apos;, &apos;ref_block_num&apos;: 60034, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 10000, &apos;voter&apos;: &apos;news-steem&apos;, &apos;permlink&apos;: &apos;20200407t104855949z-post&apos;, &apos;author&apos;: &apos;minimalpris&apos;}]]}, {&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 3413890307, &apos;transaction_num&apos;: 1, &apos;signatures&apos;: [&apos;205471fe218b0b09b9a0a2ad860286b0a110ebb6d7ef3df6b624b976506054fc645f1cfe2e371a236cd79bb97d7a7a8682ffa00994d3fefd18bf62289ebc3a3e63&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;e5a979e66d092b5c4c2936bbdc68fa9287a244d9&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:08:21&apos;, &apos;ref_block_num&apos;: 60051, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 4000, &apos;voter&apos;: &apos;retinox&apos;, &apos;permlink&apos;: &apos;it-was-all-about-green-a-restful-pleasant-color&apos;, &apos;author&apos;: &apos;priyanarc&apos;}]]}, {&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 3519458629, &apos;transaction_num&apos;: 2, &apos;signatures&apos;: [&apos;204064b9720aa2aa1a8380e7b81bdb0f332a628608db586fd4a9abf1ddd03fa4137d7db804973b639032a0683f1108a1a1ed0b71c1ec4c8dd0df59fd8a6b192cfe&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;c2cf361839450ab9f3a0176135edeb6d81b9bd90&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:17:48&apos;, &apos;ref_block_num&apos;: 60035, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 600, &apos;voter&apos;: &apos;ctime&apos;, &apos;permlink&apos;: &apos;it-was-all-about-green-a-restful-pleasant-color&apos;, &apos;author&apos;: &apos;priyanarc&apos;}]]}]} 如果向前回溯一次，共读取两个块的代码如下： NUMBER_OF_BLOCKS_TO_CHECK = 2 for i in range(NUMBER_OF_BLOCKS_TO_CHECK): print(&quot;block id: %s&quot; % cb[&quot;block_id&quot;]) print(&quot;==========================&quot;) for transaction in cb[&quot;transactions&quot;]: for operation in transaction[&quot;operations&quot;]: print(operation[0]) previousid = int(cb[&quot;previous&quot;][:8], base=16) cb = b.hive.get_block(previousid) 其运行结果如下： block id: 0285eb1b051eb25a0475e4867499303f48d7d77e ========================== transfer vote custom_json vote vote block id: 0285eb1aff2e699579bdd7136493f3a5ea4dedbf ========================== vote vote vote vote vote vote vote vote vote vote vote vote 至此，我们已经可以读取块中的信息，下一篇文章会说说怎么定义感兴趣的规则。","link":"/hive-telegram-1/"},{"title":"实时推送Hive区块链信息到Telegram客户端（2）","text":"在上一篇文章中讲到了整个程序的思路，以及如何读取Hive区块链信息，并回溯N个区块。在这篇文章中讲讲如何在区块信息中过滤信息，并根据自己定义的规则生成待发送的信息。 图源：pixabay 首先，需要定义一些用于筛选信息的规则。这里的一个基本原则就是所定义的规则一定要和程序代码分离，这样最终的程序才容易维护。任何时候想要更改规则的话，只需要修改定义规则的配置文件，而无需修改程序代码。比如： rules: votes: any_to_aafeng: from: &quot;*&quot; to: aafeng exclude: aafeng,aafeng.test min_weight: 20 上面定义了一组规则：除去’aafeng’和’aafeng.test’之外的任何用户对’aafeng’这个用户的点赞，如果点赞额度&gt;=20%，则符合这个规则。 再举一个关于转账的规则： transfers: any_to_aafeng: from: &quot;*&quot; to: aafeng min_account: 1 aafeng_to_any: from: aafeng to: &quot;*&quot; min_account: 0 上面规则定义了：任何向’aafeng’转入的金额&gt;=1，符合规则。任何从’aafeng’转出的金额&gt;=0，符合规则。这条规则对于监测账号的资金变化非常有用。 除了上述的两类关于点赞和转账的规则，你还可以定义很多规则，比如：留言，发帖，提到你等等。道理都非常类似，这里就不一一例举了。 规则都定义了好了之后，我们需要考虑在程序中如何支持这样的规则，下面是对点赞规则的实现： HIVE_BASE_URL = &apos;https://hive.blog/&apos; # check if there is a matched vote rule def get_vote_message(vote_rules, transaction): messages = &apos;&apos; try: t_voter = transaction[&quot;voter&quot;] t_author = transaction[&quot;author&quot;] t_weight = transaction[&apos;weight&apos;]/100.00 t_permlink = transaction[&apos;permlink&apos;] for vr in vote_rules: # check exclude if t_voter in vote_rules[vr][&quot;exclude&quot;].split(&quot;,&quot;): continue # check if voting weight matches if t_weight&gt;0 and t_weight &lt; vote_rules[vr][&quot;min_weight&quot;]: continue # check voter and votee matches if (t_voter==vote_rules[vr][&quot;from&quot;] and t_author==vote_rules[vr][&quot;to&quot;]) or \\ (&apos;*&apos;==vote_rules[vr][&quot;from&quot;] and t_author==vote_rules[vr][&quot;to&quot;]) or \\ (t_voter==vote_rules[vr][&quot;from&quot;] and &apos;*&apos;==vote_rules[vr][&quot;to&quot;]): messages = messages + &quot;VOTE: %s --&gt; %s [%.2f]: %s/@%s/%s\\n\\n&quot; % (t_voter,t_author,t_weight,HIVE_BASE_URL,t_author,t_permlink) except Exception as e: traceback.print_exc() return None if messages!=&apos;&apos;: return messages else: return None 通过上面的程序，就可以从区块链信息中过滤出自己感兴趣的点赞信息了。下一篇讲讲如何配置Telegram。","link":"/hive-telegram-2/"},{"title":"实时推送Hive区块链信息到Telegram客户端（3）","text":"在前面两篇文章（第一篇, 第二篇）中讲到了如何读取Hive区块链信息，回溯N个区块，如何在区块信息中过滤信息，并根据自己定义的规则生成待发送的信息。下面介绍一下如何配置Python Telegram客户端并发送信息。 首先需要安装telegram-send这个包： pip3 install telegram-send 接下来需要进行配置，运行： telegram-send --configure 其运行结果如下图所示，提示你访问BotFather页面：https://telegram.me/BotFather 并创建一个机器人，随后需要将token粘贴过来。 打开上面的页面。如果你还没有Telegram账号，需要先创建一个。 这里我通过网页方式访问Telegram。 依次输入以下命令来创建一个你自己的bot： /newbot 你的bot名字 你的bot用户名 接下来你就会获得一个token： 返回Linux命令行界面，粘贴你刚获取的token。 打开你的bot页面，我这里就是：https://telegram.me/aafeng_bot 粘贴刚才命令行中获取的密码，bot就会提示已经配置成功； 测试一下，在命令行运行： telegram-send &quot;Hello, telegram&quot; 可以成功收到信息： 发送图片： telegram-send --image test.png 发送文件： telegram-send --file test.txt 在Python程序中发送Telegram消息： import telegram_send telegram_send.send(messages=&quot;test message&quot;) 把telegram部分和前面程序结合起来： telegram_messages = [] while i&lt;= number_of_blocks_to_check: for transaction in cb[&quot;transactions&quot;]: for operation in transaction[&quot;operations&quot;]: if operation[0] == &quot;vote&quot;: message = get_vote_message(vote_rules, operation[1]) if message is not None: telegram_messages.append(message) previousid = int(cb[&quot;previous&quot;][:8], base=16) cb = b.hive.get_block(previousid) i = i+1 if len(telegram_messages)&gt;0: telegram_send.send(messages=telegram_messages) 然后把这个程序放在cron job中，就可以检测区块链，把感兴趣的内容推送到你Telegram客户端了。","link":"/hive-telegram-3/"},{"title":"Hive常用工具&#x2F;站点总结","text":"自从Hive从Steem硬分叉以来，大量Steem用户开始使用Hive。但由于这个链还很新，因此很多人对常用的工具/站点并不是很了解。下面就总结一下，如有遗漏，欢迎在下面留言，我会经常更新这个页面的。 发帖Hive blog: https://hive.blog/ (源代码: https://gitlab.syncad.com/hive/condenser)Peakd: https://peakd.com/ 查看链上的交易Hiveblocks: https://hiveblocks.com/ 账号创建Hiveonboard 免费账号创建页面：https://hiveonboard.com/create-account?ref=aafeng源码：https://github.com/christianfuerst/hiveonboard Steemjiang免费账号创建页面：https://steemjiang.com/register源码：https://github.com/lemooljiang/lemooljiang.github.io Esteem免费账号创建页面：https://esteem.app/signup Claim / Create account:页面：https://reazuliqbal.com/AccountCreate/源码：https://github.com/CodeBull/AccountCreate 账户恢复arcange开发的页面：https://tools.hivechain.app/recovery/源码：https://github.com/VIM-Arcange/hive-Recovery reazuliqbal开发的页面：https://reazuliqbal.com/HiveAccountRecovery/源码：https://github.com/codebull/HiveAccountRecovery/ 各种Topic相关的dappTravel: https://travelfeed.io/ Hive clientBeem (Python)https://gitlab.syncad.com/hive/beem Hive-pythonhttps://gitlab.syncad.com/hive/hive-python Hive-rubyhttps://gitlab.syncad.com/hive/hive-ruby","link":"/hive-tool/"},{"title":"Hive Wallet迟迟不能用，如果想要转移资产该怎么办？","text":"Hive已经推出好几天了，但其钱包功能一直不能用，每次点击“Wallet”时，都会给出一个很不友好的出错页面： 那么，如果真的需要将自己持有的Hive / HBD等转移到其他账号，或者交易所的话，该如何做呢？其实也很简单，只需要写几行Python代码就可以实现这样的功能。我这里使用的是hive-python，但里面有个坑需要填。具体请看这篇文章：如何在Hive上使用hivepy 具体代码就很简单了： import sys from hive import Hive from hive.account import Account if len(sys.argv) !=7: print (&apos;Usage: transfer.py ACCOUNT ACTIVE_KEY TO AMOUNT HBD/HIVE MEMO&apos;) exit() _from = sys.argv[1] _active_key = sys.argv[2] _to = sys.argv[3] _amount = float(sys.argv[4]) _type = sys.argv[5] _memo = sys.argv[6] wif = { &quot;active&quot;: _active_key } hive = Hive(keys=wif) account = Account(_from) hbdbalance = float(account.balances[&quot;available&quot;][&quot;HBD&quot;]) hivebalance = float(account.balances[&quot;available&quot;][&quot;HIVE&quot;]) if _type==&apos;HBD&apos; and hbdbalance &lt; _amount: print(&quot;Account balance low: %s&quot; % (str(hbdbalance))) exit() if _type==&apos;HIVE&apos; and hivebalance &lt; _amount: print(&quot;Account balance low: %s&quot; % (str(steembalance))) exit() hive.transfer(_to, _amount, _type, memo=_memo, account=_from) print (&quot;transferred %s %s to %s&quot; % (str(_amount),_type,_to)) 运行： python transfer.py aafeng YOUR_ACTIVE_KEY aafeng.test 0.001 HIVE test 从hiveblocks可以看到转账已经成功。","link":"/hive-wallet/"},{"title":"在Hive下尝试免费账号的创建","text":"尽管用Resource Credit创建账号已经被很多人讨论过，但自己一直没有尝试。今天在Hive下进行了尝试。下面的操作只是针对那些对编写代码不是很熟悉的朋友们的。对于众多的程序猿们，完全可以自己写一个很简单的程序来实现这个功能。 首先声明，以下操作是针对一个第三方工具进行的。在操作过程中需要提供自己账户的Active Key，因此建议大家在操作完成后更改自己的密码。 首先访问如下网址：https://www.reazuliqbal.com/AccountCreate/ 其源代码在这里：https://github.com/CodeBull/AccountCreate 至于这个操作需要多少RC,可以在这里查询：https://beempy.com/resource_costs 接下来输入自己的用户名和Active Key 然后单击“Claim Account”，界面上就会提示“You have successfully claimed a discounted account!” 在Hiveblocks上查看操作记录，可以看到已经创建成功； 同时可以看到我的Resource Credit只剩下一半了。当然，HP越多，消耗的RC百分比越少。HP太少了，甚至无法进行如下的操作。 接下来就可以创建账户了。输入待创建账号的用户名和密码，以及自己的Active Key，单击“Create Account”，就可以创建账号了： 在hiveblocks上查看，可以看到新账号已经被创建： 感觉RC空着也是空着，不如先领取一些”discounted account“，如果真的需要创建账号时就很方便了。","link":"/hive/"},{"title":"Hiveonboard","text":"最近看到了Hiveonboard这个账户创建服务，感觉很有意思，和大家分享一下。其实很多dapp都提供账户创建服务，可以说各有各的特色，有的是免费的，有的是需要收费的。有的可以秒级创建账户，有的则需要等待几天甚至更长时间才行。那么，Hiveonboard有什么特色呢？ 工作流程首先，Hiveonboard提供的是创建账户的服务，而不是创建账户的功能。很多dapp具有创建Hive账户的功能，但Hiveonboard则为其他的dapp提供完整的账户创建服务。这样，其他的dapp就不必重新造轮子，而是专注于其核心功能上了。 从上图中可以看到，当dapp的用户选择了创建账户时，会被转向到Hiveonboard网站上，在完成了账户创建后，会返回该dapp。 安全性考虑为了避免一些恶意网站的利用这项服务实现钓鱼功能，Hiveonboard实现了一个白名单，只有白名单上的用户才能使用这项服务。如果有新的dapp需要使用这项服务，可以提交一个PR 调试模式为了便于dapp测试创建账户的操作，Hiveonboard提供了调试模式，这样在进行测试的时候就不会真正的创建账户，也不会进行手机验证。要使用调试模式，只需要在网址中添加参数：debug_mode=true https://hiveonboard.com/create-account?debug_mode=true 试用Hiveonboard自己尝试着从 tipu 网站开始，试用了Hiveonboard的账户创建功能，感觉还是很顺滑的。整个账户创建过程只需要不到2分钟的时间。中间需要验证手机号。 总结如果打算开发一款自己的dapp，但没有时间实现账户创建功能，可以考虑试用Hiveonboard，将其账户创建功能和自己的dapp结合在一起。","link":"/hiveonboard/"},{"title":"厚积薄发","text":"最近看了两篇截然相反的报道，可以说从正反两面阐述了厚积薄发这个似乎人人都知道的道理。 首先是关于李子染的一篇文章。李子染之所以成为宣扬中国文化的现象级网红，源于她的不急不躁，对每一个作品，每一个细节的精雕细琢。在经过数年的打磨之后，借着短视频这个风口，迅速蹿红。在欣赏她的每一个作品的时候，让人的心都能够静下来，跟着她的节奏，日出而作，日落而息，彻底放松。 另外一个则是创意社写的一篇关于小沈阳的报道。曾经以小品《不差钱》而迅速红遍全国的小沈阳，在最近的一次采访中，竟然说出了：“不敢再碰小品了，很受伤”。那么，到底发生了什么呢？在走红之后，很多影视公司向小沈阳抛出了橄榄枝，于是小沈阳拍了很多不及格的影片，自己也成了“票房毒药”。后来小沈阳在采访中自己也说过：“那时候真不会演电影，连机位都找不到。台词只是在嘴边，也没从心里出来。”可以这么总结，他在自己不擅长的领域，慢慢的消耗着观众对他的期望值，将观众的期望慢慢的变成了失望。 其实，正像中国有句成语，叫做厚积薄发。做任何事情都是需要积累的。如果太过于急功近利，让自己陷入焦虑之中，反倒没法成功。而真正厉害的人，都懂得厚积薄发的道理。如果李子染在初期就开始忙于应付各种广告，而不是继续花上两三年的时间打磨自己的作品，可能她早就“泯然众人矣”了。 在我的朋友圈中，很多的华人家庭都会让孩子学习钢琴和/或小提琴。当我家孩子参加各种钢琴和小提琴比赛中，无论到了哪里，都会看到很多华人家庭。当然，很多比赛的前几名经常会被华人小选手包揽。 但当进入到更高级别的时候，比如：英皇7级以上级别的比赛中，华人选手反倒很少会拿到名次了。究其原因，很多本地小朋友在学琴初期并不太注重参加这些比赛，而是更加注重把基本功打好，慢慢打磨自己对音乐的感觉。所谓十年磨一剑，等到年龄到了，才慢慢开始参加这些比赛，自己的实力也才慢慢显露出来。 看样子做任何事情都没有捷径啊。只有不断的打磨自己，不断提高，才能在机会来的时候有能力把握住。","link":"/hjbf/"},{"title":"Hole of Horcum徒步之旅","text":"周末约着朋友一起去North York Moors附近的Hole of Horcum徒步。 其实这里是North York Moors National Park的一部分。在附近还可以乘坐老式的蒸汽小火车到Whitby小镇。 徒步路线就是要绕这个大坑一周。 我们抄了一条近道，坑底有快乐的牛群在吃草戏耍。 感觉自己距离白云好近。。。 Posted using Partiko Android","link":"/hole-of-horcum-khqslogm/"},{"title":"热水与冰水","text":"在英国居住念头久了，感受到很多文化差异。有的差异非常有意思。比如：中国人爱喝热水，英国人则偏爱冰水。 图源：Pixabay 在英国餐厅吃饭的时候，无论是中餐还是西餐，经常会见到一些中国客人会和服务员要热水喝。早些年有些餐厅还不是很适应，当遇到这种要求的时候，经常给端上一杯温吞吞的水，因为这就是他们概念中的热水。实际上这些客人想要的是开水。但这几年来随着中国游客的增加，很多餐厅都为客人提供真正大家想要的开水。 在英国生活了很多年，有些生活习惯发生了变化。但就喝热水这条，并没有变。即使在有些地方没有热水，喝上一杯热茶，或者热咖啡也是好的。即使是两个孩子，也喜欢喝温水。以至于因为在学校中提供的免费牛奶是凉的，他们都不喜欢喝。 记得媳妇当年刚生完孩子，在医院中，护士直接就把一杯冰水端了上来。面对护士热情的服务，媳妇不好意思直接拒绝，只能放在桌上，事后偷偷倒掉了。之后再要求提供热水。慢慢的，医院护士们就都知道了中国人的这个习惯。 在国内刚生完孩子一定要坐月子。但这边根本就没法理解为什么要坐月子。很多刚生完小孩的过上一两天就带着孩子到处跑了。后来身边的一些朋友家也就没太重视这个习惯，很多年过去了，身体上似乎也没有任何不适。 在英国这里，如果孩子发烧了，医生建议的方式就是物理降温，把孩子的衣服都脱掉，光着小身子，以方便散热。每当和家里人聊天时，他们都会抨击这边的做法。 诸如此类的文化冲突还有很多，很多中式做法和西式做法是背道而驰的。其实很难说哪种做法绝对正确。深处这种文化冲突漩涡的海外华人可能更多的是要多思考，多求证，才能做出最为正确的选择。","link":"/hot-water/"},{"title":"扩建工程记录","text":"最近家中进行扩建，主要是往花园中新建一间房，和现有厨房，客厅打通，连成一体。 下面把整个过程记录一下。 第一周房屋扩建从6月8日开始，第一周主要的打了地基，灌浇了混凝土，把影响地基的树墙砍掉了一部分。 扩建前的样子： 开始动工了： 第一周成果： 第二周进一步完成地基部分，把管道重新铺了一下： 开始砌砖，准备保暖层： 在地基上铺满石块，整个扩建出来的区域可以确定了： 第三周应该是在做隔湿层，黑塑料布下面，石块上面的是很厚的一层泡沫塑料。 接下来在泡沫塑料上浇筑了一层混凝土。至此，地面高度已经和现在房子的裸地基一样了。 同时外墙已经增高了不少，一侧已经需要脚手架才能干活了： 第四周这周下雨两天，所以只干了三天。主要就是把两边的墙垒高，在两层墙之间假装保暖层。 第五周把门框和窗框上的钢梁架好： 开始搭建房梁： 铺设很薄的一层防水层之后，开始铺瓦了： 第六周这周Builder只工作一天，因为他们还有一个未完成的工程，需要消失一周。 把房顶的瓦铺好，天窗装好了。 第七周这周Builder只来了两天，但非常出活。把旧厨房彻底拆掉了，并未下周架设钢梁做好了准备。 这是把厨房清空后拍的照片： 空荡荡的客厅： 即将承载客厅和厨房重量的主钢梁： 即将分隔客厅和厨房的第二根钢梁： 拆掉橱柜之后的厨房： 使用木板制作的墙，将现在客厅一分为二： 内外两侧用承重支架做好准备，下周要打掉承重墙！ 第八周这是最嘈杂，最脏的一周，两座承重墙被打掉了。这两天绝对不应该在家中的。我们第一天全家都离开了。第二天我想戴着耳机办公。但在客厅办公到一半的时候，工人们用电锯锯墙，灰尘非常大，从隔离墙的地缝中冲到了客厅，再漫延到楼上。很是狼狈。 周一架设的主钢梁： 周二架设的第二钢梁： 同时也看到了一楼房顶上被隐藏的横梁和地板： 发现墙上出现了一些裂缝。在网上查了一下，这个现象比较普遍。通常有两个原因：其一是在施工过程中由于受力不匀出现的临时性裂缝。其二是由于地基下沉造成的，这种情况就要注意观察了。如果裂缝持续变大，就要想办法了，比如：在地基周边打桩。我家这个应该属于第一种原因。 周四把门窗都装好了： 同时，水暖工和电工开始布线/管道了。Builder提示我们，在没有加platering board之前，最好把布线拍照，以便后续维护/维修用。 新客厅/厨房入口处开关布线： 岛台上方布线： 水池上方/有方布线： 水池周边布线： 主钢梁靠近Utility处顶端布线： 烤箱/油烟机上方布线 扩建处和邻居接壤上方/下方 餐厅上方预留线： 餐厅区布线, 为Summer House做了预留线。只不过图中的线由于暖气原因，被挪到了侧面。 周五开始做保温层了： 第九周这周主要是把Plasterboard都装好了： 另外就是在电视墙上装好木板： 第十周首先是Plaster来了两天，把所有的墙都抹好了。 然后我开始上阵，刷了踢脚线的漆，并在周末开始刷房。 第十一周这周主要是收尾，安装了四个室内门，同时Builder帮我们把家中积累的一些小问题集中处理了一下。 我开始正式刷墙。房顶是纯白色，选的就是多乐士的Brillant White. 墙体是浅灰色, 选的是Johnstones Acrylic Durable Matt, 颜色选择的是Pacific Pearl。 第十二周木工来安装厨房，没有想到的是安装厨房不仅仅是安装，还是一个木工活。木工需要进行切割，钻孔，找平等等众多的工作。 第十三周安装木地板 第十四周厨房/地板的一些边边角角厨房Worktop刷房(Hallway, 木漆)","link":"/house-extension-log/"},{"title":"房子扩建工程即将开始","text":"家中的房子扩建工程已经酝酿了很长时间。前一段时间由于全面停工停学，建筑工人也都被迫在家休息，因此工程就被拖了下来。今天Builder打电话说再过两周就来家中开始干活了。让我感觉似乎还没有准备好。 去年的时候我和媳妇就扩建这件事已经达成一致意见，今年四月份开工，预计2-3个月的时间，在暑假完工，正好趁着暑期把家中收拾好。谁想到整个计划被新冠病毒彻底打乱。现在Builder要求开工，我其实还是非常犹豫的。 如果现在开工，最坏的可能就是工程干到一半的时候疫情第二次爆发，会被迫停工。这样自己家将会长期成为一个工地，对生活的负面影响将会很大。 如果现在不开工，而是等待形式彻底明朗的时候再开工。问题就在于第一不知道什么时候形式会变得明朗，甚至不知道形式会不会变得明朗。第二是builder不会一直等我们，可能builder会去做别的工程。再过几个月就到冬季了，而冬季是不适合这种工程的。这样一拖就不知道何年何月才能再重新开工了。 好在我们选择的Builder是朋友推荐的，人非常好。总是在安慰我们，即使在当前疫情下，我们可以work together，想办法把工程按时完成。 在反复权衡之后，我们决定开工！就算疫情一时半会不会完全好转，但生活毕竟还要继续。人类可能要学会长期和病毒共存了。至于下一步如何，只能走一步看一步了。希望builder能够顺利把我们的工程做完吧。","link":"/house-extension/"},{"title":"如何在Ruby on Rails的项目中使用React","text":"下面总结一下如何在一个Ruby on Rails的项目中通过react-rails添加对React的支持。 首先在Gemfile中添加： gem &apos;webpacker&apos; gem &apos;react-rails&apos; 接下来运行： bundle install 运行： rails webpacker:install 如果提示Node版本过低的话，更新至最新版本： nvm install v14.15.1 再重新运行： rails webpacker:install 运行: rails webpacker:install:react rails generate react:install 如果在运行最后一条命令的时候遇到错误： Running via Spring preloader in process 4175 Could not find generator ‘react:install’. Maybe you meant ‘qa:install’, ‘rspec:install’ or ‘devise:install’ Run rails generate --help for more options. 可以运行如下命令来修复： spring stop 接下来就可以尝试创建一个组件： rails g react:component HelloWorld greeting:string 创建成功后如果需要在.erb文件中使用React组件： &lt;%= javascript_pack_tag &apos;application&apos; %&gt; &lt;%= react_component(&quot;HelloWorld&quot;, { greeting: &quot;Hello from react-rails.&quot; }) %&gt;","link":"/how-to-add-react-to-ror/"},{"title":"如何取消订阅赞赏公民","text":"首先，访问liker.land的设置页面： https://liker.land/settings/ ，如果没有登录，请使用自己的liker账号登录。 然后单击”赞赏公民 (生效中)”， 单击 “取消《赞赏公民》订阅”就可以了。","link":"/how-to-cancel-civic-liker/"},{"title":"秀秀我家的Human Calculator，同时推荐一个优秀的数学学习网站","text":"最近儿子迷上了一个数学学习网站Matheletics并且热衷于和全球范围内的小朋友们PK速算。他的最高记录目前是Level 2每分钟59道题，Level 3每分钟52道题。对于这个速度，我这个数学专业的都望尘莫及，我试了几次，自己最多每分钟也就能答对36道题。因此，儿子也被系统授予了”Human Calculator”的称号。看看他做题的样子，还真有点像个机器人。 Mathletics是一家澳洲公司3P Learning的旗舰产品，也是迄今为止我所知道的全球范围内最好的数学学习平台。在这个平台中有着来自世界各地不同学校和家庭的用户组成的全球性社区。里面不仅有根据教学大纲设定的各项学习内容，而且还有很多趣味活动。 感觉这个网站设计的成功之处就是引入了游戏中的升级和竞争机制。学生可以和全世界范围内的其他学生进行心算比赛，同时在做各种练习和比赛的时候还会得到积分和奖励。在英国应该有超过半数的学校都在使用这个网站。如果学校没有加入的话，也可以注册个人帐号。同时还有苹果和安卓的APP可以使用。","link":"/human-calculator/"},{"title":"英国皇家习俗 - 狩猎","text":"最近看到了一篇报道，仅仅7岁的英国乔治王子，也是皇室的第三顺位继承人，观看了他父亲威廉王子和其他人的狩猎活动。威廉和哈里也曾经在很小的时候就接触了这项传统的英国皇室运动。 在英国这边的环境整体而言保护的很好，各种小动物，像雉鸡，松鸡，野鸭，兔子，刺猬，狐狸等等随处可见，在我家的花园中就时不时的有雉鸡和狐狸造访。而动物保护主义在英国也是非常盛行的，一般情况下这些小动物活得都很自在。但有一个例外就是这项英国皇室传统运动：狩猎。 其实这项运动是源于法国的诺曼人。自从法国的诺曼底公爵征服了英格兰，这项打猎传统也传到了英国。慢慢的，英国的狩猎文化就慢慢的流行起来。 每年的春秋季，是英国皇室贵族的狩猎季。这时他们会穿上传统的红色猎装，在成群猎犬的拥簇的，策马扬鞭在英国的乡村田野上，充分享受狩猎带来的刺激。 在整个狩猎的过程中，狩猎者体验的是惊险和刺激，但对于猎物来说就比较惨了。以最为经典的猎物狐狸为例，通常是猎犬找到狐狸的洞穴后，将其驱赶出来，然后狩猎者骑马追逐狐狸，直到其精疲力尽后才将其猎杀。而且在猎犬追逐狐狸的时候，似乎也抱着一种猫捉老鼠的心态，并不是尽快将其猎杀，而是不断的追逐，等到最后玩腻了再将其猎杀。 近些年来处于动物保护的目的，反对的呼声越来越高。甚至在英国皇室内部，也有不少的反对者，其中包括已故的戴安娜王妃，和凯特王妃。 处于以上的考虑，很多狩猎者既不想放弃狩猎所带来的刺激和乐趣，又不想杀生，因此选择了一种折衷的做法，只是追逐猎物却并不猎杀。不过，在我看来这种做法也好不到哪去，那种被追逐的恐惧感岂不是要吓到那些可爱的小动物？","link":"/hunting/"},{"title":"身份冒用Identity theft","text":"前一段时间看到O哥的身份冒用的文章。其实身份冒用无处不在。今天就分享一个我亲身经历，而且还在发生的身份冒用的例子。 故事是这样的，我搬到现在的家已经快十年了。但大约从一年前开始不断收到很多收件人姓名为Joshua的信件。开始时我们只是觉得有点奇怪。在我们搬入之前的房主名字我们知道，但并不是信件上所说的这个人。我们觉得可能是更早期曾经住在这个地址的人的信吧。 我们一开始都会在信封上注明，此人不住在这里，并把信退回去。但信还是源源不断的寄送过来。最为夸张的就是有两次警察来敲门，并询问是否有Joshua这个人。和警察解释清楚了之后，警察倒是不再来了。但信件仍然不停的寄过来。 在此期间我们一直非常困惑，到底是什么原因让一个陌生人的信不断的寄到我家呢？直到前两天才明白了原因。两天前有人敲门，打开门一看，是一个壮硕的小伙，制服上写着“High Court Enforcement”，应该类似于国内的法警吧。他询问了Joshua是否住在这里，并把上门的原因和我们解释了一下：Joshua欠了别人的钱一直不还，因此他来上门讨债。 据说如果Joshua真的住在我家这个地址，又被法警堵在家中，那么法警有权利拿走他家中所有值钱的东西，以抵他的欠款。这听起来怪吓人的。不过还好，跟我们没有半毛钱的关系。 后来在网上查了一下，这是一种典型的身份冒用(Identity theft)。罪犯通过某种方式通过银行的地址验证。比如：罪犯在银行注册一个账户，留的是你的地址，然后他会盯着你的信箱。一旦有人来送信，他假装在你家周围，从邮差手中截获你的信件。现在很多邮差只是把信插在邮箱中，这样就很容易从外面把信取走。一旦他通过了银行的地址验证，那么，在使用他的银行账户行骗后，银行只能追踪到你的地址。通过这种方式，罪犯就成功的盗用了你的地址信息。 想一想各种犯罪手段还真的是防不胜防啊。好在我们已经和法警说清楚了，他要找的人绝对不在这个地址，以后他不会再来敲门了。","link":"/identify-theft/"},{"title":"今年首次来到宜家","text":"随着家中扩建工程进入尾声，需要添加一些新的家具。算算自从疫情爆发后从没有去过宜家。今天是今年第一次造访IKEA宜家家居。 其实，宜家家居是我们一直喜欢逛的家居店，在国内的时候就喜欢逛，后来到了英国后仍然喜欢。喜欢宜家的原因有以下几个： 喜欢他家的设计。每次到宜家，都会从他家的设计上获得很多灵感。即使最终没有从他家购买家具，但这些灵感仍旧非常具有启发性。 他家的服务超级棒。记得前一段时间在选择厨房的时候就曾经在网上看过几家最大的整体厨房公司包括宜家的客户评分，宜家的客服可以说是一马当前。 他家产品的质量靠谱，价格公道，配套说明非常清楚，容易操作。 孩子们非常喜欢宜家。毕竟宜家和普通店铺有很大的区别。对于喜欢过家家的孩子们，在这里有很多的“玩具”可以玩。 他家的餐厅做的很好，瑞典肉丸子一直是我们全家的最爱。同时他家的巧克力，瑞典饼干等小吃非常好吃。 到达宜家之前虽然做好了要排队的准备。但真正到达后，还是大吃一惊。排队的长龙来回折了好几次。我们足足等待了40多分钟后才进入到店里。 由于对人流的控制，店中的人数并不是很多： 最后终于转到了我们喜欢的餐厅： 吃到了久违的瑞典肉丸子： 今天的收获很大。不仅买到了很多需要的小家居物品，同时对家中任何布置获得了很多的灵感。估计不久还需要再去一趟。","link":"/ikea/"},{"title":"无限游戏","text":"最近看到有人推荐詹姆斯·卡斯的《有限游戏与无限游戏》这本书中的观点，感觉深受启发。在这本书中提到，这个世界上有两种不同的游戏：“有限游戏”和“无限游戏”。其中的“有限游戏”以取胜为目的，一旦有一方胜利了，游戏就结束了。而“无限游戏”则以延续游戏为目的，真正的赢家能够一直玩下去。 有限的游戏中会设定一些规则，或者边界。游戏玩家在边界内玩。规则存在的目的就是保证游戏会结束。而无限游戏玩的就是边界，也就是尽量把边界最大化，尽量让游戏延续的更长，让更多的人加入到游戏中来。 其实，在人类社会中，这两种类型的游戏都有很多。先来说说有限游戏。每个人从小就会经历很多考试，竞赛，这些都是以获取高分，或者赢得竞赛为目的。考试和竞赛结束了，游戏也就结束了。各种体育比赛亦是如此，参赛者以赢得比赛为目的，一旦确定了获胜者，游戏就结束了。 而无限游戏的一个最好例子就是人生。人都是在想尽一切办法来延续自己的人生。这个游戏没有赢家，你没有竞争对手。只是自己想要尽量让这个游戏尽量更长久些。 对于很多企业来说，管理者的思维会决定企业的经营策略。是把经营企业作为一个有限游戏，在不同的战场上以击败对手为目的，还是把它作为一个无限游戏，让企业能够长期一直发展下去？不难看出来，那些能够制定一个长期策略的管理者，其思维中一定渗透着这种长期游戏的概念。 当然，有些时候这种有限和无限的界限并不是很清晰。比如，拿婚姻来说吧。有的人觉得这是一个有限游戏，在众多追求者中赢得美人归，一起步入婚姻殿堂，应该就算赢得了这个游戏。岂不知，婚姻也是一个无限游戏，需要两个人的共同经营，尽量让这个游戏持续更长久。可能，对婚姻的态度，也就是说把婚姻看作有限还是无限游戏，将最终决定婚姻的质量。 其实，在考虑很多问题的时候，是可以两者兼顾的。首先从长远角度来考虑，这样就有了一个长期的目标。然后将这个长期目标拆解为一系列的短期目标，并逐个实现。","link":"/infinite-game/"},{"title":"instantbox - 让你随便折腾的Linux box","text":"经常会遇到这样的情况，在自己的工作Linux VM中需要试用一些软件包。这些软件包都会有一些安装程序。在安装这些软件包的时候可能会对自己的工作环境进行改变，比如，底层的模块版本会被新安装的软件包升级，从而导致自己的工作环境被破坏。尽管有一些方式，比如：使用系统快照(snapshot)，在出现问题的时候通过快照恢复工作环境。或者把要使用的软件包封装到一个Docker镜像中。但这些方法都有些笨拙。 而instantbox这个项目就是专为这种需求而生的。它可以在几秒钟内创建一个主流的Linux虚拟机，可以通过webshell访问。目前支持：Ubuntu, CentOS, Arch Linux, Debian, Fedora 和 Alpine。在这个临时的虚拟机中，你可以随便折腾。折腾完毕后随用随扔。因此它特别适合进行演示，测试等场合。 就像其宣传词中所说： Get a clean, ready-to-go Linux box in seconds. 下面看看如何使用instantbox。 首先运行如下命令安装instantbox： mkdir instantbox &amp;&amp; cd $_ bash &lt;(curl -sSL https://raw.githubusercontent.com/instantbox/instantbox/master/init.sh) 安装完毕后，启动docker镜像： docker-compose up -d 接下来就可以通过访问本地8888端口来使用instantbox了： 选择一款你想用的Linux的版本： 选择端口号，CPU，内存，以及临时VM的时长： 几秒钟后VM就已经被成功创建了： 打开webshell： 在这个虚拟环境中你就可以随便折腾了。它只需要占用你所分配的系统资源，而不会对系统安装性造成负面影响。","link":"/instantbox/"},{"title":"兴趣班鄙视链","text":"最近在朋友圈看到了一个非常奇葩的鄙视链 - 兴趣班鄙视链。说白了就是按照每小时所付学费的多少而形成的鄙视链。比如对于运动类的，马术 ＞ 高尔夫 ＞ 冰球 &gt; 击剑 ＞ 棒球/美式橄榄球 ＞ 花滑 &gt; 网球 ＞ 足球 ＞ 跆拳道 ＞ 羽毛球乒乓球 ＞ 游泳 ＞ 跑步。对于乐器类的，管风琴 ＞ 竖琴 ＞ 大提琴 ＞ 小提琴 ＞ 长笛 ＞ 萨克斯 ＞ 架子鼓 ＞ 钢琴。而对于棋类则是围棋 ＞ 国际象棋 ＞ 中国象棋 ＞ 军棋 ＞ 五子棋 ＞ 跳棋。 图片：Huddersfield市政厅，摄于2020年2月 之所以会形成这样的鄙视链，其根源在于对顶级教育资源的竞争。现在很多家长把目光瞄准了英国的顶级公校。而有一个相对稀缺的爱好，比如管风琴，就成为进入这些顶级学校的敲门砖。而像管风琴这样的大型乐器，只有在教堂，市政厅，顶级公学礼堂中才会有，能够教这种乐器的老师就更是凤毛麟角了，其课时费自然也就水涨船高了。 给自己孩子们报兴趣班的时候，根本没有考虑过太多因素，基本上是经过朋友推荐，及根据周边教师资源来选择的兴趣班。在上面鄙视链中“顶级”的马术，围棋我家孩子学过，最“底层”的钢琴和游泳班我们也学过，而这两项还是我家孩子坚持时间最长的两个班了。 其实在培养孩子的过程中，我们也曾经考虑过这个因素，如果今后想要拿到好的私校的OFFER，最好能够培养一个相对冷门的兴趣，也许这真的是一个敲门砖。我们甚至曾经考虑过把孩子的乐器从小提琴换为相对更为小众的大提琴。但最终还是没有变。毕竟，这些兴趣将会是陪伴孩子一生的朋友，如果为了升学而强迫孩子改学另一种他们不喜欢的乐器，岂不是家长把孩子们的“朋友”给赶走了？ 我的兴趣并不是很广泛，乒乓球是我最喜欢的运动。从小到大，在各个升学门槛的时候，这个兴趣从来没有帮过任何的忙。但在有些时候精神上有些疲惫，或者心情不好的时候，约上朋友打上一场球，出一身透汗，心情立刻就会好了起来。 我同样也希望自己的孩子能交上几个这样的“朋友”。在他们成长的过程中，难免也会遇到一些不顺心的事情，心情难免会有低落的时候。在那个时候，静下来拉上一首自己喜欢的小提琴曲子，或者去运动一下，通过这种方式来调整自己的心态，准备好再次出发。 其实，选择那些更为大众一些的兴趣爱好，还有一个优势就是多了一个和同龄人聊天的话题，也将成为孩子们和朋友们社交的一个途径。 因此，关于兴趣爱好班的选择，我还是更为宽松，首先要尊重孩子的兴趣，尊重孩子们的选择。其次是要给孩子们尝试各种兴趣班的机会，不试一下，他们怎么会知道自己喜欢什么？","link":"/interest-class/"},{"title":"Isle of Wight trip Day 1 - 怀特岛游记 - 第一天","text":"怀特岛是英格兰最美丽的小岛，也是很多英国人心目中的度假圣地。就连英国皇室也非常喜欢这座小岛，也经常来这座岛上度假。怀特岛上的景色非常独特，既有挺拔的山峰，也有干净漂亮的沙滩。同时岛上也是各种户外活动的天堂，可以在这里登山，冲浪，玩游艇等等。而每年六月份岛上还会举行盛大的音乐节，吸引了无数的游客。 The Isle of Wight is the most beautiful island in England just off the south coast of England and it is a very popular holiday destination. The British Royal family also likes this small island and visited it for a few times. The scenery on the Isle of Wight is very unique, including the mountains and beautiful beaches. It is also suitable for lots of outdoor activities such as climbing, surfing, yachting etc. The famous Isle of Wight Festival takes place here annually. 要去怀特岛，渡轮是首选的公共交通。我们从南安普顿坐渡轮上岛。我们需要排队把车开到渡轮上。渡轮上的设施很全，可以在上面就餐。同时也可以到甲板上欣赏海景，不过就是风有些大。 The Isle of Wight is easy to get to by ferries, and once you are here you won’t want to leave! There are up to 200 Isle of Wight ferry crossings a day operating from Portsmouth, Southampton and Lymington. We took the ferries from Southampton to East Cowes. 首先我们来到了怀特岛最著名的Sandown海滩。这里的海滩绵延几个英里，海滩中央有著名的码头。而且这里的沙子非常细，海滩也非常干净，海水清澈见底。同时因为在这片沙滩上曾经多次发现过恐龙的骨头碎片，怀特岛还有另外一个大名鼎鼎的绰号：”恐龙岛”。如果你去Sandown海滩的话，可以试着去找找看。。。Sandown Beach is one of the Isle of Wight’s finest and most popular beaches with miles of soft golden sands, together with Sandown’s pleasure pier sitting in the middle. Dinosaur bone fragments have been repeatedly found in the beach, therefore, Isle of Wight has another famous nickname: “Dinosaur Island”. 在Sandown海滩附近有很多英国著名的炸鱼薯条店，基本上都是几分钟的步行距离。我在去买炸鱼薯条的路上偶然发现了Royal China这家中餐，去买了份虾仁炒面，分量非常大而且味道还不错，记得是5英镑，感觉比吃鱼薯要好。! 下午我们又驱车去了位于Godshill的这个Model Village小人国。里面很好玩，有各种栩栩如生的房屋，建筑，交通工具，动物，当然，还有各种人物造型。里面也很适合照相。We went to the beautiful Model Village in Godshill. There are scale models of Shanklin and Godshill villages as they were in the 1920’s. Shanklin(尚克林)是怀特岛上的一个小镇，景色优美，建筑风格非常别致，尤其是那些房子的屋顶，让人仿佛置身于童话世界中。","link":"/isle-of-wight-trip-day-1/"},{"title":"奇特的仙人掌花园","text":"Lanzarote岛上的仙人掌花园非常独特，花园周边的田地中种满了仙人掌，感觉这里把仙人掌当成了一种作物来种植。 仙人掌花园里面有各种各样的仙人掌，高矮胖瘦，各种形状的都有！进入公园后，就仿佛进入了童话世界一样。里面还有一个风车，可以穿过咖啡厅登上去远眺。 Posted using Partiko Android","link":"/j8ab8abx/"},{"title":"龙舟赛","text":"一年一度的龙舟赛，从上午十点一直要赛到下午四点。 今年共有超过一百支队伍参赛，很多都是慈善机构组队参赛的。可以说我看到的绝大多数队伍都非常不专业，这点从选手们动作的一致性就可以看出来。但这并不影响参与者与观众的热情。","link":"/jha8ku8y/"},{"title":"女儿第一次攀岩","text":"女儿的第一次攀岩体验记录一下。 本来以为她会害怕，没想到竟然玩上瘾，爬了一遍又一遍。","link":"/jtngskwl/"},{"title":"如何在Jupyter中使用Turtle","text":"一直在使用Python Turtle教孩子编程。最近感觉Jupyter特别适合教学，那么怎样在Jupyter中使用Turtle呢？答案是mobilechelonian。 首先在Notebook中安装依赖库并进行测试： !pip install mobilechelonian !pip install matplotlib import numpy as np import matplotlib.pyplot as plt from mobilechelonian import Turtle from mobilechelonian import prepare_js prepare_js() 运行以上代码就会安装mobilechelonian。接下来就可以使用Turtle来画图了： from mobilechelonian import Turtle t = Turtle() t.speed(5) t.pencolor(&quot;blue&quot;) for i in range(4): t.left(90) t.forward(60)","link":"/jupyter-turtle/"},{"title":"开始使用Jupyter Notebook","text":"一直听说过Jupyter很好用，但自己并没有试过。最近在教孩子编程的时候正好尝试了一下，感觉确实很好用。它最大的优点就是把代码和程序运行的结果放在了同一个页面中。这样就特别适合初学者，一边学习，一边运行，直接能看到结果。当然，Jupyter的作用远不止这些，比如在Jupyter Notebook中可以添加程序代码，Markdown，方程式，图片等等各种类型的数据。可以用Jupyter来进行数据清理，数据转换，数据可视化，统计建模，机器学习等等。 其官方定义如下： The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more. 可以把Jupyter安装在本机，然后运行命令：”jupyter notebook”，它就会启动一个Web服务器，默认情况下会监听“8888”端口。 可以看到，在同一个Web页面中，可以编辑并运行代码，非常方便。这种直观的方式尤其适合初学者，让他们能够把注意力集中到要学习的内容上，而不是编程环境上。 同时，由于可以把Markdown和代码混排，特别适合老师们准备教案。不仅有文字说明，也有程序代码的源代码和运行结果。 Jupyter的另一大用途就是数据可视化，把代码和运行结果放在同一个页面，调整代码后，即刻可以看到更新后的图表，非常方便。比如，有人统计了印度的冠状病毒疫情数据，并做了相应的图表： 除了自己安装并运行Jupyter服务器之外，也可以使用很多云计算平台的相关服务，比如： mybinder: 这个网站可以把你提交到Github的Jupyter Notebook装载并运行，这样别人无需搭建环境，就能看到你Notebook的运行结果。 kaggle：在这个平台上可以创建自己的Notebook，也可以搜索，使用别人的Notebook。 Google colab IBM Watson Studio Paiza Cloud 感觉越来越喜欢这个工具了，打算花点时间进一步探索一下。","link":"/jupyter/"},{"title":"Jupyter的几个设置","text":"在前面的文章中介绍了Jupyter，但在进一步的使用中，发现一些需要设置/安装/配置的选项，比如：如何禁用默认的Terminal窗口，如何让多个用户使用Jupyter，如何在Jupyter中使用Turtle画图等。下面总结如下。 禁用terminal在默认情况下，打开Jupyter窗口后，可以新建一个终端窗口。在终端窗口中可以运行各种Linux命令。在终端窗口中使用的是运行Jupyter的用户，因此具有和该用户同样的权限。因此，如果打算和别人分享Jupyter，最好不要用权限过大的用户运行Jupyter，同时应该禁用终端窗口。不过，严格的讲，这并不能阻止恶意用户运行Linux命令，只要能运行Python脚本，就会有多种方式达到这个目的。但系统安全是一个渐进的过程。至少对于不太熟悉Linux的用户，如果一不小心进入终端窗口，再一不小心误删了文件，不也麻烦吗？ 要想禁止Linux终端窗口，可以在Jupyter的配置文件(用户根目录下.jupyter/jupyter_notebook_config.py)中添加一行就可以了： c.NotebookApp.terminals_enabled = False 可以看到，终端已经被禁用。 在Jupyter中设定多个账号默认的配置文件在/home/USERNAME/.jupyter/jupyter_notebook_config.py中。其初始设置非常简单： c.NotebookApp.allow_origin = &apos;*&apos; #allow all origins c.NotebookApp.ip = &apos;0.0.0.0&apos; # listen on all IPs 如果想要多个用户共同使用Jupyter，可以为这些用户设置不同的端口，密码，和工作目录。比如：可以创建配置文件：/home/USERNAME/.jupyter/user1_config.py: c.NotebookApp.allow_origin = &apos;*&apos; c.NotebookApp.ip = &apos;0.0.0.0&apos; c.NotebookApp.terminals_enabled = False c.NotebookApp.port = 8890 c.NotebookApp.notebook_dir = &apos;/home/user1/jupyter_notes&apos; 在运行Jupyter的时候指定配置文件： jupyter notebook --config /home/user1/.jupyter/user1_config.py 依次类推，可以为不同用户创建不同的配置文件，这样就可以彼此之间互不干扰了。","link":"/jupyter_settings/"},{"title":"Just dance","text":"最近家中新买了一个XBox上的健身游戏：Just dance。于是全家都有了一个共同爱好，跳舞。。。 最早的时候无论大人还是孩子，都是跟着“PE with Joe”做各种健身操的。可以说“PE with Joe”还是很专业的，只要照着做，不仅能够健身，还能减肥。但对于孩子来说，PE with Joe的吸引力还不够。 但在一个偶然的机会看到朋友圈中有人推荐Just dance这个游戏。这个游戏最大的亮点就是把趣味性和健身结合到了一起。尤其对于孩子，就在游戏当中达到了健身的目的。 最早在Youtube上跟着一些免费视频跳。但是这些视频其实都是别人在跳的时候录制的。屏幕上显示的分数都是别人的。因此缺少了互动性。孩子们也有些失望，毕竟无论跳的好坏，最后的得分都是一样的。 后来看到孩子们这么喜欢这个游戏，又是就购买了一个付费版本的游戏。在这个游戏中，可以通过智能手机上的客户端连接到Justdance的服务器。在每个游戏中可以根据参与者的表现来打分。 同时游戏的趣味性大大增加，比如可以选择各种流行歌曲，也可以选择各种主题，比如：Frozen冰雪奇缘，万圣节，圣诞节等等。这样，孩子们就可以和自己喜欢的角色一同跳舞。游戏中还有一个最为吸引人的部分就是可以和世界各地的游戏玩家PK，在每支舞中看看谁的得分最高，排名如何。让参与者感觉是和其他的真人在同台竞技。 感觉自从疫情开始后，这种类似的虚拟网络游戏应该要火爆很多吧。","link":"/justdance/"},{"title":"汉堡","text":"前一段时间去德国汉堡，一直没有时间整理照片，今天想起来了。","link":"/jusyt1k0/"},{"title":"万圣节南瓜灯展","text":"今天儿子学校举行一年一度的万圣节南瓜灯展。遗憾的是前几天因为去哥本哈根开会，回来后把这件事给忘记了。今天早上送儿子上学的时候才意识到，所以只能欣赏一下别人的南瓜灯了。每次学校都是要求孩子们早上上学的时候把自己刻的南瓜灯交到学校，然后下午放学后就会在学校的forest中布置好供大家参观了。 这是早上孩子们送到学校的南瓜灯 到傍晚时分南瓜灯已经布置好了 这个南瓜灯刻的比较糙，但牙不知道是什么做的，很有特色","link":"/k8a5v/"},{"title":"使用Kibana对Hive中文区数据进行可视化","text":"在前面介绍了如何把Hive中的帖子保存到Elasticsearch中。有了数据，就有好多玩法了。下面介绍如何通过Kibana对Hive中文区的发帖数据进行可视化分析。 关于数据的说明获取下面数据的代码，是根据上篇文章最后的代码稍作改编而得到的。作为演示，只读取了HIVE CN 中文社区的最新100篇文章。由于这篇文章的重点是介绍如何进行数据可视化，而不是可视化报告本身，后面有时间的话可以从链上把数据都抓取下来，放在ES中，那样生成的报告本身就更有意义了。 操作环境Elasticsearch: 7.7.0Kibana: 7.7.0 创建索引模式(Index Pattern)ES中的索引模式(Index Pattern)可以针对多个索引，因此在创建时支持通配符。 在Kibana的页面中选择：Kibana -&gt; Management -&gt; Index Patterns -&gt; Create index pattern 创建完毕后会看到如下界面： 可以看到有的字段可以被搜索的(Searchable)，有的字段是可以被聚合的(Aggregatable)。 在Kibana中查看数据单击Discovery后，可以输入KQL来检索数据。 比如，输入： author = aafeng 你会看到： KQL的语法和SQL非常相似，简单好用，比如： author = aafeng and created = 2020-06-08* 可以通过左侧菜单选择索引，以及字段。 Kibana可视化下面把每个作者在所统计的区间(这100篇文章所覆盖的时间段)内的发文数做一个统计，并以饼图的形式呈现出来。 选择Visualize -&gt; Create visualization -&gt; Pie，由于目前没有对源数据进行定义，因此，初始饼图看起来这是这样的： 选择Buckets -&gt; Add -&gt; Split slices -&gt; Terms，选取Author字段，并选择Metric: Count。 可以看到更新后的饼图： 最后不要忘记保存你的Visualization。 还可以把这些数据以不同的图形来展示，比如：柱形图。同时也可以通过KQL把数据做筛选后再绘制图形。例如：下面的柱形图展示了中文区6月7日的发帖统计：","link":"/kibana-visualization-hive/"},{"title":"使用Kibana可视化你的数据","text":"把数据保存到Elasticsearch之后，有一个重要的工作就是要对数据进行可视化，以便下一步的分析。下面通过一个官方的数据集来介绍如何通过Kibana进行数据可视化。 操作环境Elasticsearch: 7.7.0Kibana: 7.7.0 下载并导入数据从官网下载如下的数据集：https://download.elastic.co/demos/kibana/gettingstarted/accounts.zip 解压缩后会得到accounts.json这个文件，其大小大约为240K。 运行如下命令将数据导入ES： curl -H &apos;Content-Type: application/x-ndjson&apos; -XPOST &apos;localhost:9200/bankdemo/account/_bulk?pretty&apos; --data-binary @accounts.json 在Kibana的Devtool中验证数据已经被导入： GET /_cat/indices?v GET bankdemo/_search?q=*:* 其输出类似于： { &quot;took&quot; : 6, &quot;timed_out&quot; : false, &quot;_shards&quot; : { &quot;total&quot; : 1, &quot;successful&quot; : 1, &quot;skipped&quot; : 0, &quot;failed&quot; : 0 }, &quot;hits&quot; : { &quot;total&quot; : { &quot;value&quot; : 1000, &quot;relation&quot; : &quot;eq&quot; }, &quot;max_score&quot; : 1.0, &quot;hits&quot; : [ { &quot;_index&quot; : &quot;bankdemo&quot;, &quot;_type&quot; : &quot;account&quot;, &quot;_id&quot; : &quot;1&quot;, &quot;_score&quot; : 1.0, &quot;_source&quot; : { &quot;account_number&quot; : 1, &quot;balance&quot; : 39225, &quot;firstname&quot; : &quot;Amber&quot;, &quot;lastname&quot; : &quot;Duke&quot;, &quot;age&quot; : 32, &quot;gender&quot; : &quot;M&quot;, &quot;address&quot; : &quot;880 Holmes Lane&quot;, &quot;employer&quot; : &quot;Pyrami&quot;, &quot;email&quot; : &quot;amberduke@pyrami.com&quot;, &quot;city&quot; : &quot;Brogan&quot;, &quot;state&quot; : &quot;IL&quot; } }, …… 创建索引模式(Index Pattern)索引模式(Index Pattern)可以针对多个索引，因此在创建时支持通配符。 在Kibana的页面中选择：Kibana -&gt; Management -&gt; Index Patterns -&gt; Create index pattern 创建完毕后会看到如下界面： 可以看到有的字段可以被搜索的(Searchable)，有的字段是可以被聚合的(Aggregatable)。如果需要的话，可以自己更改这些字段的属性。 在Kibana中查看数据单击Discovery后，可以输入KQL来检索数据。 比如，输入： balance &gt;= 47500 and employer:a* 你会看到： KQL的语法和SQL非常相似，简单好用，比如： balance &gt;= 47500 and employer:a* and account_number &gt; 100 可以通过左侧菜单选择索引，以及字段。 Kibana可视化：饼图选择Visualize -&gt; Create visualization -&gt; Pie -&gt; Bank Demo 由于目前没有对源数据进行定义，因此，初始饼图看起来这是这样的： 选择Buckets -&gt; Add -&gt; Split slices -&gt; Range，同时设定不同的范围： 可以看到更新后的饼图： 还可以添加一个SUB-BUCKET，在现有聚合的基础上做进一步的划分： 最后不要忘记保存你的Visualization。","link":"/kibana-visualization/"},{"title":"宅家期间，少儿编程学起来","text":"近期一直宅在家中，难得有了很多陪伴孩子的时间。这也使得我能够了却一桩长时间以来的心愿：教孩子编程。 由于我本身就从事IT，因此也算有些优势，至少明白程序该怎么写。之所以想要培养孩子学会编程，主要感觉这是一项必备技能。无论他们以后从事什么工作，能够自己写一些代码，肯定对他们的工作和学习都会有所帮助。至于以后他们从事什么职业，这就不是我现在需要操心的了。 说干就干，那么该选择什么编程语言呢？很多学校都在似乎用Scratch这样的图形化编程语言。因为这种语言非常直观，让孩子们一看就能懂，容易上手。但我权衡再三，决定选择Python。原因有以下几个： 首先，Python是我个人最喜欢的编程语言。说起来也很有意思，Python并不是我工作中使用的编程语言，但我却对它情有独钟，除工作之外的程序基本上我都尽量使用Python。 Python的市场需求很大，应用面非常广泛。尤其是在数据挖掘和人工智能方面得到到大量的应用。如果孩子对编程感兴趣，那么以后肯定要接触人工智能的。那索性从开始就把这个最基础的工具学好。 Python完全适合8岁+的孩子们学习。无论是国内还是国外，都有很多同龄的小朋友们在学，而且效果似乎不错。 Python的库非常丰富，包括适合初学者的图形库，比如：turtle。因此更容易引起孩子们的学习兴趣。 这里推荐Trinket这个网站，在这里可以使用图形库turtle编写各种图形化的程序。这个网站就像是一个在线IDE，代码编写，运行在网上全都有了。 除此之外，skulpt这个网站也很不错。个人更喜欢其界面风格。 https://skulpt.org/ 还有Google的colab可以尝试： https://colab.research.google.com/","link":"/kids-programming/"},{"title":"育儿 - 早期智力开发真的好吗？","text":"最近孩子参加了一个国内的思维训练课程。在辅导孩子作业的时候，感觉作为一个6岁的孩子，所学的知识似乎有些太超前了。呵呵，不知道是因为国外对早期的智力开发并不是很提倡而导致的差异，我感觉对孩子的智力挖掘似乎有些过早了。 这个课程涉及的方面很多：数独，快速两位数加减法（技巧），空间想象力，推理能力等等。这还只是上课一个月以来接触到的，后续还会有很多知识点。 就拿今天孩子的一道作业题为例吧： 对于这道题，我首先考虑着既然是一道空间想象力的训练题，那么就靠脑子想吧。可是想了半天，不光女儿，就连我都想不出来。难道是我的空间想象力太差了？不应该啊，我毕竟是数学专业科班出身啊，当时大学期间的空间解析几何学的还是很好的。但就是没想出来。。。囧😳 再怎么讲，问题还是要解决的。正好家中有好多立方体玩具，于是采用了一个笨办法：把所有配件都做好，然后一个一个的拼接，看看怎么能拼出来？ 这是做好的组件： 然而，问题来了，就算拿着这些组件，按照各种组合尝试，我也是试了很多次才试出来。那么，怎么才能教会一个6岁的小朋友呢？于是果断的把这道题转换为一个简单的游戏，帮助女儿把正方体拼出来就好了，目前还是不做深究了。 和女儿同班的都是国内的小朋友，女儿在班中还是个妥妥的小学霸，几乎所有问题都是最早答出来的。那就意味着，这道题应该是所有小朋友都答不上来的。那么教育机构这样做是不是有些拔苗助长了？做不出来的话，有些打击家长和孩子的自信心；（家长）做出来了，似乎又很难和这么小的孩子讲清楚。 看样子，家长们还是需要淡定一些，不要陷入这种不必要的内卷。。。。","link":"/kids-training-classes/"},{"title":"少儿翻译计划","text":"最近看到朋友圈有人转发一个少儿翻译计划，看了一下感觉非常有意义，就给家中的两个小朋友报了个名。不过这个项目毕竟是要和国外知名出版社合作，对翻译的质量要求又非常苛刻，估计接下来的竞争会非常激烈，所以也没抱太大希望。 项目本身选材非常好，翻译的图书系列讲述的是各种动物的生命历程，比如：蝴蝶，鸭子，海归，熊猫，熊等等。这些书本身就非常适合小朋友们作为科普读物来读。 在翻译这套图书的过程中，小朋友们不仅需要精读书中的内容，学习书中的知识，还要用中文把意思清晰无误的表述出来。 归纳一下其优势： 学习知识 锻炼英语精读 锻炼中文表述 培养对事情的计划性 培养孩子顽强的品质：可以预期，翻译过程不会轻松，这样就更需要坚持才能完成这项工作。 其实我个人一直就很喜欢翻译。当初在S链上曾经风光一时的项目Utopian中，我也曾经作为译者和审核员参与了一些开源项目的翻译。感觉收获还是很大的。毕竟，在翻译的过程中，能够强迫自己学习很多有用的开源项目。但很遗憾的是，Utopian最终还是没能坚持下来。希望在Hive上还能有类似的项目。 现在已经报好名，静静的等待通知，希望能够顺利进入下一轮的面试。。。","link":"/kids-translation-project/"},{"title":"曲折的厨房预订经历，超级拼的英国销售人员","text":"原来一直以为英国人比较古板。一是一，二是二，不太会变通。如果想要讨价还价，几乎没有可能。一家公司如果有折扣，都会写在明面，即使客户主动要求进一步的折扣，一般也不会有结果。但这次家中整体厨房的购买过程中，彻底颠覆了我的观念。 为了讲清楚这个故事，先来说说故事中的几个主角： M公司：我家现在的厨房就用的是这家公司的。他家的产品质量非常好。而且在用户反馈网站上显示，他家的客服也是评分最高的。但他家的整体价格偏贵。 在我所住的小城，M公司就有好几家展示厅，可以直接看到厨房的效果。作为厨房界的一哥，他家的样板间做的非常漂亮。我们去参观后一眼就喜欢上了他家的厨房。不过他家的销售似乎感觉人不是很实在，一直在忽悠。让我们感觉不是很好。另外他家的价格要高不少，因此在初期就把他家排除在外了。 W公司：这是一家后起之秀，据他们的销售人员说他家的销量非常大。他家的质量也是非常棒的，但客服一直是他家的诟病，因此影响了他家的整体排名。 W公司也是朋友推荐的。对他家厨房的质量，大家都是非常赞赏的。他家的展示厅是最大的，同时他家的销售人数也是最多的。但和我们打交道的销售似乎有些迷糊，和他沟通的时候有些费劲。但他家的质量靠谱，价格给力。唯一的一点担心就是他家的售后服务。 H公司：这是建筑工人推荐的公司，也有朋友选用了他家的厨房。个人感觉他家的产品和服务都不错，但整体用户评分介于M和W之间。不过他家的销售的服务态度最好，感觉也是最专业的，整体感觉相处的最舒服。 第一轮结果：经过综合考虑，主要是产品质量和价格，我们初步选定了W公司。 在接下来的接触中，首先是H公司许诺可以和W公司进行Price Match。同时由于对W公司销售不是很满意。感觉有点倾向于H公司了。不知道是不是W公司的销售策略，在这个阶段他们又主动让利了，价格完胜H公司。 最出乎我们意料的是M公司。在沉寂了几周后，突然给我们打电话，说可以和W公司进行Price Match。鉴于M公司的用户综合评分最高，我们有些动摇了，但去他家的样板间看了一下后，感觉有些失望了。他家的销售仍然在忽悠，拿自家的低端产品和W家的高端产品进行Price Match。 感觉第二轮仍然倾向W公司。 但M公司的销售似乎并不死心。电话中说要用他家的高端产品和W家的高端产品进行匹配。不知道他说这话的时候自己信不信，反正我是不信。他家的综合评价高于W，类似产品的价格应该高于W才对。 不管怎么说，他们越是这样，对我越有利。我们现在只需要继续观望，把好关，选好自己喜欢的厨房，保证他们选择产品的质量上不要打折扣就好。不知道是不是疫情后，各家公司急需现金流，因此现在拼了血本打价格战？","link":"/kitchen-sales/"},{"title":"Google Analytics中的事件追踪","text":"对于Google Analytics，大家肯定都很熟悉了。我们可以使用GA来追踪用户对网站的访问量，还可以生成报表。对于GA使用最多的还是其对页面的追踪，比如：页面访问量，页面停留时间等等。其实，GA还可以通过其事件(Event)对于一些和页面不直接相关的数据进行追踪和记录，比如用户和页面的互动行为，并稍后生成报表。这些报表和页面访问量可以互补。 那么，什么是和页面无关的操作呢？比如：在一个文件下载页面，当你点击文件下载链接后，并不会把你直接带到一个新的页面，而是直接发文件到你的浏览器，进而下载。如果想要记录这种下载，就需要使用GA的事件操作了。在GA的事件中，我们还可以添加额外的信息，比如这个下载是针对视频文件的，下个下载时针对MP3的，还有下载是针对PDF的。这样稍后就可以根据这些信息生成更有用的报表了。 再举一个例子。在一个网站中，每篇文章可能有多名作者。那么怎么统计每个作者的文章访问量呢？我们就可以在页面装载后把每个作者的信息都保存在GA中，这样就可以得到我们需要的数据和报表了。 要想使用GA的事件追踪，可以在引入GA Javascirpt文件后，发出这个请求： _trackEvent(category, action, opt_label, opt_value, opt_noninteraction) 其中的category指的是事件的分类。这个分类可以非常灵活，比如对于文件下载而言，可以分为’video’, ‘audio’, ‘document’等等。 其中的action则是对应的操作。当然这种‘操作’可以是真的操作，比如：’download’,’play’,’stop’等等，也可以是任何符合逻辑的进一步细分。说白了，只要你稍后自己用的方便就好。 opt_label这个参数为可选的，它对应的文字信息，比如对于文件下载事件，这可以是文件名。 opt_value这个参数也是可选的，它对应的是数值信息，你可以选择适合的数字保存在这里。 opt_noninteraction用于设定这个事件是否会影响跳出率的计算，如果不想计入跳出率的话，就设定为true 在想好要存储什么信息之后，只需要一句简单的JS代码就能把事件信息存储到GA中： _gaq.push([&apos;_trackEvent&apos;, &apos;category&apos;, &apos;action&apos;, &apos;label&apos;, &apos;value&apos;, &apos;true&apos;]); 比如：对于文件下载事件，可以这样： _gaq.push([&apos;_trackEvent&apos;, &apos;audio&apos;, &apos;download&apos;, &apos;xbdkjk2sdfk.mp3&apos;]); 在把这些信息存储到GA之后，就可以通过GA界面来访问了。 可以看到，通过GA的事件，我们就可以看到对于每个文件下载的统计信息了。","link":"/google-analytics-events/"},{"title":"Get新技能 - 整体厨房的选购","text":"最近开始了一项艰巨的任务：选购整体厨房。最近可以说是把英国的主流整体厨房的品牌，像Magnet, Wren, Howdens等通过线上/线下的预约，已经都看了一遍。总算对整体厨房需要注意的地方有了一个基本的概念。 图源：Pixabay 首先说说整体设计。前面提过，在英国这里主流的厨房都是开放式的，厨房，餐厅，客厅都是连在一起的。同时，如果空间允许的话，一般会在厨房的操作台附近再添加一个岛台，把厨房的功能分区，同时还能增加储物空间。因此在选择厨房品牌的时候要考虑其整体设计，以及岛台的设计是否合理。 在厨房台面的选择上，主要有花岗岩(Granite)，石英石(Quartz)，木制，复合板(Laminate)等多种选择。大理石？在这边的几大品牌中，似乎都不提供。选择用石材作为厨房台面，其特点就是美观大气，经久耐用，但造价较高。目前设计师主推的是复合板材质的台面，其特点是各种样式，颜色的选择很多，造价相对便宜。如果过个几年不想要了，可以很方便的更换新的台面。 最近在整体比较的过程中有一项新的(可能也不新，但对我而言是新的)设计让我非常喜欢，那就是Handless，也就是说，橱柜，抽屉等都没有把手，这样的厨房感觉非常现代。因此我们在选择的过程中，把这种没有把手的设计作为必须考虑的设计要素之一。 在灶台的选择上，又有电炉，电磁炉，燃气三种选择。如果喜欢中餐中的爆炒，那么只能选择燃气灶。但在电炉和电磁炉之间，我们有些犹豫。目前越来越多的人选择电磁炉。但我似乎听过电磁炉有辐射，更倾向于电炉。最近在朋友家还看到了一个很奇葩的灶台，四个电磁炉灶口，外加一个燃气灶。把两者的优点结合在了一起。 面对这么多的选择，刚开始的时候我确实有些无所适从，但随着和各家品牌销售人员的沟通，慢慢的心理有了数。","link":"/kitchen/"},{"title":"Great photos in Burnby Hall","text":"We had a great family day out in Burnby Hall, here are some photos:","link":"/great-photos-in-burnby-hall/"},{"title":"试用AI加持的代码增强工具Kite","text":"平时写代码主要用IntelliJ和PyCharm，基本上还算满意。最近在一个很偶然的机会看到了Kite这个代码增强工具，试用了一下VS Code+Kite，感觉还是非常好用的，可以和IntelliJ IDEA这样的付费商业软件相媲美。 它支持的代码编辑器非常全面，包括：VS Code, IntelliJ, PyCharm, Sublime, Atom, WebStorm, Vim等。 就连Python之父也对其赞不绝口： 安装过程非常简单，首先在官网下载，然后运行安装程序。 安装中建议只选择你需要的插件以节省磁盘空间并提升速度： 对我而言，IntelliJ/PyCharm的代码补全功能已经够强大了，不需要Kite，但他们有些太臃肿。因此我只想把Kite安装到轻量级的编辑器VS Code中。 创建了一个Python源文件，试用一下： 感觉Kite的基于AI的代码补全非常好用，Kite会根据你的键盘输入自动显示相应的列表。和IntelliJ相比，毫不逊色。 还有一键调用文档的功能。 一旦激活后，只要把光标停留在对应的类/方法处，Kite窗口中就会显示对应的文档： 总而言之，Kite这个辅助编码工具还是很好用的，能够大幅度提高开发效率。有了它的陪伴，就可以更加愉快的编码了。。。","link":"/kite/"},{"title":"说说英国的Kumon课外补习班","text":"儿子已经上Kumon课外补习班快两个月了，他的数学和英语也有了明显的提高。虽然这个班真的不便宜，而且把家长们搞的很累，但感觉还是很值得。 首先，是孩子养成了做作业的习惯。在英国这里，小学的学习任务很轻松，老师也不像国内那么严格。因此，家长如果不抓的话孩子就彻底放羊了。有了Kumon，每天孩子感觉都有事干，慢慢就养成了学习的习惯。 其次，课程设计的很合理，让孩子知道了该学什么，也把相应的知识点练的滚瓜烂熟，长时间坚持的话会明显领先同龄孩子，从而在今后的各种考试中占尽先机。 感觉在英国这里整体的升学压力不大，因此要想让孩子的功课学的好，还有一些特长的话，拼的就是家长了。","link":"/kumon/"},{"title":"为国球助威加油，在伦敦观看乒乓球世界杯团体赛决赛！得到了龙队的亲笔签名！- 月旦评","text":"周末也就是2月25号，全家出动去伦敦观看乒乓球世界杯团体赛决赛。票是几个月前就订好的。当天赶上一大早的火车到了伦敦的Kings Cross火车站后又是一路狂奔才赶上到体育馆附近的火车。到了Copper Box体育馆后幸亏有好朋友给提前占好的座位，离赛场非常近！ 比赛现场布置的非常梦幻，星空般的背景，看台上到处都是中国球迷，无数给马龙，丁宁等国乒选手加油的条幅，还有处处可见的五星红旗。 首先开始的是女团决赛，由中国对阵日本。可能是比赛规则新的变化吧，先进行的是双打比赛，随之进行的才是单打。中国的丁宁、刘诗雯和朱雨玲对阵日本队的石川佳纯、早田希娜和伊藤美诚。整场比赛毫无悬念，中国队3比0轻松卫冕，实现了8连冠。 比赛期间的中国啦啦队也是异常卖力，不断给国手鼓气。我家的小球迷最是卖力，每次的加油声更是响彻全场。 场地中间还有各种售卖乒乓运动用品的商家。这家公司有很多小朋友绘制的各种图案的球拍底板： 这是英国的国手Paul Drinkhall 下午迎来的则是最为精彩的男团决赛，同样还是由中国对阵日本。首先是马龙/徐昕对阵上田仁/丹羽孝希，比赛期间有无数精彩的对攻。马龙自不用说，发挥非常稳定。而许昕那凶悍的正手更是大大超过了我之前的印象。以前只是在电视上看过，印象还没有这么深刻。现在在现场看才知道，他的那板正手弧圈球威力竟是如此之大，至少有超过半数的球都是一招制敌，对手根本就回不过来。 接下来的是樊振东 VS 张本智和，马龙 VS 丹羽孝希，两局都没有太大悬念，中国男队实现了七连冠。 感觉这次观赛的高潮要数最后的追星活动。非常幸运的在赛后获得了马龙的亲笔签名： 还有英国这届世界杯标志的乒乓球：","link":"/l6zby/"},{"title":"最近全家人超爱的一道下饭菜 - 红烧小羊腿","text":"最近媳妇按照网红美食博主小高姐的视频做了红烧小羊腿这道菜，成为全家人都喜欢的一道菜。下面把整个做菜的步骤记录一下。 首先上一张成品图： 这道菜需要提前一天做准备。首先把洗净的小羊腿上用尖刀扎一些个孔，这样在炖的时候容易入味。同时用盐涂匀后腌制一夜。同时，需要提前把腐竹用凉水泡一夜。 第二天首先把小羊腿放入冷水中烧开焯一下，这样可以将血沫焯出来，同时也把多余的盐涮掉。 在锅中放入糖和水，化好糖色。 接下来准备好调料包：花椒，大料，香叶，桂皮，小茴香。 推荐使用铸铁锅。在锅中放入葱姜蒜和郫县豆瓣酱后炒香，放入小羊腿爆香后放入生抽及化好的糖水，再放入调料包。加入开水后以没过羊腿为宜。 大火烧开后小火炖1个半小时。在炖的过程中放入切好的腐竹和胡萝卜。 出锅后锅中应该还有汤汁，可以用来拌饭吃。剩下的第二天可以煮面吃。","link":"/lamb-leg/"},{"title":"使用AWS Lambda中的层(Layer)解决依赖库的问题","text":"在前面分享了如何使用Serverless Requirements在AWS无服务器架构中配置Python依赖库，但这种做法的缺点就是在每个Lamda项目中都需要配置依赖库。这样每次生成的Lambda都包含了对应的依赖库，因此文件会很大。在每次部署的时候耗时更长，同时占用很多S3存储资源，可以说既费时又费钱。同样，这种方法的重用性非常差，因此我们希望通过一种可以重用的方式，只将依赖库保存一份，每当在需要时引用一下就可以了。这就是下面要介绍的AWS Lambda中的层(Layer)。 层的使用就类似于在各种编程语言中使用程序库一样，只需引用就可以在不同程序中使用共享的程序库，而无需将程序库部署到Lambda中。使用Lambda中的的层有以下优点： 这种依赖库是可以在不同的Lambda中共享的。这样在每次使用这些常用的依赖库时只需在Lambda中添加对这个层的引用就可以了。这样就可以节省费用，提高开发速度。 通过这种方式可以有效减少Lambda函数的大小，从而可以在Lambda控制台中直接调试代码。 Lambda中的层支持Python, Node.js, Ruby等主流开发语言。 可以在不同AWS账号之间共享层。 下面以一个非常简单的Lambda来说明如何使用层来进行开发： 首先，创建一个非常简单的Lambda，这里我们不用Serverless框架，直接在Lambda控制台中创建如下的Lambda函数： import json import xmltodict def lambda_handler(event, context): xml=&apos;&apos;&apos;&lt;user&gt; &lt;name&gt;aafeng&lt;/name&gt; &lt;url&gt;https://www.aafeng.uk&lt;/url&gt; &lt;/user&gt;&apos;&apos;&apos; return { &quot;statusCode&quot;: 200, &quot;user&quot;: json.dumps(xmltodict.parse(xml)) } 很显然，由于找不到xmltodict这个依赖库，这个Lambda函数无法正常运行： 下面我们就将xmltodict打包并创建一个层，并在Lambda中添加对这个层的引用来解决上面的这个问题。 运行如下命令创建一个包含xmltodict依赖库的zip文件： mkdir -p layer/python cd layer pip3 install xmltodict -t python zip -r ../xmltodict.zip . 然后可以看到生成了xmltodict.zip这个文件。 在AWS中通过上传刚生成的xmltodict.zip来创建一个层。记录下这个层的id: arn:aws:lambda:eu-west-1:xxxxxxxxxxxxxx:layer:xmltodict:1 回到AWS Lambda控制台，单击“Add Layer”，将刚创建的层添加后再次运行这个Lambda函数，可以看到已经没有问题了。 从层的执行机制上来说，其实在Lambda运行时，层会被提取到/opt目录，Lambda的运行时会在该目录下查找对应的库。 但使用层的时候也是有限制的。比如：每个Lambda中最多使用5个层，Lambda+各个使用到的层的总大小不能超过250MB。但对于一般引用来说是足够了。如果超出这个大小，说明你的Lambda需要再进行拆分。","link":"/lambda-layer/"},{"title":"Lanzarote兰沙略得","text":"Lanzarote被联合国教科文组织宣布为“生物圈保留地”，这里最大的特点就是其火山岩浆地貌和许多火山岩洞奇特景观。同时让人震撼的就是这里的人与自然共处，依靠和开发火山，保护火山的故事。著名作家三毛也曾经在此岛上小住并为它起了一个很雅致的名字：兰沙略得。","link":"/lanzarote-fjknamfr/"},{"title":"舌之契约 - THE LAW OF THE TONGUE","text":"偶然间看到了一篇震撼人心的动物和人之间的故事：舌之契约：THE LAW OF THE TONGUE。 故事发生在20世纪初，讲述的是在40年间，一只叫做“Old Tom”的虎鲸带领鲸群帮助人类捕获须鲸并建立契约的故事。 在最早期的时候，澳大利亚新南威尔士的渔民一直在捕获须鲸，而须鲸同时也是虎鲸的食物。因此人类和虎鲸之间就存在着某种程度的竞争。 后来在当地土著人的帮助下，捕鲸人和Old Tom带领的虎鲸群建立起了某种默契：首先虎鲸把须鲸赶到近海处，然后Old Tom会把尾巴伸出水面告知捕鲸人做好准备。接下来由捕鲸人猎杀须鲸。接下来虎鲸们会吃掉须鲸的唇和舌头，然后把剩余的须鲸身体留给人类。这也是为什么这段故事叫做”舌之契约“的原因。这个契约一直执行了40年的时间。在这期间，捕鲸人换了三代，但Old Tom的鲸鱼团队一直在忠实的执行着契约，这为当地的捕鲸人带来了巨大的财富。 但不幸的是，这个契约最终还是被人类破坏了。在一次捕鲸活动中，天气十分恶劣。一位船员由于担心须鲸被暴风雨冲走，没等虎鲸们享用须鲸的舌头就把须鲸拖拽到船上。在这个过程中，Old Tom也被拽掉了一排牙齿。对于一只虎鲸来说，这就意味着死亡。在不久之后，Old Tom的尸体在一处浅滩被发现。可以想象，当时的虎鲸群该是多么的震惊和失望。因此自那之后，契约不复存在，虎鲸群再也没有回来。 看完这则故事之后，首先是震撼于这则故事本身，同时也惊叹于鲸群对契约精神的信守和”一根筋“：如果人类遵守规则，我会履行自己的职责。但一旦人类破坏了契约，那我将一去不返。 和动物相比，更为复杂的是人性，在很多时候，可能会因为种种外力而破坏契约，或者做出某种变通，甚至是变更契约。有些人会对天发誓，其实有些发誓的人自己都不相信自己的誓言，更谈不上任何契约精神。反倒是“人在曹营身在汉”，倒是经常为人所津津乐道。仔细想想，似乎我们从动物身上该学习的东西太多了。","link":"/law-of-tongue/"},{"title":"假如没有电子产品会怎样？","text":"看到有人提议，假想没有任何电子产品，你的一天将会如何度过？感觉这个想法非常好。不过这里假定所说的电子产品是指，电脑，手机，pad，游戏机，电视，而居家生活必需的电灯，电磁炉等不在此列。哈哈，否则就成了对求生技能的考验了。 首先来看看现在的每一天是如何度过的。如果是在工作日，我基本上一整天都会使用电脑工作。由于疫情影响，即使是各种会议，甚至tea break等原本能够离开电脑的时间，也都转到了电脑上用Zoom和同事们见面。除去了工作时间，即使是吃饭，干家务，甚至去卫生间的时候，手机都在身边。这样算起来真的很吓人，在每天中，电子产品要陪伴我超过一半的时间！ 如果是在周末的话，相对要好不少。如果有空的话，全家肯定要出去玩一天。天好的话在户外，天气差的话也会选择一些博物馆。最差的话全家去宜家，Outlet这样的地方去逛街。这样算起来，周末使用电子产品的时间会减少一半。 如果没有了这些电子产品，先来说说工作。现在很多人的工作离不开电脑。尤其是我这样做IT的，如果没有了电脑，我不知道还能做什么。估计必须要转行了。如果真是那样的话，我肯定想要选择一个不需要困在办公室中，可以多和人打打交道的工作。 如果自己休假的话。首选肯定是要去旅行，多去看看那些自己没有去过的地方。但现在的形势下，多半会宅在家中。那么会做些什么呢？我想有一点是肯定的，我会读一些自己一直没有时间读的书，也会花更多的时间在运动上，同时也会多陪孩子们一起玩。 其实我小时候家中除了电视和电话外，并没有过多的电子产品。当时记忆中的童年多半是和小伙伴们一起在户外度过的。现在回想起来还能记得当时一起捉蝴蝶，捉蚂蚱，以及去小河中捞鱼的快乐时光。 我并不像一些朋友那样，彻底喜欢户外的各种活动。但还是尽可能多的带孩子们去参加各种户外活动。但在家的时间中，他们仍有很多时间都在使用电脑，pad等电子设备。看样子还真的需要有意识的减少他们使用电子产品的时间了。 这样子一想的话，看来今后真的有必要减少使用各种电子产品的时间了。如果由于工作没法彻底不用电脑的话，那就尽量减少使用手机和pad的时间吧。","link":"/life-without-electrical-devices/"},{"title":"如何使用Bigdipper查看Likecoin区块链中的交易","text":"在Likecoin区块链中，绝大多数用户接触的是其前端，比如：Matters，Steem.buzz等。但前端发生的行为，比如赞赏，都是由底层区块链来支撑的。下面介绍一下Bigdipper/北斗这个网站，在其中可以查看各种Likecoin的交易信息。 什么是Likecoin bigdipperLikecoin bigdipper/北斗是由Forbole开发的开源Likecoin区块链浏览器，在上面可以查看Likecoin上的各种交易数据。登录bigdipper后可以看到Likecoin区块链的当前信息： 其源代码在这里：https://github.com/forbole/big-dipper 在bigdipper上查看Validators首先可以查看Likecoin网络上验证人的信息。这些验证人的作用就是维护Likecoin网络的正常运行，保证网络上交易的安全性。 在上图中可以看到当前激活的10个Validator。 在bigdipper上查看区块信息还可以在bigdipper查看Likecoin的区块信息，比如：最新区块的出块时间，哈希值，区块高度，出块人，块中包含的交易数等。 在bigdipper中查看区块链中的交易信息在bigdipper中查看Likecoin交易中的各种信息，包括：交易往来的账号，交易所在区块的高度，是否已被验证，交易哈希值等。","link":"/likecoin-bigdipper/"},{"title":"如何安装&#x2F;配置一个Likecoin Validator节点","text":"最近尝试了一下配置/运行Likecoin Validator节点，下面把步骤总结一下。整个步骤是基于Likecoin官方文档的。下面只是把我如何运行Validator节点的步骤记录下来，按照这个步骤进行完毕，应该就能运行一个Inactive Validator节点了。至于如何成为Active Validator，由于我并没有走到那一步，因此不做讨论。 安装dockersudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot; sudo apt update apt-cache policy docker-ce sudo apt install docker-ce sudo systemctl status docker sudo usermod -aG docker ${USER} 之后重新登录一下。 安装docker composesudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 安装并配置Likecoingit clone https://github.com/likecoin/likecoin-chain --branch sheungwan --single-branch cd likecoin-chain ./scripts/build.sh 从官方Github页面找到genesis.json的相应链接，下载genesis.json并保存至likecoin-chain目录。 运行： ./scripts/init.sh 你节点的名字 genesis.json 913bd0f4bea4ef512ffba39ab90eae84c1420862@34.82.131.35:26656 docker-compose up -d 这是你就会看到有很多后台进程在同步数据。 在我的VM(位于德国的VPS, 4核，8GB RAM, 200G SSD)上，整个数据同步过程共花费了24个小时左右。 在同步过程中，你可以通过以下网址查看同步的状态： http://你的IP地址:26657/status 数据同步结束后，其状态信息中的“catching_up”就会变为”false”。 &quot;sync_info&quot;: { &quot;latest_block_hash&quot;: &quot;E6E05948B40D3FD4BE895527D3F95000FC617B61F2A12B1AE13855BF4CE71F5F&quot;, &quot;latest_app_hash&quot;: &quot;A79011D8A41E4795E0C530B0AB88D8BE6ABA44648D166D89335B8D3BBF55CCF6&quot;, &quot;latest_block_height&quot;: &quot;2681538&quot;, &quot;latest_block_time&quot;: &quot;2020-05-03T21:21:39.335206851Z&quot;, &quot;catching_up&quot;: false }, 至此，Likecoin的节点应该就能正常运行了，但要成为激活的(Active)节点，应该还需要进行进一步的设置，由于我并没有运行激活的节点，这里先不做讨论。","link":"/likecoin-validator/"},{"title":"如何将Likecoin以英镑&#x2F;欧元&#x2F;美元提现？","text":"很多人讨论过如何将Likecoin以人民币，台币提现。下面总结一下如何以英镑/欧元/美元的方式提现。其基本步骤就是：通过Like Land APP将LIKECOIN转到交易所，比如：Liquid，或者BitAsset；在这些交易所将LIKECOIN兑换为比特币；然后再将比特币转到支持英镑/欧元/美元的其他交易所；在交易所把比特币兑换成英镑/欧元/美元再提现。 第一步，将LIKECOIN转至BitAsset交易所登录BitAsset交易所，选择“Wallet” -&gt; “My Wallet” 单击”Deposit”后选择”LIKE”作为”Chain Name” 可以复制地址，或者打开对应的QR码： 进入Liker Land手机APP，扫描交易所的这个QR码，设定转账金额，并按“确认”按钮。 几分钟后就能在交易所看到LIKECOIN已经到账。 第二步：将LIKECOIN转为BTC在交易所钱包中选择：LIKE -&gt; Transaction -&gt; LIKE-BTC 在这个交易对中，设定交易的LIKECOIN金额，价格，然后单击“SELL” 如果你挂单的价格被买方接受，很快交易就会结束，会有BTC到账。 第二步，将BTC转至Kraken接下来需要选择一个支持英镑/欧元/美元的交易所。这样的交易所有很多，下面以 Kraken 为例。 在交易所的’Wallet’，将BTC转出。输入Kraken中的BTC地址，然后设定转出金额。 可以看到，BitAsset会收取1%的手续费。 需要进行二次验证： 交易开始后，需要等待一段时间。毕竟比特币的交易速度还是非常慢的。 第四步：在交易所把比特币转换为法币我使用比较多的交易所是Brittrex (支持欧元/美元)和Kraken(支持英镑/欧元/美元/加元/日元)。再这些交易所把比特币兑换成法币后，就可与提现到自己银行账号了。当然，这些交易所都需要进行实名验证。","link":"/likecoin-withdraw/"},{"title":"化赞为赏-说说什么是Likecoin和赞赏公民？","text":"最近一段时间开始使用支持Likecoin的网站，包括steem.buzz，matters。同时也加入了付费的赞赏公民，同时还在自己的博客中加入了赞赏按钮。感觉还是很喜欢这个年轻的生态系统。有些朋友在问到底什么是Likecoin，什么又是赞赏公民，他们到底有什么用等问题。下面把我所理解的总结一下，希望大家都能加入赞赏公民，支持这个有活力的生态系统。 什么是LikecoinLikecoin是一种基于区块链的虚拟货币。它就像比特币一样，价格随市场需求会有波动，在写这篇文章的时候Likecoin的价格大约是每1美元可以购买200个Likecoin。Likecoin最早是基于以太坊网络的，但现在它运行在自己的链上。现在Likecoin指的是运行在它自己链上的代币，早期运行于以太坊上的代币叫做：LikeCoin (ERC-20)。 Likecoin区块链的维护者 - Validators有了Likecoin这个代币后，那么由谁来支持最底层的区块链网络呢？又有谁来支持/验证区块链中的交易，保证区块链的数据安全呢？在不同的网络中有不同的叫法，在比特币网络中叫做矿工，在Steem/Hive网络中叫做见证人。在Likecoin中则叫做Validator。只不过有一点让我不太理解的就是，Likecoin网络中的Validator似乎是人工决定的，而且目前只有固定的10个。既然是区块链，就应该是完全开放的，谁都可以成为Validator，只不过要根据用户投票来决定谁能出块。这就像Steem/Hive网络中的见证人机制，排名前20的见证人+排名20之后的见证人中随机抽取一名，共组成21名见证人来出块。 查看Likecoin中Validator信息 如何注册Likecoin账号？Likecoin的账号注册非常简单，有两种选择。可以通过邮件/密码注册一个账号，也可以通过其他方式，比如Google账号，facebook, twitter, apple，以及matters网站来注册。 构建于Likecoin基础上的应用网站既然基于Likecoin的底层区块链已经有了，那么接下来就需要在此之上的应用了。这里介绍如下几个： MattersMatters 以一个基于Likecoin代币奖励机制的内容激励平台。任何Likecoin用户都可以在Matters登陆后发文。如果有人给你的文章点赞，你就会获得以Likecoin方式奖励的收益。 Steem.buzzSteem.buzz是Steem中文社区中的新手村村长 ericet 维护的一个Steem区块链前端应用程序。但在Steem.buzz中为众多的Likecoin用户添加了赞赏功能。在每一篇发在Steem网络的文章下面还会出现一个赞赏按钮。如果有人点了赞赏按钮，你就会获得Likecoin作为奖励。 什么是赞赏公民？前面已经说过，Likecoin的注册用户对文章点赞的话，文章作者会有一定的收益。但这个收益是比较有限的。而赞赏公民则相当于是”VIP“用户，每月缴纳5美元的月费。他们的赞赏会更值钱。其实，5美元/月并不多，也就是一杯咖啡的钱，但以此来资助自己喜欢的作者，激励他们创作出更好的作品来，读者本身也是受益者。何况，赞赏公民似乎更希望和其他赞赏公民互动，增加彼此的收益。","link":"/likecoin/"},{"title":"如何将Liker按钮集成到Hexo","text":"自从朋友将Hexo推荐给我以来，它就是我非常喜欢的静态网站生成工具了。下面把Liker按钮集成到Hexo中的步骤总结一下，让众多的Hexo网站可以通过点赞获得收益。以下以Hueman主题为例进行说明： 首先，从官方github获取对应的css并将其转换为styl格式，为了大家方便，我直接把转换好的贴到这里： .lc-page-header display none height 0px .likecoin-button position relative width 100% max-width 485px max-height 240px margin 0 auto &amp; &gt; div padding-top 49.48454% &amp; &gt; iframe position absolute top 0 left 0 width 100% height 100% 将上面文件保存至：themes/hueman/source/css/liker.styl 第二步，打开 themes/hueman/source/css/style.styl 文件，并添加如下行： @import &quot;liker&quot; 第三步，打开themes/hueman/layout/common/article.ejs，将如下代码添加到想要的位置（注意替换成你自己的liker ID）： &lt;div class=&quot;likecoin-embed likecoin-button&quot;&gt; &lt;div&gt;&lt;/div&gt; &lt;iframe scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://button.like.co/in/embed/aafeng17936/button?referrer=&lt;%- encodeURIComponent(post.permalink) %&gt;&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; 接下来重新生成网站并发布到服务器就可以了。","link":"/liker-hexo/"},{"title":"Lilleshall Abbey参观及Shropshire rocks活动初体验","text":"最近到朋友家做客，参观了他家附近的Lilleshall Abbey，顺便参与了最近非常火爆的Shropshire rocks活动。 Lilleshall Abbey本身并没有特多的特色，和英国很多的Abbey/教堂一样，到处都是残垣断壁。 最有趣的还是参加最近非常火的Shropshire rocks活动。这个活动的主旨就是鼓励人们多参加户外活动，参加活动的人会把自己绘制的各种石头藏到户外的某个地方，其他人如果找到了要在自己的facebook上发图，之后把石头拿到别的地方再藏好，这样，随着参与活动的人越来越多，石头也会越来越多，大家找到石头的几率也会越来越大。虽然只是找石头，可以不论孩子们还是大人们都十分投入，给大家秀一秀我们的战利品，哈哈，当然，还要把它们再藏回去，这次打算请这些石头搬家到约克了。。。","link":"/lilleshall-abbey-shropshire-rocks/"},{"title":"每天进步一点：配置localstack本地测试AWS功能","text":"今天开始试用localstack，感觉非常好用。用localstack开发AWS应用非常方便，下面把整个过程记录一下。整个过程是基于这个英文教程的，但下面只是我自己的理解和笔记，并不是对英文教程的翻译。 LocalStack是什么？Localstack允许你在本地尝试一系列的AWS服务，而无需担心费用问题。 支持离线方式 你无需和他人共享AWS资源，这样想怎么搞就怎么搞，不用担心影响到别人 轻松管理本地资源 完全免费 尝试AWS服务而不需要AWS账号 设置首先确保安装了Docker, AWS CLI, 然后确保运行了aws configure来生成并保存相关密码。 接下来创建一个项目，比如“test1”, 并在该项目中创建一些文件： 1234mkdir test1cd test1touch index.js docker-compose.yml .envmkdir .localstack 复制一个图片，比如：test.jpg 到项目目录下。 进行npm配置和安装配套AWS 包： 12npm init npm install aws-sdk dotenv 编辑 docker-compose.yml 并添加如下内容: 123456789101112131415version: '3.2'services: localstack: image: localstack/localstack:latest container_name: localstack_demo ports: - '4563-4599:4563-4599' - '8055:8080' environment: - SERVICES=s3 - DEBUG=1 - DATA_DIR=/tmp/localstack/data volumes: - './.localstack:/tmp/localstack' - '/var/run/docker.sock:/var/run/docker.sock' 启动docker容器: 1docker-compose up 等个2分钟左右你就可以在浏览器中访问 localstack 界面了: http://localhost:8055/ 对于本地的AWS S3，可以通过如下端口访问: http://localhost:4572/ 现在你就可以在本地测试AWS的服务了! 通过localstack来测试AWS S3服务通过localstack来创建一个S3 bucket: 1aws --endpoint-url=http://localhost:4572 s3 mb s3://demo-bucket 注意：这里的 –endpoint-url 参数指定了 localstack 中对应的 s3 访问路径。 在 localstack 的日志中，你会看到如下信息： 1localstack_demo | 2019-12-06 15:10:14,909:API: 127.0.0.1 - - [06/Dec/2019 15:10:14] &quot;PUT /demo-bucket HTTP/1.1&quot; 200 在 localstack S3 的Web界面中，你可以看到: 123456&lt;Buckets&gt;&lt;Bucket&gt;&lt;Name&gt;demo-bucket&lt;/Name&gt;&lt;CreationDate&gt;2006-02-03T16:45:09.000Z&lt;/CreationDate&gt;&lt;/Bucket&gt;&lt;/Buckets&gt; 为S3 bucket添加访问控制列表ACL: 1aws --endpoint-url=http://localhost:4572 s3api put-bucket-acl --bucket demo-bucket --acl public-read 现在，你的S3 bucket就对外公开了。 现在你可以检查一下这个文件： .localstack/data/s3_api_calls.json {“a”: “s3”, “m”: “PUT”, “p”: “/demo-bucket”, “d”: “XXXXXXXX”, “h”: {“host”: “localhost”, “Accept-Encoding”: “identity”, “User-Agent”: “aws-cli/1.16.183 Python/3.6.9 Linux/4.15.0-72-generic botocore/1.12.253”, “X-Amz-Date”: “20191206T151014Z”, “X-Amz-Content-SHA256”: “xxxx”, “Authorization”: “AWS4-HMAC-SHA256 Credential=XXXXXX, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=xxxx”, “Content-Length”: “153”, “X-Forwarded-For”: “172.30.0.1, 0.0.0.0:4572”, “content-type”: “binary/octet-stream”}}{“a”: “s3”, “m”: “PUT”, “p”: “/demo-bucket?acl”, “d”: “”, “h”: {“host”: “localhost”, “Accept-Encoding”: “identity”, “x-amz-acl”: “public-read”, “User-Agent”: “aws-cli/1.16.183 Python/3.6.9 Linux/4.15.0-72-generic botocore/1.12.253”, “X-Amz-Date”: “20191206T151327Z”, “X-Amz-Content-SHA256”: “xxxx”, “Authorization”: “AWS4-HMAC-SHA256 Credential=xxxx”, “Content-Length”: “0”, “X-Forwarded-For”: “172.30.0.1, 0.0.0.0:4572”, “content-type”: “binary/octet-stream”}} 可以看到，你的所有操作都被记录了下来。 编辑 .env 文件，并添加如下内容： AWS_ACCESS_KEY_ID=’123’AWS_SECRET_KEY=’xyz’AWS_BUCKET_NAME=’demo-bucket’ 其实这里 AWS key &amp; secret 填什么都可以，只要不是空字符串就行。localstack 并不进行身份验证. 创建文件： aws.js 1234567891011121314151617181920212223242526272829303132333435const AWS = require('aws-sdk')require('dotenv').config()const credentials = { accessKeyId: process.env.AWS_ACCESS_KEY_ID, secretAccessKey: process.env.AWS_SECRET_KEY,}const useLocal = process.env.NODE_ENV !== 'production'const bucketName = process.env.AWS_BUCKET_NAMEconst s3client = new AWS.S3({ credentials, endpoint: useLocal ? 'http://localhost:4572' : undefined, s3ForcePathStyle: true,})const uploadFile = async (data, fileName) =&gt; new Promise((resolve) =&gt; { s3client.upload( { Bucket: bucketName, Key: fileName, Body: data, }, (err, response) =&gt; { if (err) throw err resolve(response) }, ) })module.exports = uploadFile 创建文件 test-upload.js: 12345678910111213141516171819const fs = require('fs')const path = require('path')const uploadFile = require('./aws')const testUpload = () =&gt; { const filePath = path.resolve(__dirname, 'test.jpg') const fileStream = fs.createReadStream(filePath) const now = new Date() const fileName = `test-image-${now.toISOString()}.jpg` uploadFile(fileStream, fileName).then((response) =&gt; { console.log(&quot;:)&quot;) console.log(response) }).catch((err) =&gt; { console.log(&quot;:|&quot;) console.log(err) })}testUpload() 运行如下命令进行测试: 1node test-upload.js 从docker日志中你可以看到对应的图片路径，例如： 1http://localhost:4572/demo-bucket/test-image-2019-12-06T15%3A28%3A57.037Z.jpg 如果再次检查文件： .localstack/data/s3_api_calls.json, 你会看到图片被转换为二进制数据并被存储。","link":"/localstack-aws/"},{"title":"带孩子做科学实验系列之 - 会跳舞的葡萄干","text":"下面介绍的这个试验是会跳舞的葡萄干，试验步骤简单但却很有趣。 试验准备这个试验需要以下这些材料： 葡萄干Raisins 柠檬水 玻璃杯 试验步骤首先往玻璃杯中倒入柠檬水，注意一定要把瓶子斜着倒，这样能够最大程度的保持住泡沫，从而保证好的试验效果。其实就和倒啤酒一样。 接下来加一把葡萄干到杯中。 你就会看到葡萄干在”跳舞“了! 注意观察一下看看葡萄干是越跳越欢还是逐渐慢了下来？如果再多加点葡萄干会怎样？ 其实这个实验的原理很简单：因为在柠檬水这样的饮料中有很多二氧化碳，在葡萄干刚刚放入杯中的时候，会沉到杯底。杯底的二氧化碳气泡会携带这葡萄干浮到杯子最上面。到了杯子上面的时候二氧化碳气泡会破裂，没有了这些气泡，葡萄干就会再次沉到杯子底部。","link":"/lr3ts/"},{"title":"幸运","text":"最近在给孩子讲睡前故事的时候，讲到了一个“亨利爷爷找幸运“的故事。这也让我在想，我自己是不是也足够幸运呢？ 在故事中，亨利爷爷习惯每天晚上给孙子艾米讲睡前故事，也会回答孙子的各种问题。无论艾米问出如何奇怪的问题来，亨利爷爷都能给出一个满意的答案。 但在一天晚上，艾米问了爷爷一个问题：什么是幸运？亨利爷爷一下子不知道该怎么解释了。他想了许久都没有想出答案。在第二天的时候，亨利爷爷去图书馆翻看了很多书，也没能找到答案。 在回家的路上，亨利爷爷突然豁然开朗了，对于不同的人来说，幸运的定义是不一样的。对于热恋中的情侣来说，能和对方相守，就是最大的幸运。对于一个孩子来说，能够有亲人的照顾就是最大的幸运。对于一位商人来说，能够把商品销售给客户就是幸运。对于一个流浪汉来说，能够在饥肠辘辘的时候收到亨利爷爷送给他的苹果馅饼就是幸运。正在想着，亨利爷爷穿过马路的时候闯了红灯，还好，在路上行驶的汽车司机踩了急刹车把车停下了，没有撞到亨利爷爷。亨利爷爷不禁在想，我真的是太幸运了。 其实正像故事中所说的，每个人对于幸运的定义都是不一样的。甚至对于同一个人，在不同时候对于幸运的定义也是不一样的。 就拿我家的房屋扩建工程来说，我感觉我是十分幸运的。在英国疫情被初步控制的时候，我家的扩建工程正式开始动工。整个工程持续了14周，在上周正式结束，而现在又出现了疫情反扑。我家相当于正好在两拨疫情的间隙把扩建工程做完了。从整个角度来说，我确实是非常幸运的。 在目前的大形势下，可能很多人期待的最幸运的事就是能够全家人都平平安安的工作，生活，和学习。真心希望大家都能够幸运，岁月静好。","link":"/lucky/"},{"title":"如何在Ruby中读写Excel Spreadsheet","text":"在很多系统中生成报表时，都需要使用Excel格式的文件。在这种情况下，推荐使用roo进行Excel的读取，使用caxlsx进行Excel的写入。 写入操作require &apos;axlsx&apos; p = Axlsx::Package.new wb = p.workbook wb.add_worksheet(name: &apos;Worksheet1&apos;) do |sheet| sheet.add_row [&apos;R1C1&apos;, &apos;R1C2&apos;, &apos;R1C3&apos;] sheet.add_row [1, 2, 3] end p.serialize &apos;test.xlsx&apos; 读取操作require &apos;roo&apos; rows = Roo::Spreadsheet.open(&apos;test.xlsx&apos;) rows.each_with_index { |row, index| puts &quot;#{row[0]}, #{row[1]}, #{row[2]}&quot; }","link":"/manipulate-spreadsheet-in-ruby/"},{"title":"使用Magic Dice","text":"早就听说了Magic Dice，这两天试玩了一下。 操作非常简单，只要设定一个100以内的数字范围，该网站就会自动计算出一个赔率来，然后通过 steemconnect 授权转入赌金金额，结果就立刻出来了。 如果赢了，立刻就会把钱转给你。我试了几把，最后终于达到了目的，输了两个2 STEEM，哈哈。。。 这里提醒大家，既然这个APP能够存在，说明肯定是能够盈利的，因此，从概率上来说，玩家肯定是玩不过庄家的，偶尔玩一下还可以，千万不要上瘾。。。","link":"/magic-dice/"},{"title":"值得尊敬的科学家居里夫人Marie Curie介绍","text":"今天辅导孩子写作业。作业的内容是写一份关于著名科学家居里夫人Marie Curie的报告。相信很多人都知道这位著名的化学家，但难得今天有机会系统学习了这位伟人的生平。 图源：pixabay 简而言之，居里夫人的最大贡献是发现了两种新元素钋（Po）和镭（Ra），这对日后医学上对癌症的治疗具有很大的推动作用。 居里夫人出生于波兰华沙，家中共有5个兄弟姐妹。在姐姐的帮助下来到巴黎留学。也在这里她认识了自己后来的丈夫皮埃尔·居里。两人因相同的兴趣越走越近，终于在一年后结婚。1898年，居里夫妇发现了钋和镭这两种新的元素。并发现镭能够有效杀死癌细胞。 1903年，居里夫妇被授予诺贝尔奖。1911年，居里夫人第二次获得诺贝尔奖。 在当时，人们并没有意识到放射性元素对身体的危害。居里夫人常将含有放射性元素的试管放在衣服的口袋里，或者抽屉中。后来因此死于再生不良性贫血。 作为受世人敬仰的科学家，居里夫人被葬入法国的先贤祠，她也是第一位凭借自身成就进入先贤祠的女人。","link":"/marie-curie/"},{"title":"迪士尼新影片推荐 - Mary Poppins Returns","text":"最近全家去看了最新上映的 Mary Poppins Returns。这是号称在所有迪士尼影片中获得奥斯卡提名最多，也是获奖最多的电影Mary Poppins的第二部。整个电影非常轻松活泼，配套的音乐剧及歌舞表演也很吸引人，作为迪士尼的强项，各种充满想象力的动画效果更是让人称赞。强烈推荐大人孩子一同欣赏。","link":"/marypoppinsreturns-ugn121h0zx/"},{"title":"只要功夫深，铁杵磨成针 - 说说优秀的数学学习网站Mathletics","text":"今天儿子兴奋的告诉我，他在数学学习网站Mathletics上的最好成绩突破了自己的记录，达到了每分钟做对60道题的速度。这就相当于每秒钟作对一道100以内的加减法，同时还要输入到电脑中才行。儿子也因此获得了Speed daemon的称号。我尝试过很多次，最高记录从没超过40次/每分钟。 因此这里也向各位年轻的父母们推荐这个数学学习网站。英国的绝大多数小学都选择了它家的服务，因此学校的学生可以免费使用这项服务。如果你所在的学校没有加入的话，也可以自己购买账户。 这个网站除了按照教学大纲中的知识点设计了各种练习外，最有意思的就是引用了在线PK，和全世界范围内的小朋友在线比赛，看看谁算的更快。同时每参加一个活动或比赛时都会根据成绩记录积分，按照积分的不同可以颁发各种certificate。 再次向给位爸爸妈妈们推荐：http://www.mathletics.com","link":"/mathletics/"},{"title":"国外经典图书推荐之： Matilda","text":"今天给大家推荐同样还是Roald Dahl的经典图书之一：Matilda。这本畅销书同样被改编成了音乐剧，在伦敦西区也是上座率非常高的。 Matilda这本书讲述的一个聪明绝顶的小姑娘Matilda的故事。在书中Matilda的父母非常庸俗势利，她的父亲是一个商人，她的母亲则是一个赌徒。Matilda在很小的时候就把自己家里的书读完了，之后又自己去图书馆借书读。她在4岁的时候就读了很多世界经典名著，比如：远大前程，雾都孤儿，简爱，傲慢与偏见，老人与海等等，汗。。。我现在还没读全。。。在她上学后又遇到了非常恶毒的校长Agatha Trunchbull。这位校长有明显的暴力倾向，在校的师生都生活在她的阴影之下。书中讲述的就是Matilda如何和校长斗争的故事。","link":"/matilda/"},{"title":"兰沙略德岛岩浆隧道","text":"在Lanzarote岛上有很多的火山隧道，大多数尚未进行开发，是探险家的乐园。据说有一条隧道直接通往亚特兰蒂斯的神秘世界！经过曼里克的设计，有两条隧道可供游客参观。其中的Jameos del agua是由火山岩浆融化而形成的一条岩浆隧道，全长7公里。外面还有清澈的水滴湖，湖中有一种白色的小螃蟹，号称是Lanzarote的吉祥物。 从隧道出来后别有洞天 Posted using Partiko Android","link":"/mge1lfdm/"},{"title":"Mind the Gap","text":"最近看到一则感人的小故事：2012年圣诞前，伦敦Embankment地铁站的工作人员发现，有一位老奶奶总是来到地铁站，倾听地铁广播中的”Mind the gap”,发现是电脑合成的声音后非常不安，不断询问，原来的声音去哪里了？ 后来地铁工作人员才知道，原来的声音源自老奶奶已经去世的老伴。这句话是老奶奶和她老伴相识时老伴对她说的第一句话。老奶奶来这里不是为了坐地铁，只为了听那句她熟悉的声音。 最后是一个非常暖心的结果：地铁站工作人员找到了老奶奶丈夫最初的配音，复制了一份送给了老奶奶。同时，将该地铁站的配音换回了最初的配音，并一直使用了下来。 其实每个人心中都留有很多永远铭记的瞬间。这可能是家乡的一道小吃，也可能是和TA一同去看过的一场电影，和TA一同去的一个地方。 记得在哪里看到过类似的一段话：失去至亲的那一瞬间固然让人悲痛万分，但更为难以承受的是在后面的日子里，习惯于和亲人的一个个瞬间，都将一次次将人推入思念和无助的深渊。当你习惯的将早餐摆放成TA喜欢的样子，却发现喜欢早餐的人将永不能再见；当你去了和TA经常一起去的咖啡厅，电影院，却发现现在只能形单影只。。。前面说的老奶奶，正是通过那句“Mind the gap”，回忆和挚爱在一起的时光。 对于我们而言，真正需要做的就是要珍惜现在，珍惜和至亲在一起的时光。不要忘记说一声：Mind the gap.","link":"/mind-the-gap/"},{"title":"Moorlands Nature Reserve徒步之旅","text":"今天和朋友家约好，一同去Moorlands Nature Reserve森林公园去徒步。 这座公园并不大，占地只有7公顷左右，也就是大约8个足球场那么大。公园始建于爱德华7世，在公园中种有很多月见草，水仙，和风信子。周边还有马术培训。 途径一个小树屋。孩子们一看到这个树屋，立刻冲了上去。 毕竟是森林公园，可以就地取材，可以看到各种树雕随处都是： 各种奇形怪状的树，不知道是天然形成的，还是有人刻意为之？ 途径树林中的小木屋，可能是工作人员的办公室吧，但似乎已经多年未用了： 可能是因为刚刚下过雨的原因，地上长出了不少蘑菇： 为小鸟搭建的房子： 整个公园很小，但我们边走边玩，只走了整个公园的1/3，不知不觉中已经过了三个小时。下次再来的时候，希望把整个公园都走上一遍。","link":"/moorlands/"},{"title":"参加Mrs Sunderland Festival","text":"今天带着孩子们参加位于Huddersfield的Mrs Sunderland Festival，主要目的是参加其中好几个级别的钢琴比赛。这是钢琴老师推荐的，目前已经是第二次来参加了。 举办地址位于Huddersfield的市政厅，空旷的大厅中放置一台很大的三角钢琴，感觉场地非常的高大上。 Mrs Sunderland Festival在全英范围内都是非常有名的音乐节。每年的音乐节都持续将近9天的时间。在和组委会人员闲聊中了解，这个音乐节曾经非常热门，吸引着全英各地的优秀音乐爱好者和专业评委的参与，最火爆的时候每天就会有数千人来参加。但非常遗憾的是，近些年来，对古典音乐感兴趣的人似乎越来越少了，但好在这个音乐节在众多爱好者和志愿者的支持下一直走了下来。 音乐节的名称源于英国历史上的一位著名的歌唱家：Susannah Sunderland。她是Huddersfield合唱团的创始人之一。由于其出色的天赋，受邀为维多利亚女王演唱。由于她筹资资助第一届Huddersfield声乐独奏比赛，这个活动逐渐就以她的名字来命名。 在整个音乐节期间，除了钢琴，打击乐器，管弦乐器，歌唱比赛等各种比赛外，还有专家们组织的各种工作室，将音乐知识一代一代的传下去。 在今天的比赛中，孩子们不仅得到了锻炼，而且还非常幸运的抱回了两座奖杯！","link":"/mrs-sunderland-festival/"},{"title":"英国圣诞传统饮品-Mulled Wine","text":"在英国圣诞节的传统美食中，Mulled Wine香料酒是不可或缺的饮品之一。在往年圣诞前后，几乎所有的圣诞集市，各种和圣诞相关的活动场所，都有贩卖Mulled Wine的。 今年很多圣诞集市都取消了，因此要想喝到Mulled Wine，就只能从超市买回来自己热着喝了。当然，也可以自己配这种香料酒。 【查看英国Amazon上的Mulled Wine】 我个人很喜欢这种香料酒。主要在英国，冬天很是阴冷。喝上一杯热红酒暖胃，感觉很舒服。尽管热红酒的原料红酒一般比较廉价，但由于加热过程能起到醒酒的功效，因此酒的口感会大幅度提升，同时，由于添加了各种香料和糖，酒的口感就会更加温润，让人难以拒绝。 如果要自己配制的话，也十分简单。当然，红酒是主要原料。有些国家也选择其他果酒作为主要原料。同时再配以少许桂皮，八角，橙子或柠檬，糖。用小火煮10分钟左右就好了。由于在煮的过程中酒精会挥发，因此可以考虑再添加一点朗姆酒或白兰地之类的酒。 说起这种香料酒的起源，据说是来自古罗马时期。当时的罗马士兵到处征战，打到天寒地冻的北欧，就用这种热红酒驱寒，随着古罗马版图的扩张，这种习俗就扩展到了整个欧洲。现在成了英国，德国，奥地利，挪威，瑞典等国家备受欢迎的冬季饮品。 每年圣诞节期间，去当地人家做客的时候，主人都会准备一些香料酒来招待客人。有次看到有位英国人家竟然机智的把电饭锅的保温功能利用上了。把香料酒加热后放入电饭锅后，即取即喝，非常方便。 如果没有喝过的话，建议可以尝试一下，别有一番风味。","link":"/mulled-wine/"},{"title":"以特殊的方式给儿子庆祝生日","text":"转眼又到了儿子的生日。往年都是让儿子自己选择来举办一个生日Party。在英国，小朋友们的Party类型选择很多，比如在游乐场Party，蹦床Party，做Pizza的Party，森林中的户外活动主题Party，镭射枪对战Party，保龄球Party等等。说白了就是家长们轮流买单，让孩子们一起嗨。今年由于疫情显然是没法搞生日Party了，但仪式感还是要有的。 儿子的礼物已经事先给他准备好了。他前段时间一直想要一个Amazon Alexa，想要问Alexa各种奇怪的问题。我考虑再三，决定还是选择了Google Home Hub作为替代产品，主要原因是对整套Google产品印象分非常高。相信他一定也会喜欢的。还有就是一套他非常想要的书《The Treehouse Collection》。 尽管现在不能和他的小伙伴们见面，但他的小伙伴们早就在Whatsapp群中送上了各种生日祝福，有录视频的，有留下语音的，也有发送电子贺卡的。最让我们感动的是他最好的朋友的妈妈，带上儿子最好的朋友，专程开车来到我们家门口，把礼物远远的留下，并为儿子当面唱了一首生日快乐歌。 媳妇今天专门为孩子做了一个生日蛋糕。做的是孩子们最喜欢的戚风蛋糕。本来是要搭配些水果的。但现在购物不便，就变通了一下。和媳妇做的蛋糕相比，我前些天做的蛋糕简直就是弱爆了。。。","link":"/my-sons-birthday-2020/"},{"title":"墨菲定律","text":"最近有件非常有趣的事。我在超市发现了一种小黄瓜，非常脆爽可口。因此每周都会买上几盒。但有一次买回来的略有些苦，因此再下周买的时候就只买了一盒。但买了一盒的时候，黄瓜的味道又没有任何问题了。再下一周，又多买了几盒，结果又是苦味的黄瓜。如此反复了好几次。反正，只要我买少了，黄瓜味道就好，只要买多了，就是苦味的。 Source: Pixabay 我当然明白，其实黄瓜是否苦，在我购买之前就已经确定了，这只是几次巧合而已。但这仍然让我想起了著名的墨菲定律。 关于墨菲定律的最有名，也是最通俗的一个表述就是：“如果一个事情有可能会变得很糟糕，那么它一定会变得很糟糕”。 就拿我买黄瓜这件事来说吧，我最近似乎有了心理障碍，每次在买之前都在想，“这次多买几盒吧，也许不会苦？”，“这次就买一盒吧，上次买的都是苦的。”。但每次都事与愿违，买到的黄瓜总是我认为比较糟糕的结果：苦的时候买了很多，不苦的时候只买了一盒。 记得刚工作的时候，单位中有一位老工程师，经常在我耳边念叨墨菲定律，听的我耳朵都要起茧子了。但不得不说的是，墨菲定律似乎总在时不时的出现在我们的生活中。 比如：在修理一些电器的时候，拆之前就曾经想过，一定要小心些，记住每个步骤，万一再往回装的时候漏掉某个螺丝就不好了。但经常发生的就是，每次把电器修完后，再重新装好后，总是会剩下一个螺丝。也就是说，事情朝着我们不期望的方向发生了。 再比如说，每次夏天和朋友们烧烤的时候，发现烟总是朝着人的方向飘来。人为了躲避烟而换了位置，但风向似乎随之就变。。。 再比如说，无论是多么简单的工作，人都会出错。。。 也许这纯粹是一种心理作用，或者心理暗示吧。当人们认为某种事情会朝着比较糟糕的方向发展的时候，心理上从某种程度上就会接受它，进而影响了自己的行动和判断力，从而会增大向那个方向发展的概率。 无论如何，我决定今后连续几周都多买几盒黄瓜，一定要打破这个烦人的定律。","link":"/murphy-law/"},{"title":"长隆野生动物世界游记 &#x2F; My trip to Chimelong Safari Park by @aafeng","text":"广州长隆野生动物世界是世界上最大的野生动物主题公园之一。在园区内有超过2万种的各种珍稀动物。在公园内不仅可以观赏各种动物，而且还有专门的动物研究和保护机构。 I visited my relatives in Guangdong when I was in China a couple of months ago. I have spent a good time in Chimelong Safari Park which is one of the largest wild animal theme park in the world. It has over 20,000 rare animals and occupies more than 1,333,340 square meters. 长隆野生动物世界给我的最大印象就是非常原生态，动物们都生活在自己熟悉的环境中，从而能保持非常好的精神状态，而不像很多动物园中的动物那样懒洋洋的样子。其实这里面体现了一个非常好的设计理念，也就是说把动物园设计成一个”动物出没的地方”，而不是展示动物的地方。 The greatest impression Chimelong Safari Park gives me is its original ecology. Animals live in their own familiar environment, therefore they maintain a very good mental health. In fact, this reflects a very good design concept: the zoo is an “animal infested place”, rather than a place to show animals. 火烈鸟 Flamingos 黑熊 Black bears 黑熊绝对是游泳健将 Bears are good swimmers 前面是一个叫做“丛林发现”，里面很有教育意义，能学到很多东西，比如：如何孵化小鸟，如何给动物治病等等。 Jungle Discovery is a very educational place which shows how to hatch the birds, how to treat animals and so on. 保温箱中的小鸟 The birds in the incubator 熟睡中的老虎幼崽 Sleeping tigers cubs 玩耍中的黑猩猩，它们很喜欢给游客们表演 Chimpanzees like to show to visitors 鹦鹉之家 Parrots 儿子和鹦鹉的亲密接触： My son likes parrots 黑头雁和它们的孩子 Black goose and their children 小猴子 Moneys 犀牛 rhinoceros 鸵鸟和这只黑羊的和平共处 The coexistence of the ostrich and the black sheep 很快就走到了著名的花果山剧场。运气不错，稍微等了一下，演出就开始了。整个演出非常精彩，既然是花果山剧场，主角当然就是小猴子了。首先是猴子们的高空特技表演 Soon we went to the famous Huaguoshan Theater. The whole show is very exciting. The protagonist, of course, is monkey. 人猴同台表演，似乎悟空也来了，哈哈 Trainers and monkeys on the same stage. 除了猴子的各种表演外，也还有其他动物的表演，比如：犀鸟的飞行特技表演。同时还有观众参与节目，比如观众可以向空中抛食由犀鸟接住。 In addition to monkeys’ performances, there are other animal performances as well, such as: hornbill flying performances.Visitors are encouraged to participate in the show, e.g. visitors can play a ‘throw and catch’ game with hornbill. 接下来我们乘坐小火车进入了原生态游览区。在这里有着模拟各种动物生存环境的地形地貌，包括非洲草原，亚洲森林，美洲丛林等。在里面可以看到黑熊，狮子，长颈鹿，斑马，羚羊等各种动物就在不远处休息，感觉非常刺激。 Finally, we take a small train into the original ecological resort. Here is a simulation of a variety of animal survival environment including the African grassland, Asian forests, American jungle and so on. In here you can see lots of wild animals such as the black bear, lion, giraffe, zebra, antelope etc, are very close to you. 巨嘴鸟 Toco toucan 袋鼠群 Kangaroos 开屏的孔雀 Peacock 悠闲的骆驼 Camel 貘 Tapirus 雄狮 Lion 长颈鹿，斑马和羚羊和谐共处 Giraffes, zebra and antelope in harmony 翩翩起舞的鸵鸟 Dancing ostrich 在园区内还有一个非常受欢迎的项目就是给动物喂食。当然，不能随便把任何你觉得好吃的东西喂给动物，否则不是爱护而是伤害了。孩子们都很喜欢给大象喂食。 One of the most popular activities in the park is to feed animals. The children are very keen on feeding elephants. 毛茸茸的小象 Hairy small elephant 呆萌的大熊猫在悠闲的啃着竹子，不论游客们怎们拍照，大熊猫们都十分淡定，自顾自的啃着竹子。 No matter how tourists take pictures, the giant pandas are very calm, just self-serving gnawing bamboo. 这里有世界上唯一的大熊猫三胞胎—萌帅酷。 There are the world’s only giant panda triplets - Meng, Shuai and Ku.","link":"/my-trip-to-chimelong-safari-park-by-aafeng/"},{"title":"你了解你的邻居吗？","text":"最近被问到了一个问题：你知道你邻居的名字吗？想想觉得有些尴尬。其实自从数年前搬到现在的家之后，和邻居们相处还是很融洽的，但是，关系还没有那么近。至于邻居的名字，也只是知道离我家最近那些邻居的名字。那些住的再远一些的邻居，真的不知道他们的名字。以至于每年圣诞节前，给有些邻居家送圣诞卡的时候，还要和别的邻居打听一下才能确保名字没有搞错。 图源：Pixabay 记得小的时候住在父母单位的一个大院中，每到夏季的日落时分，是院子中最热闹的时刻。大家纷纷走出家们，互相问候一下，下棋，打牌，聊天。孩子们也可以成群结伴的一起玩耍，感觉那个时候真的是很快乐。邻居之间的关系也非常近，似乎就像一个大家庭一样。经常在吃饭的时候，邻居们会敲门送上一盘他们刚刚做好的美食。现在想起来仍然很是怀念那个时候。 现在随着技术的不断发展，各种通讯工具，社交软件越来越好用，功能也越来越强大，语音聊天，视频会议等等都成为了我们的日常。微信，Facebook, Whatsapp等软件也成了人手一部手机上的标配。这些技术似乎让人们能够跨越地域，和朋友们保持联系。但似乎这些软件占据了人们的大部分空余时间，反倒没有时间和自己的邻里们打交道了。 和朋友聊起了这个话题，他们住的地方有一个传统，每年会不定时的举办几次“Street Party”。届时，每家都会准备一些特色食物，大家纷纷走出家们，品尝着各种美食，同时和邻居们聊天，增进彼此的了解。有些邻居人非常好，如果朋友临时出门不在家，那么等到收垃圾的时候，邻居会主动帮他们把垃圾箱推出来，待收走垃圾后再帮他们推回去。院中的草长长了，会主动帮他们锄草。每逢圣诞前，会给孩子们送上圣诞礼物。甚至在中国春节前，还给孩子们红包。真不知道这些英国人是去哪里买到地道的中国红包信封的。每次听到这个，我的感觉就是羡慕，羡慕，羡慕。。。。 中国有句古话，“远亲不如近邻”。和邻居处好关系，是有百利而无一害的。人们也应该放下手机，多一些和邻居们的互动。国外有一家著名的网站叫做Nextdoor，就是处于这一点而创建的。在这个网站上发的信息，只有邻里之间可以看到。 你知道你邻居的名字吗？","link":"/neighbour/"},{"title":"新工作模式？","text":"随着英国疫情政策的逐步放开，很多单位开始陆续分批恢复到办公室工作。很多关键岗位的员工已经开始“正常”上班，对于其他部门的同事们，也开始考虑是否回去，何时回去，怎样回办公室上班的问题。 今天组里开会的时候讨论了很多关于下一步工作模式的细节问题。关于在家工作，大家看法出奇一致。在家工作好处非常明显，但也有它的问题。 在靠谱的疫苗没有被开发出来之前，绝大多数人仍将在家工作，或者以在家工作为主。如果有了可靠的疫苗，需要进一步调整工作模式。 其次，无论今后是否有疫情困扰，大家似乎都非常认可一种办公室上班+在家办公的混合模式。毕竟，像今年上半年这样一直在家工作，也有其弊端，就是同事间少了正常的社交，同时，彼此之间的沟通不是很畅通。因此大家都觉得有必要一周内在办公室工作一到两天。 至于如何将两种工作模式混合，大家普遍认可3+2的模式，就是在家工作2天+办公室3天，或者反过来，在家工作3天+办公室2天。这样能够把高效的在家工作和满足社交需求和有效沟通的办公室模式结合起来。 一旦真正实施起来，以后大家可能都没有自己的办公室了。毕竟这样将会节省出一大笔开支。 相应的，大家将会共享一个“多功能”的场所，该场所适合不同部门的人临时办公需求。至于到底是个什么样的场所，目前还不是很清楚。 总之，未来人们的工作模式，毫无疑问的将会发生巨大的变化。","link":"/new-working-mode/"},{"title":"Node.js 学习笔记","text":"最近开始参与Node.js的翻译，正好把这个框架系统的学习一下，补一补原来在使用Node.js时的知识漏洞。把最近的心得体会整理一下。这个不是系统的教程，只是我自己的笔记而已。 关于Node.js环境的搭建不推荐使用apt-get直接安装。强烈推荐使用nvm，这就像pip之于python, rvm之于ruby一样，方便管理不同的Node.js版本。 关于Node.js中的回调函数Node.js 使用了大量的回调函数，Node.js 所有 API 都支持回调函数。而Node.js卖点之一异步编程依托的主要技术之一就是回调函数。由于大量回调函数的使用，因此在使用Node.js时思维方式一定要是多线程的，虽然Node.js是完全单一进程/线程的。 Node.js事件循环依托V8 引擎提供的异步回调接口，Node.js仅仅靠单一进程/线程就实现了可以处理大量并发请求的架构。在其实现中大量的使用了观察者模式。","link":"/node-js-1/"},{"title":"Nodejs学习笔记 - tls模块中的完美前向安全","text":"最近在翻译Node.js中有机会系统学习了一下完美前向安全。 在tls模块的数据传输中，采用了Perfect Forward Secrecy，也就是完美前向安全。说的简单一点，就是在每个会话中会根据主密码生成临时密码，在整个会话过程中使用临时密码进行数据传输。这样即使主密码泄露，也不会泄露会话密钥，从而保护过去的通信数据。","link":"/nodejs-tls/"},{"title":"英格兰国庆日童子军大游行","text":"今天是圣乔治日，也是英格兰的国庆日，全英国的很多地方都举行了盛大的游行。我家孩子参加的童子军也参加了这次游行。 英国的Scouts是针对年龄为6-25岁青少年的一个组织。在他们的各种活动中，年轻人可以获取各种经历，甚至是冒险。在个各种活动中可以锻炼孩子们的能力，比如：团队协作，时间管理，领导力，创造力，计划能力，沟通能力。 长期参加这项活动的孩子在升学就业中可以获得更多优势。","link":"/nqrst/"},{"title":"小学运动会","text":"孩子学校一年一度的运动会。英国这边学校运动会的传统项目和国内有些不同。有短跑，400米跑，手拿勺子托着球跑，还有障碍赛，只不过障碍赛中加入了不同的选项，比如人站在大购物袋中往前跳。 有的学校还让家长参赛，更是热闹。。。","link":"/omculoc0/"},{"title":"好评 - 在线美术培训","text":"疫情期间，由于全天候在家，除了正常的功课之外，给孩子们报了一个在线美术课。迄今为止虽然学习的时间不长，但已经取得了不小的进步。整体感觉非常好。除此之外，还有在线钢琴课，小提琴课，中文课，唱歌课等等。感觉似乎今后的学习方式将会从线下向线上发生彻底的改变。 在报班之前也做了简单的调研。国内类似的培训机构非常多，而且很多家都号称有上亿的融资，还有雷军，徐小平等大咖支持，似乎感觉都不错。最终选择的品牌是经朋友推荐后报名的。 这个课程的好处还是很多的，可以培养孩子的审美观，色彩敏感度，开发孩子的想象力，观察能力和动手能力等。在上课过程中，每个孩子搭配一个班主任，还有一个教学管理老师，似乎能够弥补在线教学的不足，整体的学习效果还是很好的。 上几幅孩子的画作： 这次的疫情迫使人们对很多行业的工作模式进行了深入的思考和实践。就拿美术课来说吧。以前根本没有考虑过线上的课程。但如果只选择线下课程，那么师资的选择范围就非常有限。由于我们这样生活的城市非常小，因此选择范围就更为小，往往特别好的老师太忙，想要报班的话，需要排很长的队。而现在改为线上课程，可以选择的老师不仅多，而且都是美院的专业人士。现在觉得等到疫情过去，似乎还是更倾向于线上培训课程。","link":"/online-drawing-class/"},{"title":"英中文化差异 - 开放式厨房","text":"在家中的扩建工程中，最近开始考虑新厨房和客厅的布局了。在现有的布局中，厨房和客厅是分开的。但在新厨房和客厅的设计中，我们遵循了英国这里的主流设计理念：将厨房和客厅彻底打通，形成一个整体的活动区域(Open Plan)。 图源：Pixabay 记得在国内的时候，似乎不论房子大小，能够分配给厨房的空间都不会很大。因为大家觉得厨房就是做饭的地方，而客厅才是主要的活动空间。因此应该把主要空间留给客厅。有的人家甚至把厨房挪到了阳台上，以节省出更多的空间来。记得在扩建工程还没有启动的时候，曾经咨询过一个曾经做过设计师的朋友，他强烈建议我们不要Open Plan，而是把厨房的空间缩小，增大客厅空间。 和国内不同，英国这里的主流观念是更喜欢厨房客厅一体化的设计，也叫做Open Plan Kitchen。关于这点，和英国这里的设计师咨询过，应该是因为英国这边的家庭观念似乎更强。而在全家的活动空间中，厨房和客厅同样重要，使用率也同样高。这也是为什么主流设计理念中，基本上都是开放式厨房。 我想另外一个原因可能和英国人的烹饪习惯有关吧。毕竟他们在做饭的时候以烤箱和煮锅为主，很少炒菜。至于大火爆炒，更是闻所未闻。因此他们不需要考虑油烟的问题。 我们在英国生活多年，烹饪习惯也改变了不少。虽然仍爱吃中餐，但从不大火爆炒，应该不会产生大量的油烟。选择这种一体式厨房应该没有问题。所以最终也决定选择这种Open Plan的设计。不过话说回来，有时候在看国内电视剧的时候，似乎有很多剧中的厨房都是开放式的厨房！","link":"/open-plan-kitchen/"},{"title":"学校开放日Open day","text":"转眼儿子快要升中学了，开始考虑学校的选择。周边几所不错的学校基本上把开放日(Open Day)都改成在网上的虚拟开放日了。只有一家私校仍然坚持面对面方式的开放日。于是一家人一起去这所学校进行参观。 这是一所有着数百年历史的传统英格兰私立学校。校中的师生比例非常好，每个班不超过15人。有2-3名老师负责，这样就能充分保证了对每位学生的关注度。 进入学校后，首先需要测量体温才能注册并进入学校。在学校的大厅中，会给每个家庭分配一个向导。这些向导都是学校Six form（相当于国内高三）的学生。引导我们参观的是一位漂亮的英格兰美女。在闲聊的过程中感觉她应该也是一位学霸。 参观从学校的图书馆开始，负责接待的是学校的历史老师。儿子正好学习了都铎王朝的一些历史，和这位老师聊的不亦乐乎，直到后面有别的家庭排队等候才结束。搞笑的儿子竟然知道避实就虚，问了历史老师好多地理问题，让老师无从回答。。。？？？ 后来又参观了学校的语言教学部。和很多英格兰传统私校一样，这里提供法语，西班牙语，德语，和拉丁语课程。同时，还新增了中文课程。为了让学生们体验不同的文化，（在疫情之前）学校还经常组织学生们到欧洲各国旅游，增加阅历。 至于更为重要的GCSE和A-Level科目英语和数学科目，感觉更加学术。和老师聊的也基本上是升学考试的一些相关问题。 这个学校比较有特色的一个课程是护士的预科课程。由于英国的护士奇缺，因此会有这种预科课程。这个课程针对的是高中后两年的学生。在课程结束后，学生需要在大学再学习三年的护士课程就可以分配工作。因此这个课程还是很受欢迎的。 最后回到大厅后，家长们可以一起喝茶，吃些简餐，同时和学校老师们交谈。最后还有许多在校生进行的才艺表演：钢琴，小提琴，独唱等等。 感觉这所学校还是很有特色的一所经典英格兰学校，可以在我们的考虑范围之内。","link":"/openday/"},{"title":"多年没有感受到过年味道的我在圣诞前夕体验到了浓浓的节日氛围","text":"记得小的时候每逢过年大家都非常兴奋。亲朋好友间要互相串门拜年，孩子们一直都在盯着家里的年货。一把鞭炮就能让孩子们兴奋的玩耍半天。可以说是一年中大家最期盼的日子。但是也记不清从何时开始，在国内过年的时候大家都在说已经没有年味了。人们很少再互相串门，孩子们也没有那么期盼过年了。 但是很有趣的是，今年圣诞来临之际，却仍我感受到了浓浓的节日气氛，甚至是有些年味了，虽然是外国人的年。 政府工作人员不辞辛苦驾着拖拉机拉着雪橇，扮做圣诞老人挨门挨户给小朋友们送去圣诞祝福： 各大超市也都装扮的非常有节日气氛 单位的圣诞树下也是摆满了各种礼物，单位也是提供各种巧克力和小吃慰劳大家，同时还有各种圣诞聚餐，party等等。 英国各地的圣诞集市也是热闹非凡，有着各种小商品和小吃 孩子的学校举行的圣诞联欢会更是让我想起了小时候过年前班级里搞的新年联欢会。同学们围坐在教室中，吃着各种零食，观看同学们准备的节目。节目表演结束后，还会有各种有奖游戏，比如：猜谜，套环，钓鱼等等。奖品虽小，无非就是铅笔，橡皮或者糖果什么的，但大家都玩的兴致非常高。在英国这里的圣诞联欢会孩子们似乎就和我小时候一样的兴奋。 这是一种抽奖游戏，20P购买一个随机号码，立刻就能查看是否中奖 这个是套环游戏，和国内的感觉一样 这个游戏则是在一桶碎纸条中淘宝，由于眼睛看不到，只能靠自己的手去探索 这个游戏很有意思，把很多绳子的一头捆上各种奖品，然后把绳子混在一起，购票后可以从绳子的另一端选择一根绳子，轻轻一拽就知道自己能拿到什么奖品了 这里预先祝大家圣诞快乐！","link":"/or/"},{"title":"2020年的第一次Outlet扫货","text":"今天也算是2020年第一次重新去Outlet购物中心购物，记录一下。 其实英国自从近期逐步解封后，在部分地区的感染人数再次上升，不禁让人非常担心。甚至在曼城，莱斯特等地再次恢复到解封前的状态。 但可能是因为住在一座小城的原因吧，我们来到Outlet的时候，感觉似乎和疫情之前没有什么区别，停车场上还是车满为患，很难找到停车位。最为夸张的是入口处，由于实行了单行系统，在入口处排起了长长的队。 在购物时感觉最明显的有两点。 其一是由于政府颁布的最新法令，所有人终于都带上了口罩。回想在几个月前，疫情最为严重的时候，戴口罩的人竟然是极少数。有些地方还发生了戴口罩的人被袭击的事件。可现在，疫情有所缓解，大家却纷纷带上了口罩。真的是戏剧化的变化。 其二是感觉商品折扣力度非常大。Outlet我之前也经常来，但并没有感觉到如此大的力度。于是媳妇立刻开启了买买买的模式。。。我想这可能是几个月的封城令下，实体店已经不堪重负，纷纷下血本清仓，期待现金回流吧。 由于目前大家都很注意社交距离，同时人人都带有口罩，在每家商店门口都有酒精消毒液，因此感觉只要注意一下，应该还是比较安全的。近期应该还会再次来Outlet扫货吧。","link":"/outlet2020/"},{"title":"国外经典儿童读物推荐之：Owl Babies  － 陪伴是给孩子们最好的礼物","text":"今天给大家推荐这本非常温馨的儿童读物：Owl Babies猫头鹰宝宝。里面讲述的是叫做Sarah，Percy，和Bill的三只小猫头鹰的故事。它们和妈妈一起住在森林中的一个树洞里，但有一天发现妈妈不在了。三只小猫头鹰互相依偎，互相安慰。它们的对话也充分体现除了孩子们在等待妈妈时候的焦虑心情。尤其是最小的Bill，在两个姐姐猜测完妈妈去哪里，干什么之后，还不太会表达，每次都是在最后怯怯却又感情至深的说一句：I want my mummy！在漫长的等待后，妈妈终于回来了！ Image source: Amazon 我感觉这本书不仅教育孩子在父母不在身边的时候要勇于面对，同时也告诉父母一个道理：对于孩子们来说，父母的陪伴是最好也是最珍贵的礼物。真的是一部超级温馨的睡前读物！","link":"/owl-babies/"},{"title":"阔别8个月，终于又打了一次乒乓球","text":"自从去年圣诞节前打过最后一场联赛后，由于疫情，体育馆都闭馆了，各种比赛也都取消了。因此一直没有机会打球。最近几天天气不错，球队队友发现了一个露天球台。于是立刻约起，终于过了一把手瘾。 其实在英国的很多公园中都有露天的乒乓球台。这些球台通常是户外的专用球台，其弹性和平时用的室内球台差距非常大。因此如果经常在这些球台上打球的话动作可能会变形。好在球友发现的这个球台是正常的室内木制球台，其弹性还算可以。唯一的问题就是常年在室外风吹雨淋，由于台面不是很干净，个别地方球打上去会有些打滑。 另外还有一点是英国的天气常年阴雨绵绵，而且经常妖风四起，非常不适合在户外打乒乓球和羽毛球这些小球。因此只要遇到好的天气，就绝对不能错过。 稍微把桌面清理干净，就开练了。首先练习的基本功：正手攻球，反手攻球，弧圈球。几个月没碰球，感觉手还是真的有些生了。原本十拿九稳的拉球，时不时会拉飞了。另外可能因为几个月宅在家中没有运动的缘故吧，脚下的步子似乎有些迈不开，原本一些能够接到的球由于脚下没有到位竟然会错过。 接下来练了一些固定的套路：发球侧身抢拉，连续拉两个大角，接发球拧拉后连续拉。按照原来的习惯，热身后就要开始打比赛了。但我和队友感觉都没有准备好进行比赛。还是等到下次吧。 查看了一下本地联赛的信息。今年10月开始，各个俱乐部的联赛会”正常”开始，当然，会加上很多额外的措施来保证彼此的安全。 期待下个赛季的开始！","link":"/outdoor-table-tennis/"},{"title":"尝试在Google Cloud平台创建免费VM","text":"可能是由于和Amzon AWS竞争吧，Google的云服务平台对于新建账户提供价值300美元的账户余额，可以用于Google的各种计算资源。最为吸引我的是在Google云平台上，可以创建配置相对较高的VM，直到你的免费余额用完为止。而且在免费余额用完后，不会自动从你的信用卡扣钱。只有人工确认后才会转为收费账户。下面就在Google云平台创建一个1 vCPU, 3.75GB RAM的VM为例介绍一下整个过程。 首先登录这个页面：https://console.cloud.google.com/freetrial/signup/tos?pli=1 第二步，输入基本信息： 只不过需要输入信用卡信息。不过在上一页中说的很清楚：试用期满之后，除非你人工确认想要继续付费，否则不会从信用卡扣钱。 验证成功后，可以看到用户面板： 首先进入“Billing”，可以看到，账户余额转换为英镑后为：243英镑，可以在一年内使用。 接下来创建一个项目： 访问：https://console.cloud.google.com/apis/library/compute.googleapis.com 单击“ENABLE”来激活”Compute Engine API”。这个操作比较慢，需要等一小会。 然后访问：https://console.cloud.google.com/compute/instances 首先是要决定选择什么类型的VM，我只想创建一个在给定的免费余额范围内(243英镑，也就是大约每个月20英镑）配置最高的VM。访问这个页面可以计算各种VM的费用： https://cloud.google.com/products/calculator 这里我选择Ubuntu, 1 vCPU, 3.75GB RAM，位于伦敦的VM。如果一周7天，一天24小时都在用的话，每月大约25.31英镑。这样，免费提供的243英镑余额可以用9个多月。 如果把使用时间降低为每天12个小时，费用明显降了下来。这样Google提供的免费余额可以使用1年： 既然选好了，下面就开始创建VM了。可以看到，还可以选择Docker image来创建自己的VM。 都选好之后，单击”Create“按钮，就开始创建VM了，整个过程需要等待一小会。 创建成功了： 可以在浏览器中打开SSH窗口： 如果不能sudo，需要在以下页面中添加你的SSH KEY就可以了： https://console.cloud.google.com/compute/metadata/sshKeys 至此，VM已经可以使用了。","link":"/google-cloud-vm/"},{"title":"业余油漆工","text":"最近房屋扩建进展速度非常快，上周plaster把水泥抹好后，现在基本上已经晾干了，我这个业余的油漆工要上场了。 虽然喜欢刷漆这个活，但还是把最困难的活，包括门厅，楼道，还有所有木漆留给了专业的油漆工，自己只负责一个最好刷的空荡荡的大厅。 所谓“工欲善其事，必先利其器”，早早就把刷漆的各种工具订好了：各种各样的刷子，滚筒，梯子，砂纸，小铲子等等。 至于漆的选择，房顶选择的的Brilliant White，质地选择的是Matt。在这点上是没有任何争议的。但在墙漆的选择上，一直都在犹豫。目前周边朋友选择的似乎都是淡灰色系的，但即使是灰色系，还存在很多细微的差别，最终选定了一款叫做“French Grey”的颜色。 根据Builder的推荐，首先选择了一种合适新水泥墙的底漆，据他说使用这种漆后，墙不容易裂缝，第二/三层的漆更容易附着。实践证明，听老司机的推荐绝对没跑，这种漆的覆盖性非常好，房顶只刷了一遍，很多地方几乎已经好了。 按照我的估算，在一天内我应该可以把房顶和墙总共刷其中的3/4，但实际干起来的话，速度远远没有我想象得那么快。最主要得原因在于，对于那些边边角角，需要用胶带把需要保护得地方贴起来，然后再刷，刷完后再撕掉。这种准备和善后工作非常耗时。这样一天下来，只刷了整个房子的一半。 但无论如何，看到房子在自己的手中越来越有样子了，心中还是很有成就感的。","link":"/painting/"},{"title":"领取PAL空投","text":"今天登陆Steem Engine后发现多了这么个图标。点进去后才发现是PAL代币的空投。 既然有大佬给发糖果，自然要领一下。需要用Active Key登录才可以领取，这里再次推荐使用Steem Key Chain，非常好用。总共领取了648 PAL，原来领取数量和你的SP有关。 如果你还没有领的话，快去吧，似乎到本周末结束。","link":"/pal/"},{"title":"英国圣诞传统之一：圣诞童话剧Pantomime","text":"英国圣诞节的一个传统就是全家要去观看一场圣诞童话剧。我们也很喜欢当地的这个传统，于是上个周末全家去看了经典圣诞童话剧之一：Sleeping Beauty睡美人。由于全场不让拍照，因此只能在中场休息的时候照了一下这个屏幕： 虽然名字和《睡美人》的经典故事完全相同，但剧情却做了大幅动的改编，添加了很多滑稽搞笑成分，同时还把英国脱欧等时事添加了进去。最让观众喜爱的就是和演员们的互动环节。其实，这也是圣诞童话剧观众的必备技能之一。比如：如果演员在寻找某个人，但假装找不到的话，观众们一定要进行提醒，”He’s behind you!”，如果台上演员的台词是 “Yes it is!” ，台下观众一定要唱反调，”No it isn’t!”等等，看到了巫师上场，一定要喝倒彩，”Booooooooooo”。我想，这也是很多观众喜爱圣诞童话剧的原因之一吧，整个表演是属于演员和观众的。坐在我们旁边的老爷爷老奶奶每年都订同一个剧的同样位置的座位，已经连续好多年了。看来是真爱啊。。。","link":"/pantomime/"},{"title":"原生态的Papagayo海滩","text":"既然到了Lanzarote岛上，海滩肯定是要去的，我们去的是尚未开发的，原生态海滩 - Papagayo海滩。这里周边都是悬崖峭壁，如果感兴趣可以考虑爬上去，因为在上面可以俯瞰海滩美景。 这里还有两家海鲜餐厅，如果饿了可以在餐厅就餐，价格比岛上其他餐厅要贵些，但毕竟有胜于无。","link":"/papagayo/"},{"title":"(Part 1) Build Steem blockchain application with Vue.js - installation and first demo","text":"RepositoryVue.js: https://github.com/vuejs/vue What Will I Learn? Vue.js development environment setup Build first Vue.js application Interact with Steem blockchain in Vue.js application Requirements A Node.js environment (Ubuntu 18 + Node.js is used in this tutorial) Basic HTML/CSS/Javascript knowledge DifficultyBasic level PreparationsIn order to implement the demo application, you need the Node.js environment. Run this command: node -v The output should look like: v11.10.0 If you do not have Node.js installed, make sure get it installed before following this tutorial. Node Version Manager is highly recommended to install/manager your Node.js. Tutorial ContentsIn this tutorial, first you will learn how to setup the Vue.js development environment, then you will learn how to read user profile from Steem blockchain and display these information by using Vue.js (The demo can be seen from: https://vuejstutorials.herokuapp.com). Install Vue-cliRun this command to install Vue-cli: npm install -g vue-cli Create a project:First you need to create a Vue.js project, e.g. vue init webpack steemdemo You will be asked some questions while creating the project, just choose the default values as shown below (Choose ‘No’ for tests as it will be covered later): Now we are ready to test the demo project, type the following command: cd steemdemo npm run dev Open your browser and enter http://localhost:8080 (OR http://YOUR_HOST:8080), you will see this page: You will find the following sub folders have been created in your project folder: build: this folder contains the webpack settings config: this folder contains project settings node_modules: this folder contains all required Node.js modules src: this is the source code of your project static: the static assets in your project The ‘src’ folder will be the main folder you will be working on, type this command: tree src You will see output as shown below: ‘App.vue’ is the main component of your application and ‘main.js’ is the entry point of your application. All routes are defined in router/index.js. A ‘HelloWorld’ component has been generated in components/HelloWorld.vue. Read user profile from Steem blockchainNow, the generated Vue.js scaffolds needs to be modified to read a user’s profile from Steem blockchain and show these information in the page, as shown below: Install steem jsFirst, you need to install steem module npm install steem --save Add Profile.vueRename components/HelloWorld.vue to components/Profile.vue and update its content as shown below: &lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;profile_header&quot; v-bind:style=&quot;{backgroundImage: &apos;url(&apos; + profile.cover_image + &apos;)&apos;}&quot;&gt; &lt;img class=&quot;profile_avatar&quot; v-bind:src=&quot;profile.profile_image&quot;/&gt; {{profile.name}} &lt;br/&gt; &lt;div&gt;About: {{ profile.about }}&lt;/div&gt; &lt;div&gt;Location: {{ profile.location }}&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; let steem = require(&apos;steem&apos;) export default { name: &apos;Profile&apos;, data () { return { profile: &apos;&apos; } }, created () { let names = [&apos;aafeng&apos;] let currentComponent = this steem.api.getAccounts(names, function (err, result) { if (err) { console.log(err.stack) } var jsonMetadata = JSON.parse(result[0].json_metadata) currentComponent.profile = jsonMetadata.profile }) } } &lt;/script&gt; &lt;style scoped&gt; .profile_header { padding: 10px; background-size: 100%; } .profile_avatar { height: 30px; width: 30px; } &lt;/style&gt; Profile.vue has three parts: template, script, and style. template The template is mainly HTML tags, plus Vue.js directives to link data to its display elements, and Vue.js interpolation to show some values in the page. For example, the following code means that ‘profile_image’ property of ‘profile’ is linked to the img tag’s src property. Whenever the profile is loaded from Steem blockchain, the image will be loaded by Vue.js. &lt;img class=&quot;profile_avatar&quot; v-bind:src=&quot;profile.profile_image&quot;/&gt; Interpolation is used to display texts in the template: {{profile.name}} {{profile.location}} script Within the script tag, Vue.js component is defined, e.g. with name, data, and created function. The data defined in the data function can be used in the template. The empty string has been used as the default value of ‘profile’. ‘created’ function is used to initialize the profile, e.g. read user’s profile from Steem blockchain and save jsonMetadata into profile of current component. Note: in this demo, a hardcoded username, e.g. ‘aafeng’ is used, but it will be changed later. style The style tag’s name explains the purpose of it, e.g. defining the CSS styles which are used in the current component. router/index.jsNow you need to update router/index.js with the following content: import Vue from &apos;vue&apos; import Router from &apos;vue-router&apos; import Profile from &apos;@/components/Profile&apos; Vue.use(Router) export default new Router({ routes: [ { path: &apos;/&apos;, name: &apos;Profile&apos;, component: Profile } ] }) In the code above, Profile is registered first: import Profile from &apos;@/components/Profile&apos; Then routes are modified because Profile will be used as the homepage: routes: [ { path: &apos;/&apos;, name: &apos;Profile&apos;, component: Profile } ] Now you can run this command to launch your application: npm run dev Open your browser and access: http://YOUR_HOST:8080 (In my case, it is http://localhost:8080) and you will see the your first demo! Proof of Work DoneSource code for this tutorial: https://github.com/aa-feng/VuejsTutorial/tree/v0.11 Master branch of the source code (will be updated with ongoing tutorials): https://github.com/aa-feng/VuejsTutorial","link":"/part-1-build-steem-blockchain-application-using-vue-js-installation-and-first-demo/"},{"title":"Parque Nacional de Timanfaya蒂曼法亚火山公园","text":"Parque Nacional de Timanfaya蒂曼法亚火山公园是Lanzarote这里的地标。公园覆盖将近200平方公里，超过整个岛的四分之一。这座火山公园充分体现了大自然的鬼斧神工，在1730年时由100多个火山口连续喷发6年之久而形成。 这里有一个圆形的火山灰石沙地，其中的火山灰石很烫手。在这里可以看看小火山口，如果将干草扔进去，很快就会被点燃。同时还设有很多粗粗的铁管，如果将一桶冷水倒入其中，则很快就会变成开水并向空中喷射出10余米高。 这里最有特色的食物就是火山烤鸡/烤肉。完全利用火山的能量将食物烤熟。 Posted using Partiko Android","link":"/parque-nacional-de-timanfaya-voul9grz/"},{"title":"Part 2 - Build Steem blockchain application with Vue.js - components, computed properties and build&#x2F;deployment process","text":"RepositoryVue.js: https://github.com/vuejs/vue What Will I Learn? Vue.js components Computed properties How to build and deploy Vue.js application Requirements A Node.js environment (Ubuntu 18 + Node.js is used in this tutorial) Basic HTML/CSS/Javascript knowledge DifficultyBasic level Tutorial contentsIn last tutorial, you have learned how to setup Vue.js development environment, and build your first Vue.js application to read user profile from Steem blockchain. In this tutorial, you will learn more about Vue.js components, adding computed properties to Vue.js components, and how to build and deploy Vue.js application. The aim of this tutorialAs demonstrated here, you will add three new components, e.g. Posts, Comments, and Activities and within each of these components, Profile component is included. You will also refactor Profile component to add computed properties and use them in the template. Last but not least, you will learn how to build your project for production and how to deploy your project to a web server. Add new componentsAs shown in the wireframe below, three components will be added, e.g. Posts, Comments, and Activities. In addition, Profile will be used in each of these three components. To do so, you will need to create three files, e.g. Posts.vue, Comments.vue, and Activities.vue in src/components folder. For now, the three components are very similar - the actual code to load information from Steem blockchain will be added later. For example, the content of Posts.vue is: &lt;template&gt; &lt;div&gt; &lt;Profile&gt;&lt;/Profile&gt; Posts &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import Profile from &apos;./Profile&apos; export default { name: &apos;Posts&apos;, components: { Profile } } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; In the above code, a new component called ‘Posts’ is defined: export default { name: &apos;Posts&apos;, ... } Since Profile needs to be included in the ‘Posts’ component, it needs to be imported first: import Profile from &apos;./Profile&apos; Also, it needs to be declared within the ‘Posts’ component: components: { Profile } Then the ‘Profile’ tag can be used in the template: &lt;Profile&gt;&lt;/Profile&gt; Similarly, you can define ‘Comments’ and ‘Activities’ component. Now you may want to use ‘Posts’ component as the default page, and use ‘/comments’ and ‘/activities’ to access ‘Comments’ and ‘Activities’ component. To do so, you need to update the router, e.g. make changes to router/index.js: import Vue from &apos;vue&apos; import Router from &apos;vue-router&apos; import Posts from &apos;@/components/Posts&apos; import Comments from &apos;@/components/Comments&apos; import Activities from &apos;@/components/Activities&apos; Vue.use(Router) export default new Router({ routes: [ { path: &apos;/&apos;, name: &apos;Posts&apos;, component: Posts }, { path: &apos;/comments&apos;, name: &apos;Comments&apos;, component: Comments }, { path: &apos;/activities&apos;, name: &apos;Activities&apos;, component: Activities } ] }) You may notice that the URL for your application is a bit strange, e.g. the URL for default page is “http://localhost:8081/#/” and the URL for comments is “http://localhost:8081/#/comments/”. The reason for this is because Vue.js has two modes to manage the URL: ‘hash’ mode (default mode) and ‘history’ mode. You can add the following line to router/index.js, just before routes definition: mode: &apos;history&apos;, After this change, the url looks normal, e.g. the default page will be accessible via “http://localhost/” and the comments page is accessible via “http://localhost/comments”. Something is still missing, right? Yes, users can hardly switch between these components/pages. So you need to add a basic navigation bar. Just add the following to App.vue, before “”: &lt;nav&gt; &lt;router-link to=&quot;/&quot;&gt;Posts&lt;/router-link&gt; &lt;router-link to=&quot;/comments&quot;&gt;Comments&lt;/router-link&gt; &lt;router-link to=&quot;/activities&quot;&gt;Activities&lt;/router-link&gt; &lt;/nav&gt; Refactor existing code and add computed propertiesNow you will learn how to add user’s voting power and reputation to the profile. As those information are not stored in the json_metadata returned by Steem js, so a new data attribute ‘userdata’ is added to store necessary information, e.g. data () { return { profile: &apos;&apos;, userdata: &apos;&apos; } }, And add following to ‘created’ method: currentComponent.userdata = result[0] Also, the voting power and reputation returned by Steem js are not in the format you are familiar with, so some additional processes are needed. The computed properties in Vue.js are the perfect way to deal with this. In this case, two computed properties need to be added into Profile.vue: computed: { voting_power () { return parseFloat(this.userdata.voting_power) / 100 }, reputation () { return steem.formatter.reputation(this.userdata.reputation) } } Now you can use these computed properties in the template: &lt;div&gt;VP: {{ voting_power }}&lt;/div&gt; &lt;div&gt;Reputation: {{ reputation }}&lt;/div&gt; Build and deploymentTo build your Vue.js application, just type this command: npm run build It will build your Vue.js project and generate a static website in ‘dist’ folder. The files in this folder can be seen by running commands: cd dist tree . The output looks like: The deployment is very straightforward: just copy all files and subfolders within ‘dist’ folder to your web server and then you will be able to access it. CurriculumThis is the second tutorial. More interesting topics will be covered in the following tutorials! Previous tutorialsPart 1 - Build Steem blockchain application with Vue.js: installation and first demo Proof of Work DoneSource code for this tutorial: https://github.com/aa-feng/VuejsTutorial/tree/t02 Master branch of the source code (will be updated with ongoing tutorials): https://github.com/aa-feng/VuejsTutorial","link":"/part-2-build-steem-blockchain-application-using-vue-js-components-computed-properties-and-build-deployment-process/"},{"title":"Part 3 - Build Steem blockchain application with Vue.js - using Bootstrap, nav component, mixins, and first iteration of Posts component","text":"RepositoryVue.js: https://github.com/vuejs/vue What Will I Learn? How to use Bootstrap in Vue.js The nav component in Vue.js Abstract common functionalities into mixins Load posts from Steem blockchain into Posts component Requirements A Node.js environment (Ubuntu 18 + Node.js is used in this tutorial) Basic HTML/CSS/Javascript knowledge DifficultyBasic level Tutorial contentsIn last tutorial, you have learned Vue.js components, computed properties, and the build and deployment process for Vue.js application. In this tutorial, you will learn how to use Bootstrap in Vue.js, how to use nav component in Vue.js, use mixins to abstract common functionalities, and load post information from Steem blockchain into Posts component. The aim of this tutorialAs shown below, you will iterate your Vue.js application and add new functionalities: you will add three tabs, load posts from Steem blockchain, and use Bootstrap to control your Posts component layout. The live demo is here: https://aa-feng.github.io/ Using Bootstrap in Vue.js Bootstrap 4 is the world’s most popular framework for building responsive, mobile-first sites. First, to make your Vue.js application responsive and control the layout of your components, you will learn how to use Bootstrap in your Vue.js application. Run this command to install bootstrap-vue and bootstrap packages: npm i vue bootstrap-vue bootstrap --save You also need to register BootstrapVue plugin in your application’s entry point, e.g. add the following code to main.js: import BootstrapVue from &apos;bootstrap-vue&apos; Vue.use(BootstrapVue) Also, import the CSS files: import &apos;bootstrap/dist/css/bootstrap.css&apos; import &apos;bootstrap-vue/dist/bootstrap-vue.css&apos; Now, you are ready to use Bootstrap in your components! You can layout your POST component like this: &lt;div class=&quot;row post&quot;&gt; &lt;div class=&quot;row post_header&quot;&gt; &lt;div class=&quot;col-sm-12&quot;&gt; POST top bar &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row post_content&quot;&gt; &lt;div class=&quot;col-sm-2 col-xs-12 post_image&quot;&gt; THUMBNAIL &lt;/div&gt; &lt;div class=&quot;col-sm-10 col-xs-12 post_image&quot;&gt; CONTENT &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; It looks like: The nav component in Vue.jsIn previous tutorial, we only have a very basic navigation bar. Actually, Vue.js provides a nice navigation component called ‘nav’. You can change the navigation by changing the code in App.vue to: &lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;Profile&gt;&lt;/Profile&gt; &lt;b-nav tabs&gt; &lt;b-nav-item active&gt;&lt;router-link to=&quot;/&quot;&gt;Posts&lt;/router-link&gt;&lt;/b-nav-item&gt; &lt;b-nav-item&gt;&lt;router-link to=&quot;/comments&quot;&gt;Comments&lt;/router-link&gt;&lt;/b-nav-item&gt; &lt;b-nav-item&gt;&lt;router-link to=&quot;/activities&quot;&gt;Activities&lt;/router-link&gt;&lt;/b-nav-item&gt; &lt;/b-nav&gt; &lt;router-view/&gt; &lt;/div&gt; &lt;/template&gt; Now you will be able to see the navigation bar as shown below: You may notice that some code refactoring has been done, e.g. the call to ‘Profile’ component has been moved to ‘App.vue’. The reason for that is because ‘Profile’ component is used by all three components, e.g. Posts, Comments, and Activities. Therefore, it is a better idea to call it in the parent component, e.g. in ‘App.vue’, rather than duplicate the calls in all these three components. mixins Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be “mixed” into the component’s own options. Since user information, e.g. username, reputation are used in all components, you don’t want to duplicate your code across all these components. Mixins is the perfect way to abstract common functionalities into a single place. First, create file: src/components/mixins/user.js and add the following content: let steem = require(&apos;steem&apos;) export default { name: &apos;User&apos;, data () { return { username: &apos;aafeng&apos;, // default username profile: &apos;&apos;, // Save user&apos;s jsonMetadata to profile userdata: &apos;&apos; // User&apos;s metadata } }, created () { let names = [this.username] let currentComponent = this // Store this of current component (Profile) to currentComponent steem.api.getAccounts(names, function (err, result) { // retrieve data from Steem if (err) { console.log(err.stack) } currentComponent.userdata = result[0] // save the first user&apos;s data to userdata property var jsonMetadata = JSON.parse(result[0].json_metadata) // convert user&apos;s json_metadata to JSON currentComponent.profile = jsonMetadata.profile // save user&apos;s json_metadata to user&apos;s profile property }) }, computed: { voting_power () { return parseFloat(this.userdata.voting_power) / 100 // return a user friendly format of voting power }, reputation () { return steem.formatter.reputation(this.userdata.reputation) // return a user friendly format of reputation } } } All above code are moved from ‘Profile.vue’. Then your ‘Profile.vue’ will be much simpler, e.g. the code will be: &lt;script&gt; import User from &apos;./mixins/user&apos; export default { name: &apos;Profile&apos;, mixins: [User] } &lt;/script&gt; In the above code, you need to import the User from mixins then you need to declare you want to use ‘User’ mixin in your ‘Profile’ component. The template stays as same as the previous version. In other components, you just need to follow the same rule if you want to use ‘User’ mixin. First iteration of Posts componentTo add posts information to Posts component, first you need to define a data attribute, e.g. posts, as shown below: data () { return { posts: [] // user&apos;s posts } } Then, you can use Steem js to retrieve user’s posts from Steem blockchain, as shown below: created () { let postComponent = this steem.api.getDiscussionsByAuthorBeforeDate(this.username, null, new Date().toISOString().split(&apos;.&apos;)[0], 10, function (err, result) { if (err) { console.log(err.stack) } postComponent.posts = result }) } You may notice that, for now, only a fixed number of posts are loaded, e.g. 10 latest posts are loaded. For some information in the posts, e.g. the payouts (pending payouts / payouts), they might be used in other components, so it would be a good idea to define a new mixin, e.g. post mixin to include the common functionalities related to posts. You need to add a new file: src/components/mixins/posts.js with the following content: export default { name: &apos;Post&apos;, methods: { // return pending payout or paid awards payout (post) { if (post.pending_payout_value !== &apos;0.000 SBD&apos;) { // If it’s pending payout return post.pending_payout_value.replace(&apos; SBD&apos;, &apos;&apos;) } else { // if past payout, use total_payout_value return post.total_payout_value.replace(&apos; SBD&apos;, &apos;&apos;) } }, firstImage (post) { // return first image URL from page content const regex = /(https?:\\/\\/.*\\.(?:png|jpg|gif))/g // For now only check jpg/png/gif images let img = regex.exec(post.body) if (img === undefined) { return &apos;&apos; } return img[0] } } } In Posts component, both user and post mixins are needed, so declare them as below: mixins: [User, Post], Now it is the time to modify the template in Post.vue: &lt;div class=&quot;post_container&quot;&gt; &lt;div class=&quot;row post&quot; v-for=&quot;post in posts&quot; :key=&quot;post.post_id&quot;&gt; &lt;div class=&quot;row post_header&quot;&gt; &lt;div class=&quot;col-sm-12&quot;&gt; {{username}}({{reputation}}) Category: {{ post.category }} Post time: {{ post.created }} &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row post_content&quot;&gt; &lt;div class=&quot;col-sm-2 col-xs-12 post_image&quot;&gt; &lt;img class=&quot;post_thumbnail&quot; v-bind:src=&quot;firstImage(post)&quot;/&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-10 col-xs-12 post_image&quot;&gt; &lt;a v-bind:target=&quot;&apos;_blank&apos;&quot; v-bind:href=&quot;&apos;https://steemit.com&apos;+post.url&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;br/&gt; Payout: ${{ payout(post) }} Votes: {{ post.active_votes.length }} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; As you can see, all methods defined in user and post mixins can be used in the template directly. Now, each post shows like below: Proof of Work DoneSource code for this tutorial: https://github.com/aa-feng/VuejsTutorial/tree/t03.1 Master branch of the source code (will be updated with ongoing tutorials): https://github.com/aa-feng/VuejsTutorial","link":"/part-3-build-steem-blockchain-application-with-vue-js-using-bootstrap-mixins-and-first-iteration-of-posts-component/"},{"title":"Part 4 - Build Steem blockchain application with Vue.js - dynamic route, and event handling","text":"RepositoryVue.js: https://github.com/vuejs/vue What Will I Learn? How to use dynamic route in Vue.js How to register event handler in Vue.js Requirements A Node.js environment (Ubuntu 18 + Node.js is used in this tutorial) Basic HTML/CSS/Javascript knowledge DifficultyBasic level Tutorial contentsIn last tutorial, how to use Bootstrap, navigation bar, and mixins were discussed. In this tutorial, the discussion will focus on how to use dynamic route to load other Steem user’s information, and how to use event handler to implement an infinite loading of user’s posts. The aim of this tutorialIn the end of the tutorial, the new functionalities will be added to the Vue.js application: First, by using dynamic route in Vue.js, this Vue.js application becomes more flexible, e.g. by adding a username to the end of the URL, that user’s information will be loaded. Second, an infinite loading feature will be implemented by using Vue’s event handler. The live demo is here: https://vuetutorials.aafeng.top Using dynamic route in Vue.jsUpdate routes to accept username from URLFirst, the routes defined in router/index.js need to be updated, e.g. routes: [ { path: &apos;/:username/&apos;, // match path &apos;/&apos; to Posts component name: &apos;Posts&apos;, component: Posts }, { path: &apos;/:username/comments/&apos;, // match path &apos;/comments&apos; to Comments component name: &apos;Comments&apos;, component: Comments }, { path: &apos;/:username/activities/&apos;, // match path &apos;/activities&apos; to Activities component name: &apos;Activities&apos;, component: Activities } ] In the above code, :username will be used to store other username provided in the URL, e.g. if the URL is: https://YOUR_HOST/@utopian-io, then Vue.js will parse the URL and store ‘@utopian-io’ into ‘username’. To access the username passed via URL, the following expression can be used: $route.params.username Add a computed attribute to return appropriate usernameA hardcoded username, e.g. ‘aafeng’ was used in previous tutorial, now it can be refactored to return appropriate username. For example, when username is not provided in the URL, a default username will be used. Otherwise the username provided in the URL will be used across the whole application. To do so, a computed username attribute can be defined as follows: computed: { username () { const defaultUsername = &apos;aafeng&apos; // default username if ((typeof this.$route.params !== &apos;undefined&apos;) &amp;&amp; (typeof this.$route.params.username !== &apos;undefined&apos;) &amp;&amp; this.$route.params.username.startsWith(&apos;@&apos;)) { return this.$route.params.username.substring(1, this.$route.params.username.length) } else { return defaultUsername } } } Access username in other componentsSince username is needed while reading user’s posts in Posts component, so user mixin is need in Posts component: mixins: [User, Post], The navigation bar needs to be updated as well: &lt;b-nav tabs&gt; &lt;b-nav-item active&gt;&lt;router-link :to=&quot;&apos;/@&apos;+username&quot;&gt;Posts&lt;/router-link&gt;&lt;/b-nav-item&gt; &lt;b-nav-item&gt;&lt;router-link :to=&quot;&apos;/@&apos;+username+&apos;/comments&apos;&quot;&gt;Comments&lt;/router-link&gt;&lt;/b-nav-item&gt; &lt;b-nav-item&gt;&lt;router-link :to=&quot;&apos;/@&apos;+username+&apos;/activities&apos;&quot;&gt;Activities&lt;/router-link&gt;&lt;/b-nav-item&gt; &lt;/b-nav&gt; Server configurationAs described in Vue.js documentation, server side configuration is needed. Otherwise a ‘404’ error will be issued when adding a username to the URL. Nginx is used in the demo site (https://vuetutorials.aafeng.top) and the Nginx configuration is: location / { try_files $uri $uri/ /index.html; } Register event handler in Vue.jsIn previous tutorial, a fixed number of posts are loaded in the Posts component. An infinite load feature will be implemented in this tutorial, e.g. when user scroll down to reach the bottom of the current page, two more posts will be loaded and updated in the page. To achieve this, a new method called ‘scroll’ is added to Posts component: scroll () { let postComponent = this window.onscroll = () =&gt; { let bottomOfWindow = Math.round(document.documentElement.scrollTop + window.innerHeight + 5) &gt;= document.documentElement.offsetHeight if (bottomOfWindow) { steem.api.getDiscussionsByAuthorBeforeDate(this.username, null, new Date().toISOString().split(&apos;.&apos;)[0], postComponent.posts.length + 2, function (err, result) { if (err) { console.log(err.stack) } postComponent.posts = result }) } } } In the above code, some calculation is needed to check if the bottom of the page is reached. When reached, a called is made to get current posts, plus two more posts. The posts attribute of Posts component is updated. Vue.js will monitor the changes to posts attribute and update the page automatically. Please note, ideally only two new posts need to be loaded and appended to the posts attributes. However, as stated in this issue, the beforeDate is not working. Since this issue is a bit off topic here, so the above code just simply load two more posts + currently loaded posts. In addition, ‘scroll’ method must to be registered in mounted() method, as shown below: mounted () { this.scroll() } Proof of Work DoneSource code for this tutorial: https://github.com/aa-feng/VuejsTutorial/tree/t04 Master branch of the source code (will be updated with ongoing tutorials): https://github.com/aa-feng/VuejsTutorial","link":"/part-4-build-steem-blockchain-application-with-vue-js-dynamic-route-and-event-handling/"},{"title":"Part 5 - Build Steem blockchain application with Vue.js - Passing data among components, state management via Vuex, and data persistent in Vue.js","text":"RepositoryVue.js: https://github.com/vuejs/vue What Will I Learn? How to pass data between parent and child components How to manage states by Vuex How to persist data in Vue.js application Requirements A Node.js environment (Ubuntu 18 + Node.js is used in this tutorial) Basic HTML/CSS/Javascript knowledge DifficultyBasic level Tutorial contentsIn last tutorial, dynamic route and event handling has been discussed. A few components have been added. Now it is the time to think about how to pass information between components. The most basic way of passing data between components will be discussed first, e.g. using parameters and events between parent and child components. Then the limitations will be discussed and Vuex will be introduced to manage the states within the application. Furthermore, vuex-persist is discussed to have data stored in the local storage. Passing data between parent and child componentsAdd three componentsTo demonstrate how to pass data between parent and child components, three components will be added: Settings is the parent component which will handle all events happening in the children components. PostSettings is a child component which will handle all settings related to posts/comments. ActivitySettings is a child component which will handle all activities settings. First, add components/PostSettings.vue with the following content: &lt;template&gt; &lt;div&gt; &lt;h4&gt;Post Settings&lt;/h4&gt; &lt;label for=&quot;number&quot;&gt;Default number of posts/comments&lt;/label&gt; &lt;input name=&quot;number&quot;&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { // Name of this component name: &apos;PostSettings&apos; } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; Second, add components/ActivitySettings.vue with the following content: &lt;template&gt; &lt;div&gt; &lt;h4&gt;Activity Settings&lt;/h4&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &apos;ActivitySettings&apos; } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; Last, add components/Settings.vue with the following content: &lt;template&gt; &lt;div&gt; &lt;ActivitySettings&gt;&lt;/ActivitySettings&gt; &lt;hr/&gt; &lt;PostSettings&gt;&lt;/PostSettings&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import ActivitySettings from &apos;./ActivitySettings&apos; import PostSettings from &apos;./PostSettings&apos; export default { // Name of this component name: &apos;Settings&apos;, components: {ActivitySettings, PostSettings} } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; The application should look like: Passing data from parent to child componentTo pass data from parent to child component, firstly, some properties need to be defined in the child component, e.g. ‘operations’ is added to ActivitySettings.vue: props: [&apos;operations&apos;] To display if the data is received properly, add this line in the template: {{operations}} More complex processing logic can be added in ActivitySettings component. But for now, that is enough to demonstrate how the child component receive the data passed from parent component. Now, update parent component, e.g. add this line into parent component’s template: &lt;ActivitySettings operations=&quot;vote,transfer,comment,reward&quot;&gt;&lt;/ActivitySettings&gt; In the above code, ‘operations’ is the property name defined in the child component. The application should look like: Passing data from child to parent componentTo demonstrate how to emit data via event from child to parent component, first add ‘changed’ method to PostSettings component: // This event handler will emit an event with data to parent component changed: function (event) { this.$emit(&apos;default_number_changed&apos;, event.target.value) } In the above code, ‘default_number_changed’ is the event name and ‘event.target.value’ is the value to be passed to parent component. Also, the event handler must bind to the input field, e.g. &lt;input @input=&quot;changed&quot; name=&quot;number&quot;&gt; By this way, whenever the user provides any input, the ‘default_number_changed’ event will be emitted to parent component. In parent component, e.g. Settings.vue, the following code needs to be added to receive the event: &lt;PostSettings @default_number_changed=&quot;handleChange&quot;&gt;&lt;/PostSettings&gt; Also, add some processing logic: methods: { handleChange: function (number) { console.log(&apos;Number is changed to: &apos; + number) } } Open the developer tool in the browser, the output should be seen as shown below: State management via VuexAs discussed in previous section, component properties and events can be used to pass information between parent and children components. However, when the application is getting bigger, it is very common to share data among components which do not have direct relationships. For example, in the demo application, in ‘Settings’ component, some users’ preferences will be stored there and these preferences need to be accessible by other components, e.g. Posts, Comments etc. The Settings component does not have a parent-child relationship with Posts and Comments. In this case, Vuex is a perfect choice to share data among these components. Install VuexTo use Vuex, first, run the following command to install vuex package and get it added into package.json npm install --save vuex Add Vuex storeThen create file: store/index.js with the following content: import Vuex from &apos;vuex&apos; import Vue from &apos;vue&apos; // Declare that Vuex will be used to manage states Vue.use(Vuex) export default new Vuex.Store( // Declare the states need to be managed state: { default_number_of_posts: 10 } }) In the above code, after importing Vuex, ‘Vue.use(Vuex)’ must be used to let Vue know that Vuex is the state manager now. Then any states can be added to Vuex store and they will be available to other Vue components. In here, for demo purpose, only one state, e.g. ‘default_number_of_posts’ is used. The state can be modified and retrieved by using mutations and getters, e.g. mutations: { change (state, number) { state.default_number_of_posts = number } }, getters: { default_number_of_posts: state =&gt; state.default_number_of_posts } Update main.jsThen ‘main.js’ needs to be updated to make a reference to the Vuex store. First import the file: import store from &apos;./store&apos; And update the main Vue component to: new Vue({ el: &apos;#app&apos;, store, // declare the &apos;store&apos; will be used for state management router, // default router components: { App }, // the main component template: &apos;&lt;App/&gt;&apos; // This will load the template defined in App.vue }) Access state from other componentsNow, it is ready to share the state, e.g. ‘default_number_of_posts’ among components. First open components/Comments.vue and make the following change: &lt;template&gt; &lt;div&gt; Default number of posts/comments: **{{ $store.getters.default_number_of_posts }}** &lt;/div&gt; &lt;/template&gt; The value of ‘default_number_of_posts’ will be displayed in Comments component. Similarly, the default number of posts being loaded in Posts, e.g. change: steem.api.getDiscussionsByAuthorBeforeDate(this.username, null, new Date().toISOString().split(&apos;.&apos;)[0], 10, function (err, result) { to: steem.api.getDiscussionsByAuthorBeforeDate(this.username, null, new Date().toISOString().split(&apos;.&apos;)[0], this.$store.getters.default_number_of_posts, function (err, result) { Change state valueTo store the value of state, ‘changed’ method in PostSettings component need to be updated: methods: { // changed event handler will send the new value to Vuex store changed: function (event) { this.$store.commit(&apos;change&apos;, event.target.value) } } So, it is ready to test now. Change the default number of posts to ‘20’ and navigate to ‘Posts’ tab, the behaviour of Posts component will be changed! Data persistent in Vue.jsIn the previous section, Vuex has been discussed to share data among components. But, what will happen if the browser is closed, or the server is restarted? All data being saved to state by Vuex will be lost! The reasons is because that state management is a mechanism to store application’s states within the application’s lifecycle. If any information needs to be saved in the storage, some extra work needs to be done. In this case, vuex-persist can be used to store states to a storage, e.g. local storage within the browsers. Install vuex-persistFirst run this command to install ‘vuex-persist’ package: npm install vuex-persist Update store/index.jsNow ‘store/index.js’ needs to be updated: import VuexPersist from &apos;vuex-persist&apos; Vue.use(Vuex) const vuexPersist = new VuexPersist({ key: &apos;vuedemo&apos;, storage: localStorage }) While creating Vue store, plugins: [vuexPersist.plugin] Load demo application, and change default_number_of_posts to ‘5’, then close browser and restart webpack server. Access the demo application again, and the value of ‘default_number_of_posts’ is reloaded from local storage. Proof of Work DoneSource code for this tutorial: https://github.com/aa-feng/VuejsTutorial/tree/t05 Master branch of the source code (will be updated with ongoing tutorials): https://github.com/aa-feng/VuejsTutorial","link":"/part-5-build-steem-blockchain-application-with-vue-js-passing-data-among-components-state-management-via-vuex-and-data/"},{"title":"Part 6 - Build Steem blockchain application with Vue.js - input forms and handling REST API calls","text":"RepositoryVue.js: https://github.com/vuejs/vue What Will I Learn? How to implement input form in Vue.js How to handle REST API calls in Vue.js Requirements A Node.js environment (Ubuntu 18 + Node.js is used in this tutorial) Basic HTML/CSS/Javascript knowledge DifficultyBasic level Tutorial contentsIn last tutorial, passing information between components, state management in Vuex, and vuex-persist were discussed. In this tutorial, various aspects to implement an input form in Vue.js will be discussed. In addition, how to handle REST API calls in Vue.js will be demonstrated. Implement input forms in Vue.jsIn this section, a new form to post content to Steem blockchain will be added and the underlying features, e.g. data binding, validation check and event handling will be implemented in the Vue.js way. Add basic HTML formFirst, add a new component, e.g. components/NewPost.vue. Within this component, add the following into the “template” section: &lt;template&gt; &lt;div class=&quot;post_form&quot;&gt; &lt;h4&gt;New post&lt;/h4&gt; &lt;div class=&quot;row post_field&quot;&gt; &lt;div class=&quot;col-sm-3 col-xs-12&quot;&gt; Username &lt;/div&gt; &lt;div class=&quot;col-sm-9 col-xs-12&quot;&gt; **Username** &lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div class=&quot;row post_field&quot;&gt; &lt;div class=&quot;col-sm-3 col-xs-12&quot;&gt; Posting key &lt;/div&gt; &lt;div class=&quot;col-sm-9 col-xs-12&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;postingKey&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div class=&quot;row post_field&quot;&gt; &lt;div class=&quot;col-sm-3 col-xs-12&quot;&gt; Title &lt;/div&gt; &lt;div class=&quot;col-sm-9 col-xs-12&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;postTitle&quot; placeholder=&quot;Enter post title&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div class=&quot;row post_field&quot;&gt; &lt;div class=&quot;col-sm-3 col-xs-12&quot;&gt; Content &lt;/div&gt; &lt;div class=&quot;col-sm-9 col-xs-12&quot;&gt; &lt;textarea class=&quot;form-control&quot; id=&quot;postContent&quot; row=&quot;10&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div class=&quot;row post_field&quot;&gt; &lt;div class=&quot;col-sm-3 col-xs-12&quot;&gt; Category &lt;/div&gt; &lt;div class=&quot;col-sm-9 col-xs-12&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;category&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm-12 col-xs-12&quot;&gt; &lt;button&gt;Submit&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;/div&gt; &lt;/template&gt; The form should look like: Add data attributes and link them to HTML elementsusername As discussed in previous tutorials, username is defined/managed in ‘User’ mixin, so ‘User’ mixin needs to be imported into this component, e.g. import User from &apos;./mixins/user&apos; And the component should be defined like: export default { name: &apos;NewPost&apos;, mixins: [User] ...... } So the username part in the template can be changed to: &lt;div class=&quot;col-sm-9 col-xs-12&quot;&gt; {{username}} &lt;/div&gt; Other data attributes and link them to HTML elements To match with the fields defined in the template, the following data attributes need to be defined in the component code: data () { return { posting_key: &apos;&apos;, title: &apos;&apos;, content: &apos;&apos;, category: &apos;&apos; } }, In the above code, ‘posting_key’, ‘title’, ‘content’, and ‘category’ link to the HTML tags in the template. By using ‘v-model’, the HTML tags in the template can be refactored to: &lt;input v-model=&quot;posting_key&quot; type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;postingKey&quot;&gt; ...... &lt;input v-model=&quot;title&quot; type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;postTitle&quot; placeholder=&quot;Enter post title&quot;&gt; ...... &lt;textarea v-model=&quot;content&quot; class=&quot;form-control&quot; id=&quot;postContent&quot; row=&quot;10&quot;&gt;&lt;/textarea&gt; ...... &lt;input v-model=&quot;category&quot; type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;category&quot;&gt; The above code means, as long as user entered data in the HTML fields, the associated data attributes will be updated automatically. Data validationTo validate the form inputs, a data attribute needs to be added first, e.g. data () { return { ...... errors: [] } }, Then, ‘v-on:click’ can be used to register an event handler, e.g. “submit” function to handle the click events: &lt;button v-on:click=&quot;submit&quot;&gt;Submit&lt;/button&gt; The implementation of ‘submit’ method is as shown below: methods: { submit () { let valid = true if (!this.username) { this.errors.push(&apos;Username required.&apos;) valid = false } if (!this.posting_key) { this.errors.push(&apos;Posting key required.&apos;) valid = false } if (!this.title) { this.errors.push(&apos;Title required.&apos;) valid = false } if (!this.content) { this.errors.push(&apos;Content required.&apos;) valid = false } if (valid === false) { return } } } From the code above, whenever an invalid input value is found, an error message is pushed into the array. Now it is the time to display the error message. Add the following code into the template: &lt;div v-if=&quot;errors.length&quot; class=&quot;row error_field&quot;&gt; &lt;div class=&quot;col-sm-12 col-xs-12&quot;&gt; &lt;b&gt;Please correct the following error(s):&lt;/b&gt; &lt;ul&gt; &lt;li v-for=&quot;error in errors&quot; :key=&quot;error&quot;&gt;{{ error }}&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; The above code checks if there is any messages in the data attribute “errors”. If any messages exist, use ‘v-for’ to show all messages in an unordered list. If any required fields are missing, the page should look like: This example demonstrate one of the fundamental feature of Vue.js: developers do not need to update DOM - they just need to manipulate the data. Post to Steem blockchainOnce the data validation is passed, it is the time to post to Steem blockchain. For demo purpose, this application only provides very basic functionalities, e.g. only main category is supported. More fancy features can be added later. The following code can be added to post an article to Steem blockchain: steem.broadcast.comment( this.posting_key, &apos;&apos;, this.category, this.username, new Date().toISOString().replace(/[^a-zA-Z0-9]+/g, &apos;&apos;).toLowerCase(), this.title, this.content, { tags: [this.category], app: &apos;utopian-test/aafeng&apos; }, function (err, result) { if (err) { alert(&apos;Failure! &apos; + err) } else { alert(&apos;Success!&apos;) } } ) Once the post is published, a popup window confirms that the post operation has been successfully, as shown below: Steemd.com can be used to check if the post properties have been submitted properly, e.g. for the demo post: Add ‘New post’ button in Posts componentA ‘New post’ button needs to be added to navigate users to the new post form. To do so, first add the button to template part of components/Posts.vue: &lt;div class=&quot;row post_new&quot;&gt; &lt;button v-on:click=&quot;newPost&quot;&gt;New post&lt;/button&gt; &lt;/div&gt; In the newPost method, the route needs to be updated, as shown in the following code: newPost () { // Update Vue.js route this.$router.push({ path: &apos;/@&apos; + this.username + &apos;/new_post&apos; }) } By this way, users are able to use the ‘NewPost’ component: Handling REST APIs with axiosNowadays, it is very common to have a pure client side application working with RESTful APIs. How to use axios to make calls to REST APIs, and how to handle responses in Vue.js will be discussed in this section. Poloniex’s price ticker API will be used for demonstration. Install axiosThe installation of axios is very easy, just run this command: npm install --save axios Create SteemPrice componentAdd a new file, e.g. components/SteemPrice.vue which will make REST API calls via axios and display current STEEM/SBD price pairs within the component. &lt;script&gt; let axios = require(&apos;axios&apos;) export default { name: &apos;SteemPrice&apos;, data () { return { info: &apos;&apos; } } } &lt;/script&gt; In the above code, a data attribute, e.g. ‘info’ is used to store the price pairs. Send request to poloniex REST APIPoloniex REST API will be used in the demo application. The poloniex REST API endpoint is: https://poloniex.com/public?command=returnTicker. Open a browser and enter the above URL in the address bar then hit ‘Enter’, the result will be presented with JSON format: While the SteemPrice component is loaded, some additional work needs to be done to make the REST API call and parse the returned JSON data and store it in the data attribute ‘info’. The code is shown as follows: mounted () { let priceComponent = this // Make poloniex REST API call axios.get(&apos;https://poloniex.com/public?command=returnTicker&apos;) .then(function (response) { for (let p in response[&apos;data&apos;]) { // only store STEEM/SBD price pairs if (p.endsWith(&apos;_STEEM&apos;) || p.endsWith(&apos;_SBD&apos;)) { priceComponent.prices = priceComponent.prices + p + &apos;: &apos; + response[&apos;data&apos;][p][&apos;last&apos;] + &apos;/&apos; } } }) .catch(function (error) { console.log(error) }) } In this application, only ‘STEEM’ and ‘SBD’ price pairs will be displayed, so some processing logic has been added into the above code. To display the returned price pairs, add the following code to the template: &lt;div class=&quot;row&quot; v-for=&quot;p in prices.split(&apos;/&apos;)&quot; :key=&quot;p&quot;&gt; &lt;div class=&quot;col-sm-12&quot;&gt; {{p}} &lt;/div&gt; &lt;/div&gt; The page looks like: To make other REST API calls, please read axios documentation for more information. Proof of Work DoneSource code for this tutorial: https://github.com/aa-feng/VuejsTutorial/tree/t06 Master branch of the source code (will be updated with ongoing tutorials): https://github.com/aa-feng/VuejsTutorial","link":"/part-6-build-steem-blockchain-application-with-vue-js-input-forms-and-handling-rest-api-calls/"},{"title":"Part 7 - Build Steem blockchain application with Vue.js element-ui, Vue.js devtools and debugging","text":"RepositoryVue.js: https://github.com/vuejs/vue What Will I Learn? Use element-ui in Vue.js application Use Vue.js devtools Debug Vue.js application Requirements A Node.js environment (Ubuntu 18 + Node.js is used in this tutorial) Basic HTML/CSS/Javascript knowledge DifficultyBasic level Tutorial contentsIn last tutorial, how to implement an input form and make calls to REST APIs in Vue.js were discussed. In this tutorial, element-ui will be used to build Vue.js UI. Also, a browser plugin called Vue.js devtools will be introduced to help developers’ development and debugging process. Last, a demonstration is given to show how to debug Vue.js components. Use element-ui in Vue.jsAll HTML tags can be used in Vue.js templates, but building a complex UI from scratch is not a good idea as there are plenty of well tested frameworks can be used to speed up the development process. There is no need to reinvent the wheel. In this section, a popular Vue.js component called ‘element-ui’ will be introduced. As a demonstration, Comments component will be implemented by using element-ui. By the end of this section, the application will be able to show user’s comments as shown below: Online demo: https://vuetutorials.aafeng.top/@aafeng/comments Install element-uiFirst, install element-ui package by running the following command within the project folder: npm install element-ui --save Import element-ui in main.jsOpen main.js and add the import statement to declare that ‘element-ui’ will be used in the project: import elementUI from &apos;element-ui&apos; Also, declare that ‘elementUI’ will be used by Vue components: Vue.use(elementUI) A default theme, e.g. ‘theme-chalk’ will be used in the project: import &apos;element-ui/lib/theme-chalk/index.css&apos; Use ‘element-ui’ in Comments componentTo use ‘element-ui’ in the template of Comments component, add the following data attribute in the component code, e.g. in components/Comments.vue: data () { return { comments: [] // user&apos;s comments } } Also, add ‘user’ mixin since its attribute, e.g. username will be used later: import User from &apos;./mixins/user&apos; // use user mixin in Posts component And declare that ‘user’ mixin will be used: mixins: [User] Load data from Steem blockchainBefore using ‘element-ui’ to build the template, a call to Steem blockchain needs to be made first to retrieve user’s comments. First declare that Steem JS will be used: let steem = require(&apos;steem&apos;) Add the following ‘created’ method to Comments component: created () { // Store current component (Comments) to commentsComponent let commentsComponent = this // Make call to Steem blockchain to load user’s comments steem.api.getDiscussionsByComments({&apos;start_author&apos;: this.username, &apos;limit&apos;: this.$store.getters.default_number_of_posts}, function (err, result) { if (err) { console.log(err.stack) } // save user&apos;s comments to &apos;comments&apos; attribute commentsComponent.comments = result }) } In the above code, as a demonstration, only a fixed number of comments will be retrieved and saved into comments attribute. Similarly to Posts component, an infinite loading feature can be implemented here as well. Now, it is ready to use element-ui components in the template. In this case, ‘el-table’ will be used to display user’s comments: &lt;el-table v-loading=&quot;loading2&quot; element-loading-text=&quot;Loading&quot; element-loading-spinner=&quot;el-icon-loading&quot; element-loading-background=&quot;rgba(0, 0, 0, 0.8)&quot; empty-text=&quot;No data&quot; :data=&quot;comments&quot; style=&quot;width: 100%&quot;&gt; In the above code, apart from setting default attributes for ‘el-table’, ‘:data’ attribute is used to link the ‘el-table’ element with ‘comments’ data attribute. Now it is the time to let ‘el-table’ know what data should be displayed in each column. In here, as a demo, the creation time of the comments, parent author, the post title, and the comment text will be displayed. In addition, the creation time and parent author will be sortable. If more fields needs to be displayed, check Steem JS documentation, or find out all attributes from browser’s development tool. In the last section of this tutorial, how to debug Vue.js will be discussed and Comments component will be used as an example. The code is shown as follows: &lt;el-table-column prop=&quot;created&quot; label=&quot;Date&quot; sortable width=&quot;180&quot;&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;parent_author&quot; label=&quot;Parent author&quot; sortable width=&quot;180&quot;&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;root_title&quot; label=&quot;Post&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;body&quot; label=&quot;Comment&quot;&gt; &lt;/el-table-column&gt; From the above code, ‘prop’ property is used to link a column to a particular data attribute returned by Steem JS. So the current application runs like: Vue.js devtoolsIt is the time to introduce Vue.js devtools, which makes developers’ life much easier. Vue.js devtoolsVue.js devtools is available for both Chrome and Firefox browser. The download URLs are: Chrome plugin Firefox Add-on Once installed, run Vue.js application the the development mode. (NB: this tool won’t be available for production mode) Open browser and access Vue.js application. Right click and choose ‘inspect’: Switch to ‘Vue’ tab and the page looks like: Within Vue.js devtool, ‘Components’, ‘Vuex’ and ‘Events’ tabs will be available: Click ‘Profile’ component, data attributes and computed attributes will shown as follows: Click ‘userdata’ under ‘Profile’ component, userdata from user mixin will be shown: A full list of user’s comment attributes can be found by Comments data attribute: As discussed in previous tutorial, a state e.g. ‘default_number_of_posts’ has been stored by using Vuex. In here, the devtool can be a helper to check if the state has been set correctly: A full demonstration of how to use Vue.js devtool plugin is shown in the GIF image: Debugging Vue.js applicationAnother way to debug Vue.js code is to use browsers’ development tool. Like debugging in IDEs, breakpoints can be set to control the execution flow and gives developer a chance to check the current execution states. First open developer tool, Choose ‘Sources’ tab, then scroll down to ‘webpack://‘ and click Comments.vue. Add a breakpoint in line 52, e.g. the line with “if” statement: Reload the page, the JavaScript code will break in the “if” statement, so the Comments component won’t display any data, as shown below: In the developer tool console, some checks can be performed, e.g. check if a correct result is returned after calling Steem API: After debugging, the breakpoints can be easily removed by click this icon: CurriculumThis is the 7th tutorial. Previous tutorialsPart 1 - Build Steem blockchain application with Vue.js: installation and first demoPart 2 - Build Steem blockchain application with Vue.js: components, computed properties and build/deployment processPart 3 - Build Steem blockchain application with Vue.js: using Bootstrap, nav component, mixins, and first iteration of Posts componentPart 4 - Build Steem blockchain application with Vue.js: dynamic route, and event handlingPart 5 - Build Steem blockchain application with Vue.js: Passing data among components, state management via Vuex, and data persistent in Vue.jsPart 6 - Build Steem blockchain application with Vue.js: input forms and handling REST API calls SourcesSource code for this tutorial: https://github.com/aa-feng/VuejsTutorial/tree/t07 Master branch of the source code (will be updated with ongoing tutorials): https://github.com/aa-feng/VuejsTutorial","link":"/part-7-build-steem-blockchain-application-with-vue-js-element-ui-vue-js-devtools-and-debugging/"},{"title":"带孩子参加小朋友生日Party","text":"今天带孩子去参加小朋友生日party 里面好热闹 还可以Make a bear 有最受孩子欢迎的大滑梯 也有小女孩喜欢过家家的地方 还能看小动物 回来路边看到的，猜猜为什么会有这个？","link":"/party-2017723t19760z/"},{"title":"Partiko最新活动，每天能获得1000+积分","text":"今天打开Partiko意外的发现可以额外获得1000+的积分。规则很简单，只要单击播放广告，一般8到30秒，就可以获得积分。每播放一次能获得220个积分，每个用户每次获得的积分会有所不同。 大家可以试试。","link":"/partiko1000-hirffs6z/"},{"title":"周末影院 - The Shows Must Go On 之 Peter Pan","text":"这个周末正好在Youtube上“The Shows Must Go On”系列播放”Peter Pan”小飞侠。又是决定全家一起观看这部音乐剧。整部剧轻松快乐，让小朋友们不断捧腹大笑。 故事讲述的是一群小朋友随着Peter Pan（彼得·潘）逃到Neverland(梦幻岛)的故事。整部剧沿用了经典的童话剧形式，主角Peter Pan为女扮男装，是一个可以飞行的顽皮小男孩。在梦幻岛上有仙子，印第安人，海盗等等刺激的角色。当然，最让小朋友们感兴趣的是Peter Pan的超酷技能：飞行。 其实这个故事的背后讲述的是每个人都会经历的青春，梦想，笑容，快乐，和爱。女主Wendy很明显的爱上了男主Peter Pan。可最终他们还是分开了。在多年之后，当Wendy已经有了自己的女儿Jane时，Peter Pan再次来到她的窗前。Peter Pan仍然保持着几十年前的少年面容，而Wendy却已经长大，不可能再飞的起来了。Wendy的梦想将由自己的女儿来传承，最终Jane将随着Peter Pan继续他们的冒险之旅。。。 人都无法拒绝长大，随着年龄的增长，人都会慢慢失去童心，失去想象力，身上的包袱会越来越沉重，导致会慢慢的遗忘一些美好和单纯的东西，只剩下世俗的琐事和羁绊。可能在每一个人的童年时代，心中都有过一个Peter Pan吧。这部音乐剧体现了一种成长的无奈。 海盗船长Hook似乎代表了现实社会，他的想法和Peter Pan格格不入，以至于两者处于对立面。在Peter Pan最终战胜Hook船长后，留给我们的却是一种淡淡的惆怅。在现实社会中，每个成年人都能战胜现实，保留住自己的梦想吗？恐怕对于大多数人来说，答案都是否定的。 每次看Peter Pan都有一种说不清的感觉，在基调非常欢快的整部剧背后，隐藏的是一种对青春，对梦想的一种往事不可追的无可奈何。。。","link":"/peter-pan/"},{"title":"Play date约玩","text":"最近女儿在学校交到了两个密友。每天上学放学都是手拉手一起走。据老师说在学校的时候几个人也是几乎一天在一起参加各种活动。放学后还经常Play date，也就是约着一起玩。 其实，在英国的幼儿园和小学中，各种形式的play date非常多。其主要目的是社交。当然在孩子特别小的时候，是家长之间的社交。当孩子长大些后，就是孩子们自己的社交了。 这种play date的玩法也是多种多样的。比如：可以去附近的公园玩，也可以约好去某个小朋友的家中去玩。在没有疫情的时候还经常约好去各种酒吧，咖啡店。家长们一起吃饭喝茶聊天，孩子们就在附近玩。 随着小朋友们慢慢长大，同时也随着几个家庭之间的逐步熟悉和了解，这种play date有时会延续成为sleep over，也就是说几个小朋友一起玩，然后一起到某个小朋友家吃饭，再留在那里过夜。家长们第二天再去接孩子。 等到 孩子们上到中学，这种play date基本上和家长没有太大关系了。通常都是孩子们自己约好出去玩。家长们唯一能做的就是给他们做好后勤保障。 我其实还是非常赞成并支持这种play date的。毕竟，通过这种方式，可以锻炼孩子的社交能力。如果坐庄招待别的小朋友的话，还能锻炼孩子的动手能力，组织能力等等。不过话说回来，我家小女儿在这个方面比我要积极主动，经常在放学的时候告诉我们，已经和某某约好去哪里玩了。我们做父母的倒也乐得清闲，由她安排就好。","link":"/play-date/"},{"title":"自制Pizza","text":"自从宅在家中后，很多闲置多年的电器开始启用了。媳妇最近开始使用面包机制作面包，其口感和味道比超市买的买包好吃了不止一个档次。最近还发现了一个功能：可以用面包机制作pizza所需的面饼。 正好孩子们都超级喜欢pizza，于是买齐了食材，开始制作pizza。先上一张成品图： 首先将面包机中发好的面团拿出来擀成pizza的面饼： 将面饼上抹上西红柿酱，由于所有人都喜欢Cheese，因此先放了一层Cheese： 接下来将Pepperoni摆匀： 再摆放洋葱，角瓜，蘑菇，最后上面再放一层Cheese： 烤箱预热后烤了20分钟就好了，既简单又好吃！","link":"/pizza/"},{"title":"说说英国的传奇工种 - 水暖工","text":"早就听说过英国的电工和水暖工是高薪工种。伴随着家中扩建工程的开始，陆陆续续的和电工，水暖工，木匠等这些具有特殊技能的人打交道，也慢慢对他们有了进一步的了解。 所谓物以稀为贵。由于在整个英国，水暖工极度短缺，造成了劳动力市场上的供不应求，因此水管工的工资不断上涨。记得好多年前就看过一篇报道，说牛津大学的毕业生转行做水暖工。有的水暖工的年薪超过10万英镑，甚至高达20万英镑，超过了大学教授！在伦敦的一些高端住宅区，也有水暖工凭借着自己的高薪收入，在那里购房安家的。这也难怪就连名校的毕业生也会做出这个决定了。 更为夸张的是那种应急型的水暖工，比如：谁家的水管裂了，锅炉坏了，水龙头井喷了等等，都需要专业人士在第一时间赶到。尤其是在夜间和周末，他们的费用就格外的高。记得上次我家的下水道堵了，叫了一个水暖工，无论是否修好，每小时50英镑。这高额的费用也生生把很多人逼成了DIY高手。 曾经有朋友开过一个玩笑，像电工这样的高端工种，穿着干练的职业装，气场十足，倒像大学的教授。反倒是一些大学的教授，不修边幅，穿着非常随意，从外貌上看似乎和大学没有丝毫关系。 随着人工智能的崛起，很多行业都受到威胁，尤其是普通生产流水线上的工人，保安，收银员，甚至一些高端职业，比如：会计师，精算师等都有可能被人工智能所代替。甚至编写代码的程序猿，都有可能被机器人代替。但水管工和电工这样需要高度手眼协调以及分析复杂问题的工种，目前来看似乎很难被机器人代替。 这让我不禁在想，要不然也转个行，做水暖工得了？？？","link":"/plumber/"},{"title":"Post COVID-19后疫情时代？","text":"今天单位开会，已经在开始考虑疫情过后的战略部署了。可能现在说后疫情时代有点为时过早，但疫情总会过去。疫情对整个世界的影响将会长期存在。各个企业和组织都在思考商业模式的转遍，以及可能出现的机遇。 首先，是要把自己放在一个国际市场的角度来考虑问题。在疫情期间，由于众多商业活动都转到在线模式，这也使得国界对商业行为的影响越来越小了。很多企业可以跨国挖掘用户，同时也面临着来自国际同行的竞争。可以说，在后疫情时代，企业的思维方式必须向国际化转变。 由于疫情会使得一些行业遭受重创，但同时也使得一些行业得到高速发展。比如：和在线服务相关的业务，像在线会议系统，在线教育，在线设计等等。同时，各个国家可定会大力扶持一些行业，比如：制药业，生物科技等。 现在很多单位都应该反思一下，自己的管理组织是否足够”Agile” (敏捷)，能够快速应对类似新冠这样的危机，并快速做出应对。在这个瞬间万变的世界，反应过慢就意味着将被淘汰。同时，企业应该考虑自身的组织结构是否合理，工作流是否过于复杂，无法应对变化？ 不知道在人类发展史上，将如何记录新冠这一页。但毫无疑问，它对整个人类社会的影响将是巨大和深远的。","link":"/post-covid19/"},{"title":"自家腌的咸鸡蛋，真香","text":"前一段腌制的咸鸡蛋两周前时间就已经满了，开始陆陆续续的吃。今天是最后一锅，效果也是最好的一锅。几乎个个冒油，真的非常香。 从小家中就有定期腌鸡蛋的传统。至于为什么是鸡蛋，而不是鸭蛋，可能是因为我童年生活的北方小城那里的鸭蛋比较少，也相对贵一些吧。母亲每过一段时间就会腌制一批鸡蛋。当时家中用的是瓦罐，看着也更有感觉。有时候不等第一罐腌好，母亲就开始腌制第二罐，这样就能保证总有咸鸡蛋吃。 有些朋友也尝试过腌制咸鸡蛋，但经常会腌的发黑发臭。其实这里面只有一点需要注意，尽量保持将鸡蛋腌制在无菌/少菌环境中。在整个腌制过程中不要用生水，一定要用开水化开盐水，而且要用凉白开把鸡蛋洗干净后再放入盐水中。 其实现在物资极为丰富，即使在国外，也能在中超中买到咸鸭蛋，而且几乎个个冒油。但我仍然把这个习惯保持了下来，也算母亲给我的一个童年回忆吧。","link":"/preserved-eggs/"},{"title":"编程思想","text":"最近和朋友聊天，正好他家的孩子也在学习编程。于是就聊到了怎么教孩子编程，该教些什么，以及什么是编程思想的问题上。 图源：Pixabay 其实在很多年前就和同事们讨论过这个问题。大家一致认为编程的过程其实就是一种逻辑思维的过程，是如何将一个现实世界的问题逐步分解，再用算法将其高效实现的过程。因此，在整个编程思维的训练过程中，最重要的是训练思维的逻辑性。 记得上大学的时候，在数学系，计算机系，和计算中心等好几个系中都有程序设计的高手，这些人都有一个共同的特点，就是他们的数学功底都非常好。有的是数学系科班出身的，有的虽然不是数学系毕业的，但数学功底是非常深厚的。记得曾经一起做过项目的一个南开大学数学系退休返聘的老教授，负责最核心的算法部分，每次手写的代码，成百上千行，几乎都是一次性通过测试。他缜密的思维能力让人佩服万分。究其原因，其实就是数学好的人，无一例外的，逻辑思维都非常清晰，而这是在编程中最为重要的部分。 曾经有人打过一个比方，学习编程的过程，有点类似金庸小说中的武功修炼。不仅有各种实用的招式，也需要有深厚内功的辅助才行。在编程的学习中，数据结构，算法等基础性课程就好比是内功。如果内功修炼的够深厚了，无论用什么编程语言，什么框架，都会使的得心应手，做出优秀的软件来。当然，在内功好的基础上，如果能辅以高效的框架和编程语言，就能更加有效的开发软件。 回到教孩子编程这个问题上来，我认为首先是培养他们的兴趣。但在培养的过程中，一定注意启发他们积极思考，将程序设计中的逻辑性贯穿到每个例子中。一旦他们真正掌握了这种思维方式，以后再学习任何其他语言或者框架时才能举一反三，事半功倍。","link":"/programming-thinking/"},{"title":"在英国没有酒吧的日子真的不能忍，终于酒吧开张了，然后。。。","text":"上个周六，是英国举国欢腾的日子，因为众多酒吧，餐厅重新开业了！宅家多日的人们终于可以走出家门，重新造访酒吧。于是各个酒吧人满为患。尽管酒吧门口都提示注意社交距离，开始时人们也还比较注意，但喝嗨了之后就不不记得社交距离这回事了。 图源：Pixabay 可以说是乐极生悲吧，转过来的这周新冠人数暴增，很多去酒吧的人都被检测出新冠。于是多家酒吧被迫再次关闭。 酒吧可以说是英国文化的精髓之一，几乎人人都喜欢酒吧，这就像中国人的聚会吃饭一样，没有了酒吧似乎没法活。我的英国同事们也是如此，新同事来了，有同事离职了，圣诞了，过生日了，周五了，等等各种场合都要去酒吧喝上几杯。 和同事们去酒吧次数多了之后，也慢慢了解他们的习惯了。一般要一起出去吃饭的话，肯定在饭前先找上一家酒吧去喝上几杯开开胃，在正式吃饭的时候酒照样不能少。饭后还会再选一家酒吧继续喝。如果没有喝尽兴的话，还有可能会换酒吧。更有甚者，在和大家见面之前，先去超市买些酒自己喝上一些，预热一下，毕竟超市的酒要比酒吧的便宜不少。。。 之所以这么喜欢到酒吧喝酒，主要是因为酒吧是一种社交场所，到了这里，人们就会非常放松，哪怕在排队买酒的时候也能和周边的人聊上几句。聊天的话题往往离不开足球，时政等。 我的同事们酒量一般都很大，但喝到最后经常会喝高。记得有一位同事说过一个笑话，喝高后打车找到家，但进家后说什么也找不到床，于是就在地板上睡了一夜。其实这还算好的。如果晚些时候去市中心的酒吧区，经常会看到一些喝高的人在马路边倒头就睡的。 希望疫情早日过去，大家能够真正的到酒吧彻底放松一下。","link":"/pub-reopening/"},{"title":"体验了一下Python数据可视化神器pyecharts","text":"最近试用了一个由百度开源的数据可视化Python软件包pyecharts。它将Python和echarts结合在一起，提供强大的数据可视化支持，感觉非常好用。向大家强烈推荐。 首先看下其官方的介绍： 简洁的 API 设计，使用如丝滑般流畅，支持链式调用 囊括了 30+ 种常见图表，应有尽有 支持主流 Notebook 环境，Jupyter Notebook 和 JupyterLab 可轻松集成至 Flask，Sanic，Django 等主流 Web 框架 高度灵活的配置项，可轻松搭配出精美的图表 详细的文档和示例，帮助开发者更快的上手项目 多达 400+ 地图文件，并且支持原生百度地图，为地理数据可视化提供强有力的支持 对我而言，比较吸引我的特点包括：简洁的API设计，支持各种常见图表，和Jupyter Notebook的集成，以及丰富的文档。 其安装非常简单，只需要运行： pip install pyecharts 生成渲染后的HTML页面如下代码会生产一个简单的柱状图： from pyecharts.charts import Bar from pyecharts import options as opts bar = ( Bar() .add_xaxis([&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;June&quot;]) .add_yaxis(&quot;Downloads&quot;, [114, 155, 97, 131, 185, 270]) .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Downloads&quot;)) ) bar.render() 上面代码会在当前目录下生成一个文件：render.html，该文件会显示如下的柱状图： 在Jupyter_notebook中使用和前面的代码一样，只不过在最后需要调用： bar.render_notebook() 生成渲染后图片首先安装snapshot_selenium： pip install snapshot_selenium 还需要安装Chrome。 切换到root用户运行： curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add echo &quot;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google-chrome.list apt-get -y update apt-get -y install google-chrome-stable 运行如下代码就可以在当前目录下生成一个PNG图片： from pyecharts.charts import Bar from pyecharts import options as opts from pyecharts.render import make_snapshot from snapshot_selenium import snapshot as driver bar = ( Bar() .add_xaxis([&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;June&quot;]) .add_yaxis(&quot;Downloads&quot;, [114, 155, 97, 131, 185, 270]) .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Downloads&quot;)) ) make_snapshot(driver, bar.render(), &quot;bar.png&quot;) pyecharts支持的图表超过30种，我仅仅尝试了两种，但感觉其他图表都类似，应该非常容易上手。下一步项目中如果需要的话，应该能够拿起来就用了。","link":"/pyecharts/"},{"title":"心理暗示","text":"我有一位关系不错的朋友。她的心理状态总是特别好。无论遇到什么事情，总是能够往好处想。让我十分佩服。好的事情自不用说，即使对于那些并不怎么好的事情，她也总能去想，还好，更坏的没有发生。 其实，这就是一种非常积极的心理暗示。通过这种心理暗示，可以把自己调整到最佳状态。人经常不知道自己的潜力会有多大。只有给自己一个好的心理暗示，才能把自己的潜力彻底发挥出来。 如果有了好的心理暗示，一个人往往可以发挥出自己巨大的潜能，做到平时不可能做到的一些事情。 就拿我儿子来说吧。他不知道为什么有些晕机，因此每次上飞机前都需要给他吃一粒晕机药。有一次在机场的时候发现忘记带晕机药了。怎么办？于是用一粒糖豆代替，告诉他这是晕机药，他吃了之后竟然全程没有晕机。 我不得不说，对于他而言，可能晕机的原因更多是因为他给自己一个消极的心理暗示吧。由于他晕过一次，可能每次做飞机的时候机会给自己一个消极的心理暗示，自己要晕机。而吃了晕机药后他则会给自己一个积极的，自己不会晕机的心理暗示。 记得刚到英国读书的时候，在打工时由于种种机缘从事了一个自己彻底不熟悉的行业。最初时也不是很自信。但为了给朋友帮忙，赶鸭子上架。自己事先做了很多功课，在和客户见面之前不断的给自己心理暗示，自己一定可以做好。结果在和客户沟通见面的时候，客户非常满意，从而也开启了我在读书期间的主要副业，彻底解决了自己的生活费问题。 有一位朋友在教育孩子的时候，提倡一种“鼓励”法。也就是说从小就尽量鼓励孩子，给孩子积极的心理暗示，你做的非常好，你是最棒的。这样孩子从小就有一种强烈的自我暗示，我是最好的，从小就拥有极强的自信心。在孩子遇到挫折的时候，也会从积极的角度去思考问题，寻找解决方案。 他们可以说给我上了很好的一课。我在教育孩子的时候，既有鼓励也有批评。看样子以后需要改变一下方法了。","link":"/psychological-suggestion/"},{"title":"每天进步一点点：使用Python开发AWS Lambda","text":"最近开始使用AWS系列产品，感觉非常有趣。把学习过程记录一下。今天说的是如何使用Python开发一个Serverless的Lambda。以下的步骤在Ubuntu 18中测试通过。 安装serverless框架npm install -g serverless 创建项目mkdir -p hello-world cd hello-world serverless create --template aws-python3 --name hello-world 创建AWS用户创建一个用户，例如：serverless-user，并将得到的access key及secret access key保存到 .aws/credentials [serverless] aws_access_key_id = XXXXXXXXXXXXXXXXXXXXXXX aws_secret_access_key = XXXXXXXXXXXXXXXXXXXXXXX 部署到AWS运行如下命令进行部署： export AWS_PROFILE=&quot;serverless&quot; serverless deploy --region eu-west-1 到目前为止，你还无法看到APIGateway对应的URL，因为它尚未被定义。 编辑 serverless.yml: events: - http: path: hello method: get 再运行： serverless deploy -v 你就会看到类似于：https://XXXXXXXXXX.execute-api.us-east-1.amazonaws.com/dev ，通过这个URL就可以调用Lambda了。 测试你可以通过上面的URL进行测试，也可以运行如下命令进行测试： sls invoke -f hello 清理在完成了这个程序之后，不要忘记清理资源，毕竟部署到AWS中的资源都是要花钱的。。。 serverless remove","link":"/python-aws-lambda/"},{"title":"Python学习笔记 - collections","text":"在Python中，除了系统默认的容器：dict, list, set, tuple之外，还有一个非常强大的模块：collections。在这个模块中有很多非常好用的功能，能供简化我们的代码。下面举几个例子，欢迎大家指正。 namedtuple - 提高代码可读性首先来看一个例子：假设我们有一组数据。想用Python对这组数据进行处理。最为直观的做法是： people_list = [(&apos;Jim&apos;, &apos;male&apos;, 30), (&apos;Julie&apos;, &apos;female&apos;, 25)] for p in people_list: print (f&apos;{p[0]} is a {p[2]} year old {p[1]}&apos;) 但以上代码的最大缺点就是其可读性太差。上面的p[0], p[1], p[2]具体代表什么数据要检查前面的代码才能知道。设想如果处理的数据量更大，比如，共有十几，甚至几十列数据，如果在查看p[35], p[48]之类的代码时肯定会痛苦万分的。 这个时候就应该考虑使用collections中的namedtuple: import collections Person = collections.namedtuple(&apos;Person&apos;, &apos;name gender age&apos;) people_list = [Person(&apos;Jim&apos;, &apos;male&apos;, 30), Person(&apos;Julie&apos;, &apos;female&apos;, 25)] for p in people_list: print (f&apos;{p.name} is a {p.age} year old {p.gender}&apos;) 以上代码的可读性明显增强。不过使用namedtuple的一个缺点(有时也是优点)就是它的属性是只读的。 Counter - 优雅的统计代码假设我们需要对一个列表进行统计： [&apos;red&apos;,&apos;yellow&apos;,&apos;blue&apos;,&apos;red&apos;,&apos;yellow&apos;,&apos;red&apos;,&apos;black&apos;,&apos;white&apos;,&apos;red&apos;] 我们希望统计每种颜色出现的次数： {&apos;red&apos;: 4, &apos;yellow&apos;: 2, &apos;blue&apos;: 1, &apos;black&apos;: 1, &apos;white&apos;: 1} 如果使用一个循环，则代码显得非常臃肿： color_list = [&apos;red&apos;,&apos;yellow&apos;,&apos;blue&apos;,&apos;red&apos;,&apos;yellow&apos;,&apos;red&apos;,&apos;black&apos;,&apos;white&apos;,&apos;red&apos;] stats = {} for i in color_list: if stats.get(i) is None: stats[i] = 1 else: stats[i] += 1 ordered_stats = dict(sorted(stats.items(), key=lambda count: count[1], reverse=True)) print(ordered_stats) 但如果使用collections中的Counter的话，代码就显得非常简洁了： from collections import Counter color_list = [&apos;red&apos;,&apos;yellow&apos;,&apos;blue&apos;,&apos;red&apos;,&apos;yellow&apos;,&apos;red&apos;,&apos;black&apos;,&apos;white&apos;,&apos;red&apos;] stats = Counter(color_list).most_common() Counter也可以用来统计一段话中每个字符出现的次数。 from collections import Counter s = &apos;The clever fox jumped over the lazy brown dog.&apos; print(Counter(s).most_common()) defaultdict在使用字典时，一般可以使用 ‘dict = {}’对其进行初始化。在后续使用中，可以使用 ‘dict[element] = xx’，但有一个前提就是，element必须是已经存在的，否则就会出错。比如： 当然，我们可以在使用前检查某个元素是否存在： &apos;julie&apos; in dict.keys() 但这会使代码显得很臃肿。 更为简洁的方法就是使用defaultdict，比如： 上面介绍了collections模块中的namedtuple, Counter, defaultdict，使用它们可以简化我们的代码，也能增强程序的可读性。","link":"/python-collections/"},{"title":"Python中的日期&#x2F;时间处理","text":"在写代码的时候有很多场合需要处理日期和时间，比如：在日志中需要记录当前时间，在处理订单的时候需要处理用户下单的时间，在Hive上的各种点赞机器人需要知道新帖子的创建时间，以及帖子的“年龄”等等。。。在Python中提供了非常强大的日期/时间处理模块：time，和datetime。这些模块中又有很多有用的函数。下面把我经常使用的函数做一总结，欢迎大家指正。 图源：pixabay time模块time模块提供了和时间相关的一些类及函数。 时间偏移量表示法在Python交互式窗口中输入time.time()，其输出为一个数字： 这个数字代表了从1970年1月1日00:00:00至今的秒偏移量。 将其转换为字符串格式： 元组表示法还有一种时间的表示法：使用包含9个整数的元组分别表示年，月，日，时，分，秒等： 可以把这个元组转换为第一种表示法： 格式化字符串表示法还可以将时间表示为我们熟悉的格式： 时间的加减法比如，计算一个小时之后的时间： datetime模块从 datetime 模块中，依次导入date，datetime，timedelta。 from datetime import date, datetime, timedelta 获取日期获取当前日期： 日期时间和字符串转换将日期转换为字符串； 将日期时间字符串转换为日期时间(datetime)类型： 计算时间差 获取明天和昨天的时间： 得到Hive文章的发布时间后，计算从文章发布时间到现在时间的秒数：","link":"/python-datetime/"},{"title":"Python中的列表生成式","text":"用过Python的人一定对它的列表生成式(List Comprehensions)印象非常深刻。刚接触列表生成式的时候可能会有点懵，但一旦适应了之后肯定会喜欢其简洁高效的语法。下面把我经常使用的列表生成式做一个总结，欢迎指正。 数据再运算a = range(0, 10) b = [x * 2 for x in a] 其运算结果会返回一个新的列表 数据类型转换r = range(0, 10) s = [str(x) for x in a] 排列组合[a + b for a in &apos;ABC&apos; for b in &apos;123&apos;] 其输出为： [&apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;] 使用if做筛选b = [x*2 for x in a if x%2==0] 把赋值与筛选写在一起： b = [x*2 for x in range(1, 10) if x%2==0] 打印键值对遍历Python字典，并以自定义方式打印字典中的键值对： downloads = {&apos;Jan&apos;: 250, &apos;Feb&apos;: 382, &apos;Mar&apos;: 422} [k+&apos;=&apos; + str(v) for k,v in downloads.items()] 针对文件系统使用列表生成式一条语句列举出”/var/log”中所有以”log”为扩展名的文件： [f for f in os.listdir(&quot;/var/log&quot;) if f.endswith(&apos;.log&apos;)] 函数分组在列表生成式中，可以根据函数的返回值进行分组。比如：根据首字母是否为“c“对一个列表中的所有单词进行分组： def group_by(lst, fn): return [ [x for x in lst if fn(x)], [x for x in lst if not fn(x)] ] group_by([&apos;fox&apos;, &apos;dog&apos;, &apos;cat&apos;, &apos;people&apos;, &apos;cow&apos;, &apos;chicken&apos;], lambda x: x[0] == &apos;c&apos;) 其输出为： [[&apos;cat&apos;, &apos;cow&apos;, &apos;chicken&apos;], [&apos;fox&apos;, &apos;dog&apos;, &apos;people&apos;]]","link":"/python-list-comprehensions/"},{"title":"Python学习笔记","text":"其实Python我已经用了很多年了，用起来也比较顺手。但最近开始教自己的孩子学习Python时，还是发现了许多自己需要更新的知识。有些是自己没用过，不知道的，有些则是能让Python程序更加优雅，或者更加有效的。下面总结几点。 关于格式化字符串我一般使用的方式是： &quot;One for %s, one for me.&quot; % name 这种方式能够正常工作，但建议的方式是： &apos;One for {name}, one for me.&apos;.format(name=name) 或者简化为： &apos;One for {}, one for me.&apos;.format(name) sort 和 sorted的区别首先进行一个简单的试验： 可以看到，sorted会将列表进行排序，并返回一个新的列表。而sort()则会将列表进行排序。在Python的函数中，尽量不要使用sort()方法，以避免改变传入的参数。就像别人借给你一样东西，肯定希望你完好无损的归还一样。 关于数组越界的问题Python其实很聪明的，它知道如何判断数组越界，并会在数组越界时自动的帮你处理。比如，有些人的Python代码会这样写： sorted_array = sorted(scores,reverse=True) return sorted_array[0:3] if len(sorted_array)&gt;=3 else sorted_array 其实完全不必，可以简化为： return sorted(scores,reverse=True)[0:3] 强大的Python数组操作举一个简单的例子：把如下字符串： &quot;1 2 3 4\\n5 6 7 8\\n9 8 7 6&quot; 转换为一个二位数组： 1 2 3 4 5 6 7 8 9 8 7 6 可以先使用 splitlines： s = &quot;1 2 3 4\\n5 6 7 8\\n9 8 7 6&quot; &gt;&gt;&gt; lines = s.splitlines() &gt;&gt;&gt; lines [&apos;1 2 3 4&apos;, &apos;5 6 7 8&apos;, &apos;9 8 7 6&apos;] 然后再进一步处理： &gt;&gt;&gt; rows = [[int(v) for v in row.split()] for row in lines] &gt;&gt;&gt; rows [[1, 2, 3, 4], [5, 6, 7, 8], [9, 8, 7, 6]]","link":"/python-tips/"},{"title":"Python学习神器推荐 - Python Tutor","text":"如果说近两年来最受欢迎的编程语言的话，很多人都会想到Python。的确如此，随着Python在人工智能，大数据，区块链中的广泛应用，已经吸引了越来越多的人开始学习Python。但是对于很多初学者来说，Python中的众多概念极易混淆。在教自己孩子学习Python编程的时候就遇到了这样的问题，苦于无法直观的解释一些概念。最近发现的Python Tutor这个免费网站然我不禁眼睛一亮。这个网站可以让初学者直观的理解Python代码执行的过程，逐步可视化程序的运行过程。其最大的亮点就是把程序的执行过程在内存中的表现通过图形的方式来展示，这样就非常便于理解。 首先看下面一段简单的代码： b = [1, 3, 5, 7, 9] b = a a[0] = 0 print(b[0]) 代码很简单，展示了Python中的浅拷贝。但是对于初学者来说，怎样才能更加直观的理解这个概念呢？我们来看看Python Tutor中的演示： 通过上面的演示，可以非常直观的理解，其实a和b指向的是内存中的同一个对象，更改a[0]自然会导致b[0]也会被改变。 Python Tutor中还提供了一些自定制的功能，包括可以自定义演示的箭头，形状等： 在Python Tutor中有两种模式：在线编辑模式(Edit)和动态演示模式(Live)。简而言之，编辑模式就是一次性把代码写完，然后再统一运行，然后分步骤查看代码在内存中的表示。而动态演示模式则是在你键入代码的同时，Python Tutor会实时可视化代码在内存中的状态。 举一个代码深拷贝的例子来演示Python Tutor的动态演示模式。 首先键入如下代码： from copy import deepcopy a = [1, 3, 5, 7, 9] 你会看到如下的演示： 接下来分别进行浅拷贝和深拷贝： b = a c = deepcopy(a) 可以看到非常清晰的示意图： 看到这样的可视化演示，还有什么不能理解的呢？其实，除了Python程序的可视化演示，Python Tutor还有一系列的功能：Java Tutor, C Tutor, C++ Tutor, JavaScript Tutor, Ruby Tutor等来支持不同语言的可视化演示。","link":"/python-tutor/"},{"title":"火山葡萄园","text":"在Lanzatote岛上火山公园附近就有一座很大的火山葡萄园。由于这里缺水，因此用鱼鳞坑来蓄水。同时还有防风墙，看起来就像是到了月球。由于这里盛产葡萄，因此当地的葡萄酒也不可不尝。如果你是8,9月份到岛上来玩，还有机会和主人共享采摘葡萄和酿造葡萄酒的过程。","link":"/qfdccyzd/"},{"title":"为生命而奔跑 - 约克郡10英里马拉松","text":"周日的时候去围观了约克郡的10英里（将近16公里）马拉松。The Plusnet Yorkshire Marathon Festival这个活动每年都在约克举行。今年这次有将近2000人参加。比赛的起点和终点都设在约克大学，因此周日这天大学附近一片粉红色。这个活动的主要目的就是为约克郡的癌症患者募捐。根据统计，在约克郡每周都会有565个人被诊断为癌症。约克郡的癌症患者比率明显高于英国的普遍水平。这个慈善组织的目的就是在未来10年内投入1亿英镑资金，争取解决约克郡的癌症率过高的问题。希望在2025年的时候至少多帮助2000或者更多癌症患者康复。 我们到了不久马拉松就开始了，刚开始的时候大家都跑不起来，这是熙熙攘攘的人群： 大屏幕显示走过起点的人们， 同时可以看到还陆陆续续的有人来到。 这个活动的支持者有很多，每年都组织的非常声势浩大。各种准备非常充分，救护车都准备好了，而且广播中一直在说，不要跑太快了，按照自己平时训练的速度就可以 ： 这里是马拉松的终点。","link":"/qs3zk-10/"},{"title":"说说英国的Quaker学校及其教育理念","text":"儿子申请的几所中学中有一所是Quaker学校。在这之前只是听过这个名字，没有太多印象。但这次不同了，仔细看了下学校的介绍，深深被其背后的理念所吸引。 Source: Pixabay 在全世界范围内有很多所大学和学校都是Quaker学校，也叫贵格学校。Quaker这个名字主要源于成立于17世纪的贵格会（Quakers）/兄弟会（Friends）。这个教派倡导平等自由，主张人人之间不论信仰，性别，年龄，家庭背景如何，都应当像兄弟一样平等，反对任何形式的暴力。 其实Quaker学校在美国应该更多，甚至费城都被叫做“Quaker City”。在英国也有一些quaker学校，不是很多，大约是10所左右。 Quaker学校有着非常一致的教育理念：教育除了要赋予人知识和技能，更为可贵的是对人格和精神的培养。也就是要Academic Excellence（学业优异），同时还要培养其Spiritual Depth（精神深度）。 因此，在Quaker学校中更注重对学生品格的培养。Quaker学校的目标就是要把学生培养成为具备阳光乐观的态度，优异的学术成绩，和优秀的人格魅力的人。 同时，Quaker学校更为注重学生的个性化发展。他们会针对每个学生的特点，以兴趣为导向，进行针对性的培养。这也是我非常看重的一点。客观的讲，儿子似乎有些偏科，有的科目学的非常好，甚至超前，有些科目却有些滞后。因此，希望在这样的学校中能够在专业老师的帮助下，把他的潜力挖掘出来。 非常欣赏美国著名的Quaker大学宾夕法尼亚大学的创始人，美国国父本杰明·富兰克林曾经说过一句话：“Do well by doing good.” 也希望自己的孩子今后的学校生活中能够培养出一个优秀的品格。","link":"/quaker/"},{"title":"男孩应有担当，女孩要聪慧有气质","text":"“男孩应。。。，女孩应。。。”。 看到有人讨论这个话题，顿时被吸引过来。 原因很简单，我正好有一双儿女，感觉似乎想说的话很多，但似乎又不知道从何说起。 图源：pixabay 我是一个比较传统的人，觉得男孩子一定要有担当，肩负起小男子汉的责任来。我家儿子是老大，从小我们就教育他要照顾妹妹，保护妹妹和妈妈，培养他的小男子汉气质。为了培养他的独立性，我们给他报了英国的童子军，随着年龄的增长，他们会进行各种野外训练，希望这样能够磨练他的品质和男人的阳刚之气。我认为培养他的男子汉气质的同时也要培养他的各个方面的素养，因此我们给他报了很多辅导班，钢琴，小提琴，马术，合唱团，游泳，空手道等等，希望从不同方面塑造他的性格。 女儿非常聪明可爱。我们尽量培养她的气质。最主要就是“聪”和“慧”两个字。我们主要在音乐，艺术，表演方面进行培养。在她妈妈的影响下，她从小就对各种经典音乐剧耳熟能详，而且她很喜欢读书，各种经典儿童书籍已经读了很多。她从小有着全家人的宠爱，但我们心中有一杆秤，不能让她恃宠而骄，当她和哥哥发生争执时，我们只看事情对错，不能因为她小就让哥哥事事都让着她。而且培养她要大气，懂的站在对方的角度考虑问题，懂的将自己心爱的东西和别人分享。 国内似乎有一种说法叫做中性美，其实就是男孩女性化，女孩男性化，对于这种观点，我不能完全赞同。但我觉得作为一个男孩子，如果在擅长各种体育运动的同时，能够演奏一种乐器，这是另一种魅力。而作为一个女孩子，也要有一定的独立意识，不能过于依赖男性。","link":"/raise-boys-and-girls/"},{"title":"每天进步一点点-在React中使用Chart.js","text":"最近尝试开始使用React，发现真的非常好用。这次尝试了在一个单一的页面中使用React+Chart.js来生成基本的报表。这里并没有创建一个完整的React项目。其原因在于，在现有的一个基于Java(后端)+JQuery(前端)的项目中只需要添加一个页面，只在该页面中使用React。下面把步骤记录一下： 创建HTML页面首先创建一个非常简单的HTML页面，但需要引用相关的js库，比如react, react-dom, babel, chart.js等 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Statistics&lt;/title&gt; &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id = &quot;my_statistics&quot;&gt; &lt;/div&gt; &lt;script type=&quot;text/jsx&quot; src=&quot;statistics.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在Javascript中使用React和Chart.js接下来需要定义一个组件，比如叫做：BarGraph 1234567891011121314151617181920212223242526272829303132class BarGraph extends React.Component { chartRef = React.createRef(); componentDidMount() { const myChartRef = this.chartRef.current.getContext(&quot;2d&quot;); new Chart(myChartRef, { type: &quot;bar&quot;, data: { labels: [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;], datasets: [ { label: &quot;Sales&quot;, data: [61, 134, 83, 77, 49, 61, 90, 33, 54, 94, 93, 62], } ] }, options: { } }); } render() { return ( &lt;div&gt; &lt;canvas id=&quot;myChart&quot; ref={this.chartRef} /&gt; &lt;/div&gt; ) }} 接下来，需要引用这个组件 12345'use strict';const e = React.createElement;const domContainer = document.querySelector('#my_statistics');ReactDOM.render(e(BarGraph), domContainer); 至此，就能看到如下效果了： 但需要注意的是：1）在测试这个页面的时候，需要将其放置在web服务器的目录下通过http的方式来访问。2）这里使用固定的数据来画图，但在真正使用时一般都是通过对API的调用动态获取数据的。","link":"/react-chart-js/"},{"title":"阅读习惯","text":"女儿自从半年前看了《Matilda》的书和电影后，可能是受Matilda的影响吧，喜欢上了读书。而且是发自内心的喜欢。她经常陷入书中的情节而对周边的事不闻不问，呵呵，在家就可以完全沉浸式阅读。半年以来把家中适合她的所有读物已经读完了，目前和大她四岁的哥哥一起读《哈利波特》。 图源：pixabay 与她对比鲜明的是她的哥哥。对看书没有太大的兴趣，完全靠家长催着才能读。而且读书的时候还经常走神。真的让人头疼。 记得有一个说法，如果坚持一件事21天后就能形成一个习惯。一旦一个习惯养成后，如果哪天不去做这件事，就会总感觉缺了点什么。如果是一个长时间形成的习惯，反倒偶尔中断一两天也不会影响什么。 按照这里说法，我想这半年以来，女儿已经养成了阅读的好习惯。而这个习惯将会陪伴她的一生。 其实对于很多小朋友们来说，现在的诱惑可以说太多了：电子游戏，手机，各种视频。其实女儿同样也对这些东西着迷，尤其是Youtube上的各种视频，她也会经常要求把看视频作为一种奖励。不过还好，我和媳妇在这点上达成了共识，视频可以看，但只有在每天的功课，练琴都完成后才可以，而且要限定时间。 其实反思一下自己，似乎做的都没有女儿好。也曾经规定了每天晚饭后的家庭阅读时间，但似乎并没有坚持满三周，就因为各种杂事而耽搁了。反倒是女儿经常要求，已经好几天没有全家一起看书了。。。 忙这个字可能是很多家长的一个借口。其实所谓正在忙的事往往并没有那么重要，真正放下了对生活往往没有什么影响。反倒是阅读习惯对一个人，一个家庭来说太重要了。看样子确实需要恢复家庭阅读时间这个好习惯了。","link":"/reading-habit/"},{"title":"RaiDrive - Helper to make cloud storage Windows drive","text":"RaiDriveHelper to make cloud storage Windows drive Screenshots Hunter’s commentRaiDrive is a tool to make cloud storage your Windows Drive. Currently, it supports Google Drive, Google Team Drive, Dropbox, Google Photos, OneDrive, WebDAV, SFTP, and FTP. This software plans to support more cloud storage providers in the future. With this software, you no longer need to use your browser to find files. You can open, edit, and save files in your Windows drive as you are using a local file. In the meantime, you can copy, paste, and move files in these Windows drives, all underlying sync jobs are transparent to you. In terms of security, it is up to your cloud providers. If you use Dropbox, and OneDrive, all files are encrypted in the client side and transferred to cloud storage by RaiDrive. And the great thing about RaiDrive is that it is absolutely free! You are able to add any number of Windows Drives as your Windows system allows! Linkhttps://www.RaiDrive.com ContributorsHunter: @aafengMakers and Contributors: @aafeng (85% beneficiary of this article) This is posted on Steemhunt - A place where you can dig products and earn STEEM.View on Steemhunt.com","link":"/raidrive-helper-to-make-cloud-storage-windows-drive/"},{"title":"最近尝试的菜谱","text":"最近喜欢上了美食作家王刚的Youtube美食频道。按照他的菜谱做出来的菜失败率极低。但有个问题就是，每次对着视频要反复看几遍才行，比较耽误工夫。下面记录一下我做过菜的简要步骤。极个别菜是按照别的厨师菜谱做的。这样下次再做的时候就省时间了。 口水鸡姜拍散，葱切段姜葱下锅，放入盐，料酒整鸡放入锅中，加入花椒大火烧开后关火，盖盖闷40分钟在开水中煮30分钟，再用开水闷10分钟40分钟后将鸡捞出放入凉开水中泡凉料汁：姜末，蒜末，辣椒碎，盐2克，糖2勺，生抽10克，醋2克，煮鸡原汤少许，红油，花椒面鸡肉切块，撒上料汁，葱花 腐乳鸡翅 碗中加入2块玫瑰腐乳，一勺腐乳汁，一大勺生抽，2勺料酒，一勺老抽，一勺蚝油，盐，黑胡椒粉，拌匀鸡翅洗净后加入酱汁，蒜末，姜片，腌制1小时放入电饭锅，按煮饭按钮炒锅中炒青椒丝，放入鸡翅，芝麻，翻炒出锅 蒜香鸡鸡肉切块用水焯好。在油中将葱，姜煸成略焦状态放入鸡块，2勺生抽，一勺老抽，料酒，2勺糖，炖半小时后收汁出锅。 盐水鸭 将鸭肉用食盐及花椒粉腌制5个小时。锅中加水烧开，放入葱，姜，八角，香叶将鸭肉放入锅中煮40分钟后用凉水冷却后切成块装盘。 自贡名菜-小煎鸭 将鸭子切成小块。小辣椒50克（我用的一个青椒）小米辣30克大蒜若干姜片100克葱两根 加料酒焯鸭肉加油，花椒，炒鸭肉加入干辣椒，大蒜，炒香加入豆瓣酱，炒出红油我添加了这步：加水炖30分钟，否则鸭肉不软，孩子咬不动加入小辣椒，炒香加入盐，糖，生抽加入葱，姜片加入少量香醋翻炒，出锅 红烧鱼鱼洗净，切一字花刀放入盆中，准备姜片，葱段，料酒腌制10分钟。不要放盐准备姜末，蒜末，红泡椒碎宽油炸鱼至金黄色加底油，花椒，姜葱末，泡椒，豆瓣酱加入清水，熬制两分钟加入糖，盐，胡椒粉，生抽，醋加入鱼烧8分钟后将于捞出汤汁中加入淀粉收浓后淋在鱼上 爆炒鱿鱼鱿鱼切花刀后切成小片，鱿鱼须切段烧开水，水中加盐，多放盐焯鱿鱼，放入料酒，时间一定要短锅中加油，蒜，葱，姜，豆瓣酱加入青红椒加入鱿鱼，不要翻锅加入糖，酱油，料酒加入生粉水勾芡 藕片蒸肉剁五花肉肉馅，加入姜葱碎盆中加入盐，酱油，蚝油三克，黄酒20克，老抽，米粉拌匀，再加入干淀粉将水分收干藕去皮切薄片莲藕两头切碎，胡萝卜，香菇剁碎放入拌好的肉馅盆中将肉放入藕片中夹好，放入盘中蒸12分钟调汁：酱油，蚝油，几勺白糖锅中加入调好的料汁+蜂蜜水+淀粉勾芡淋在藕片上 糖醋排骨 姜片，葱段冰糖80克，醋50克，盐1克，生抽10克排骨加料酒焯水排骨煸炒五分钟加入姜，葱，料酒，翻炒2分钟加入糖色翻炒加入调料汁，翻炒后加入清水大火烧开后转小火炖40分钟收汁时加入白芝麻加入葱花翻炒出锅 风味排骨排骨放入盆中，加入盐，碱，清水，抓洗三分钟，倒出水放入盐，胡椒粉，生抽，料酒，生姜，蚝油，五香粉，拌匀后放入蒜油10克腌制蒜末，姜末，辣椒粒，葱白切粒干辣椒段，香菜切段宽油，放入排骨炸五分钟，倒入盘中放入干辣椒小火爆香，放入辅料爆香加入老干妈或豆豉两勺加入排骨加入五香粉，熟芝麻，翻炒均匀加入葱油，香菜翻炒几下出锅 懒人可乐排骨排骨放入盆中，加入盐三勺，面碱1勺，料酒，五分钟后洗净排骨焯水柠檬半个，姜片，两根小葱，八角，桂皮，香叶，冰糖，生抽20克，可乐1000克，盐锅中加入料汁加入排骨烧开，转小火烧40分钟收汁后装盘 青椒炒猪肝猪肝洗净，切薄片，加入盐，白胡椒粉，酱油，蛋黄一个，淀粉三克，拌匀，加入植物油青椒切片姜末，蒜末，葱段碗中加入盐，胡椒粉，蚝油，生抽，老抽，水，干淀粉，拌匀宽油，烧热后，将猪肝下锅离火将猪肝滑熟，倒出备用加入葱姜蒜，青椒片，炒熟加入猪肝，料汁，料酒炒熟后，加入少许油出锅 葱爆牛肉 牛肉切片，放入碗中清洗，挤干水分备用盆中加盐，胡椒粉，老抽，酱牛肉搅拌至水干粘手加入蛋清一个，继续搅拌加入淀粉10克，拌匀加入植物油10克拌匀 姜切小片，蒜片，红椒一个切片，葱切斜段/洋葱 蒸鱼豉油8克，料酒5克，盐，胡椒粉，淀粉，拌匀 锅中加油，将牛肉炒熟倒出备用锅中加入油，将葱姜，红椒下锅，加入蚝油，甜面酱各3克爆香加入牛肉翻炒，加入葱段炒至断生加入料汁，翻炒出锅 酱牛肉牛肉浸泡三小时盆中加入黄豆酱400克，酱油150克，糖色，老抽20克，搅拌均匀生姜拍散八角2颗，桂皮一块，香叶4片，拍破的草果2颗，小茴香5克锅中放入清水，牛肉冷水下锅焯水锅中放油，酱汁炒香加入牛肉，清水没过牛肉，烧开后放入小葱，转小火煮60分钟关火浸泡30分钟捞出小葱，大火烧开撇去浮沫，关火浸泡40分钟烧开，加入盐5克，胡椒粉1克，白糖3克，关火浸泡30分钟放凉后抹上香油，用保鲜膜包好放入冰箱酱汁可以再次使用制作排骨，猪蹄之类 牛排用刀背把牛肉断筋牛排撒盐，黑胡椒粉，抹上油，腌制至少一个小时平底锅烧热，不放油，放入牛排，煎完一面再换另一面，表面略焦黑就可以翻面关火，将调料放入锅中，可选红酒，红油，或生抽 红焖羊肉 萝卜切滚刀块羊肉切块葱段开水中焯萝卜冷水加入羊肉，料酒后烧开焯一下加油，八角，花椒，香叶，葱，姜，孜然粉，小茴香加入豆瓣酱，羊排翻炒加入料酒加入清水没过羊排，炖40分钟加入胡椒粉，老抽，生抽，盐，萝卜后炖5分钟 炝拌牛心包菜包菜切细丝蒜末，花椒，干辣椒段，热油浇入碗中加入盐，糖，葱油，蒸鱼豉油8克，醋5克料汁水倒入盆中拌匀 风味茄子茄子切块，放入盆中，加入白醋3克，土豆淀粉10克拌匀，撒上少许清水再加入土豆淀粉30克拌匀撒清水，加淀粉40克拌匀蒜末，葱末，姜末，青花椒清水30克，生抽8克，蚝油3克，糖半勺，淀粉1勺，拌匀宽油炸茄子至金黄色，捞出备用料头炒香后放入料汁，收浓后放入油放入茄子翻炒后出锅 小炒茄子茄子切丝放入盆中加入盐，白醋，拌匀稍肥五花肉切片蒜拍散尖辣椒切成滚刀块爆炒五花肉加入蒜，辣椒茄子下锅炒三分钟茄子吐出油后大火炒一分钟加入盐，糖，蚝油，生抽 肉末芹菜粒 芹菜切粒蒜末姜末锅中放油，花椒，肉末炒香，放入蒜末，姜末，料酒，豆瓣酱炒出红油放入芹菜粒炒香加入盐，糖，生抽 醋溜白菜白菜洗净，斯成块，菜帮和叶子分开蒜末，干辣椒汁：生抽8克，醋8克，盐1克，1勺糖，淀粉2克，拌匀油热后放入蒜末，干辣椒加入菜梗，爆炒至断生加入菜叶，炒熟加入汁，收汁后出锅 素炒西兰花蒜片，葱段西兰花切成小块，放入盆中加盐清洗红椒切片，蟹腿菇锅中加水烧开后，加盐，油，放入西兰花焯水，冲凉并沥干水分锅中加油，蒜片，葱段，西兰花，翻炒一分钟后加入少许水加盐，少许糖加少许水淀粉翻炒出锅 蚂蚁上树红薯粉放入盆中，开水泡15分钟后沥干水分五花肉200克剁成肉末姜末，蒜末，泡椒碎，芹菜粒，葱碎油加热后放入花椒，爆香肉末加入姜，泡椒加豆瓣酱炒出红油加入粉条炒匀白糖，胡椒粉，老抽，生抽加入芹菜粒加入葱蒜 家常豆腐豆腐切菱形块猪肉切片午餐肉切菱形块，红椒半个切片木耳一小片蒜苗切段红泡椒切段，泡姜片宽油炸豆腐，豆腐出国前，将午餐肉，红椒下锅猪肉下锅爆香，加入泡椒，泡姜，豆瓣酱，加入少量水烧开盐，糖，生抽加入豆腐，午餐肉，小火烧两分钟至入味加入木耳，蒜苗加入水淀粉勾芡 萝卜羊肉汤白萝卜切滚刀块羊肉800克切成小块姜拍散小葱三根拍散切段焯羊肉煸炒羊肉三分钟加入白酒，葱，姜炒香大火烧开后转小火炖40分钟放入萝卜，烧开后小火炖20分钟加入盐，糖，胡椒粉 蘸料：蒜末30克，小米辣15克，酱油，盐，糖，香油5克，小葱10克，香菜加入少许羊肉汤 饺子馅香料油小茴香20克，八角10克，桂皮8克，香叶2克，花椒5克，草果2个砸开，生姜50克，葱100克小火炸香料，一定小火，倒入碗中，加盖凉凉后使用 香料水小茴香6克，花椒2克，桂皮1克，八角2克，香叶2克，草果1个去籽，浇开水泡15分钟 肉馅，葱末，姜末，盐，胡椒粉，白酒，生抽，拌匀加入香料水，拌匀加入香料油，拌匀 鸡蛋炒米粉米粉在水中浸泡，沥干水分备用米粉盆中加入盐，老抽打鸡蛋，放盐，搅拌切火腿丝葱段，生菜，豆芽炒蛋，放入辅料放入米粉翻炒一分钟加入生抽 拔丝土豆土豆切小块洗净放入盆中加入土豆淀粉，拌匀白糖50克放入碗中盛菜盘中撒入白糖锅烧热后放入宽油，放入土豆，稍后放入白糖土豆炸透后捞出沥油将多余的油倒出将土豆放回锅中翻炒均匀后出锅","link":"/recipes/"},{"title":"保护环境，人人有责","text":"在英国已经定居好多年了，慢慢也习惯了这边的很多规矩，比如：垃圾的严格分类。市政府提供的回收垃圾容器只有废纸，塑料瓶，和玻璃瓶三种。家中一旦有了不用的电器，用过的电池，都要放在特定的容器中，等到有时间的时候一起处理。 记得刚到英国的时候，傻傻的分不清各种回收物品该往哪里放，还是好心的邻居告诉我，才知道了什么可以放在回收容器中，什么东西不可以。 由于市政府提供的垃圾回收容器都比较小，同时只针对生活中最常见的可回收垃圾。因此如果有大量的可回收垃圾，或者比较特殊的可回收垃圾，比如：不用的电子产品，家具等，需要自己来解决。一般每座城市都会有专门的大型垃圾回收站。因此每过几周，我都会把家中的各种无法处理的垃圾带到垃圾回收站去处理。每次在垃圾回收站那里都需要排很长的队。 就拿这次家中的装修工程来说，家中有一堵又高又厚的树墙，不仅占据了很大的花园空间，还非常不容易打理，可以说既费时间又费钱。这次想趁着建筑工人在，有很多趁手的工具，把树墙彻底砍掉。但和建筑工人沟通后才知道，砍掉这些树墙本身工作量还好，并不是很大。但要把砍下来的树运走，造价就比较高了。需要租3-4个scape，大约需要800英镑左右。感觉这个代价似乎有些大。 还有一种对环境危害很大的垃圾就是废弃的电池。它不仅能对环境造成严重污染，还可能会危害人类的健康。好在英国的各大超市一般都提供电池回收箱，只要记着在去超市的时候把电池带上，扔在电池回收箱中就可以了。 人类生活的环境日趋恶化，我们所能做的就是从自己做起，尽量保护地球母亲，为我们的子孙后代做一件好事。","link":"/recycles/"},{"title":"学会尊重 - 不同的生命是不同的个体","text":"由于疫情原因，英国政府前一段时间公布了法令，强制性要求所有去超市购物的人必须佩戴口罩。这和几个月前形成了鲜明对比。之前戴口罩绝对是少数，但现在却毫无例外的都戴上了口罩。如果没有戴的话，超市工作人员可以给警察打电话，甚至处以罚款。 但是，偶尔在超市中也会发现有些人并没有戴口罩。超市的工作人员看到也没有采取任何措施，这究竟是怎么回事？ 和一个在超市工作的朋友聊天后才知道，如果仔细看的话，这些人都佩戴了一个小的向日葵徽章。秘密原来都在这个小向日葵徽章上。 其实，原因可能有很多种。比如：有的残疾人士无法自己佩戴口罩；或者因为有的人有呼吸道疾病，带上口罩后他们就会呼吸困难；亦或者有的人属于社工，他们要照顾的人需要读他们的唇语。对于这些特殊人士，别人可能无法知道他们不是忘记戴口罩，而是无法/不能戴口罩。那么，最好的方法就是通过一种特殊的方式告诉周边的人，他们是因为特殊原因而无法佩戴口罩的。这就是向日葵徽章的来源。 其实，世界之所以美丽，在于他的千变万化。世界上没有完全相同的两朵花。同样，每一个人都是独一无二的。我们不能总是从自己的角度来考虑问题，而是设身处地的从对方的角度来考虑问题。 在读书期间，曾经辅导过本科生的上机实习课。当时有一个很有趣的事，现在还记得非常清楚。班里有不少印度来的学生。有一次在讲解一个知识点的时候，习惯性的问他们是否听懂了？结果这些学生一致的在台下摇头。搞得我非常郁闷，要讲的知识点很简单啊，怎们讲了这么多遍，他们一直在摇头呢？后来才终于搞明白，在印度的一些地区，摇头代表Yes，点头代表No。自从那次之后，我就彻底明白了，这个世界很大，很多东西都不是我们想象的那样。毕竟，我们对世界的认知，仅仅源于我们每个人的经历。 记得一个朋友曾经说过她的一个处事原则：想要别人怎样对你，那就用同样的方式对别人。如果真正每个人都能做到的话，那么，这个世界就真的会和谐很多了。","link":"/respect/"},{"title":"重返办公室","text":"时隔半年，终于再次回到了自己的办公室。只不过，不是去办公，而是按照单位的要求，把自己的私人用品或者带回家，或者锁在抽屉中。因为从此以后，就彻底没有办公室了！自己的办公室将会变成一个公共的办公区域。 自此之后，将要彻彻底底的在家办公了。如果需要在单位和同事或者客户见面的话，可以提前预订公共办公区才能使用。只是不知道如果这些公共办公区不够用了该怎么办？ 整个办公室的清理流程也非常清楚，每一个环节都经过了充分论证，能够最大限度的防止病毒的传播。 首先，为了避免和他人近距离接触，不推荐搭车。 到了单位后，用员工卡进入办公区后，必须要佩戴口罩。之后要消毒，然后签到，之后再消毒。 为了保持社交距离，对于多人共享的办公室，划分了多个造访时段，每个时段只能有一个人到场清理自己用品。 很快就把自己的物品清理好了。这难道是一个时代的结束？自此之后，只能在家打造自己的办公室了？？？","link":"/return-to-office/"},{"title":"Hive Dapp介绍 - rewarding.app","text":"试用了一下rewarding.app这个dapp，感觉其功能还是非常强大的。简而言之，这个dapp可以非常灵活的定义各种点赞规则，之后这个dapp就会按照你定义的规则来进行点赞。 登录后可以看到如下界面： 首先需要使用hivesigner对其进行授权。授权成功后，在hiveblocks上可以看到rewarding这个dapp出现在你的Posting授权列表中： 接下来就可以定义点赞规则了。首先看一下第一组参数： 比如：给哪个作者点赞，点赞比例，点赞时段（比如：5分钟到120分钟之间）。 再来看一下第二组参数： 首先是vote_sbd，这个选项只有在vote_weight为0的时候，rewarding.app会自动换算，比如你想给作者点赞的价值为$0.1，这个dapp会自动帮你计算你需要的点赞比例。接下来的每天最大点赞数，每周最大点赞数，以及最小的VP值等。 再来看第三组参数： 比如，文章中必须包含某个标记，或者必须不包含某个标记，以及文章中最小的字数。 至此，感觉这些参数已经足够灵活了，可以定义各种点赞规则。其实除此之外，还有好多参数可以选择。都定义完之后保存规则，会看到这样的一个规则列表： 这界面，实在是太需要改进了。。。 不过不得不说，这个dapp的功能还是非常强大的，除了自动点赞规则的设计，还有跟赞，跟踩的功能。个人感觉，如果能够适应它的界面，这个工具还是有其可取之处的。","link":"/rewarding-app/"},{"title":"生活中的仪式感","text":"最近两个孩子给我上了一课。前一段时间妈妈过生日的当天。孩子们头一天就悄悄的和我说要给妈妈一个惊喜：breadkfast in bed。第二天一大早，两个小家伙就忙碌起来，做了一顿很“丰盛”的早餐：面包，煎蛋，牛油果，蓝莓，配红茶。而且在女儿的坚持下，我们又去花园中摘了几朵野花（家中种的花还没有开）插在瓶中，把他们亲手做的生日卡放在餐盘后面。等到所有东西都摆放整齐后，才把餐盘端到妈妈床边。 毫无疑问，妈妈非常感动，或者说，通过这种仪式感，这顿很普通的早餐变得很不一样了。我相信以后孩子们长大了，他们仍会记得给妈妈做过的早餐。当然，他们的妈妈更加会记得这暖心的”Breakfast in bed“。 尼采曾经说过一句话： 每一个不曾起舞的日子，都是对生命的辜负。 图源：Pixabay 那么，什么是仪式感呢？其实就是使某一天和其他日子不同，或者使某一个时刻和别的时刻不同。其实在生活中，仪式感是无处不在的。 大自然通过日出和日落给了我们一天开始和结束的仪式感。 通过举办婚礼，使一对新人和他们的至亲都会永远记住他们结婚的那一天。 通过参加毕业典礼，让你能够在记忆中珍藏最终毕业的日子。 母亲节的一束鲜花，生日时的蛋糕，蜡烛，以及许下的愿望，都是一种能够让人铭记的仪式感。 很多米其林星级餐厅不仅菜的味道做的好，同时摆盘也十分讲究，服务更是非常到位。这就是为什么米其林星级餐厅定价贵的原因：他们可以给众多食客特殊的仪式感。 其实，仪式感是一种对生活的态度，或者说是一种对生活的重视。一个人的早餐可以是随便糊弄着吃一下，也可以早起半个小时，把早餐摆放的恰到好处，从从容容的享受早餐，心情愉悦的开始新的一天。 仪式感表示了对彼此的重视和用心程度。如果生活中没有了这些仪式感，生活就会变得索然无味。 那么，你今天的仪式感从哪里开始呢？烛光晚餐？或是一个简单的拥抱？","link":"/ritual-sense/"},{"title":"Robin Hood&#39;s Bay捉螃蟹记","text":"开学前最后一个周末，刚好周六赶上一个阳光明媚而又无风的好天气，一家人前往Robin Hood’s Bay。一路上漫山遍野的石棉花，变化多端的云朵，错落有致的房屋农田，碧海蓝天绿树鲜花 – 美不胜收！ 临时买了桶和网去捉螃蟹啰！不过装备太过简陋，再加上没准备诱饵，结果一无所获。看着旁边一家人一会儿功夫捞上来两三只螃蟹，我们只有羡慕的份儿！不过孩儿他爸倒是学会了怎样捉螃蟹，他说下次一定准备充分再来！ 这是别人捉到的螃蟹 儿子同学一家带我们去了当地一家有名的炸鱼薯条店，炸鱼和鱼饼味道都很赞，更重要的是无论是在室内或室外就餐，都能欣赏到无敌的风景! 探索村庄 – 地势高低起伏使得房屋错落有致， 颇有特色的户门， 狭长的街道，石阶石子儿路，精致的小礼品店，在绿树掩映鲜花点缀下，真的好别致！ 在儿子同学爸爸的带动下，小朋友们玩儿摔炮上了瘾。同学爸爸小时候就住在离此地一公里以内的一个村庄里，所以对这一带很熟悉。临走前，小朋友们在停车场附近的游乐场玩儿得不愿离开。一边看着孩子们开心的笑脸，一边可以欣赏无敌海景，真的再惬意不过了！","link":"/robin-hood-s-bay/"},{"title":"人工智能离我们多远不好说，但各种智能家居已经成为现在进行时","text":"今天和同事们聊天时聊到了疫情期间大家的厨艺，我顺便表扬了一下我家的做菜机器人。听的那些英国同事们两眼发亮，纷纷询问在英国能不能买到。看样子我可以在英国摆个地摊卖炒菜机器人了。。。 我家的炒菜机器人是九阳系列产品中的中档产品，记得似乎不到2000块。全家对这个炒菜机器人的态度由怀疑，到相信，再到现在的离不开，可以说是发生了彻底的改变。不过这款貌似简单的机器人，做的一些菜比手工做的还好吃，以至于在英国认识的好多朋友家中都有着类似的产品。 除了炒菜机器人之外，家中还有另外一个使用频率超级高的扫地机器人。这是小米家的产品，感觉非常智能。能够非常高效的计划路线，避开障碍物，自动提示垃圾袋满，自动回充。整个扫地的过程非常快，而且还能把我们平时不易清扫的一些死角打扫的非常干净。 最受孩子们喜欢的是刚买不久的Google Home Hub。它有点类似于Amazon Alexa。它和Google的系列产品整合的非常好。每天孩子们起床后第一件事就是来调戏Google。让我们不得不在他们写作业的时候让Google先关机休息一会儿。 感觉我们生活中已经越来越多的被这些智能设备所充斥了。这些智能设别为我们的生活带来了诸多便利。出差了，可以让智能家居管理家中电器，给人一种主人在家的感觉。下班到家了，智能家居可以自动开灯，并提前把饭菜做好。 智能家居带来的诸多好处是不言而喻的，但似乎在慢慢把人们变成了什么都不会做，也不想做的懒人了？","link":"/robot/"},{"title":"如何将Beem程序在AWS Lambda上运行","text":"大约两，三年前就开始在VPS上跑Steem的程序了，后来有了Hive链，也开始跑Hive的程序。其实Steem/Hive的Python库还是很好用的。于是就有了几个Cronjob，点点赞，领取一些收益之类的。但近期随着对AWS服务了解的越来越多。感觉再在VPS跑Cronjob似乎有点Out了。于是开始考虑把一系列的Cronjob都搬到AWS上来，这样做最大的优势就是避免了以后服务器的维护成本。不用再考虑升级Ubuntu的各个版本/打各种安全补丁了。同时，也能节省一些银子。相信我，AWS的一系列Serverless服务真正用起来之后，在这些服务上的花费真的比想象中的要低不少。 下面就以一个最简单的Beem/Hive程序为例来说明。假设我们想把下面这个Python程序挪到AWS Lambda中去： from beem.vote import Vote vote = Vote(u&quot;@aafeng/bolton-abbey|abit&quot;) print(vote.json()) 上面这个程序非常简单，只是返回一个包含A神对我的一篇文章的点赞数据。 下面来说说如何在AWS Lambda中运行这个程序。整个过程中遇到了两个坑，下面会详细说。 这里有一个前提条件，就是已经安装了serverless框架。如果没有安装，请先自行安装，并配置好AWS的账号信息(~/.aws/credentials)。 创建Lambda依赖库（layer）这一步需要在一个AWS Linux的EC2中运行，后面说到第一个坑的时候会详细介绍。当然，在网上也看到有人说可以创建一个AWS Linux的docker镜像，然后在docker镜像中运行pip来安装Python依赖库。但我并没有尝试。应该也可以吧。 如果我们想要写一系列的Beem/Hive程序，肯定不想把依赖库打包到每一个Lambda中。因此这里可以创建一个AWS中共享的依赖库(Layer)。 运行： sls create --template aws-python3 --name beem-layer --path beem-layer 这就会创建如下目录和文件： beem-layer ├── handler.py └── serverless.yml 接下来创建目录： cd beem-layer mkdir libs touch libs/requirements.txt 目录结构如下： → beem-layer tree . . ├── handler.py ├── libs │ └── requirements.txt └── serverless.yml requirements.txt内容如下： beem 安装依赖库： cd libs pip install -t python/lib/python3.8/site-packages -r requirements.txt 修改serverless.yml文件如下： service: my-layers frameworkVersion: &apos;2&apos; provider: name: aws runtime: python3.8 region: eu-west-1 layers: beem-dependencies: path: libs compatibleRuntimes: - python3.8 description: &quot;Python beem dependencies&quot; 在上面并没有定义Lambda函数，只是定义了layer，因此无需修改默认的handler.py，因为根本不会用到这个文件。 部署： sls deploy 可以看到，很容易就在AWS中创建了一个layer。 注意：这里有第一个坑! 在后面的应用中使用这个layer的时候，总是提示找不到.so库。花了不少时间才搞清楚其原因在于：在安装Python依赖库时候的环境是Ubuntu 18，而在运行Lambda时候的环境则是Amazon Linux。两者不匹配自然就找不到所有的依赖库了。 因此最为简单的办法就是在Amazon EC2 (with Amazon Linux)中安装Python的依赖库。这样就保持了开发/部署环境和运行环境的一致。 创建Lambda首先运行如下命令创建serverless APP: sls create --template aws-python3 --name beem-app --path beem-app 接下来修改serverless.yml: service: beem-app frameworkVersion: &apos;2&apos; provider: name: aws runtime: python3.8 region: eu-west-1 functions: hello: handler: handler.hello layers: - &quot;YOUR_LAYER_ARN&quot; 修改handler.py: import json from beem.vote import Vote def hello(event, context): vote = Vote(u&quot;@aafeng/bolton-abbey|abit&quot;) response = { &quot;statusCode&quot;: 200, &quot;body&quot;: vote.json() } return response 部署： sls deploy 运行 sls invoke -f hello 结果，遇到了第二个坑。提示错误信息如下： { &quot;errorMessage&quot;: &quot;[Errno 30] Read-only file system: &apos;/home/sbx_user1051&apos;&quot;, &quot;errorType&quot;: &quot;OSError&quot;, &quot;stackTrace&quot;: [ &quot; File \\&quot;/var/task/handler.py\\&quot;, line 6, in hello\\n vote = Vote(u\\&quot;@aafeng/bolton-abbey|abit\\&quot;)\\n&quot;, &quot; File \\&quot;/opt/python/lib/python3.8/site-packages/beem/vote.py\\&quot;, line 52, in __init__\\n self.blockchain = blockchain_instance or shared_blockchain_instance()\\n&quot;, &quot; File \\&quot;/opt/python/lib/python3.8/site-packages/beem/instance.py\\&quot;, line 29, in shared_blockchain_instance\\n default_chain = get_default_config_store()[\\&quot;default_chain\\&quot;]\\n&quot;, &quot; File \\&quot;/opt/python/lib/python3.8/site-packages/beem/storage.py\\&quot;, line 46, in get_default_config_store\\n return generate_config_store(SqliteConfigurationStore, blockchain=\\&quot;hive\\&quot;)(*args, **kwargs)\\n&quot;, &quot; File \\&quot;/opt/python/lib/python3.8/site-packages/beemstorage/sqlite.py\\&quot;, line 200, in __init__\\n SQLiteFile.__init__(self, *args, **kwargs)\\n&quot;, &quot; File \\&quot;/opt/python/lib/python3.8/site-packages/beemstorage/sqlite.py\\&quot;, line 61, in __init__\\n os.makedirs(self.data_dir)\\n&quot;, &quot; File \\&quot;/var/lang/lib/python3.8/os.py\\&quot;, line 213, in makedirs\\n makedirs(head, exist_ok=exist_ok)\\n&quot;, &quot; File \\&quot;/var/lang/lib/python3.8/os.py\\&quot;, line 213, in makedirs\\n makedirs(head, exist_ok=exist_ok)\\n&quot;, &quot; File \\&quot;/var/lang/lib/python3.8/os.py\\&quot;, line 213, in makedirs\\n makedirs(head, exist_ok=exist_ok)\\n&quot;, &quot; File \\&quot;/var/lang/lib/python3.8/os.py\\&quot;, line 223, in makedirs\\n mkdir(name, mode)\\n&quot; ] } 仔细读一下，原来是beem在运行的时候会尝试装载其配置文件，这个文件为~/.local/share/beem/beem.sqlite，如果该文件不存在，beem会尝试创建这个文件。而Lambda运行时只有对”/tmp“目录有写入权限的。因此出现了访问权限问题。 最快捷的解决方法就是直接修改文件：python/lib/python3.8/site-packages/beemstorage/sqlite.py #self.sqlite_file = os.path.join(self.data_dir, self.storageDatabase) self.data_dir = &quot;/tmp/&quot; self.sqlite_file = &quot;/tmp/beem.sqlite&quot; 然后回到Amazon Linux，重新部署依赖库。 然后再调用Lambda： sls invoke -f hello 返回结果为： { &quot;statusCode&quot;: 200, &quot;body&quot;: { &quot;percent&quot;: 5000, &quot;reputation&quot;: &quot;119989167017696&quot;, &quot;rshares&quot;: &quot;13053196760301&quot;, &quot;time&quot;: &quot;2020-10-27T11:27:18&quot;, &quot;voter&quot;: &quot;abit&quot;, &quot;weight&quot;: 1202589, &quot;authorpermvoter&quot;: &quot;@aafeng/bolton-abbey|abit&quot; } }","link":"/run-beem-application-on-aws-lambda/"},{"title":"试用RunKit","text":"首先来说说RunKit是什么。首先，Runkit可以让你在浏览器中运行Node.js的代码。在Runkit中，可以很方便的调用众多的npm模块。这就有点像Node.js版的Jupyter Notebook。同时，Runkit还可以提供一个免费的HTTP服务器而无需任何的服务器安装和配置。这在开发手机APP的服务器端，以及微服务的时候尤其有用。当然，实现无服务器的选择很多，比如AWS的Lambda+API Gateway，但RunKit的最大优势就是完全免费的，这在开发软件原型的时候就更为方便了。 下面分别来看看这两项功能。 打开页面：https://runkit.com/home 可以通过Github授权登录： 登录成功后可以看到： 点击运行按钮后就可以在页面中看到运行结果： 在Runkit的页面中可以像正常的Node.js环境一样运行各种JS语句。比如，运行如下的简单代码获取Hive中文区的最新文章： 可以看到返回的结果： 再来看看我最喜欢的Runkit功能：提供简单的API endpoint。 非常简单的源码： exports.endpoint = function(request, response) { response.end(&quot;API endpoint test&quot;); } 单击“publish”进行发布： 发布后单击“endpoint”就会打开对应的API URL： 比如说，我这里的就是： https://api-jdcmj9qsmxmb.runkit.sh/ 可以看到，无需配置/运行服务器，就可以有自己的API可用，又是serverless，同时还免费，是不是很爽？","link":"/runkit/"},{"title":"塞尔维亚的传统美食：Sarma","text":"圣诞/新年假期期间，应一家塞尔维亚好友的邀请去做客，有幸尝到了女主人做的塞尔维亚传统美食: Sarma。这道菜将肉馅，蔬菜碎，米饭及香料包裹在圆白菜叶子当中，在烤箱中烤熟。女主人还别出新意的用大的尖椒包裹同样的馅料制作了略有不同的Sarma。不过我还是更喜欢传统用圆白菜叶做的Sarma。 对于习惯了中国菜的我，味觉上还是比较挑剔的。但尝过第一口后就停不下来了，菜叶的清香配上鲜美的肉馅及香料，让人欲罢不能，而吸饱了汤汁的米饭给人的味觉很大的冲击，让人大呼过瘾，我竟然一气吃掉了4个！ 在和主人的闲聊中了解到，Sarma作为塞维亚的传统美食，经常在重要的节日，诸如圣诞节，新年，生日时被搬上餐桌。感觉这就有点向中国北方传统中的饺子一样，已经成为塞尔维亚文化中的一部分了。","link":"/sarma/"},{"title":"孩子们最爱的Santa Grotto","text":"圣诞节就要到了，和朋友家一起带孩子去参加一个Santa Grotto，也就是去见圣诞老人。 首先是圣诞姐姐在入口处欢迎各位小朋友。 可以写信给Santa 稍微等上一会后就开始坐上拖拉机拉的雪橇出发啦 圣诞老人在一个小木屋中等待大家： 圣诞老人送给每个小朋友一把钥匙，可以到礼品店里换一个自己喜欢的玩具 这里还能看到各种小动物 非常愉快的一个晚上！","link":"/santa-grotto/"},{"title":"备考SATs","text":"儿子的小学生活只剩下不到7个月了，今年五月就要参加SATs(Standard Assessment Tests)考试了。于是昨天参加了一个关于如何准备SATs考试的在线会议。尽管会议是一个培训机构组织的，其主要目的还是为了招生，但其中还是有很多有用信息的。 Source: Pixabay 去年由于疫情，孩子们的学习进度都或多或少的受到一些影响。但至于受到多大的影响，心理还真的不是很有数。参加了这次会议后，才知道了差距，看样子儿子在接下来的几个月中要加油了。 根据NFER (National Foundation for Educational Research)的研究结果，英国的小学生的学习进度大约滞后了三个月。也就是说，小学的教学进度大约滞后了33%。那么，缺的这些知识只能靠家长和课外补习班了。 况且，在疫情期间，由于都是在家学习，老师在网上教学效果会打折扣，同时家长一边工作，一边带娃，这样孩子们的学习效果还会再打折扣。而且，并不是所有家长都有能力辅导孩子们功课的。如此算来，前面说的滞后三个月可能还是比较乐观的估计。。。 可能是考虑到这些吧，官方取消了今年SATs考试的Science，英语也取消了grammar, punctuation，还有spelling，只考Reading。这样考生的压力就会小很多，主要专注于数学和英语阅读理解就可以了。同时考试结果也不像往年的A，B，C等级别，而仅有达标(AS)和未达标(NS)两种。 如果想要看看教学大纲，可以参考官网：https://www.gov.uk/education/school-curriculum在schoolrun这个网站上还有很多试题可以参考：https://www.theschoolrun.com/ 非常有趣的是，一位经验丰富的老师也分享了一些考试技巧，让我觉得非常熟悉，这不是当年我在准备各种考试时候的技巧吗？比如：先不要和难题死磕，而是先把最有把握拿分的题做完，再啃那些难题。如果实在做不出来，也不要空着那些选择题，可以蒙一下。万一对了呢？？？再比如说，在英文阅读理解时，要把关键词先画出来。 无论如何，看来接下来的几个月不会太轻松了。。。","link":"/sats/"},{"title":"与手机说再见","text":"今天看到一个微信公共号转发了一条新闻。在网上查了一下，这其实是一条旧闻。法国（2年前）通过了一项法案，全面禁止在小学和初中校园内使用智能手机，平板电脑，智能手表等具有联网功能的通讯设备。 其主要目的是两点：第一通过这种方式提高孩子们的注意力。因为小学和初中的孩子年龄较小，不太能够控制自己的注意力。如果有了这些智能设备，将会更加分散他们的注意力。第二，减少学校霸凌。 看到这则消息的时候，我的第一感觉就是，英国包括国内也该这样！现在不仅大人，而且很多孩子都是成天抱着手机，无法讲注意力集中到学习上。 就拿儿子读书的小学来说吧，他们班有超过半数的小朋友已经有手机了。尽管上课的时候学校不允许使用手机，但一到了课间，这些孩子们就会把手机掏出来。问了一下有手机小朋友的名字，他们的学习成绩果然在班里都不是拔尖的。 毋庸置疑，对于小朋友来说，手机确实是一个获取信息的工具。以至于在一些中学，老师要求所有学生在智能手机上安装一些APP，课上教学，包括课后作业都是需要手机的。 但手机的负面作用也是不容忽视的。联网手机上的诱惑太多，孩子们可能管控不住自己，因此整体而言绝对是弊大于利。因此在我家中，两个孩子使用手机，平板，或者电脑的时间都是要严格控制的，每天只有把该做的作业完成，该练的琴练完后，才有可能获得15分钟来使用他们的平板。 希望英国/中国的小学/初中也会采用这个建议，在校期间全面禁止手机。","link":"/say-goodbay-to-mobile/"},{"title":"Scarborough的愉快周末","text":"在英国难得有一个艳阳高照的周末。上个周末天气转好，英国各大海滩人满为患，我们也约上朋友去了著名的Scarborough海滩。 这个小镇上非常热闹，街边有很多特色的海鲜店，也有很多游乐设施。但前几次去的South Bay，感觉沙滩上碎石有些多，不太适合孩子玩，于是这次改去North Bay。 在海滩上人们各种放松，也有孩子们做着各种游戏，有堆Sand Castle的，玩水的，放风筝的。当然，到了海边不能忘记尝试一下英国的国菜：Fish &amp; Chips。","link":"/scarborough/"},{"title":"略感失望的学期报告","text":"孩子们学校放假了，也带回了学校的年终报告。看了一下儿子的报告，有些小失望。我感觉儿子学的最好的科目，比如数学，计算机，都只是”expected”，而不是我期待的”exceeding”。 先来说说成绩报告中三个级别。其中最好的级别就是“exceeding”，也就说超出了预期的学习效果。“expected”就是刚好达标的意思，也就是达到了老师期待的效果。而另外一项叫做“working towards”，也就是说距离老师预期的效果还有差距，还需努力。在我的印象中，儿子的数学和计算机都应该是“exceeding”才对，而不是成绩单上的“expected”。 在学校学习的数学主要包括运算和应用两大部分。儿子的运算能力超强，不需要我的任何帮助。但他的应用题做的并不是很好。他最大的问题就是不知道怎样把一个实际的问题转化为数学公式，最终求出结果。 儿子在做应用题遇到问题问我的时候，我并不会直接告诉他答案，而是给出一些提示，诱导他自己找到答案。如果他实在做不出来，我自己一步步的还是把答案告诉他。在遇到一些比较难的题的时候。当时就在想，英国人的数学普遍比较烂，儿子同学如果遇到数学问题，他们的家长应该没法辅导吧。在数学上如果拼爹的话，英国人应该会完败给这些中国家长吧。 儿子家庭作业中所有涉及数学，IT，还有科学的科目，基本上都是我负责。一般当他遇到问题的时候，我都会帮他解决。每次做报告的时候，也是我帮助他设计PPT。因此他的绝大多数作业的分数都是最好的级别：GG (Golden Grade)。这让我有一种感觉，现在看应该是一种错觉：他的数学，IT，还有科学都学得很好。 现在从这个成绩单上来看，在我的帮助下儿子完成了他的作业，并不代表他真正掌握了所学的知识。可能我对儿子的帮助有些过了。反倒影响了他自己对知识的掌握。 我想这可能是很多家长的通病吧。总把孩子当成温室中的小花，过于呵护，恨不得替孩子做很多本该他们自己做的事情。这其实是剥夺了孩子们独立学习的机会。他们毕竟总有一天要自己经历风雨的，现在就应该让他们多加锻炼，将来才能自己面对一切。看来以后对孩子的教育方式要好好的反思一下，尽量授之以渔，让他们自己掌握思维方法。","link":"/school-term-report/"},{"title":"使用Scrapy自动获取豆瓣每周热门电影","text":"自从宅在家中后，养成了一个习惯：每周五全家一起在家中看一场电影。但每次在选择电影的时候都很耽误时间。于是就想到实现一个自动的程序，每周五下午的在各个影评的平台自动抓取本周热门电影，再发送消息/邮件给我，作为当晚要播放电影的参考。其实这个功能完全可以使用urllib来实现。不过下面使用Python中的爬虫框架Scrapy来实现。 安装并创建项目首先安装Scrapy: pip install Scrapy 接下来创建一个项目： scrapy startproject douban 添加核心代码items.py首先修改items.py: import scrapy class DoubanItem(scrapy.Item): name = scrapy.Field() 可以看到DoubanItem类是scrapy.Item的子类。这样就便于在后续处理过程中回调。 使用Scrapy shell获取电影标题对应的路径要想正确获取影片路径，需要使用浏览器的调试工具和Scrapy自带的命令行工具。 首先运行： scrapy shell &quot;https://movie.douban.com/&quot; 在浏览器中打开这个页面，在浏览器的开发者工具中查看： 在下面的核心代码中，我们将使用如下标记来定位影片中的标题： &lt;div class=&quot;billboard-bd&quot;&gt; &lt;td class=&quot;title&quot;&gt; &lt;a&gt; DoubanSpider接下来编辑文件douban/spiders/douban_spider.py： import scrapy class DoubanSpider(scrapy.Spider): name = &quot;douban&quot; allowed_domains = [&quot;https://movie.douban.com/&quot;] start_urls = [ &quot;https://movie.douban.com/&quot; ] def parse(self, response): movie_list = [] for movie in response.xpath(&quot;//div[@class=&apos;billboard-bd&apos;]//td[@class=&apos;title&apos;]/a/text()&quot;).getall(): movie_list.append(movie) print(movie_list) filename = &quot;/var/tmp/movielist.txt&quot; with open(filename, &apos;w&apos;) as f: f.write(str(movie_list)) 类似的，DoubanSpider类继承自scrapy.Spider这个类。在上面的实现中重写了parse方法，自定义处理逻辑。 尝试运行一下： scrapy crawl douban 从LOG中可以看到，豆瓣返回了一个403错误。这是由于其反爬虫机制导致的。 打开douban/settings.py，添加如下行： USER_AGENT = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0&quot; 再尝试一下，成功！其输出类似于： 2020-06-26 15:49:34 [scrapy.extensions.telnet] INFO: Telnet console listening on 127.0.0.1:6023 2020-06-26 15:49:35 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://movie.douban.com/robots.txt&gt; (referer: None) 2020-06-26 15:49:35 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://movie.douban.com/&gt; (referer: None) [&apos;默片解说员&apos;, &apos;数电影的人&apos;, &apos;拍拖故事&apos;, &apos;若水&apos;, &apos;知晓天空之蓝的人啊&apos;, &apos;二十世纪&apos;, &apos;房子的故事&apos;, &apos;温德米尔儿童&apos;, &apos;翻译疑云&apos;, &apos;乳牙&apos;] 上面这种方式根本就没有用到前面定义的items.py，如果想要使用的话，可以把douban_spider.py更改为： import scrapy class DoubanSpider(scrapy.Spider): name = &quot;douban&quot; allowed_domains = [&quot;https://movie.douban.com/&quot;] start_urls = [ &quot;https://movie.douban.com/&quot; ] def parse(self, response): for movie in response.xpath(&quot;//div[@class=&apos;billboard-bd&apos;]//td[@class=&apos;title&apos;]/a/text()&quot;).getall(): yield { &apos;name&apos;: movie } 需要注意的是，要想输出中文，需要在settings.py中添加： FEED_EXPORT_ENCODING = &apos;utf-8&apos; 再次运行： scrapy crawl douban -o movies.json 其输出为： 同样结果已经保存在json文件中。","link":"/scrapy/"},{"title":"少儿Scratch编程","text":"前一段时间开始教两个孩子学习Python编程。但在学习的过程中，感觉老大学的还不错，但老二似乎年龄有些小，5岁学Python确实有些难为她了。搞得每次上课的时候只能按照老大的进度来，女儿彻底成了打酱油的了。想了想，为了不浇灭孩子学习编程的热情，决定再为女儿开启一门课程，Scratch编程。 当初考虑学习Python的原因很明确：反正孩子迟早要学的，还不如一步到位。但现在意识到这个问题。学习是一个循序渐进的过程，路要一步一步的走，饭要一口一口的吃。先通过Scratch建立起基本的编程概念来也不错。等到女儿年龄再大些，学Python的时候就会事半功倍。 最早对Scratch有些偏见，感觉Scratch有些幼稚，只适合低龄儿童学，但真正带着孩子学习后，才发现，Scratch如今这么流行，还是有其特点的。它不仅适合孩子学习编程，而且适合成年人设计一些简单的游戏。单位今年的Staff Festival中有一项活动就是使用Scratch编写一个游戏。 从我的角度来看，Scratch编程有以下优点： 统一的编程环境。不像其他语言，需要安装配置软件运行环境，Scratch完全可以在网页中进行。只要有浏览器，能上网，就能编程。 直观易懂。由于Scratch完全通过图形化的各种积木来拼装程序，无需了解编程语句，非常简洁易懂，适合小朋友。 内置的各种角色，背景，道具等非常吸引眼球。尤其是小朋友们，把Scratch当成了一种游戏，在游戏中就掌握了编程的概念。 女儿自从开始接触Scratch之后，非常感兴趣。每天都追着我问是否可以上编程课。同时还和她的好朋友们分享她编写的小游戏。其实就算对于年龄大一些的小朋友，照样可以尝试用Scratch编写一些更为复杂些的游戏。","link":"/scratch/"},{"title":"动物凶猛","text":"今天看到一个报道，一家人养的宠物狗吉娃娃被从天而降的海鸥叼走，下落不明。随后有人在附近看到惨不忍睹的一条狗腿。好可怜的狗狗。。。 其实听到类似的报道已经不止一次了。英国的海鸥出了名的凶猛。经常有人手中的炸鱼薯条，汉堡等食物被海鸥抢走。 这还不算什么，还曾经有过海鸥直接从人的嘴中夺食，把人啄伤的事故。更有甚者，还有人看到过有海鸥生撕鸽子的血腥一幕。。。 记得在国内的时候，对海鸥的印象就是“可爱”两个字。想象也是，洁白的羽毛，温顺的性格。可到了英国，这里的海鸥其实从长相到气质，都是一个狠角色，看看那双眼睛，就非常邪恶。 除了伤人，偷取食物之外，海鸥的危害还不止这些。比如：清晨就开始尖叫，制造噪音。撕破居民的垃圾袋觅食，从而破坏公共卫生，随地大小便，污染环境。。。 听说有过一位小哥，估计是一直憋着这口气，当再次看到海鸥俯冲而下来抢自己汉堡的时候，抓住海鸥就是一口，是的，以牙还牙。这口气倒是出了，但结果就是，这个哥们被警察拘留了，原因是他违反了野生动物保护法。。。 希望英国能够专门立法，惩治一下这些凶猛的海鸥。目前看来，下次如果再遇到海鸥抢夺手中薯条，汉堡之类的时候，不应该生气，而应该感到幸运，还好人没受伤。。。","link":"/seagull/"},{"title":"英国的二手物品交易","text":"最近家中在集中清理闲置物品，主要是几个去向：捐献给慈善机构；在单位内部二手物品免费群转让，或者在各种二手物品交易群出售。今天主要来说说英国的二手物品交易。 在英国这里，二手物品非常抢手。可能是英国人比较实际吧，既然很多二手物品质量毫无问题，价格又便宜，干嘛要买新的呢？把钱省下来干什么不好？ 以孩子的衣服和玩具为例，很多玩具都非常新，甚至都没有玩过，但一旦成为二手，价格就要至少折上一半了。但对于买家来说，拿到的东西功能丝毫不差，只要买回来之后清洗干净，和新买的没有任何区别。 在英国这里有不同的方式进行二手市场交易。比如：最常用的一个网站gumtree，买家可以免费在网站上发布二手品信息，也可以通过交费来提高排名。我最近有些婴幼儿用品就在这个网站上卖的，速度非常快。 除了gumtree之外，还有很多二手物品交易的群。比如，在facebook上就有很多针对地区分类的群，加入后可以进行二手物品交易。同时由于和facebook messenger结合，买卖方之间的沟通十分便捷。 其实，很多地方的政府也非常支持二手物品的交易。在不少地方都有一种叫做Car Boots sale的活动。 在每个周六，政府会专门批准一个场所进行二手物品交易。卖方只需要缴纳车位费就可以，把车开进去之后，就可以就地摆摊了。买方可以自行活动，选额自己需要的东西。 最近在考虑，是不是要带两个孩子去Car Boots练摊，顺便把家中闲置的玩具处理一下？","link":"/second-hand-market/"},{"title":"英国第二次Lockdown+吐槽","text":"这个周末，英国首相Johnson宣布，英格兰将于下周四进行第二次lockdown，届时英格兰所有酒吧，餐厅将被迫关闭，取消家庭互访，非必要时需要宅在家中。但各中小学和大学仍正常开学。 对于这个政策，我和很多人一样，有着很多不理解的地方。 首先，是学校还照常开学。不知道那些做决策的人是怎么想的。难道病毒会因为学校而避而远之吧？在学校中，尤其是小学中，小朋友之间很难保持社交距离。在目前感染人数居高不下的情况下，真的替学校中的师生们担心。 对于这一点，支持和反对学校照开的人都大有人在。支持方主要觉得在经历了第一次lockdown之后，大家知道了边工作边带娃的诸多负面影响。因此都倾向于把孩子送回学校。反对方则认为这会大大增大在校师生的感染几率。 可能很多人在想，这主要是为了照顾那些位于关键工作岗位(Key Workers)人家中的孩子的。但这完全可以采取和第一次lockdown时候一样的政策，只为那些Key Worker家的孩子提供上学的机会，这样就会大大减少在校师生人数，同时也会减少被感染的机率。 同时还有一处比较模糊的地方。政策中提到了那些处于教育目的的工作仍可以继续。比如：各种私教，课外班。但我们目前获得的信息是，孩子们的小提琴课仍然继续，但芭蕾课将会停课。因此感觉这完全要看老师对于这个政策的理解了。 还有一点让我比较困惑的是，目前还没有听说哪座学校中允许孩子一直佩戴口罩。比如我家孩子所在的学校中，如果佩戴了口罩的话，到了教室中需要摘掉。这就让我彻底不理解了，为什么？？？ 对于lockdown政策，我还是基本赞同的，只是感觉政府在控制疫情和不影响经济的权衡中找到的这个平衡点似乎不是很理想，毕竟要让很多师生冒着被感染的风险去学校，哎。。。","link":"/second-lockdown/"},{"title":"使用Serverless Requirements在AWS无服务器架构中配置Python依赖库","text":"最近一直在尝试AWS Serverless（无服务器架构）的系列产品，比如：S3, Lambda, APIGateway等等。在使用Serverless这个框架通过Python编写Lambda的时候经常会遇到一个问题就是：在Python中要使用其他依赖库怎么办？本来Lambda就是AWS微服务架构中的最小单元了，那么如何导入这些依赖库呢？其中的一个方案就是使用Serverless Requirements这个插件来管理这些依赖库。下面以一个简单的例子进行说明。 当然，前提是已经安装了serverless，如未安装，请先行安装，整个安装过程非常简单。安装完毕后创建一个项目: serverless create --template aws-python3 --name dependency-test --path dependency-test cd dependency-test 进入”dependency-test”目录后可以看到共生成了两个文件：handler.py和serverless.yml。 先来看看handler.py这个文件，将注释删除后可以看到整个代码非常简单： import json def hello(event, context): body = { &quot;message&quot;: &quot;Go Serverless v1.0! Your function executed successfully!&quot;, &quot;input&quot;: event } response = { &quot;statusCode&quot;: 200, &quot;body&quot;: json.dumps(body) } return response 下面我们以numpy这个最为常见的依赖库为例来进行说明。将handler.py修改成如下这样： import json import numpy as np def hello(event, context): a = np.arange(9).reshape(3, 3) body = { &quot;array&quot;: str(a) } response = { &quot;statusCode&quot;: 200, &quot;body&quot;: json.dumps(body) } return response if __name__ == &quot;__main__&quot;: print(hello(&apos;&apos;, &apos;&apos;)) 其实在Lambda中，完全不用添加最后两行，这里只是为了在本地运行以做测试的。运行： python handler.py 可以看到如下结果： {&apos;statusCode&apos;: 200, &apos;body&apos;: &apos;{&quot;array&quot;: &quot;[[0 1 2]\\\\n [3 4 5]\\\\n [6 7 8]]&quot;}&apos;} 接下来需要将其部署到AWS，首先初始化当前目录，并安装依赖库： npm install --save serverless-python-requirements 这样就会生成package-lock.json以及node_modules目录。是不是有些奇怪？Python的代码下出现了Node.js的文件和库。其实这也没什么奇怪的。因为Serverless这个框架就是用Node.js实现的，其插件”serverless-python-requirements”也是用Node.js实现的，自然就需要node_modules了。 为了能让”serverless-python-requirements”正常工作，需要添加requirements.txt这个文件，其内容为： numpy==1.18.3 然后修改默认的serverless.yml，添加对serverless-python-requirements这个插件的引用： service: dependency-test provider: name: aws runtime: python3.8 functions: hello: handler: handler.hello events: - http: path: dependency_test method: get plugins: - serverless-python-requirements custom: pythonRequirements: dockerizePip: true 部署到AWS serverless deploy 可以看到已经成功部署： 测试一下：","link":"/serverless-requirements/"},{"title":"告别网购，重返超市购物","text":"自从疫情开始，就停止了去超市购物。为了安全起见，在超市订了半年的送货Pass，一直选择网购，由超市送货。几个月前由于大家都选择网购，因此为了订上一个送货时段，有时候还需要等到夜间12点，超市开始放出新时段的时候，刷网页或者APP才能抢到自己想要的时段。 但网购有一个弊端，超市负责网购的人只能尽可能的按照你的网购清单去选货。如果你想要的货找不到，只会尽量帮你找到类似的替代品。当然，这个“类似替代品”的定义就很模糊了，完全要靠负责网购的工作人员来把握。有时候超市提供的替代品真的想让人拒货。同时，在网购的时候，某些超市的蔬菜水果都会缺货。网购之后用不了几天就又觉得缺少食材了。 但最近疫情有所缓解，英国陆续出台了一系列解封的政策。尤其是自7月24日后，所有去超市的人都必须戴口罩。感觉这样风险就会降低很多。于是决定，还是自己去超市购物吧。 现在超市门口都会有必备的消毒液，消毒纸巾等，有的超市还有专人负责保持所有购物者都只能单向行进，同时会限制人数，从而达到保持社交距离的要求。在最后结账的时候，每个款台之间都会分隔开，和收银员之间也会有透明隔断。 通过以上种种措施，感觉彼此感染的风险还是很小的。毕竟，现在大家都开始注意防护了。 话说，去超市购物比网购的体验好太多了。首先是货品齐全。平时在网购时持续断货的产品在超市中都有。如果没有自己想要的东西，完全可以根据自己喜好选择自己喜欢的替代产品了。在网购时根本看不到的生鲜产品在超市中都可以自由选购了。 整体感觉大家都在缓慢的恢复正常的生活。今天下午孩子学校的家长们约好了去周边的一个公园中聚会。大家都非常喜欢这种疫后重聚的感觉。整个一个下午似乎都还不够，又纷纷约起下次一同出游了。 非常期待2020年的第一次出游，第一次Party，和第一次度假。","link":"/shopping/"},{"title":"改良版鱼香肉丝","text":"最近朋友圈很多人都喜欢上了王刚的家常菜食谱。我们照着做了两个菜，感觉效果还真的不错。整体思路是按照王刚的做法来的，但稍微做了些调整，一是因为有的食材家中没有，还有就是完全按照菜谱做的效果并不是很好，最后出锅前又添了些配料。下面记录一下我们自己的改良版鱼香肉丝。 首先上一个成品图： 切好肉丝，用一个蛋清，盐，胡椒粉，生抽，料酒腌制肉丝： 接下来准备姜末，蒜末，还有泡椒碎。我们只用了4个小泡椒，就已经很辣了。由于考虑到孩子要吃，因此把泡椒碎和姜蒜分开放： 切好配菜，包括青椒丝，胡萝卜丝，和木耳 用生抽，醋，糖，盐，料酒，水淀粉配酱汁。 接下来就可以开始炒了。 首先将腌制好的肉丝在热油中炒熟，盛出备用。 加下来将姜末，蒜末，和剁椒碎在油中炒香。在这里我们又额外的添加了一勺郫县豆瓣酱，事实证明最终的效果还是很好的。 将肉丝和配菜放入锅中翻炒。稍后将配好的酱汁放入锅中继续炒熟，撒上葱花即可。","link":"/shredded-pork/"},{"title":"智能家居时代？","text":"最近由于打算更换家中的热水器，听朋友说他家的热水器是用Google的Nest来控制的。于是考虑，现在真的有必要把家中的电器都连上网，变得智能吗？ 图源：Pixabay 首先说说今年儿子生日给他买的Google Home Hub。这应该是Google智能产品系列中的入门级产品吧。最初开始使用时，确实感觉非常便利。一旦有什么问题，可以立刻问Google，绝大多数情况下都能立刻得到准确的答案。但儿子似乎对它有些上瘾。每天只要有时间就会一直在Google Home Hub旁边，同时也由早期问各种问题，变成了在Youtube上看各种视频。我们不得不对他的使用时间做出限制。 目前最为吸引我的是通过语音对灯光的控制。如果可以避免去开关处就能控制灯光，会方便很多。同时，如果外出度假时，还可以远程控制家中的灯光，达到一种主人在家的感觉。这样会更加安全。如果要想实现这样的功能，可以购买智能开关，也可以购买智能灯泡。只不过似乎旧的电路不能支持智能开关，需要重新走线才可以。相对而言，购买智能灯泡就会简单的多。 接下来是对家中Boiler的控制。我比较看重的是其智能温度控制和远程控制功能。如果在度假的时候，自动把家中的暖气关掉，应该会省不少电/气吧。如果在快要度假回来的时候自动打开暖气，也就不会在度假结束后家中还是冷冰冰的了。要实现这样的功能，可以选择Google Nest，同时在热水器上要配有智能开关才行。 前一段在朋友家冰箱上看到了一个比较”智能“的功能。冰箱可以根据目前的”库存量“来自动提示主人家中是否缺某种食材。这种功能貌似很有用。但前提是每次购物回来后需要把买入的食材名称，到期日输入冰箱配套的电脑中才可以。看样子这并没有那么智能啊。 因此，整体感觉现在智能家居似乎还没有到普及的阶段。看样子我只需要买几个智能开关就应该足够了。","link":"/smart-home/"},{"title":"细思极恐 - 其实我们都是斯金纳箱中的鸽子","text":"不知道你有没有这样的经历，有时候手机不在旁边感觉似乎缺了点什么。而下意识的拿起手机似乎又不知道为什么要把它拿起来，也不知道要拿它做什么。最近看到一个观点似乎能够完美的解释这种行为。说白了，我们掉到了那些专业的产品设计师所设计好的坑里了。我们平常的很多行为，比如：对手机的使用，对某款游戏的上瘾，其实都是处于别人的掌控之中。我们更像是行为心理学中的经典实验，斯金纳箱中的鸽子。 斯金纳是行为心理学的大师，他把巴甫洛夫和桑代克关于条件反射的理论更上一层楼，提出了一个新的观点：操作性条件反射。说白了，就是动物（包括人）的很多条件反射是完全可以操作的。比如：人的恐怖情绪是可以被操控的。他曾经做过一个著名的鸽子实验。在实验中，他把鸽子关在笼子中，每过15秒就用喂食器自动给鸽子喂食，这样过了一段时间后，他发现了一个奇怪的现象：笼中的鸽子在被喂食前做着各种这样的奇怪动作，有的鸽子左右摇头，有的鸽子走来走去，有的鸽子翩翩起舞，似乎鸽子们通过这种方式来祈求食物的到来。即使后来他彻底停止了对鸽子的喂食，但鸽子仍然在做着各种动作，仍然希望食物的来临。 斯金纳还曾经做过一个很不人道（后来被禁止）的实验，证明了可以控制人的恐惧感。在实验中他们把各种毛绒玩具放在一个小婴儿面前，婴儿对这些玩具展示出强烈的兴趣。实验者带着圣诞老人的面具来到婴儿面前，婴儿也非常喜欢。之后他们做了一件事，就是在婴儿和玩具接触的时候，制造出一种让人不适的噪音来，婴儿听到噪音后吓得大哭。之后只要婴儿一接触这些玩具，他们就制造出噪音。久而久之，婴儿就把这些玩具和噪音联系到了一起。之后只要看到毛绒玩具就很恐惧。 其实在我们的生活中，有很多这样的例子。很多产品的设计师也在把这种观点应用到了各种产品中。比如：我家孩子经常使用一个APP，叫做Receipt Hog，每次购物后我会把小票给他们，他们用这个APP把小票扫描进去，并做一个简单的问卷，就会得到一定的积分，达到一定分值后可以兑换现金，同时还会随机的给他们抽奖的机会。迄今为止他们已经领到10英镑了。但现在我所看到的是，孩子们对待小票的行为已经完全被这个APP所控制。每次购物回来后，他们肯定不会忘记和我要小票。 还有一个有趣的例子就是我经常去一家超市购物，感觉这家超市在深入的研究客户的行为。如果我有一段时间不去他家购物，他家就会给我寄送优惠券来，比如：满40英镑返8镑。如果我使用了这些优惠券，他们会停止给我寄，再过一段时间会尝试给我寄力度稍微小一些的优惠券，如果我没有用那些优惠券，他们就会再寄来我曾经用过的优惠券，于是我又乖乖的去他家消费了。感觉我的购物行为完全被他家的优惠券牵着鼻子走。。。 我想类似的例子数不胜数。等到人工智能得到进一步发展后，人类是否终将被某些AI所完全控制，甚至人类思维将会和AI彻底融合？","link":"/skinner-box/"},{"title":"Snowwhite白雪公主圣诞音乐剧","text":"虽然圣诞已经过去了，但一家人还是去看了一场预订好的圣诞音乐剧：Snowwhite白雪公主。这次看的和上次看的睡美人是不同班底的剧目。这次的演出更加精彩，已经计划好2020年的圣诞剧还看他家的。 白雪公主和七个小矮人的故事大家都非常熟悉了。但圣诞剧最大的特点就是在忠于原著的基础上加上了很多插科打诨的成分，让整个表演更加有趣，给你一个不断捧腹大笑的两小时，让你彻底轻松一下！ 首先，整个表演过程中和观众的互动非常多，有时七个小矮人拿着水枪不断“走火”，频频射到观众席上，看到个别经验丰富的观众自带雨伞，每到这个时候，非常淡定的把伞打起来。有时又会向观众席中撒各种糖果，给观众们一个小小的惊喜。当然，语言上的互动就更多了，He’s behind you, Yes it is, Not it isn’t等等等，让众多观众参与其中，乐在其中。 其次，将很多时事有机的插入到表演中，比如：搭上了目前英国最热的时事：英国脱欧，一个主要配角的名字叫做Mr Brexit；而英国的强生首相，美国总统川普更是被演员们不时挂在嘴边。 还有一点，就是整个表演强调家庭氛围，不仅最后会邀请群众小演员上场，而且还会当场宣读来自亲友们的祝福语。 感觉越来越喜欢英国的这种传统表演了。","link":"/snowwhite/"},{"title":"和近年大热运动Soap Hockey的偶遇","text":"今天偶然看见了一群学生在草地上玩Soap Hockey这个近两年大热的运动，也号称最适合夏季的游戏。看了一下，这项运动的facebook页面竟然有1800万的浏览量（facebook页面）。他们应该是大学俱乐部的在吸引新生吧。早先听说过这项运动，今天才近距离围观了一下。 这项运动最早是在2011年的时候起源于瑞典，特别适合朋友之间聚会时候玩。说白了就是在草地上铺上一大块塑料布，然后在塑料布上倒满了肥皂水。这样大家在上面玩曲棍球的时候就会滑倒。我想这项运动的最大趣味性就是大家能够注意力高度集中，精神上能够得到彻底放松。即使是滑倒了，大家哈哈一笑，爬起来可以继续。我在围观的过程中，场地中的球员和围观群众可以说是笑声不断。 下次和朋友聚会的时候我也可以试试。。。","link":"/soap-hockey/"},{"title":"带孩子做科学实验系列之： 用洗涤灵驱动的小船 (Soap powered boat)","text":"今天给大家介绍一个非常简单的实验：用洗涤灵驱动的小船！ 准备一块泡沫塑料，最好薄一些的。 一个水盆中盛满清水 洗涤灵 牙签 开始实验首先，用裁纸刀把泡沫塑料裁成小船形状， 小船长度在4厘米左右。 接下来用牙签蘸着洗涤灵放在小船尾部那个三角形的顶点处。 你就会看到小船会在水中航行！这一滴洗涤灵应该能够维持几秒钟。如果要小船接着走的话，需要把盆中的水倒掉，并清洗干净后再倒入新的清水。 这个实验说明了像洗涤灵这样的活性剂会破坏水分子之间的张力，打破了小船周边的受力平衡，从而产生一个推力促使小船前行。","link":"/soap-powered-boat/"},{"title":"一次将Solr数据备份和恢复的曲折经历","text":"最近准备开始一个新的项目。其实也不是全新的，其现有代码已经运行了5年，现在需要添加很多新的功能。在这个项目中使用了Solr，因此首先需要把其数据备份并恢复到自己的VM上来以坐测试和开发。于是一个曲折的故事就开始了。。。 Solr 7.5其实我自己的VM上已经有了Solr，其版本是7.5，而服务器上的版本是7.6，想想这个两个版本差距不大，于是想直接把数据复制过来不就可以了吗？这个过程非常简单，就是把服务器上/var/solr/data目录下这个项目对应的子文件夹整个复制到本机的同样目录，并重新启动Solr就可以了。但当重新启动Solr后发现了如下错误： SolrCore Initialization Failures xxxx: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Error opening new searcher Please check your logs for more information 检查日志文件，发现如下错误： Suppressed: org.apache.lucene.index.CorruptIndexException: checksum passed (4454119c). possibly transient resource issue, ...... 提示索引文件出错，首先想到的是在打包压缩和复制的过程中出现了错误，于是又走了一遍，还是同样的错误。这时觉得应该就是版本之间的兼容性问题了。确实也是，新版本支持旧版本的索引文件很好理解。但反过来，把新版本的索引文件复制到旧版本上去，不被支持就很好理解了。 最新的Solr 8.5.1那好吧，索性就使用最新的版本8.5.1吧，这样所有的问题不就都解决了吗？其安装过程也非常简单，下载tgz文件，解压，再运行install_solr_service.sh就可以了。 但安装完毕后却出现了新的问题： xxxx: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not load conf for core xxxx: Can&apos;t load schema /var/solr/data/xxxx/conf/schema.xml: Plugin init failure for [schema.xml] fieldType &quot;textSuggest&quot;: Plugin init failure for [schema.xml] analyzer/filter: Error loading class &apos;solr.StandardFilterFactory&apos; Please check your logs for more information 原来是StandardFilterFactory在Solr 8中不能正常工作。找到了项目中的schema.xml，把相应的行注释掉，重新启动Solr，貌似问题解决了。但感觉并不是很满意，毕竟需要对配置做修改才能正常工作，而且不知道是否会对其他部分产生负面影响。 Solr 7.7.3最终决定尝试一下Solr 7.x中的最终版本7.7.3。整个安装步骤非常简单，下载并解压后运行： ./install_solr_service.sh ../../solr-7.7.3.tgz -f 但在启动过程中会发现如下错误： 这个问题倒是好解决，编辑文件/etc/security/limits.conf，添加： solr hard nofile 65535 solr soft nofile 65535 solr hard nproc 65535 solr soft nproc 65535 重新启动Solr sudo systemctl restart solr 终于能够正常工作了，没有任何错误提示。 结论在Solr数据备份/恢复的时候一定要注意各个版本之间的差异。虽然不断保持软件的最新版本是一个好习惯，但在生产环境中，还是要慎之又慎，尽量选用兼容性最好前提下的最新版本。","link":"/solr-data-restore/"},{"title":"国外经典儿童图书推荐之： Some dogs do (永远不要扼杀孩子们的想象力)","text":"今天给大家推荐这本经典的儿童读物叫做：Some dogs do。这本书的最大特点就是故事中大胆的想象力，一只小狗竟然飞了起来。估计很多人看到这个情节的时候都会觉得很不可思议。因为这太不符合常理了。如果你自己的孩子提出各种奇思怪想的时候，你是否会断然否定呢？这本书最后的反问句可能会引起很多家长的深思吧。 在故事中有一只叫做Sid的小狗有一天突然飞了起来，但当它把它飞到学校的事告诉了自己的同学后，没有人相信它。甚至学校的老师也不相信它。尽管不相信，但学校的老师还是做出了比较公正的决定，让Sid演示给大家。很不幸的是，Sid在学校说什么也飞不起来了。这件事让Sid整天都很郁闷。直到放学回家，它嘴中还在一直嘟囔：Dogs don’t fly。Sid的爸爸看到后，让它闭上了眼睛说告诉它一个秘密，结果等Sid再睁开眼睛的时候，它的爸爸飞起来了。最后书中并没有解释为什么Sid的爸爸会飞起来，只是用一个反问句来结束了整个故事，这个时候如果孩子问到这个问题，你会如何解释呢？","link":"/some-dogs-do/"},{"title":"周末影院 - Soul","text":"这个周末看了一部朋友强烈推荐的影片：《Soul》，中文翻译成了《心灵奇旅》。这果然是一部非常治愈的影片，这两天刷爆了朋友圈，很多朋友都看了这部影片并给出好评。 如果说的高大上一点，这部影片探讨了“我为什么活着”这个哲学问题。假如你现在死去，是否会有遗憾？ 影片从一个黑人音乐老师Joe开始。他是一个非常普通的人，在一所中学教音乐，每天面对一群并不喜欢音乐的孩子，做着无聊的工作，过着平淡的生活。和很多人一样，Joe也有自己的梦想：在一个爵士乐队中演奏钢琴。很快机会来了，Joe被一个乐队选中，可是在他出门的时候，却不小心掉在一个下水道口中，摔死了。。。 自此，他的灵魂踏上了一个奇异之旅，来到了一个众多灵魂所在的生前世界，在那里，众多灵魂在转世之前将要形成自己独特的个性和兴趣爱好。这就让人不禁在想：是什么让我们成为现在的自己？ 我们为什么与众不同？ 我们的性格、爱好、习惯又是怎么形成的？在这里Joe遇到了一个老油条22号灵魂。22可以说是一个负能量的集合体，他在这个生前世界中已经游荡了千年，但并不想转世为人。 Joe极力想像22证明现实世界的魅力，他和22的现实之旅也就开始了，这是一个改变22的旅程，也是改变Joe的旅程。在这个旅程之中，Joe慢慢明白了人生的意义。 在电影中，让我们面对了一个又一个的问题：如果你早就知道，人生本不完美，就算努力也未必会获得成功，那么你还愿意活这一次吗？如果你像Joe一样，遭遇不幸生命戛然而止，你会觉得遗憾吗？ 生命是短暂的，我们可能会遭遇很多的不幸，这就正如鲜花终将凋谢，亲人终将离我们而去。。。但正因为如此，我们才要活在当下，珍惜所有。如果爱是永恒的，生命是永恒的，可能我们就不会珍惜了。。。 这部电影的主角太普通了，以至于很多人都会在他身上找到共同点，在生命中的某个时刻，会和电影中的某个片段重合，那么，我们该要怎么做，才能不留下遗憾呢？","link":"/soul-review/"},{"title":"狮子王音乐剧","text":"今天在伦敦西区的 Lyceum Theatre 看了狮子王这部音乐剧。狮子王音乐剧是在迪士尼同名动画片基础上改编而成的。剧中人物以动物装束和人偶的方式表达。 迄今为止已经看过了《狮子王》的很多版本，但这部音乐剧的感觉最好。整个表演无数次高潮。","link":"/srkq1ki6/"},{"title":"我的集体活动经历：搭建Sand Castle","text":"最近几年每年单位都会组织活动，给大家一个放松的机会。我们team选择去了海边小镇Scarborough去搭建一个Sand Castle。这个本来是带孩子到海边玩时陪孩子玩的，没有想到这次自己成了主角。。。 毕竟是几个成年人，很快就把这个沙堡搭好了. 搭完了我们又在海边闲逛，顺便玩了一些游戏，这是我收获的小飞机","link":"/staff-festival-sand-castle/"},{"title":"锁仓Edgeware","text":"去年的时候跟风锁仓了一个ETH，希望额能够得到Edgeware(EDG)空投。至今一年期限已满。按照操作步骤转了0个ETH到相应的合约地址，果真解锁了锁仓的ETH，并得到了价值约为90美金的EDG。 那么，拿着这些EDG做什么？下面分享一下通过继续锁仓的方式赚取更多EDG的方法。 提醒：你的数字资产你自己负责，以下步骤不构成投资建议。 首先，添加polkadot Chrome扩展： https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd/related 创建账号： 登录： https://polkadot.js.org/apps/#/explorer 确保选择了Edgeware主网： 单击账户名会自动复制地址： 然后从你的钱包转EDG过来。 为了安全期间，需要创建一个’Controller’账号，其实这就是个普通账户，只不过其名字叫做”Controller”账号。这里的普通账号就类似于冷钱包，’Controller’账号就类似于热钱包。 从普通账号向’Controller’账号转5-10 EDG，这主要是用来交Gas的。 至此就可以进行锁仓操作了： 锁仓成功：","link":"/staking-edg/"},{"title":"偷梁换柱","text":"这周到了扩建工程最关键的一周：把两座承重墙打掉，替换成钢梁。这样，新的厨房区，餐厅区，还有客厅区，以及学习区就彻底打通了。其实，“偷梁换柱”这个成语似乎并不能恰当的表达这个操作所带来的效果，因为至少对我来说，换完之后的效果是更好，而不是更坏了。但当初语文似乎学的并不是很好，也找不到更合适的标题了，就它了。 图源：Pixabay 其实在房屋设计初期，曾经犹豫过是否要打掉两座承重墙。毕竟心理感觉还是承重墙更为结实。但咨询过周边的朋友后，大家一边倒的赞成要打掉承重墙，否则我们肯定会后悔。在最后咨询了一位工程师朋友后，知道这种钢梁是绝对靠谱的，最终决定，就是它了！ 这种操作可能在国内并不是很常见。至少我当年在国内的时候就没太听说过。但英国这里以老房居多，房屋扩建时打掉承重墙，以钢梁来支撑，就变得非常普遍了。 我家的建筑工人非常有经验。在周五就把各种准备工作都做好了。首先是把承重墙的两侧上方都搭上支架。 这样做的目的很明显，在拆除承重墙的时候，墙体不会崩塌。在和builder聊天时知道，他从来都是事先把准备工作做足，整个拆除墙体和搭建钢梁的过程都是在一天内完成的，这样就可以最大程度的保证对整个房屋造成的损伤最小。 由于总共需要搭建两座钢梁，周一先做的是最主要的钢梁。 搭建的时候使用了一架小型起重机把钢梁放置到它的位置上去。同时在等待24小时后，待水泥彻底凝固后才撤掉起重机和支架。 接下来的第二天，架设了第二根钢梁，至此，厨房和客厅就彻底打通了。","link":"/steel-beam/"},{"title":"读Steem白皮书有感 - 说说Steem中的带宽","text":"最近参与了Steem白皮书的翻译，也让自己有机会仔细的阅读和思考了一下，感悟还是很多的。今天就先聊一聊Steem中的带宽。 其实对于带宽的认识最早源于在加入Steem初期，由于SP太小，时不时会出现带宽不足无法发帖的问题。 首先来说说为什么需要限制带宽？这个原因其实说起来还是很复杂的。绝大多数的区块链网络中进行转账等操作都是需要交手续费的，其实其设计初衷的目的之一是防止黑客的攻击，设想如果没有交易费，则网络很容易受到垃圾信息的攻击。即使只对网络中的交易收取很少的手续费，也足以让对区块链的攻击成本很高。 但收费也带来了很多问题，比如：如果用户在网络中的操作都需要缴纳一定的费用时，则会让用户感到很烦，最终的结果就是影响用户体验，进而导致无法吸引更多用户。毕竟，人们还是期待很多东西都是免费的。再有一个问题就是，假如有土豪想要攻击比特币网络，只要拿出足够的资金，完全可以让比特币网络瘫痪足够长的时间，无法进行正常交易。当然，区块链网络也有应对措施，比如提高交易费，扩容等。不过这又会导致其他的问题。 在Steem中，完全取消了交易费，但为了避免遭受攻击，采用了带宽限制的方式。用户所能使用的带宽和其拥有的SP成正比，而且整个Steem网络的带宽是动态调整的。也就是说，在拥堵时段，每个用户的可用带宽就会相对减少。而在空闲时段，用户可用带宽就会增加。一旦黑客对Steem进行攻击，由于带宽的限制，其操作也会受限。因此攻击可持续的时间会非常短。使用同样的资源，比如资金，对比特币网络的攻击可能导致网络拥堵十几个小时，但对Steem的攻击只能持续30秒。 就先说到这里，欢迎大家指正。","link":"/steem-steem/"},{"title":"为Steem投票！-- Vote for Steem!","text":"看到在Steemit上关注的朋友们在为Steem投票，既然是举手之劳，肯定要支持一下！ 如果大家想参与的话，可以参考 @justyy 的翻译： https://steemit.com/cn/@justyy/steem-steem-netcoins-oracle-d 或者 @oracle-d 的原文: https://steemit.com/steem/@oracle-d/vote-for-steem-to-get-a-free-listing-on-netcoins-and-win-oracle-d-upvotes-contest-8dbe4475bb65cest Steem on!","link":"/steem-vote-for-steem/"},{"title":"读Steem白皮书有感 - 其实你我都是那桶中的螃蟹","text":"最近刚刚完成了Steem白皮书的翻译，也让自己有机会仔细的阅读和思考了一下，感悟还是很多的。给我触动很大的一点就是白皮书中对人性的剖析，可谓针针见血，让人赞叹的同时感到一种无力感。。。 以下文字大意取自白皮书 你可曾胸怀远大，志存高远，期待不断提升自己，超越自我，实现自己的梦想? 但你周边的人和环境会产生一种巨大的阻力，试图把你拖回去以分享共同的命运。这就像螃蟹桶的故事一样： 有很多只装在桶中的螃蟹，每一只都想爬出來，但是很少会有成功的，为什么？ 因为一旦某只螃蟹爬到较高的地方，就会被其他的螃蟹拉下去！ 其实Steem的目标就是创建一个“螃蟹桶”，期待更多的“螃蟹”进入到桶中。可能其中有个别的螃蟹会不老实，想从桶中逃脱，作为Steem网络其实很容易对这些螃蟹进行限制，这就好比给桶盖上了盖子，虽然能够防止个别螃蟹逃走，但也会阻碍让新螃蟹进入桶中。 其实，只要使得墙壁变滑，并给予螃蟹足够的权力来防止其他螃蟹逃脱就足够了。 举一个最简单的例子，在Steem中大家都知道自我点赞的回报率很高。也有很多人讨论过这个问题。甚至有人建议Steem应该取消自我点赞的功能。但Steem并没有这样做，而是借鉴了螃蟹桶的故事，让其他的螃蟹来踩那些过度自我点赞的人。这不是玩笑，如果你有至少几百个SP，每天发很多帖子，只给自己点赞，坚持几个月，相信就会有别的螃蟹来踩你。。。","link":"/steem/"},{"title":"试用SteemCoinpan","text":"看到好多中文区的朋友都在使用SteemCoinpan，也来尝试以下。 首先是登陆，只要用posting key就可以登陆，建议不要使用更高级别的key，因为毕竟在这里只需要发帖权限就可以了。下面是登陆后的界面： 可以看到和Steemit界面非常像，其实应该是从Steemit官方fork过来的吧。。。 发帖界面也是非常的眼熟： 需要注意的是，一定要加上sct标签，这样会获得sct机器人点赞。同时推荐加上sct-cn标签。 sct这个标签适用于区块链方面的文章。","link":"/steemcoinpan/"},{"title":"Steemit&#x2F;Condenser cannot see voters&#39; count for some posts","text":"Project informationProject name: steemit/condenserRepository: https://github.com/steemit/condenser Expected behaviorThe count of voters should be shown for any post. Actual behaviorSome posts with payouts show ‘0’ votes both in user’s homepage and in each post: The problem happens to other user as well: How to reproduceJust visit these posts and you will see the problem: https://steemit.com/steemhunt/@aafeng/raidrive-helper-to-make-cloud-storage-windows-drivehttps://steemit.com/cn/@aafeng/2px44khttps://steemit.com/cn/@tumutanzi/r6eqx Recording Of The BugScreenshots as shown above. Github accounthttps://github.com/aa-feng Issue on GH: https://github.com/steemit/condenser/issues/3197","link":"/steemit-condenser-cannot-see-voters-count-for-some-posts/"},{"title":"在Steemit中最火的tags是什么？","text":"Steemit中提升自己文章曝光率的最简单有效的方法就是给自己的文章设定一个好的tag。 其实在Steemit中很容易查看各种文章的统计信息。 首先访问这个页面： https://steemit.com/tags 然后选择按照Payouts排序就也看到那个tag对应的文章效果最好： 由此可见，前三名是life, steemit和steem。没有想到的是introduceyourself也排在了前10。而我们的cn社区排名24，大家还需要努力啊。","link":"/steemit-tags/"},{"title":"Stockeld Park灯展","text":"周末约了几家朋友一起去Stockeld Park玩。这里的主要项目有几个：首先是室内滑冰场，其次是这里的迷宫。最后也是最精彩的是在森林中的灯展。 可能是因为圣诞假期马上就要结束了的缘故，来这里玩的人并不是很多。不像往年，溜冰场上人满为患，不能尽兴。而且这里还很体贴的为小朋友们准备了小雪人和小企鹅，可以用手扶着避免摔跤。 感觉最好玩的还是森林中的灯盏。尤其是当天黑的时候，整座森林就像一个梦幻的世界。里面有着各种动物造型的灯：龙，鹿，企鹅，豹子，狼，等等，同时还有很多童话故事中的角色，比如：美人鱼和独角兽。","link":"/stockeld-park/"},{"title":"如何将Streamlit应用免费部署到Heroku","text":"前面介绍了Streamlit这数据分析和可视化的利器。 下面说说如何将你的Streamlit应用程序部署到免费的Heroku账号，这样任何人都可以访问你的应用了。 还是以前面介绍的简单程序为例： 首先创建一个文件夹比如叫做ml，然后进入该文件夹，创建程序文件stats.py，其源码为： import streamlit as st import pandas as pd st.write(&quot;&quot;&quot; ## Download statistics ### Line chart &quot;&quot;&quot;) # select DATE_FORMAT(date, &apos;%Y-%m-%d&apos;) as d, count(id) as count from posts group by d; dictionary = {&apos;2020-06-25&apos;:34, &apos;2020-06-26&apos;: 39, &apos;2020-06-27&apos;: 40, &apos;2020-06-28&apos;: 40, &apos;2020-06-29&apos;: 42, &apos;2020-06-30&apos;: 36} series = pd.Series(dictionary) st.line_chart(series) st.write(&quot;&quot;&quot; ### Bar chart &quot;&quot;&quot;) st.bar_chart(series) 在当前目录下运行如下命令来安装pipreqs包，并创建依赖库的文件: pip install pipreqs pipreqs . 可以看到，在当前目录下生成了requirements.txt，其内容为： streamlit==0.58.0 pandas==1.0.3 创建setup.sh: mkdir -p ~/.streamlit/ echo &quot;\\ [general]\\n\\ email = \\&quot;YOUR_EMAIL_ADDRESS\\&quot;\\n\\ &quot; &gt; ~/.streamlit/credentials.toml echo &quot;\\ [server]\\n\\ headless = true\\n\\ enableCORS=false\\n\\ port = $PORT\\n\\ &quot; &gt; ~/.streamlit/config.toml 创建Procfile： web: sh setup.sh &amp;&amp; streamlit run stats.py 创建本地git库 git init git add --all git commit -m &quot;init&quot; 配置并部署到Heroku: heroku login heroku create git push heroku master heroku ps:scale web=1 按照命令行输出的URL就可以访问你的应用了。 查看Heroku日志： heroku logs --tail 要想使用自己域名，需要先通过Heroku验证。然后运行： heroku domains:add hivecnstats.aafeng.uk","link":"/streamlit-to-heroku/"},{"title":"试用Streamlit进行数据可视化","text":"早就听说Streamlit是数据分析和机器学习的利器，但一直没有机会尝试。最近花了些时间试用了一下，还真的非常好用！最主要的是其设计思路非常独特：开发者只需要关注于数据及服务器端编码就可以了，那些复杂的客户端交互，响应式设计等等全部由Streamlit这个框架来搞定！这让我想起了过去曾经用过的一个框架：GWT (Google Web Toolkit)，其设计思路可以说和Streamlit是完全一样啊！不同之处是GWT中没有对数据分析和机器学习的支持。 下面通过一个简单的程序来演示Streamlit是如何工作的。 首先需要安装streamlit及下面需要的pandas: pip install streamlit pip install pandas 接下来写一个对下载数据可视化的程序： import streamlit as st import pandas as pd st.write(&quot;&quot;&quot; ## Download statistics ### Line chart &quot;&quot;&quot;) # select DATE_FORMAT(date, &apos;%Y-%m-%d&apos;) as d, count(id) as count from posts group by d; dictionary = {&apos;2020-06-25&apos;:34, &apos;2020-06-26&apos;: 39, &apos;2020-06-27&apos;: 40, &apos;2020-06-28&apos;: 40, &apos;2020-06-29&apos;: 42, &apos;2020-06-30&apos;: 36} series = pd.Series(dictionary) st.line_chart(series) st.write(&quot;&quot;&quot; ### Bar chart &quot;&quot;&quot;) st.bar_chart(series) 在上面程序中，演示了Streamlit的几个特点： 对Markdown的支持：在st.write中，可以直接使用markdown的语法。客户端统计图形的生成: 可以看到，这里只需要调用line_chart和bar_chart方法，而无需担心如何将数据传送到客户端，客户端又是如何渲染这些统计图的。 其运行后的界面如下图所示： 可以看到，Streamlit还帮我们生成了保存为PNG, SVG等功能。","link":"/streamlit/"},{"title":"社区的Summer Fair","text":"儿子学校和社区共同举行Summer Fair, 整个活动全部都是由学校和社区的志愿者组织。有各种活动，比如在英国很常见的砸椰子游戏，抽奖游戏，钓鱼游戏，Bouncing Castle，Face painting等等，当然，各种夏日美食也不能少，烧烤，热狗，冰激凌，各种英式点心等。 还有一大亮点就是受最近世界杯的影响。英国人似乎都高度兴奋，今天正逢英国对阵瑞典的1/4决赛（现在已经知道结果，英格兰挺进四强，将对阵克罗地亚），所有酒吧都是人满为患! Summer fair为了方便大家娱乐看球两不误，还架起了大屏幕电视。","link":"/summer-fair/"},{"title":"Steemit与Hive新用户注册体验比较","text":"自从Hive从Steem硬分叉以来，感觉Hive团队还是做了很多实事，这边的变化还是很大的。今天把Steemit及Hive.blog的新用户注册方式做一个对比。 Hive新用户注册我们先来看看Hive的新用户注册页面： 可以看到，免费的注册方式就有三种：Hive.blue, Esteem, 以及HiveInvite三种方式。 首先试用了一下通过Esteem来注册： 只需要输入用户名，邮件，推荐者(可选)，就可以注册一个新账户了。之后Esteem会发送一封验证邮件到你的邮箱中。点击邮箱中的链接确认后用户就被创建了。整个过程只需要两分钟时间，赞！ 接下来试用了一下Hive.blue。注册界面有些复杂。首先需要填写基本的信息： 接下来需要填写一个社交网络或网址，需要包含“HIVE ACCOUNT APPLICANT”。感觉这个要求有点二，反正我是不会往自己facebook/tweeter上发这种信息的。。。 接下来还要求： 要用这个账号来做什么？这不是废话吗？？？你的第一个帖子？不多于5000字？！这绝对要把用户吓走了。整体评价：差。 最后看了看Hiveinvite： 这种方式需要验证你的邮箱，或者/和社交账号。其亮点是创建账号后会给新的账号代理5HP-15HP。这就解决了新注册用户无法发帖的问题。但其缺点就是可以申请的账号数量非常有限。整体而言推荐新用户使用但不保证能够成功。 Steemit新用户注册 Steemit的注册方式似乎没有什么变化，免费用户需要1-2天的时间，整个过程中需要验证邮箱和电话。 结论个人感觉在免费创建账号上来说，在Hive上使用Esteem注册新用户的体验最好，使用Hiveinvite注册新用户也有其亮点。在Steemit长的用户注册过程似乎没有什么改进。","link":"/steemit-hive-account-creation/"},{"title":"Summer House","text":"随着单位进一步明确了，今后大多数员工将会永久性转为在家办公。就不得不考虑一下家中的办公环境了。之前想的是临时性在家办公，因此就临时在家中找了一个办公桌将就了一下。但如果转为永久性在家办公，就不得不考虑一个专门的办公室了。 因此首先想到的就是在花园中建一个Summer House。这种Summer House一般并不是很大，不超过10平米。通常是放置在花园的一角。因此非常轻便。 其实这种Summer House在英国还是很普遍的。尤其是在工作强度非常大的伦敦地区，很多人家的花园中都配有Summer House。这样在家办公的时候可以避免被打扰。当然，也有人把这种Summer House当成了储物空间。 通常这种Summer House都是纯木制的，因此其安装过程也较为简单。只是用各种螺丝钉把木板钉到一起。因此安装费一般都包含在其报价中。 这些小木屋随着其面积的不同，以及其样式和材料的不同，报价可能相差很大，可以从几百英镑到上万英镑不等。很多Summer House还会做一个小阳台，感觉在春秋十分的时候完全可以住在里面。 不过有一点是需要自己事先准备好的：那就是需要提前找电工把线布好，同时在搭建Summer House的地方需要事先把地处理好了，通常是铺一些石板。 现在非常期待早日把这个Summer House搭建好，可以正式搬进去办公。","link":"/summer-house/"},{"title":"Sutton Bank国家公园徒步","text":"这个周末的天气出奇的好，于是和朋友家约好一起去Sutton Bank国家公园徒步。这里可以说是徒步者，自行车爱好者，还有滑翔机爱好者的天堂。我们到的并不是很晚，但停车场几乎已经没有位置了。 繁忙的停车场： 距离入口处没有多远就是一个很有特色的游乐场，就地取材，用石头，树木搭建了很多适合孩子玩的小房子和树屋。 附近还有一个Bug Hotel，只是不知道里面都住了什么样的小虫子？ 我们选择的徒步路线大约三英里左右。去程基本上都是在山上，登高之后可以俯瞰远处的美景： 中途经过这里的滑翔机俱乐部。这家俱乐部很受欢迎，几乎过10来分钟就有一架新飞机起飞。滑翔机的起飞方式非常有意思。由一架带引擎的飞机用线牵着滑翔机飞上天，之后由驾驶员自己驾驶滑行并降落。处于好奇，查看了一下价格，并不贵，90英镑一次，多买的话还有折扣： 之后到了这里最著名的景点：White Horse。这匹白马是由维多利亚时代的一名叫做Thomas Taylor出资，在1857年制作的。其创作初衷是因为Thomas在英格兰南部看到过类似的作品，因此想在自己的家乡也修建一座。不过由于离得太近了，这匹白马的马头没法照到。 经过白马之后，就开始回程了。和来时在太阳下暴晒不同，回程的大部分路程都是在树林中行进的，因此非常凉爽惬意。孩子们走走停停，在各种奇形怪状的树上客串小猴子，爬上爬下。 这次玩的感觉非常尽兴，下次再来的话可能会选择一个更凉爽的天气，那就更完美了。","link":"/sutton-bank-national-park/"},{"title":"断舍离 - 扭扭车","text":"今天在收拾车库的时候看到了这辆扭扭车。它已经闲置在车库中有一段时间了。感觉应该给它找个更好的归宿了。 说起来这辆扭扭车是家中利用率最高的玩具之一。两个孩子都对它爱不释手。老大玩了两年后，老二接着玩。每当有别人家小朋友来的时候，这辆扭扭车可以说是小朋友们必争的玩具。 其实就算有些家长，包括我在内也对它很感兴趣。呵呵，当然不是坐着玩，而是对其原理非常感兴趣。整个小车不需要电池，也不需要充电，只需要用手在方向盘那里扭来扭去，小车就会不断前行，真的很佩服其设计的精巧。 查了一下百度，是这样说的： 扭扭车操作简单，无需动力装置，充分利用了离心力原理和人体运动中的惯性原理，仅靠左右转动方向盘，就可随意前后行驶。 第一次看到扭扭车是在一位朋友家。儿子试玩后一直就想要一辆，但当时在英国并没有看到类似的产品。于是从国内买了一辆，放在行李箱中背了过来。还好一路顺利，并没有受到任何损伤，顺顺利利的到了英国。 处于好奇，在英国亚马逊上搜了一下，现在居然能够找到类似产品了。看样子扭扭车已经走出国门了😃 但孩子们慢慢长大，现在更喜欢一家人骑车远行，这辆扭扭车就有些受了冷落。但这毕竟是一辆非常好玩的玩具车。希望尽快给它找到一个好的归宿，继续发挥作用。","link":"/swing-swiggle-car/"},{"title":"缴纳年费，支持自己喜欢的运动","text":"今天收到了一封英国乒联的邮件。大意是说我的会员即将到期，要想在2020/21年度继续打联赛，就需要缴纳下一年的年费了。同时还提到，在目前疫情下，无法在体育场馆进行乒乓球赛，但希望在这个非常困难的时刻，伸出援助之后，支持一下自己喜爱的运动。 我一般只是参加每年10月至次年4月这半年的赛季，就目前来看，10月份开赛的概率似乎不大。就算开赛了，也不知道想去参赛的选手是不是够多，足以能让比赛进行下去。但我并没有任何犹豫，立刻付了下一年的会员费。毕竟，这是我最喜爱的运动，没有之一。 由于父母都是老师，因此很小的时候就有机会在父亲单位的活动室去蹭球。最早是从野路子开始。但幸运的是，邻居是一位乒乓球专业的体育老师，在他的影响下，基本功还算可以。 记得当时的条件并不是很好，正规的乒乓球台，也就是木制的并没有几个，更多的是那种水泥板制的球台。但就是那样，每逢课间时候，球台边也是人满为患，打球是需要排队的。毕竟是国球吧，大家在简陋的条件下照样玩的非常过瘾。 后来上大学的时候，加入了系乒乓球队，也有了和众多高手不断切磋的机会。后来和队友们共同努力，实现了系中在乒乓球赛事中零的突破，把冠军奖杯捧了回来。 工作后单位的条件很好，有专门的活动室。不仅自己的小单位有，很多友邻单位都有活动室。每到下午快要下班的时候，众多球友们就聚在一起，共同切磋。现在还很想念当时的日子。和英国这边同事聊天的时候，大家都不是很理解，为什么中国每个单位似乎都有一个活动室？ 在英国这边，曾经在几座不同的城市生活过，每到一个地方，总是先打听一下当地的乒乓球俱乐部。然后参加当地的联赛。在联赛中既能切磋球技，锻炼身体，还能认识一些朋友。很多时候大家比赛完了，一同还去酒吧喝上几杯。感觉真的很惬意。 说的自己的手好痒，希望早日能去挥上几拍！","link":"/table-tennis-annual-fee/"},{"title":"在家练球模式开启","text":"心心念的乒乓球台终于送到了，正好这两天天气还不错，于是在花园中搭好球台，开始练球了！ 说起来自从去年疫情爆发后，各种俱乐部联赛都取消了。尽管自己俱乐部曾经断断续续的提供过几次练球的机会，但处于安全考虑从没去过。这样算起来已经快要一年没有碰过球了。 其实除了各个健身场所的室内乒乓球台，在英国这里的很多公园中都会有露天的球台，任何人都可以自己拿着球拍去玩。就算在疫情期间，这些露天球台仍然可以使用。不过最主要的问题就是英国这里的天气较差，经常刮风下雨，能够打球的时候很少。 说到这些露天球台，让我想起了在国内上小学和中学的时候。当时学校中有很多室外的露天球台，每逢下课铃一响，小伙伴们就会冲到球台前，开始排队轮流上。记得当时最流行的游戏就是“大小官”，大官3分，自己独占一面球台，二官2分，可以允许失误两次，小兵只有一次机会，一旦失误就要下台去排队了。 毕竟是国球，群众基础非常好，不仅天气好的时候球台爆满，就算有时候刮风，小伙们照练不误。当时不仅同学们喜欢，老师们也非常喜欢打球。因此只有打得最好的同学才有可能受到老师的邀请，去老师们的室内活动室去切磋球艺。 工作之后，先后在几个单位工作过，但无一例外的，每个单位的活动室中都有乒乓球台。大家在休息的时候就会去切磋一下，而且还会时不时的举办员工乒乓球赛。 后来在英国工作后，工作区只是工作区，健身的话只能下班后去健身中心。这样我非常怀念国内那些单位中的活动室。有时候就在想，如果在这边tea break的时候大家能够有个活动室，挥两下球拍就完美了。。。 无论如何，现在终于有了自己的球台，无论疫情怎样，乒乓球不能落下。。。","link":"/table-tennis/"},{"title":"团队聚餐，可以吗？","text":"最近有个同事提议，团队成员是不是可以见个面？甚至，是否可以把因为疫情而耽搁的复活节聚餐重新补回来？ 图源：Pixabay 对于他的这个提议。大家一致表示赞成，但又纷纷表示了各种担忧。首先，本来关系非常好的同事们，憋在家中，已经半年没有见面了。大家都有这种社交需求，因此都很想见上一面。但由于英国政府最近新出台的规定，超过6人的团体不能聚会，除非来自同一个家庭。再者最近英国疫情数据不容乐观，甚至部分地区濒临被再次lockdown的边缘。 关于聚会方式，大家也想了一些不同的地点和方式。 首先是选择一个大家都方便到达的餐厅。现在英国很多餐厅把一些餐桌都放到了户外。毕竟户外的空气更加流通，被感染的机率相对更低。同时，就餐餐桌之间的距离都远大于正常时的距离。同时餐厅会做好各种消毒工作。可以说这是一种可以接受的方式。 第二种方式就是在单位附近找一个适合的地方，大家一起散步聊天。当然，口罩必须要戴上，同时大家也需要注意社交距离。这种方式相对更为安全些，不过这种聚会的方式会感觉略有些奇怪。毕竟如果能够坐在一个桌子上的话，大家可以一起聊天。现在如果每两个人之间都间隔两米，肯定不太方便群聊了。 还有一种方式就是预订单位的一个公共办公区。在办公区中，彼此之间的距离都是安全的。同时，还有各种消毒用具，这种方式应该也是很安全的。 大家虽然讨论的很热闹，但要真正付诸实施，似乎还有不少的顾虑。聚，还是不聚，这真的是个问题。","link":"/team-meetup/"},{"title":"国外经典儿童图书推荐之： Thank you, little mouse","text":"今天给大家推荐的这本图书是Thank you，little mouse。这本书特别适合3岁以下的小朋友。对于这本书我应该已经给自己的孩子们讲过几十遍了吧，书中的每一页都被动的记在自己的脑海中了。感觉通过这本书中的故事能够教会小朋友如何和人相处。比如如何去帮助别人，要懂得感恩等的基本道理。 图片来源： Amazon 在故事中，小老鼠和自己的爷爷奶奶住在一起。爷爷经常陪小老鼠在花园里玩，奶奶则会给小老鼠做各种好吃的饼干。到了晚上，爷爷奶奶会把小老鼠抱在怀中给他讲睡前故事。小老鼠一直非常感激爷爷奶奶对他的照顾，但又不知道该如何表示。眼看着秋天到了，各种水果都熟透了，这时候小老鼠终于有了一个好主意。它在树林中帮助了松鼠，小兔子，麻雀，还有小熊，而这些好朋友们送给了小老鼠各种不同的水果。于是，小老鼠和它的朋友们为小老鼠的爷爷奶奶举行了一个温馨的感谢party。","link":"/thank-you-little-mouse/"},{"title":"周末家庭影院 - The BFG","text":"这个周末全家一起观看了2016年出品的电影《The BFG》(The Big Friendly Giant)。这个影片是根据Roald Dahl的同名小说改编的。选择这个电影的原因很简单，同名小说是女儿最喜欢的小说之一。 影片中讲述的是小女孩Sophie由于在晚上无法入睡，碰巧看到的巨人BFG被BFG捉回了巨人国。只不过幸运的是，捉她的巨人在巨人国中是一个另类的巨人。和别的吃人的巨人不一样，这个巨人只吃自己种植的植物。同时，这个巨人还有一项重要的任务，就是去寻找不同的梦，并把梦装到一个个的玻璃瓶中，再一个个的送到小朋友们的梦境中。 为了阻止巨人们继续吃人，Sophie和这个好巨人一起合作，打算制作一个关于巨人吃小孩的噩梦，并把这个梦送到女王的梦境中以获取女王的帮助。最终在女王的帮助下，Sophie战胜了那些恶巨人，让他们不能再作恶。 正所谓一千个读者的心中就会有一千个版本的哈姆雷特一样。和上周看过的《The Fantastic Mr Fox》相比，这部电影似乎有些”成人不宜“，整部影片似乎更适合小朋友们看。虽然最终是个皆大欢喜的Happy ending，但整部电影略显平淡，让人能够记住的瞬间似乎没有。 对我而言，整部电影虽然略显平淡，但其中对Sophoie稚嫩心灵的刻画可以说是入目三分。同时整部电影的正能量满满，尤其是善良的BFG一步步帮助Sophie解开心结，让她的梦境成真，还是很暖心的。","link":"/the-bfg/"},{"title":"The beautiful town Llandudno (英格兰美丽海边小镇Llandudno)","text":"Photo was taken by @aafeng in Great Orme, Llandudno照片有 @aafeng 于2017年8月21日拍摄于Llandudno欧姆山上 We went to Snowdonia for your family holiday and stayed in Llandudno for three nights. Llandudno was a very beautiful and one of most famous coastal town in Britain. The Royal family and lots of celebrities have been here. 去威尔士Snowdonia国家公园度假时，在Llandudno住了三天。感觉这个小镇非常漂亮，事先没有意识到，后来Google了一下才知道Llandudno竟然这么有名。它是艾丽丝漫游仙境中爱丽丝的原型曾经住过的城堡，也是英国传统的度假圣地，英国和欧洲很多皇室成员都曾经来这里渡过假。很多世界名人，比如：披头士乐队，达尔文，丘吉尔等都曾经到过这里。这里和大家分享一下小镇美景。 We stayed in The Grafton, which has achived 9.6 in customer reivews in booking.com. 我们住在The Grafton这家酒店。酒店老板是一对Couple，人非常好，有什么旅游相关的问题都会耐心解答。酒店在booking.com上的客户评分非常高，300多条点评，分数高达9.6。 The street is full of hotels酒店所在街道可以说是酒店一条街，街边房子觉得大多数都是酒店： We have a couple room and a twin room这是我们订的房间，有一间双人床房，一个twin-room： It’s very nice and cosy inside.酒店内部也很温馨： The host told us that we can see starts while lying down at night老板娘说晚上睡觉时可以透过这个天窗看星星： The hotel is very friendly and pay attention to small things, here are juice for kids知道有孩子入住，很体贴的给准备了果汁： The town is a bit like a tropical town, but the temperature reminds us we are still in the UK!两个宝贝兴奋地在床上又蹦又跳，女儿表示她很喜欢这个家庭套房。这座小城的感觉有些像欧洲国家风格，尤其是街边的棕榈树让人似乎置身热带岛屿，但凉飕飕的温度又在提醒你还在英国。 We had a walk along the beach在酒店稍作休息，一家人沿着海边散步到今晚预订好的餐馆。出门后正好雨过天晴，天空还出现了一道彩虹！ Kids are very exciting吹着海风，听着海鸥的鸣叫，看着孩子们追逐嬉戏打闹，真的好惬意！ Somebody has put stones in a nice pattern还有人在海边用石子摆了这个漂亮的图案，赞一个！ Pier这是码头： We drove up the great orme, here is the toll在房东的推荐下开车上欧姆山欣赏一下山下分光。交了3镑后可以开车上山，这是收费站： beautiful views:沿途美景： We saw this super cool SUV偶遇的超酷越野车： We had our dinner in the tops restaurant晚餐在Tops这家中餐吃的。感觉他家的老板应该是香港人，粤菜做的不错 Ducks in plum sauce这是服务员推荐的烧鸭 seamed cod我们点的清蒸鳕鱼 Shaomai给孩子们要的烧卖 Noddles with veg and prawn炒面很实在，有不少虾仁，里面的菜也很多 Sichuan chicken老婆喜欢吃辣的，点了一个四川鸡，嗯，没错，就是叫四川鸡，不是辣子鸡丁之类的名字。感觉怪怪的，其实味道也还OK，但和媳妇心心念的川菜差了十万八千里。但好处就是量很大，里面的菜也很多，我还是很喜欢的。","link":"/the-beautiful-town-llandudno-llandudno/"},{"title":"网红店打卡，The pig pastry","text":"今天在网红店The Pig Pastry吃了一顿便饭，这家老店果然名不虚传，把以难吃闻名的英式料理做得很好吃。 手写菜单写得非常漂亮，不过看起来费点劲。 餐厅的布置也很文艺范，墙上挂着很多当地画家的作品。 就连卫生间也布置得很有特色。","link":"/the-pig-pastry-wc6dfgsd/"},{"title":"精彩的小剧场，The Princess and the sprout &amp; other festive tales","text":"今天全家去看了一场精彩的show：The Princess and the sprout &amp; other festive tales。这又是一场精彩的小剧场互动表演，虽然只有三个演员，但表演却非常精彩。 市中心的商业区也是非常热闹。","link":"/the-princess-and-the-sprout-and-other-festive-tales/"},{"title":"The marvelous experience in The World of Wedgwood - 美轮美奂的英国瓷都之旅 by @aafeng","text":"I have recently visited The World of Wedgwood, it is a feast for my eyes. I would like to share my experience. 最近参观了英国著名瓷器品牌Wedgwood的体验中心The World of Wedgwood, 被里面精美绝伦的瓷器所震撼，绝对是一次眼睛的盛宴。参观之后才知道，Wedgwood的创世人Josiah Wedgwood竟是如此惊才绝艳的一位人物，他不仅号称英国陶瓷之父，还是英国顶级中的顶级社团月光社的成员之一。下面和大家分享一下这次经历： The entrance非常期待这次参观，终于到了： “Teaware” made by sticks:广场非常整洁漂亮，这里有用树枝做的各种茶具，孩子们非常喜欢在这里奔跑玩耍： Josiah Wedgwood holding his most famed production, the Portland Vase.这位就是Wedgwood的创始人，大牛Josiah Wedgwood，怀中抱着的是他的成名作品：Portland花瓶 Water in front of the museum:在广场前还有一个小喷泉，孩子们在这里就玩了近一个小时： Lots of visitors here来之前以为英国瓷器应该是比较小众的，到了这里才发现这里的游客竟然非常多，游客中有很多从日本和其他亚洲国家，也会偶尔听到有人在讲熟悉的中文。 本来纠结了一番是否要参加工厂的tour，但最后还是参加了。好来感觉这个tour还是很有意思的，绝对涨姿势！在参观的过程中你会被这里带带相传的工艺，以及敬业的工作人员所折服。The factory tour is absolutely worth it - you will be inspired by the craftsmanship and skills passed through the generations. The models在没有进入工厂前，可以看到各种模具 A typical clay item shrinks by approximately 13% when fired in the biscuit kiln.茶具在烧制后会缩小约13%： All chinaware are fired at temperatures over 1000 degree.所有瓷器都要在超过1000度的高温下烧制. It is a shame that photos are strictly prohibited within the factory.非常遗憾的是，工厂内部严禁照相，只能把自己能记住的和大家说说了，里面主要介绍瓷器制作的各个步骤，从最开始的陶土，如何通过模具制作各种造型，再如何烧制和上色等。 The shop entrance is very beautiful平时出去玩对纪念品店很少会感兴趣，可这次的经历却截然不同，里面的各种精美瓷器和丰富的色彩绝对是一个视觉上的享受。纪念品店入口处就很漂亮： Very posh inside:我感觉店内可定是由专业设计师来设计的，内部非常典雅大气： A lion made by chinaware由各种瓷器做成的一个动物，我觉得是狮子： Teawares:自然还有五颜六色的各种精美茶具: Vera Wang has been working with Wedgwood号称婚纱女王的著名华裔设计师Vera Wang王薇薇和Wedgwood曾经多次跨界合作，设计除了Gilded Leaf 金色年华，Gilded Weave 金色霓赏等系列精品。 The stylish central bar在商店中心的吧台也非常有设计感： The tearoom is elegant and graceful这里的茶室非常的典雅漂亮，不过价格也不菲，每人16英镑，似乎比Betty’s的还要贵。本来打算体验一下的，但赶上有旅游团来，位置竟然被订满了。只能把这个遗憾留着，下次再来吧。 The museum is absolutely fantastic and you should not miss it. Lots of things to see in the museum, I would suggest to leave at least two hours there.根据官网的说法，博物馆内可看的东西很多，建议至少留两个小时的时间。进去之后感觉确实如此，我只是被精美的瓷器所震撼，如果是真正的瓷器爱好者的话，估计可以在里面待上半天。 The entrance:这里是博物馆入口处，还有Josiah的卡通画 Trails for kids这里还非常体贴的给孩子们提供了trail，让孩子们不会觉得太枯燥： Elegant corridor典雅的走廊墙壁上挂着他家的一些作品照片： Wedgwood： The manual process in early years:曾经带孩子体验过几次手工制作瓷器，都是使用那个能够不停转的机器。真心没有想到，连制模这个步骤过去都可以设计出简单的手工操作工具，伟大的人类！ Fine teaware:里面有着让人眼花缭乱的精美茶具，我这个外行只能看看颜色和样式了： Josiah’s workbench哈哈，没有想到，在Josiah的书桌上竟然有着类似文房四宝的东东，我管它叫做文房四宝之英国版： Stirrup cup in the form of a hare’s head; hand-painted in under-glaze blue.这是瓷器兔头，我觉得是源于过去的英国狩猎文化 Jug enamelled in polychrome with exotic birds.配有花鸟的瓷器： Egypt style chinaware埃及风格瓷器： Bone china下图是著名的英国骨瓷。曾经有人说：“当遇见骨瓷的那一刻，她骨子里蕴藏的贵族气质便在不经意间表露无遗。”，的确，真心的高大上，其实骨瓷不仅非常漂亮大气，还超级坚固，四个杯子就能撑起一座汽车的重量！ Wedgwood画像Josiah Wedgwood Sarah Wedgwood他夫人的画像 Wedgwood was a member of lunar societyWedgwood还是著名的月光社成员，这个月光社可以说是精英中的精英，人数从未超过14。生物学家达尔文，蒸汽机发明者瓦特等都是月光社的成员。 Big vase大花瓶： 最后带着孩子们体验了一下瓷器的制作过程。如果只是体验不带走的话只要两镑，如果需要成品的话15镑。","link":"/the-marvelous-experience-in-the-world-of-wedgwood----by-aafeng/"},{"title":"感人的英国经典话剧The Secret Garden秘密花园","text":"今晚全家去观看了英国的经典话剧The Secret Garden秘密花园。故事原型取自于英国约克郡，是英国儿童文学的经典代表作之一。虽然说是适合6岁以上孩子，但今晚的观众绝大多数都是成年人，我们全家也是被整场演出深深吸引。在谢幕后观众的掌声更是长达近5分钟。 话剧中叙述了一个出生于富裕家庭的小女孩Mary被家庭的各种条条框框所束缚，生活的并不快乐。同时也日益骄纵，染上了种种坏毛病。后来父母因为地震去世（原著中所述是染上霍乱），于是去投奔了姑父家。在姑父家她结识了很多新的朋友，性格逐渐变的开朗。在一个偶然的机会使得她发现了一个秘密花园，这个花园是她姑姑的最爱，但她姑姑也因为这个花园失去了性命。在朋友们的帮助下，他们渐渐恢复了花园的原貌，于此同时也治好了姑父儿子的病。整个话剧只是一个小制作，演员也不多，但却处处体现出了编剧和演员的专业水准，演出过程中更是高潮不断，给人完美的视听体验。 由于演出过程不让拍照，因此只能在演出结束后拍了一张舞台的照片。","link":"/the-secret-garden/"},{"title":"The trip to Monkey Forest + Quiz &#x2F;  猴山之行","text":"The first one who answers the following 4 questions correctly will be rewarded 5 SBD, deadline is 10pm 3 Sep 2017 UK time.下面有4个非常有意思的关于猴子的问题。第一位答对所有四个问题的朋友将会获得5 SBD奖励。截至到2017年9月3日英国时间晚10点。 The answer is C, B, B, C答案是：C, B, B, C I had a day trip to Monkey Forest, it was very interesting and lots of funs.早就听说这个Monkey Forest，这次正好和朋友一家结伴游览。 I didn’t expect that the Monkey Forest is so crowded.没有想到这里这么受欢迎，人山人海 We are very lucky to meet the feeding time刚到就正好赶上给猴子喂食 The baby monkey is on mummy’s back all the time.还有这只刚出生不久的小猴，总粘在妈妈的背上： Another little monkey又看到一只小猴 There are quite a few interesting questions:这次猴山之行感觉最有意思的事情之一就是这些有趣的问题： Q1: Where and how do we spend the night? 问题1：猴子晚上在哪里过夜？ The communications看看猴子各种表情所代表的含义，哈哈，原来猴兄也是表情帝 Differences between male and female can be identified by their teeth原来区别公猴和母猴除了可以看屁股外，还可以看它们的牙，有獠牙的是公猴，没有的是母猴。 The behaviours下图中可以看到猴子的各种行为，那个，有点点污。。。 Q2: Why do we groom each other? 问题2：为什么我们互相捉虱子？ Q3: In each group there is a hierarchy with a male at the top. How does a specific male achieve this position?问题3：在猴群中猴王是怎么产生的？ Q4: How does a female achieve the highest rank within the female hierarchy?问题4：在猴群中的母猴中的老大是怎样决定的？ Little monkeys are playing together到了最后，看到了最精彩的一幕：小猴子们在嬉戏打闹： 视频：https://dtube.video/#!/v/aafeng/sx3fa7ji Monkey is not suitable to be a pet猴子是群居动物，因此不适合作为宠物","link":"/the-trip-to-monkey-forest-quiz-5-sbd-5-sbd/"},{"title":"国外经典图书推荐之：小海螺和大鲸鱼The snail and the whale","text":"今天给大家推荐英国著名的插画作家Julia Donaldson的著名故事书”The snail and the whale“，中文书名叫做”小海螺和大鲸鱼”。这本故事书不仅情节非常吸引人，配图更是能抓住小朋友们的眼球，最后的寓意也是非常清晰明了，满满的正能量。非常适合给2-4岁的小朋友们讲。我家中英文版本都买了，给自己的两个孩子讲了也不知道有多少次了。 Image source: pixabay.com 书中主要讲述的是一只小海螺的大梦想，那就是要出海旅行去看看这个美丽的世界。她旁边的小海螺们都嘲笑她这个不切现实的梦想。直到有一天，一条大鲸鱼来到岸边，小海螺爬上了大鲸鱼的尾巴，跟着大鲸鱼一起去远航。一路上小海螺看到了无数的风景，有冰雪皑皑的北极，有炎热无比的热带，还有一路上的种种冒险和考验。小海螺也逐渐成熟了起来。在大鲸鱼不慎搁浅的时候，小海螺想到了一个好办法救了她的朋友。回到自己的家中后，其他的小海螺也在这支小海螺的影响下爬上了大鲸鱼的尾巴，一起再次出海远航。。。","link":"/the-snail-and-the-whale/"},{"title":"The trip to Snowdonia 威尔士最美国家公园雪敦山公园之旅","text":"To celebrate my marriage anniversary, we had a trip to Snowdonia, the second largest national park in the UK. 为了庆祝和媳妇的结婚结婚纪念日，全家去威尔士Snowdonia国家公园度假，下面和大家分享这次游记。 As suggested by our Hotel host Paul, we set off from Llandudno via Betws-y-Coed. 根据酒店房东Paul的建议，临时改变了路线，改由途经风景非常好的Betws-y-Coed绕道去Snowdon。Betws-y-Coed贝兹考德位于雪敦山国家公园东侧，是重要登山口和旅游胜地。 We had a short break in Swallow Fall - have no idea why it is called Swallow Fall. Here is the explanation from WIKI：“It is thought that the English name arose from a mis-hearing of the Welsh word ewynnol (foaming) as the similar-sounding y wennol (swallow).” 这是途经的燕子瀑布（Swallow Fall）。不是很明白为什么叫做燕子瀑布。于是查了一下WIKI，才知到原来是以讹传讹啊，原来威尔士语中的ewynnol (对应英语中的foaming) 被误听做了wennol (也就是swallow，燕子)，因此才被叫做燕子瀑布。这个瀑布在周边算是最大的了。可以和世界范围内那些有名瀑布一比的话，这个可能就太小儿科了。 Upon arrival, we visited National Slate Museum。 到达后我们首先参观了著名的板岩博物馆。 The slate industry has been very important in Wales history.板岩工业在威尔士的历史中非常重要。板岩可以说是威尔士这里的一个特色，它塑造了威尔士这里独特的地貌，也造就了这里独特的历史。 墙的围栏是板岩做的： In Slate Museum, you can see the works’ hard life in early years.在威尔士板岩博物馆中，可以体验早期工匠们和他们家庭的艰辛生活。博物馆内的很多机器仍旧保留着其原始状态。 A playground is situated within the museum.博物馆内还有孩子们的小游乐场 Lots of names are on the wall of Museum博物馆外墙上刻着很多人的名字，无语。。。 Right, after visiting Slate Museum, it’s time for the mountain train! According to railways’s website, it has been 1.2 million people has ridden the mountain train.由于家中有两个小孩，还有个“没长腿”的小公主，自己登山不太现实，登顶的火车自然是唯一选择。票价真心贵！一家人将近100英镑！如果订那个蒸汽火车的话会更贵。据说从1896年开始，共有1200万人成做过这里的小火车。小火车往返共两个小时，在峰顶停留半个小时的时间。Image credit to Snowdon mountain railway People in railway station火车站等待上车的人： The train track is very special可以看到小火车的轨道也是非常特殊，中间有带锯齿的轨道，想来是给小火车借力登上的吧。 Beautiful views:乘坐小火车沿途美景： Hikers around从火车中会不时看到很多上山下山的人： It is very foggy since halfway of the journey.火车单程近一小时的车程过半后，我们发现山顶云雾缭绕，当时心就凉了！果然，火车快登顶的时候，已经是在云雾中行驶了！儿子说我们在天上了！到达海拔一千多米的山顶后，能见度极低，风极大，气温极低，别说欣赏美景了，简直就是上了“诛仙台”。 Text in the summit:山顶上的文字： Here you are nearer to heaven这里离天堂更近了： Mountain bikes in the summit在1000多米的山顶上还有骑行者的自行车，不得不说，自行车运动的确是英国人的真爱。。。 People in summit俩娃刚下火车不适应这样严酷的天气，情绪都不太好。过了一会儿竟然兴高采烈地爬楼梯登上了雪敦山的最高点(雪敦山是英格兰和威尔士最高山)。 I put a photo from Daily Mail as we cannot didn’t have a clean view:很遗憾我们没法看清远处，这里是网上的一个图片Image credit to Daily Mail Back to the ground, we went to Lawton’s Cafe Grill, which is the top 1 restaurant by reviewers in Tripadvisor. I have to say, the restaurant definitely deserves that ranking!事先订了一家在TripAdvisor上评价非常高的餐厅。吃过后不得不说，他家菜的味道和餐厅的服务我都给满分。这家小餐厅长期位于TripAdvisor排名第一果然是有道理的。 We order a chicken liver paste as starter, super nice!点了一道Starter，是鸡肝酱配面包，超级好吃 My wife ordered lamb shank as the main course老婆点的这里的著名盐沼羊腿，肉炖的非常软，也非常入味。孩子们都能咬动。 I ordered the steak burger, which is the best burger I had in my life!我点的的加量的Steak Burger，可以说这是我吃过最美味的牛肉Burger。里面的肉质鲜嫩多汁，配有的洋葱和其他调味品更加重了肉的鲜味，而且不像有的Burger里面的肉都有点糊了，如果满分十分，我给十一分，额外的一分是因为它的好吃程度超过了我的预期。。。 My children had fish &amp; chips and spaghetti bolognese孩子们要的是Fish &amp; Chips和意大利面，女儿没吃完的意大利面我也尝了尝，感觉味道非常独特，配套酱汁香味浓郁，面也非常软，同样也是完胜以前吃过的所有意面。难怪小女儿几乎全都吃完。 Snowdon larger is a must try here到了这里自然要尝一尝当地啤酒：Snowdon larger。这个啤酒感觉就没有太多特色了，味道不错，略苦。但到了这里，自然要喝本地啤酒了。 Also nice desserts餐后甜点 It’s a bit shame that we didn’t have a clear view from Snowdon summit, apart from that, it’s a perfect trip and we definitely will come back!整个行程虽然因为山顶有雾不能看清远处景色，有些小遗憾。但整体感觉非常棒，下次一定再来！","link":"/the-trip-to-snowdonia--by-aafeng/"},{"title":"国外经典儿童图书推荐之 - The Very Hungry Caterpillar饥饿的毛毛虫","text":"今天给大家推荐的是这本貌似简单却信息量极大的儿童读物：The Very Hungry Caterpillar (饥饿的毛毛虫)。书中讲述了一只饥饿的毛毛虫在不断的吃各种水果，最终进化成美丽的蝴蝶的故事。这本书已经被翻译成几十种不同的语言，全世界不知道有多少小朋友读过这本书，又有多少小小的手指从被毛毛虫咬过的洞洞中穿过。。。 图源： Amazon 这本书能够给小朋友讲述的东西太多了，以下是我能想到的：数字（水果的数量，毛毛虫有几只眼睛，几条腿等），颜色，各种水果的名字，一周的7天，为什么毛毛虫能长成漂亮的蝴蝶？感觉要想讲好讲透的话，真的不是那么容易。","link":"/the-very-hungry-caterpillar/"},{"title":"我家孩子最爱的杂志，没有之一：The Week Junior","text":"儿子前一段在学校迷上了《The Week Junior》这本杂志，不仅在学校天天读，回家后还经常和我们谈到他在杂志上看到的各种新闻，最新消息等等。感觉这本杂志让他长了不少见识，也拓展了他的兴趣爱好。 最近由于疫情学校停课，于是我们自己订了一份这个杂志，以满足儿子阅读的愿望。《The Week Junior》杂志是周刊，专门为8-14岁的小朋友们设计。杂志涉及的话题非常广泛，包括时事新闻，科学，环境，体育，艺术，有趣的APP，动物等等。 这份杂志鼓励互动，其中有一个“Over to you”页面，可以聆听众多小读者的想法。这份杂志也鼓励创新，提倡“Critical thinking”，在每份杂志中都有一页提供一个比较有争议的话题，并提出正反方的观点和论据。希望通过这种方式培养孩子们独立思考能力。就像国内的各种辩论赛，或者雅思考试中的议论文一样，支持哪种观点并不重要，重要的是你需要有理有据，自圆其说。 为了鼓励小读者们认真阅读，还有一个测试页面来检查孩子们的理解。想要偷懒是不行的。。。 杂志中还有“Do something”和“How to”，鼓励孩子们的动手能力。这可以是一个手工，一个试验，也可以根据食谱做一顿饭。作为一个小吃货，儿子似乎对这项活动情有独钟。下面是这周的食谱和儿子的成果：","link":"/the-week-junior/"},{"title":"感性思维和理性思维","text":"作为一个理工背景男，我是典型的理性思维，做任何事情都喜欢事先做好计划，然后按照计划有条不紊的执行。而媳妇则是典型的文科生，注重的是她的感受，而不是事情本身的逻辑性。因此，我们偶尔拌嘴时，无论谁对谁错，她更在乎的是我的态度，而不是事情本身。只要态度好，事情本身是完全可以商量的。 图源：Pixabay 感性思维更注重个体的感受和体验，凭着自己的感觉做事。但由于受到个体思维的控制，因此异变，也容易走极端。大学刚毕业时有一个好友曾经和我表述了一个观点：“我只分远近，不分对错”。当时就觉得他思考问题的方式太过极端。当然，注重感性思维也有优点，我这位朋友给人的感觉就是够义气，他的周边也总有一大帮老铁。 与之相对的，则是理性思维。亚里士多德曾经说过一句名言：“吾爱吾师，但吾更爱真理”。受此影响，学生们对老师的观点是批判性接受，因为会把老师的研究成果进一步发展，达到一个新的高度。毕竟站在巨人的肩膀上，能够看的更远。记得刚到英国读书的时候，感觉课堂上学生们似乎对老师不够尊重，在老师上课的时候会随时打断老师，提出各种尖锐的问题。而老师也不生气，和学生平等的交流。当时不是很理解，但现在明白了，因为在他们心中，更爱的是真理本身。其实，在认识事务的过程中，是感性思维先起作用，随后是理性思维去认识事情本质。 其实在工作和生活中，这两种思维是可以互补的。举一个典型的例子，大家都知道打一巴掌，再给个枣这个“经典”育儿方法。其中打的这个巴掌就是理性思维的结果，犯了错误就要批评教育。只不过，教育完了，也要联络一下感情。这样下次再进行教育的时候才能更有效。 类似这样的例子还有很多。能够做到在两者自由切换的人，该感性的的时候就感性（讲故事），该理性的时候理性（讲道理）。才能在各种场合游刃有余。","link":"/thinking/"},{"title":"Thinkpad笔记本维修记","text":"今天早上打开笔记本电脑，准备开始干活。忽然发现按下电源开关后，电脑完全没有反应，黑屏。而电源开关的指示灯一直在闪。无论怎么按电源开关都没有反应。 首先想到的就是电脑休眠了，需要唤醒。于是想起了一招，长按电源键5秒钟就可以强制其关机，然后再重新开机就应该能正常启动系统了。可是按了5秒，10秒，15秒，30秒，都没有任何反应？？？ 既然这样都不管用，那就只能硬上了 - 直接拔掉电池。可是把电脑翻过来一看，由于当初选择的是T480s超薄版的，电池不像一般笔记本电脑那样在外面可以直接拆掉。于是找来工具，把电脑后盖打开，电池取下来几秒钟，再放了回去，顺便把内部除了除尘。终于可以正常开机了。 回想一下，头一天晚上结束时的操作和平时一样，选择了休眠，而没有关机。但这个笔记本已经用了一年多了，每天的操作都一样，一直没有问题。在网上查了一下也没有找到答案。看来以后每天不用电脑时还是老老实实的关机吧。","link":"/thinkpad-sleep/"},{"title":"我的ThinkPad情节","text":"最近单位给笔记本升级，我再一次毫不犹豫的放弃了MacPro，选择了ThinkPad。其实我的工作环境基本上都是在Linux上，但我宁愿放弃最直接的MacPro系统，而是使用Windows+VM的方式。主要原因有二： 1）我实在是对苹果产品提不起任何兴趣，虽然我经常使用Mac PC，自己也为了安装孩子的教育软件购买了ipad，但那套封闭的系统让我很是厌烦，自然会优先选择其他系统。 2）我的第一台笔记本就是 ThinkPad，自此之后但凡升级笔记本，我的首选都是ThinkPad。 这次我选择的是T480S，经过一段时间的使用，感觉很不错，主要优势有： 性能强悍，我在上面同时跑两个VM，在host上运行其他程序半点都不卡。 超级轻便，本子非常薄，我选的又是14寸屏的，更加轻便好携带。 电池续航能力强，说明书上说的似乎是9个小时，我没测试过，但充满电用过4，5个小时后电量基本还有50%+。 看过网上的评测，这款本的缺点似乎是屏幕黯淡，但我没有任何感觉，可能因为我只用它工作吧。","link":"/thinkpad/"},{"title":"Top open source projects for Utopian translation contributions in past 7 days","text":"Top open source projects for Utopian translation contributions in past 7 daysI have been tranlating open source projects via Crowdin and Utopian for a while. Sometimes I feel it is hard to find a suitable project to translate. Therefore, I write a script to generate a summary of open source project translations. The data is retrieved via Utopian API. Hopefully the following list will give you some ideas on which project you want to work on if you want to translate open source projects via Utopian. https://github.com/ancap-ch/from-en [198 contributions]Examples: https://steemit.com/@joelsteem/part-38-translation-ancap-from-en-into-indonesian-language-1027-word https://steemit.com/@rooneey/translations-ancap-ch-from-en-into-indonesian-pr-1904 https://steemit.com/@rooneey/translations-ancap-ch-from-en-into-indonesian-pr-1895 https://github.com/Gapminder/dollar-street-pages [134 contributions]Examples: https://steemit.com/@nehomar/spanish-translation-dollar-street-part-xxv-1018-words https://steemit.com/@nehomar/spanish-translation-dollar-street-part-xxiv-1028-words https://steemit.com/@lukaluci/part-7-translating-dollar-street-from-english-to-serbian-latin https://github.com/uccser/cs-unplugged [65 contributions]Examples: https://steemit.com/@samuellmiller/translation-spanish-cs-unplugged-from-english-1052-words-part-7 https://steemit.com/@samuellmiller/translation-spanish-cs-unplugged-from-english-1068-words-part-6 https://steemit.com/@vitruvianman/open-source-project-cs-unplugged-turkish-translation-all-files-part-8 https://github.com/BasicAirData/AirDataComputer [16 contributions]Examples: https://steemit.com/@zulfikaraw/i-translation-basic-air-data-into-indonesia-language-20 https://steemit.com/@zulfikaraw/i-translation-basic-air-data-into-indonesia-language-17-as-proofreader https://steemit.com/@etheranoon/translation-of-basic-air-data-to-french-19 https://github.com/akeneo/pim-community-standard [12 contributions]Examples: https://steemit.com/@ozturkkemal/akeneo-translation-2-eng-to-ro-1053-words https://steemit.com/@ozturkkemal/akeneo-translation-eng-to-ro-1152-words https://steemit.com/@katherinef4/translation-to-spanish-venezuela-akeneo-1083-words-part-11 https://github.com/zaproxy/zaproxy [9 contributions]Examples: https://steemit.com/@coretan/owasp-zap-help-translation-into-indonesian-1115-words https://steemit.com/@leurop/translation-of-owasp-zap-from-en-to-portuguese-part-2 https://steemit.com/@froq/polish-translation-of-owasp-zap-vulnerabilities-translated-1408-words-5 https://github.com/code-dot-org/code-dot-org [9 contributions]Examples: https://steemit.com/@susanli3769/translation-of-code-org-from-english-to-chinese-simplified-1-109-words-completed https://steemit.com/@shoganaii/hour-of-code-learn-game-development-code-org-localization-112 https://steemit.com/@shoganaii/hour-of-code-learn-game-development-code-org-localization-111 https://github.com/exoplatform/platform [8 contributions]Examples: https://steemit.com/@vinzruzell/exo-platform-or-english-to-tagalog-translation-or-1-130-words-or-part-3-or https://steemit.com/@andreistalker/english-to-romanian-translated-1200-words-of-exoplatform-5-0-part-6-final https://steemit.com/@andreistalker/english-to-romanian-translated-1200-words-of-exoplatform-5-0-part-5 https://github.com/PrestaShop/PrestaShop [7 contributions]Examples: https://steemit.com/@julie26/prestashop-official-have-translated-1-254-words-from-english-to-filipino https://steemit.com/@leynesmoran/prestashop-project-translation-from-english-to-spanish-venezuela-part-15-1211-words https://steemit.com/@rodylina/prestashop-english-filipino-translation-part-5-1-107-words https://github.com/zotonic/zotonic [7 contributions]Examples: https://steemit.com/@ackseriam/zotonic-translation-from-english-to-spanish-1130-words-3 https://steemit.com/@mertimza/turkish-translation-for-zotonic-1 https://steemit.com/@dbucci24/zotonic-translation-from-english-to-spanish-part-1 https://github.com/bookchainio/steem-whitepaper [7 contributions]Examples: https://steemit.com/@sarmizegetusa/steem-whitepaper-romanian-translation-9-1040-words-translated https://steemit.com/@rosatravels/steem-white-paper-part-3-or-traditional-chinese-1007-words https://steemit.com/@sarmizegetusa/steem-whitepaper-romanian-translation-8-1049-words-translated https://github.com/salesagility/SuiteCRM [5 contributions]Examples: https://steemit.com/@kimp0gi/1-174-translated-words-of-enus-lang-php-file-from-suitecrm-or-an-english-to-cebuano-translation https://steemit.com/@abdulmalikkhan/suitecrm-or-translating-english-into-urdu-pakistan-or-part-3-or-1030-words https://steemit.com/@siersod/translation-to-spanish-venezuela-suitecrm-core-1064-words-part-1 https://github.com/akeneo/pim-community-dev [5 contributions]Examples: https://steemit.com/@silviu93/traslated-1000-words-from-english-to-romanian-for-akeneo-5 https://steemit.com/@silviu93/traslated-1000-words-from-english-to-romanian-for-akeneo-4 https://steemit.com/@silviu93/traslated-1000-words-from-english-to-romanian-for-akeneo-3 https://github.com/cgeo/cgeo [4 contributions]Examples: https://steemit.com/@khaled-dz/translation-c-geo-into-arabic-661-word-last-part-100-translated https://steemit.com/@khaled-dz/translation-c-geo-into-arabic-part-5-1005-word https://steemit.com/@khaled-dz/translation-c-geo-into-arabic-part-4-1082-word https://github.com/OpenCPN/OpenCPN [4 contributions]Examples: https://steemit.com/@karolek/opencpn-translation-into-russian-1019-words-part-2 https://steemit.com/@nanik94/opencpn-spanish-translation-96-100-1460-words-translated https://steemit.com/@rajarizki/opencpn-translating-1046-words-from-english-to-indonesian-or-part-2 https://github.com/progit/progit2-es [4 contributions]Examples: https://steemit.com/@josue33/spanish-translation-pro-git-1431-words-part-16 https://steemit.com/@josue33/spanish-translation-pro-git-1130-words-part-15 https://steemit.com/@josue33/spanish-translation-pro-git-1104-words-part-14 https://github.com/snipe/snipe-it [4 contributions]Examples: https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1096-words-part-5 https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1134-words-part-4 https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1122-words-part-3 https://github.com/phalcon/docs [4 contributions]Examples: https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part11-1983-words https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part9-1778-words https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part8-1403-words https://github.com/nuxeo/nuxeo [3 contributions]Examples: https://steemit.com/@miss-ste/nuxeo-italian-translation-from-44-to-54-1041-word https://steemit.com/@azissuloh/nuxeo-translation-into-indonesian-1137-words-as-proofreader-part-2 https://steemit.com/@azissuloh/nuxeo-translation-into-indonesian-1112-words-as-proofreader https://github.com/loomnetwork/cryptozombie-lessons [3 contributions]Examples: https://steemit.com/@kedi/cryptozombies-turkish-translation-part-3 https://steemit.com/@kedi/cryptozombies-turkish-translation https://steemit.com/@pl4ym0re/cryptozombie-lesson-3-french-translation https://github.com/progit2-ms/progit2 [3 contributions]Examples: https://steemit.com/@mrplokmi/pro-git-2malay-localization-4 https://steemit.com/@mrplokmi/pro-git-2malay-localization-3 https://steemit.com/@mrplokmi/pro-git-2malay-localization-2 https://github.com/bolt/bolt [3 contributions]Examples: https://steemit.com/@vellosid/bolt-romanian-translation-1-1215-words-translated https://steemit.com/@mohail/translating-bolt-to-urdu-pakistan-part-1-1046-word https://steemit.com/@syedumair/bolt-translation-or-part-1-1016-words-translated https://github.com/weDevsOfficial/wp-user-frontend [2 contributions]Examples: https://steemit.com/@mugurcagdas/wp-user-frontend-turkish-translation-4-1181words-merged-pr https://steemit.com/@mugurcagdas/wp-user-frontend-turkish-translation-3-1181words-merged-pr https://github.com/jmalenko/alarm-morning [2 contributions]Examples: https://steemit.com/@samuellmiller/translation-spanish-alarm-morning-from-english-1044-words-part-3 https://steemit.com/@samuellmiller/translation-spanish-alarm-morning-from-english-1057-words-part-2 https://github.com/FireHound/android_frameworks_base [2 contributions]Examples: https://steemit.com/@karinarmc/firehound-european-portuguese-part2 https://steemit.com/@karinarmc/firehound-european-portuguese-part1 https://github.com/BuckleScript/bucklescript [2 contributions]Examples: https://steemit.com/@bobsthinking/bucklescript-translated-into-spanish-to-77-1150words-part-4 https://steemit.com/@bobsthinking/bucklescript-translated-into-spanish-to-70-1107words-part-3 https://github.com/etewiah/property_web_builder [2 contributions]Examples: https://steemit.com/@kedi/propertywebbuilder-turkish-translation-part-2 https://steemit.com/@kedi/propertywebbuilder-turkish-translation https://github.com/cashmusic/platform [2 contributions]Examples: https://steemit.com/@mertimza/cashmusic-turkish-translation-1-1143-words https://steemit.com/@susanli3769/chinese-translation-of-cashmusicplatform-1-255-words-completed-and-merged https://github.com/zaproxy/zap-core-help [2 contributions]Examples: https://steemit.com/@riderblack/1-200-words-translated-to-owasp-zap-help-project-from-english-to-filipino https://steemit.com/@coretan/owasp-zap-help-translation-into-indonesian-1027-words https://github.com/espocrm/espocrm [2 contributions]Examples: https://steemit.com/@sarmizegetusa/espocrm-romanian-translation-5-over-1200-words-translated https://steemit.com/@sarmizegetusa/espocrm-romanian-translation-4-over-1100-words-translated","link":"/top-open-source-projects-for-utopian-translation-contributions-in-past-7-days/"},{"title":"Top Utopian translation projects 乌托邦翻译的开源软件项目汇总","text":"I have been translating open source projects via Crowdin and Utopian for a while. Sometimes I feel it is hard to find a suitable project to translate. Therefore, I write a script to generate a summary of open source project translations. The data is retrieved via Utopian API. Hopefully the following list will give you some ideas on which project you want to work on if you want to translate open source projects via Utopian. 从事乌托邦翻译有一段时间了，有时候感觉比较困难的就是选取适合的开源项目进行翻译。因此写了一个小程序来生成这样一个列表，里面包括了近7天内乌托邦通过审核的翻译文章，按照文章数量进行了排序，这里列举了排名前30名的Github库，以及相应的翻译数量。同时每个Github库都列出了几篇通过审核的翻译文章作为参考。希望对大家有用。 https://github.com/ancap-ch/from-en [228 contributions]Examples: https://steemit.com/@omeratagun/27a19e-ancap-turkish-translation-1040-words-or-valid-commit https://steemit.com/@omeratagun/ancap-turkish-translation-1059-words-or-valid-commit https://steemit.com/@omeratagun/ancap-turkish-translation-1028-words-or-valid-commit https://github.com/Gapminder/dollar-street-pages [166 contributions]Examples: https://steemit.com/@begumbaybali/dolar-street-translation-english-to-turkish-translation-14-1174-words https://steemit.com/@begumbaybali/dolar-street-translation-english-to-turkish-translation-13-1066-words https://steemit.com/@begumbaybali/dolar-street-translation-english-to-turkish-translation-12-1066-words https://github.com/uccser/cs-unplugged [48 contributions]Examples: https://steemit.com/@rajarizki/cs-unplugged-translating-1206-words-from-english-to-indonesian-or-part-3 https://steemit.com/@mpolito/spanish-translation-of-cs-unplugged-1064-words-part-7 https://steemit.com/@michaelizer/translation-spanish-cs-unplugged-1000-words-part-11 https://github.com/BasicAirData/AirDataComputer [31 contributions]Examples: https://steemit.com/@etheranoon/translation-of-basic-air-data-to-french-19 https://steemit.com/@knightcrawlers/basic-air-data-website-english-nigerian-nigerian-pidgin-english-part-2-1-081-words https://steemit.com/@zulfikaraw/i-translation-basic-air-data-into-indonesia-language-16-as-proofreader https://github.com/code-dot-org/code-dot-org [23 contributions]Examples: https://steemit.com/@susanli3769/translation-of-code-org-to-chinese-simplified-1-379-words-completed https://steemit.com/@shoganaii/hour-of-code-learn-game-development-code-org-localization-93 https://steemit.com/@shoganaii/hour-of-code-learn-game-development-code-org-localization-92 https://github.com/akeneo/pim-community-standard [12 contributions]Examples: https://steemit.com/@katherinef4/translation-to-spanish-venezuela-akeneo-1115-words-part-9 https://steemit.com/@katherinef4/translation-to-spanish-venezuela-akeneo-1076-words-part-8 https://steemit.com/@katherinef4/translation-to-spanish-venezuela-akeneo-1081-words-part-6 https://github.com/akeneo/pim-community-dev [12 contributions]Examples: https://steemit.com/@silviu93/traslated-1000-words-from-english-to-romanian-for-akeneo-2 https://steemit.com/@aguero41/i-translation-projects-akeneo-into-indonesian-2 https://steemit.com/@coretan/akeneo-translation-into-indonesian-1012-words-part-3 https://github.com/Maschinen-Mensch/curiousexpedition [11 contributions]Examples: https://steemit.com/@jessicasornelas/translation-to-european-portuguese-the-curious-expedition-1044-words-part-33 https://steemit.com/@jessicasornelas/translation-to-european-portuguese-the-curious-expedition-1077-words-part-32 https://steemit.com/@jessicasornelas/translation-to-european-portuguese-the-curious-expedition-1029-words-part-34 https://github.com/PrestaShop/PrestaShop [10 contributions]Examples: https://steemit.com/@ardee867/prestashop-i-have-translated-and-proofread-from-english-to-filipino-part-13 https://steemit.com/@ardee867/prestashop-i-have-translated-and-proofread-from-english-to-filipino-part-12 https://steemit.com/@leynesmoran/4sw9dd-prestashop-project-translation-from-english-to-spanish-venezuela-part-13-1165-words https://github.com/exoplatform/platform [10 contributions]Examples: https://steemit.com/@andreistalker/english-to-romanian-translated-1200-words-of-exoplatform-5-0-part-4 https://steemit.com/@andreistalker/english-to-romanian-translated-1200-words-of-exoplatform-5-0-part-3 https://steemit.com/@myo/translating-1-090-words-of-exo-platform-english-to-turkish https://github.com/zotonic/zotonic [7 contributions]Examples: https://steemit.com/@dbucci24/zotonic-translation-from-english-to-spanish-part-1 https://steemit.com/@ackseriam/zotonic-translation-to-spanish-1063-words https://steemit.com/@alfanerd/turkish-translation-of-zotonic-3 https://github.com/bookchainio/steem-whitepaper [6 contributions]Examples: https://steemit.com/@rosatravels/steem-white-paper-part-2-or-traditional-chinese-1056-words https://steemit.com/@sarmizegetusa/steem-whitepaper-romanian-translation-7-1040-words-translated https://steemit.com/@rosatravels/steem-white-paper-part-1-or-simplified-chinese-1056-words https://github.com/cgeo/cgeo [6 contributions]Examples: https://steemit.com/@khaled-dz/translation-c-geo-into-arabic-part-4-1082-word https://steemit.com/@khaled-dz/translation-c-geo-into-arabic-part-3-1060-word https://steemit.com/@khaled-dz/translation-c-geo-into-arabic-part-2-1080-word https://github.com/thecodix/book [6 contributions]Examples: https://steemit.com/@santu41/rust-open-source-project-github-translation-english-to-spanish-3 https://steemit.com/@santu41/rust-open-source-project-github-translation-english-to-spanish-2 https://steemit.com/@dbucci24/the-rust-programming-language-translation-from-english-to-spanish-part-4-merged-prs https://github.com/gplcart/gplcart [6 contributions]Examples: https://steemit.com/@godfish/translating-gpl-cart-into-czech-part-vii-1-148-words https://steemit.com/@omersurer/gplcart-translation-contribution-en-to-nl-4 https://steemit.com/@omersurer/gplcart-translation-contribution-en-to-nl-3 https://github.com/phalcon/docs [5 contributions]Examples: https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part8-1403-words https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part6-1507-words https://steemit.com/@gn-ahmad/persian-translation-of-phalcon-documentation-part4-1242-words https://github.com/bolt/bolt [5 contributions]Examples: https://steemit.com/@deusjudo/bolt-italian-translation-2-part-from-40-to-53-1100-word https://steemit.com/@khaled-dz/translation-bolt-into-arabic-part-4-1191-word https://steemit.com/@khaled-dz/translation-bolt-into-arabic-part-3-1080-word https://github.com/zaproxy/zaproxy [5 contributions]Examples: https://steemit.com/@gianmag/translation-of-a-file-owasp-zap-1054-words-from-english-to-italian-2 https://steemit.com/@froq/polish-translation-of-owasp-zap-vulnerabilities-translated-1121-words-2 https://steemit.com/@gianmag/translation-of-a-file-owasp-zap-1065-words-from-english-to-italian-1 https://github.com/salesagility/SuiteCRM [5 contributions]Examples: https://steemit.com/@murobro/part-2-suitecrm-core-translate-to-azerbaijani-language https://steemit.com/@kookjames/translation-of-the-suitecrm-to-urdu-pakistan-part-8 https://steemit.com/@murobro/part-1-suitecrm-core-translate-to-azerbaijani-language https://github.com/blueset/ehForwarderBot [5 contributions]Examples: https://steemit.com/@begumbaybali/eh-forwarder-bot-and-modules-translation-english-to-turkish-translation-1-1053-words https://steemit.com/@aafeng/translation-of-eh-forwarder-bot-and-modules-from-english-to-simplified-chinese-part-3-1274-words https://steemit.com/@murobro/part1-eh-forwarder-bot-and-modules-translate-to-azerbaijani-language https://github.com/BuckleScript/bucklescript [4 contributions]Examples: https://steemit.com/@bobsthinking/bucklescript-translated-into-spanish-to-77-1150words-part-4 https://steemit.com/@bobsthinking/bucklescript-translated-into-spanish-to-70-1107words-part-3 https://steemit.com/@bobsthinking/bucklescript-translated-into-spanish-to-62-1090words-part-2 https://github.com/snipe/snipe-it [4 contributions]Examples: https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1134-words-part-4 https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1122-words-part-3 https://steemit.com/@dpyroc/translation-spanish-snipe-it-translation-from-english-1121-words-part-2 https://github.com/joomla/joomla-cms [4 contributions]Examples: https://steemit.com/@izhaaan/joomla-cms-urdu-pakistan-translation-part-12-1109-words https://steemit.com/@saahir/translating-joomla-cms-to-urdu-india-part-15-1070-words https://steemit.com/@izhaaan/joomla-cms-urdu-pakistan-translation-part-9-1086-words https://github.com/Alfresco/alfresco-repository [4 contributions]Examples: https://steemit.com/@wens/filipino-translation-alfresco-translated-1-167-words https://steemit.com/@persiansteem/persian-translation-of-alfresco-part-2 https://steemit.com/@gn-ahmad/persian-translation-of-alfresco-part-2-1226-words https://github.com/OpenCPN/OpenCPN [4 contributions]Examples: https://steemit.com/@rajarizki/opencpn-translating-1046-words-from-english-to-indonesian-or-part-2 https://steemit.com/@thegreenfox/opencpn-translated-1000-words-from-english-to-italian https://steemit.com/@rajarizki/opencpn-translating-1051-words-from-english-to-indonesian https://github.com/verbling/wide-language-index [3 contributions]Examples: https://steemit.com/@yovanek/verbling-polish-translation-2 https://steemit.com/@hasiok/polish-translation-for-verbling-vol-2-1106-words https://steemit.com/@oschlypajac/polish-translation-for-verbling-1061-words https://github.com/progit2-ms/progit2 [3 contributions]Examples: https://steemit.com/@mrplokmi/pro-git-2malay-localization-3 https://steemit.com/@mrplokmi/pro-git-2malay-localization-2 https://steemit.com/@mrplokmi/pro-git-2malay-localization-1 https://github.com/progit2-tl/progit2 [3 contributions]Examples: https://steemit.com/@robin-ho/filipino-translation-pro-git-2nd-edition-1-180-total-translated-words https://steemit.com/@robin-ho/filipino-translation-pro-git-2nd-edition-1-107-total-translated-words https://steemit.com/@robin-ho/filipino-translation-pro-git-2nd-edition-1-111-total-translated-words https://github.com/mageplaza/magento-2-italian-language-pack [3 contributions]Examples: https://steemit.com/@silviu93/traslated-1000-words-from-english-to-italian-for-mageplaza-translate-for-magento-2-extensions-3 https://steemit.com/@silviu93/traslated-1000-words-from-english-to-italian-for-mageplaza-translate-for-magento-2-extensions-2 https://steemit.com/@silviu93/traslated-1000-words-from-english-to-italian-for-mageplaza-translate-for-magento-2-extensions-1 https://github.com/steemit/steem [2 contributions]Examples: https://steemit.com/@leurop/translation-of-steem-white-paper-from-en-to-portuguese-part-2 https://steemit.com/@leurop/translation-of-steem-white-paper-from-en-to-portuguese-part-1","link":"/top-utopian-translation-projects/"},{"title":"说说英国慈善店","text":"最近在整理车库的时候，清理出很多不用的婴幼儿用品和玩具。下一个问题就是，该怎么处理这些对自己没用的，但对别人也许还能有些用处的东西。对于这些闲置物品，首选自然就是二手市场，或者慈善店。在逐步的接触过程中，慢慢了解了其中的一些常识。 首先，慈善店不是垃圾场，不是说你不想用的东西都能扔到慈善店门口的。其实这不难理解。慈善店的目的就是出售大家的捐赠物品，获得一定的资金，进而能够帮助那些需要帮助的人或者机构。因此，一个重要前提就是，你捐助的东西是可以卖的出去的，否则，只会为慈善店添加麻烦。 因此，大多数慈善店都会接受那些保存良好，干净整洁，不影响出售的衣服，包包，玩具，CD，DVD等。而那些明显很脏的，有破损的衣服，是没法出售的，因此慈善店是不接受的。当然，每家慈善店接受的物品种类也会不同，比如：有的家接受玩具，而有的家则不接受。 在选择慈善店的时候，可能每个人的心中都有更为倾向的慈善店，目前英国主流的几家慈善店包括： Cancer Research UK: 这家机构是为癌症研究募资的。他家接受各种衣服，鞋子，包包，家居用品，小电器等。 British Heart Foundation: 他家主要是为心脏病募捐的。他家在英国很多社区，大学都有募捐点。这家也是我个人捐助最多的慈善机构之一。 Oxfam: 这家机构是为帮助世界各地受贫穷，饥饿困扰的人而募捐。他家还与英国玛莎百货合作，给他家捐赠玛莎的衣服，会获得玛莎的购物折扣券。通过这种办法，可以达到三赢：慈善店获得了二手衣服，捐赠者可以获得购物券，玛莎则获得潜在客户。 除了把衣服捐赠到慈善店之外，还可以把东西捐赠到Donation Bank。这些Donation Bank其实看起来就像一个大垃圾箱。在箱体上写得非常清楚，接受和不接受什么样的物品。如果想要捐赠，只要把物品打包后仍在捐赠桶中就可以了。 可以说，通过捐赠给慈善店，既能清理自己的闲置物品，让家中更加清爽，又能帮助到别人，真可以说是一举两得，好处多多。不过，也有让人比较头疼的一点，就是有些物品，比如：儿童汽车座椅，所有的慈善店都不接受，这主要是处于安全考虑。","link":"/uk-charity-shop/"},{"title":"英国全面开启网络授课模式","text":"鉴于目前疫情，英国学校复课似乎遥遥无期。于是英国政府于本周一推出了一系列的网课，全面开启网络教学模式。上网课的网站叫做Oak National Academy，里面涵盖各个年级，各个科目的课程。 以英国小学为例，这里的小学从4岁开始上Reception，然后5岁为Year 1，6岁为Year 2，直到10岁为Year 6。到小学毕业一般为11岁左右。在系统中按照年级进行了划分。对于每个年级，从周一到周五的课程设计就和他们在学校中一样，各个科目都配有相应的时间。 以我家孩子正在上的五年级为例，每天有三门课程：英语，数学，和基础课（包括历史，地理，科学等）。 比如基础课的话题是：In 1066, who was the rightful heir to the throne? 1066年,谁是合法的王位继承人?数学：An Introduction To Translation 坐标轴上坐标转换英语：Setting Description: Reading Comprehension – Fact Retrieval 阅读理解-事实检索 在每节课中，既有老师的在线授课，也有课后习题，最后还有一个小测验。整体设计的非常合理。不过感觉自从网课开始后，家长们压力更大了，要想达到好的学习效果，最好全程陪。但家长们也有自己的工作要做。和很多朋友们交流，大家都感觉压力山大。哎，希望疫情早日过去，回到正常生活。","link":"/uk-online-classroom/"},{"title":"biu biu biu英国经济复苏计划","text":"最近英国首相鲍里斯宣布英国后新冠疫情时期的经济恢复计划： Build back better，build back greener，build back faster。这三连Build让我不小心听成了biu biu biu。。。 不过讲真，这可以说是一个雄心勃勃的计划，如果真能实现了，哪怕只是部分实现，已经相当了不起了。 首先，通过这次疫情，政府意识到了基础设施的不足和缺陷。因此狂砸50亿英镑投资基础建设，包括对NHS，交通干线，和教育系统的投资。 比如拨专款给”Shovel ready”工程，也就是说那些除了钱不到位，其他都到位的工程。另外，在后疫情阶段，虽然很多学校都开始复课，但由于需要保持社交距离，学校的空间有些捉襟见肘，因此这次会拨教育专款改善学校设施。 其次是对环保的强调。最近北极升温，局部暴雨，森林大火等自然灾害让人不禁为人类的未来担心。而英国政府提倡的“Green recovery”可以说把环保放在了至关重要的地位。 英国政府曾经承诺将于2050年实现净碳排放量为零。与此相关，首次听说了一个听起来很魔幻的技术，叫做：Direct Air Capture，直译作“直接空气捕捉”，也就是说直接把空气中的二氧化碳捕捉到，从而达到降低碳排放量的目的。听起来是不是很神奇？ 话说，最近几天教育部长声称，9月所有中小学将会全面复课，拒绝将孩子送回学校的家长还将面临罚款。同时收到了学校的邮件，将会有专款给因为疫情落下功课的孩子们找私教补课。 种种迹象表明，由于疫情对经济的重创，已经对很多行业造成了毁灭性打击。英国政府似乎非常坚定的要重启经济。希望这个计划能够顺利的biu biu biubuild build build。","link":"/uk-recovery/"},{"title":"理解","text":"很多同事的邮件签名前后都会加上一句话：“I work flexibly - so whilst it suits me to email now, I do not expect a response or action outside of your own working hours.” 其大意就是说，我的工作方式非常灵活，因此尽管现在这个时间适合我来发送邮件，但我不希望在您自己的工作时间之外答复我或采取任何行动。 这其中体现了几个意思：首先，你现在看到邮件，可以不回复，也可以不采取行动。第二，尽管我现在在工作，但我理解现在可能并不是你的工作时间，因此你可能并不能立即看到我的邮件。 其实，这其中体现了一个重要的原则：每个人都是不同的个体，因此每个人的生活方式，工作方式，对事情的看法都是不尽相同的。要善于站在对方的角度来思考问题，这样人和人之间才能没有隔阂，有效沟通。 最近遇到了不少正反两方面的例子。首先是给我家干活的一个Builder。和他联系的时候，他即使当时不能够接电话，但过一会总会把电话打回来。和他聊起这件事的时候，他也说有些时候他给别人打电话的时候，别人可能也不接。他完全能够站在对方的角度来考虑问题，对方可能手头有活，不方便接电话。只要最终对方打回来，能够正常沟通，就没有任何问题。 一个反面的例子就是我的一位大学同学。其实关系一直还不错。前一段时间他有件事情和我咨询。当天我的会议一个接一个，一直没有机会给他回复。结果到了晚上给他详细的回复了他的所有问题，并问了一些更近一步的信息。但然后，就没有然后了。老同学似乎和我生气了，可能是怪我没有即时回复吧。 我在不停的思考，我做错了什么吗？让我的老同学对我有看法？难道在会议中也要立刻给他回复一下，我在开会，稍后回复吗？我承认在会议间歇中有去去卫生间，喝口水的时间，但他的问题并不紧急啊。我在之后的回复中他肯定能看到我是在认认真真的回复的。难道多年的老同学，连这点默契都没有吗？多年的职场老手，连这点基本的理解都没有吗？ 哎，真的想说一句，理解万岁！","link":"/understanding/"},{"title":"一直在用utf8编码，可utf8mb4编码又是什么鬼？","text":"最近打算把中文区的文章信息保存到数据库中，然后分析一下这些数据。本来想这应该是一个非常简单的程序。但在实现的过程中遭遇了这个utf8mb4编码的问题。下面把整个排错过程记录一下。 问题的出现程序很简单，就是读取中文区中的最新N条文章，然后保存到数据库中。对于一般的文章，没有任何问题。但对于个别的文章，比如 ace108 前辈的一篇文章， 📷Flirting with Silver I | 追求银I😎 保存的时候出错了： mysql.connector.errors.DatabaseError: 1366 (HY000): Incorrect string value: &apos;\\xF0\\x9F\\x93\\xB7#M...&apos; for column &apos;title&apos; at row 1 仔细查看了一下，似乎是因为文章标题中出现了表情符号所致的。 解决方案在网上查找了一下，很多人都遇到过类似的问题，似乎我的初步判断是正确的。问题在于：在默认设置下，不支持表情字符的编码。 那么，什么是utf8mb4字符集呢？查阅了一下MySQL的官方文档： utf8mb4 is a superset of utf8mb3. The utfmb4 character set requires a maximum of four bytes per multibyte character. 我们平时用的 utf8 其似乎就是MySQL中的 utf8mb3。而 utf8mb4 是我们常见的 utf8 的父集，以4个字节来保存多字节字符。不难想象，utf8mb4 能够表示的字符范围更广。在MySQL中建议使用 utf8mb4，它是完全兼容 utf8mb3的。 知道了原因，解决方法就很简单了。 首先，更改表的字符集： ALTER TABLE posts CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin; 接下来，更改 “title” 这一列的字符集 ALTER TABLE hive.posts MODIFY COLUMN title VARCHAR(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL; 在Python程序中创建数据库连接的时候，指定“utf8mb4”字符集： hivedb = mysql.connector.connect( …... charset = &apos;utf8mb4&apos; ) 至此问题成功解决，表情符号也能保存到数据库中了。","link":"/utf8mb4/"},{"title":"UtopianJ - Utopian API Java Client","text":"Project InfoThis project is a wrapper of the Utopian APIs in Java. Java Developers can use this tool to call Utopian APIs easily. Technology StackJava 9 LicenseMIT FeaturesList moderators List sponsors Check if a user is a moderator Check if a user is a supervisor Check if a user is a sponsor Get all posts satisfying given criteria Get a particular post information Check Utopian bot stats Check if Utopian bot is voting TestAll provided methods are tested with JUnit test cases: https://github.com/aa-feng/utopianj/blob/master/src/test/java/io/utopian/UtopianJTest.java How to use it?This project is managed by Maven. After git clone this project to your PC, assuming you have installed Maven, then: Install this project to your local Maven repository1mvn install Use this projectAdd this project in your project’s pom.xml, e.g.: 12345&lt;dependency&gt; &lt;groupId&gt;com.aafeng&lt;/groupId&gt; &lt;artifactId&gt;utopianj&lt;/artifactId&gt; &lt;version&gt;0.1&lt;/version&gt;&lt;/dependency&gt; Then, you can use it in Java: 1234567891011121314151617import com.aafeng.UtopianJ;UtopianJ.getModerators();UtopianJ.isModerator(\"espoem\");UtopianJ.isSupervisor(\"espoem\");UtopianJ.getSponsors();UtopianJ.isSponsor(\"espoem\");MultivaluedMap&lt;String,String&gt; params = new MultivaluedHashMap&lt;String,String&gt;();params.add(\"limit\",\"1\");JSONObject posts = UtopianJ.getPosts(params);UtopianJ.getPost(\"espoem\",\"sidebar-in-the-post-jumps-to-the-top-of-the-page\");UtopianJ.getStats();UtopianJ.isVoting(); RoadmapThe following features will be added: More information about moderators, e.g. payouts Information about Utopian categories Add relevant Java class, e.g. Moderator, Category, Post, to make this tool more Developer friendly How to contributeGithub: https://github.com/aa-feng/utopianj Just fork this project, create your feature branch, and send a pull request.","link":"/utopianj-utopian-api-java-client/"},{"title":"素食餐厅体验","text":"最近朋友的一家纯素食餐厅开业，正好去品尝了一下，他家菜的味道完全出乎了我的想象，大大改观了我对素食餐厅的看法。 原来也曾经和同事们去素食餐厅吃过饭，当时的感觉就是，在吃Starter的时候感觉还很好，但越吃越觉得吃不下去了，也可能是因为我没有点好主菜，几次尝试的主菜都感觉寡淡无味。对素食餐厅的印象一直就是觉得非常鸡肋：感觉应该多去素食，但又提不起太大的兴趣。 但这次可能是朋友餐厅中的大厨是专门做素食的。所有素菜做的可谓是色，香，味都无可挑剔，同时摆盘精致，给众多食客全方位的享受。用香菇做的牛肉丝不仅外观像，口感也非常类似，用豆腐皮做的素鸭居然能吃出鸭肉的纹理和咬劲，也不知用什么食材做的“羊肉串”闭着眼居然吃不出有什么不像羊肉的地方。就连一向无肉不欢的儿子都大呼好吃。 其实也曾经尝试过一段时间素食，初始时感觉有些奇怪，因为很多鱼类，肉类一下子不能碰了。但一旦习惯后也不觉得有什么。可是很遗憾的是没能坚持下来。毕竟家中有小孩，要兼顾他们的营养。而每餐都做荤素两份的话不太现实，就又改了回来。 在国外的朋友和同事们有很多素食者。他们也分为不太严格的素食者(Vegetarian)和彻底的纯素食者(Vegan)。前者主要是不吃动物的肉，但可以喝奶，吃鸡蛋等。后者就非常的彻底了。所有和动物沾边的食物都不能碰，比如：牛奶，鸡蛋，蜂蜜等。 选择素食的原因也不尽相同。首先是因为宗教信仰。有的人信仰佛教，自然就不会吃肉，甚至葱，姜，蒜等“小五荤”都不会碰。还有的人觉得吃肉的话对动物太过残忍而选择素食。 无论如何，多吃些素是没有任何坏处的。看来今后可以探索更多的素食餐厅了。","link":"/vegan/"},{"title":"期待Voice这个平台","text":"“而Voice这个平台，获得奖励的是用户，而不是平台。” 期待BM的Voice，到时会给Steemit造成什么冲击呢？","link":"/voice-ryu20jb5/"},{"title":"Vue配置时的一个坑及解决","text":"在VM中创建了一个Vue的项目，然后运行： npm run dev 系统提示已经成功运行在8080端口，但是从Host的浏览器访问，总是提示无法访问。 检查了VirtualBox中的Port forwarding，也没有问题。 尝试了各种可能后终于找到解决办法了。需要更新文件： build/webpack.dev.conf.js， 将其中的 host: HOST || config.dev.host 替换为： host: 0.0.0.0 再重新启动APP，问题解决！","link":"/vue/"},{"title":"美食作家忠粉","text":"最近成了美食作家王刚的忠粉。自从前一段时间第一次按照他的教程成功制作了烧茄子之后，就一发不可收拾，几乎所有的菜都尽量按照他的教程来做。目前屡试不爽，还没有失败的记录。 先来晒晒最近烧过的菜： 总结一下，问什么我这个本来对做饭不是很感兴趣的人竟然成了王刚的忠粉： 首先，是王刚的视频都非常短小，一般都是两分钟左右。但在这两分钟之内，能够把每个菜的关键步骤都讲的很清楚。 其次，可操作性很强。由于每个步骤讲的都非常清楚，比如：放的调料准确的量是多少讲的非常精确。 同时，其成功率非常高。只要照着他给出的步骤做，失败率极低。目前，我做的菜还没有失败过的。 当然，缺点就是几乎所有的菜都要求”宽油“，这样吃下去，估计全家人都会变胖。。。","link":"/wanggang-fans/"},{"title":"Web Accessibility的重要性","text":"其实以前在做项目的时候或多或少的接触了一些Web Accessibility（Web无障碍访问）的标准，但并没有留意其重要性。最近在一个项目中才真正意识到了在一个Web项目中，Accessibility是如此重要。如果不符合Web Accessibility的标准，可能会对有些用户造成极大的不便。 图源：w3.org 事情起源是这样的：按照用户要求，实现了一个对用户数据的统计功能，并以在Web页面中以饼图，柱状图等图形化的方式展示统计好的数据。在实现了该功能以后，发给了客户寻求反馈意见。结果用户的意见是：“我根本看不清你做的柱状图，能否调整配色方案？”。嗯，这是怎么回事？在我这里明明是很清楚的啊？于是要求客户发了一个截屏过来，和我在本机看到的是一样啊。突然意识到了，每个人的视力，对颜色的敏感度都不一样。在我这里很清楚，并不代表在别人眼中看到的也很清楚啊！于是按照相应的标准更改了配色，客户终于满意了。 记得互联网的发明人Tim Berners-Lee曾经说过一句很经典的话： The power of the Web is in its universality. Access by everyone regardless of disability is an essential aspect. 简单翻译一下：Web的力量在于其普遍性。其基本要素在于：每个人无论残疾与否都能够访问它。 再来看看Web Accessibility的官方定义： Web Accessibility（Web无障碍访问）旨在使得行动不便或者残障人士能够使用Web，即可以在Web上获取信息、理解信息、查找信息，以及网络交互。通常情况下，仅仅是确保每个网页的所有内容都有对应的文本（Text）信息，以及所有的交互都可以通过键盘来完成，就可以实现Web的无障碍访问。无障碍访问可以体现在一个单独的规范（例如WAI-ARIA）、指南（例如WCAG），或者某个规范中的一个部分（例如HTML5）。 在设计一个Web应用的时候，应该充分采用适当的设计和编码，使得残疾人或者有各种障碍的人也可以访问该应用。在英国就有近1400万【数据来源】的残疾人士，约为英国总人口的22%。因此，在设计Web应用的时候，绝对不能忽视这么大的一个群体。在美国，可以起诉不遵循Web Accessibility规范的零售商。在欧盟也有相应的规定。 在实现Web Accessibility时，可以参考W3C的Web Content Accessibility Guidelines。在这个Web Accessibilty指南中，有四大基本原则：Perceivable(可感知)，Operable (可操作)，Understandable (可理解)，Robust (健壮性)。其实就是强调对于不同的用户，在不同的终端中，用户可以和Web应用无障碍的交互。 在进行Web Accessibility测试的时候，有很多相关的工具，比如：测试网页配色对比度的。有相应的Screen Reader测试工具/插件。","link":"/web-accessibility/"},{"title":"没有微信的日子会怎样？","text":"这两天英国首相Johnson宣布，将全面禁止华为参与英国的5G网络建设，已经采用的华为设备也需要在2027年前拆除。另外有传言美国可能会禁微信，而英国则有可能跟风。于是很多英国的华人微信群中有一种山雨欲来的感觉。很多群主纷纷讨论备选方案，甚至开始创建Whatsapp和Facebook Messenger组。这里只是假想一下，在未来的日子中，如果没有微信，海外华人的日子会怎样？ 图源：Pixabay 首先，每天早上我会看看朋友圈，了解朋友们的动态。没有了微信，就彻底无法了解朋友们的动态了。早些年没有微信的时候，还经常会和朋友们在电话中聊几句，难道现在要回到使用电话的时代？ 其次，每周都会和父母视频聊天。现在不能用微信了，难道又要回到过去使用国际电话卡的时代。或者重新使用苹果的facetime？ 对于很多人来说，都通过关注一些公共号来获取信息。如果没有微信，只能再回到RSS阅读器？ 对于微信的支付功能，在国外似乎没有太大的用处。毕竟只有个别商家接受微信支付，主流电商目前似乎都还不接受微信支付。所以这点似乎可以忽略。 说到更多的附加功能，像缴费，理财等，在海外的华人似乎就更不需要使用了。因此这些附加功能也可以被忽略。 总结一下，如果没有微信，缺点是似乎很难和家人朋友保持正常联系。但好处是目前很多人在微信上花费的时间太多，如果真没有了微信，似乎能够节约不少时间。 不过话说回来，如果微信真的被封禁了，总还是有办法的，我现在就去找找梯子去，对，回国的梯子。","link":"/wechat-ban-uk/"},{"title":"国外经典儿童读物推荐之 - We&#39;re Going on a Bear Hunt (勇于克服困难)","text":"今天给大家介绍这本有点冒险精神的读物：We’re Going on a Bear Hunt我们要去猎熊。书中讲述了一家人出发去猎熊的故事。它们历经了草地，沼泽，河流，森林，和暴风雪等种种困难，终于见到了熊的时候却是落荒而逃。。。 图源：pixabay.com 在这个故事中最有趣的其实是书中的配图，文字和音乐。比如：We’re going on a bear hunt. We’re going to catch a big one. What a beautiful day! We’re not scared. 一边走一边给自己打气，我们不怕！见到草地的时候会说：Uh-uh! Grass! Long wavy grass. We can’t go over it. We can’t go under it. Oh no! We’ve got to go through it! Swishy swashy! Swishy swashy! Swishy swashy! 书中还有配套的按钮，按下就会有配套的声音，比如在草地这页就会有莎莎莎穿过草地的声音。同时配套音乐非常好听，配套文字也是非常押韵。在这本书中我看到了两点，一是孩子们需要自己面对各种困难并想办法去克服。二是教育孩子有些事情是不能做的，比如真正的猎熊。知道有危险的时候要避开。","link":"/we-re-going-on-a-bear-hunt/"},{"title":"永久性在家办公","text":"最近单位老大做了一个决定，除了那些必须要和客户打交道的同事外，其余人都变成以在家办公为主的模式。而我们这些做IT的，几乎是永久性的在家办公了。当然，如果有事需要面对面沟通或者和客户见面，则需要预订公共办公区。 乍一听，感觉好处似乎很多。比如：能够兼顾工作和家庭，避免浪费在去单位路上的时间等等。但仔细一想，似乎并不全是优点，在家办公也有其缺点。如果彻底转换为在家办公，还是需要做好很多准备的。 首先，就是办公条件的差别。在办公室工作的时候，有着一张超大的办公桌，电脑上连有三台显示器。单位的网速也是超级快的。同时，办公桌上摆满需要的各种文件和资料，可以随手查阅。 在家中的话不太可能摆放那么大的办公桌，显示器的话最多也只能摆下两台。同时也不想把家中布置成办公室那样，摆满各种文件和资料。 其次，就是对人心理的影响。在去办公室的日子里，人的心理上有一个切换。感觉每天早上要去办公室，每天下午下班回到家中。每天在工作/家庭两种环境中不断切换。每天午休的时候我都喜欢出去走走。 而在家中办公的话，感觉一连几个月都在家中，心中增长的是惰性。午饭后从没有出去散步过。。。 还有，就是注意力的问题。在家工作的话，毕竟孩子在家，还有各种信件，邮包的签收等等，在兼顾家庭和工作的时候就难免分心。同时家中的条件较为舒适，各种水果零食非常全，干活的时候只要离开办公桌，可能就会被各种事情分心。 看样子，要想完全切换到在家工作模式，还真的要事先做好方方面面的计划和准备才行啊。","link":"/wfh-permanently/"},{"title":"新冠病毒过后，我们还能回到过去的工作模式吗？","text":"转眼已经在家工作两个月了。似乎已经慢慢习惯了在家办公的方方面面。今天单位开会，老板表达出了一个意思，在家办公至少要到今年年底，至于什么时候返回办公室，目前不清楚不知道。这不禁让我想到，等到新冠病毒彻底被控制了，我们还能像原来一样回到办公室上班吗？会有什么不一样吗？ 图源：Pixabay 经过这一段时间的适应，很多人都觉得在家办公似乎没有想象中的那么糟糕，虽然整体而言不如在办公室的时候更有组织，更有条理，但似乎大家都适应的不错，该做的工作都做了。同时很多单位都在思考，一旦疫情结束了，还有必要租那么昂贵的办公室吗？把这笔费用省下来，可以投入到其他方面，对公司而言整体上是更划算的。 而且，通过这一段时间的在家办公，大家也开始反思过去的一些工作习惯是否合理？会议是否安排的过多，同时也过长？由于现在有了社交距离，只能通过一些即时通讯软件进行沟通。而在使用这些软件时，并不能像面对面沟通那样期待对方的及时反馈。如果需要集中精力工作，只需要暂时不去看那些软件就可以了。 就我个人而言，整体感觉如果孩子们能够回到学校上学，那么在家办公的效率更高。因为在同一个办公室里，虽然更方便彼此之间的沟通，但也难免彼此之间互相干扰。如果独自在家办公，在需要沟通时通过Slack，Zoom之类的通讯软件进行沟通。在不需要交流的时候，自己可以精力更加集中，更加出活。 在疫情真正结束后，目前没人能想象出会以什么形式工作。但有一点可以肯定，这样疫情将会彻底改变人们的工作模式。","link":"/wfh/"},{"title":"新春的雪","text":"没有赶上White Xmas, 却在中国新年下雪了。不是说全球变暖吗？","link":"/wherein-1549102010315/"},{"title":"今天被《流浪地球》这...","text":"今天被《流浪地球》这部电影刷屏，本来就是刘慈欣的书迷，期待早日能够看到这部电影。","link":"/wherein-1549625204351/"},{"title":"春日","text":"","link":"/wherein-1551280421941/"},{"title":"攀岩体验中","text":"攀岩体验中","link":"/wherein-1551545357643/"},{"title":"Winauth - Authenticator on Windows","text":"WinauthAuthenticator on Windows Screenshots Hunter’s commentWinAuth is a portable open source Authenticator for Windows users. It can provide time-based authenticators, e.g. Google Authenticator. WinAuth can be used in any sites supporting Google Authenticator, e.g. Bittrex, Coinbase, Kraken etc. With this great tool, you do not have to get your phone when you login to sites requiring two factor authentication. Linkhttps://github.com/winauth/winauth This is posted on Steemhunt - A place where you can dig products and earn STEEM.View on Steemhunt.com","link":"/winauth-authenticator-on-windows/"},{"title":"约克Winter Wonderland","text":"圣诞季就要到了，约克这里的Winter Wonderland开园了。里面好玩的东西不少，除了旋转木马，小火车，钓鸭子，见圣诞老人等活动外，这里还有滑冰场。玩累了可以买杯这里只有圣诞期间才有的特色饮品Mulled Wine来暖暖胃。 这个滑冰场一年中只有圣诞期间开放近一个月左右的时间，今天约了朋友来这里一起滑冰。 为了照顾不会滑的小朋友们，这里特意提供了小雪人和小企鹅，小朋友们可以扶着在冰上滑，就不会摔倒了。我家儿子以前只滑过不到三次，但扶着小雪人已经滑的非常快了。","link":"/winter-wonderland/"},{"title":"伦敦西区音乐剧之旅","text":"作为英国的文化之都，伦敦西区是和纽约百老汇齐名的世界级看剧圣地。每天在伦敦西区上演的经典舞台剧可以说是数不胜数：《歌剧魅影》，《悲惨世界》，《狮子王》，《猫》，《妈妈咪呀》等等。 今天开启伦敦西区看剧之旅。 首场选择的是《阿拉丁》","link":"/wqbv96mv/"},{"title":"如何在命令行测试XSLT","text":"在工作中大量使用XSLT进行各种文档的转换。但其调试过程还是比较麻烦的。这里分享一个很好用的命令行工具，可以进行XSLT的调试。以下环境是针对Ubuntu 18.04 LTS的。 安装 sudo apt-get install xalan 检查xalan的版本号： xalan -v 下面来做一个简单的测试。首先创建一个简单的XML文件text.xml： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;students&gt; &lt;student&gt; &lt;id&gt;91001&lt;/id&gt; &lt;name&gt;Jim&lt;/name&gt; &lt;/student&gt; &lt;student&gt; &lt;id&gt;91002&lt;/id&gt; &lt;name&gt;Julie&lt;/name&gt; &lt;/student&gt; &lt;student&gt; &lt;id&gt;91003&lt;/id&gt; &lt;name&gt;Stuart&lt;/name&gt; &lt;/student&gt; &lt;/students&gt; 创建测试的XSLT文件：test.xsl: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt; &lt;xsl:template match=&quot;/&quot;&gt; &lt;html&gt; &lt;body&gt; &lt;h2&gt;Students&lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr bgcolor=&quot;#9acd32&quot;&gt; &lt;th style=&quot;text-align:left&quot;&gt;ID&lt;/th&gt; &lt;th style=&quot;text-align:left&quot;&gt;Name&lt;/th&gt; &lt;/tr&gt; &lt;xsl:for-each select=&quot;students/student&quot;&gt; &lt;tr&gt; &lt;td&gt;&lt;xsl:value-of select=&quot;id&quot;/&gt;&lt;/td&gt; &lt;td&gt;&lt;xsl:value-of select=&quot;name&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/xsl:for-each&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; &lt;/xsl:template&gt; &lt;/xsl:stylesheet&gt; 在命令行运行： xalan -in test.xml -xsl test.xsl -out out.html 可以看到生成的HTML文件： &lt;html&gt; &lt;body&gt; &lt;h2&gt;Students&lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr bgcolor=&quot;#9acd32&quot;&gt; &lt;th style=&quot;text-align:left&quot;&gt;ID&lt;/th&gt;&lt;th style=&quot;text-align:left&quot;&gt;Name&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;91001&lt;/td&gt;&lt;td&gt;Jim&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;91002&lt;/td&gt;&lt;td&gt;Julie&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;91003&lt;/td&gt;&lt;td&gt;Stuart&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; 其实xalan命令行工具还有很多好用的选项。比如运行如下参数： xalan -in test.xml -xsl test.xsl -out out.html -tg 这样就能看到解析过程中每一个具体步骤： 如果想要查看在解析过程中被调用的每一个模板，使用参数tt: xslt xalan -in test.xml -xsl test.xsl -out out.html -tt 如果想要监测在解析过程中对每一个XML元素的选取： xalan -in test.xml -xsl test.xsl -out out.html -ts 其输出类似于：","link":"/xalan-cli/"},{"title":"双彩虹","text":"据说看到双彩虹会给人带来好运，希望把好运带给大家。","link":"/xgqxcs7u/"},{"title":"放风 - 冷清的圣诞集市","text":"算算已经好长时间没有带孩子出门了。听朋友说小城中心的灯光布置的非常漂亮，圣诞集市也开了，很有圣诞感觉。于是决定带孩子们去看看。 其实做这个决定的时候也有些犹豫。后来想了想，圣诞灯光/集市是户外的，而且目前的人流远不如往年那么拥挤，如果带好口罩，注意防护，应该还行吧。毕竟长时间憋在家中，人都会憋坏的。 路过了几家酒店，和往年热闹的气氛相比，这些酒店门口都没有看到任何客人。甚至有的酒店大厅都黑着灯。今年的疫情给了旅游行业重创，希望这些酒店能够撑住这个行业的严冬。。。 市中心最热闹的就那么几条步行街，很自然的就走到了圣诞集市。圣诞集市的摊贩似乎没有太大变化，卖食品，尤其是各种甜食的都还在，卖装饰品，家居用品的等等都还在。但那些卖新鲜肉的，鱼类的摊贩都没有了，可能是疫情导致的吧。 往年的圣诞集市可以说是熙熙攘攘，人挨着人，有的摊位前挤满了人，要想近前得话只能排队等。但今年的圣诞集市可以说是太冷清了。很多摊位前都没有人。极个别摊位前会有一两个人。我真的担心这些摊主们还能支撑下去吗？ 在街边有好几家贩卖圣诞食物的摊位，主要就是各种饮品，包括Mulled Wine。往年我都会买上一杯，但今年想想还是算了吧。这边另外一种冬季特有的美食就是烤栗子。哎，也算了吧。 市中心唯一热闹的地方就是这个旋转木马。可以看到排队的人群都保持着社交距离，木马之间的距离应该也是安全的。同时每批人结束后，摊主都会进行消毒。从孩子们的眼神中能看到他们的渴望。但我还是说，这个还是算了吧，等疫情过去，再补回来。 尽管多了很多限制，但孩子们玩的还是非常开心的。毕竟对于他们而言，只要能出门，就已经很不错了。","link":"/xmas-market/"},{"title":"约克郡航空博物馆","text":"今天和朋友家一起参观了一个很有特色的博物馆：The Yorkshire Air Museum约克郡航空博物馆。感觉这家博物馆非常适合对飞机感兴趣的朋友。 这家博物馆在二战期间曾经是英国皇家空军的轰炸机司令部。在军队弃用后成为了一家空军博物馆，用来纪念二战期间的英国皇家空军及其盟军。 博物馆中不仅展示英国空军的各种战斗机，轰炸机，运输机，各种炸弹，同时还展示了空军司令部是如何运作的。其中的部分飞机仍然在服役。 Yorkshire Air Museum入口处。 轰炸机上配备的炸弹： 空军轰炸中心的兵营： 军用运输机： 半吨重的炸弹： 英国皇家空军颗服役过的原子弹，于1998年退役。 发动机： 战斗轰炸机： 重型轰炸机： 顽皮的飞行员把美人鱼画在飞机外壳上： 这架应该是隐形战斗机： 大型运输机： 幻影3战斗机：","link":"/yorkshire-air-museum/"},{"title":"经过了种种教训，我终于彻底相信了，一分价钱一分货","text":"最近在家中的扩建工程中遇到了一件闹心事，整个工程的建筑设计师似乎不太靠谱。让我们对他设计的房屋受力不是很放心。还好有个朋友是个专业的工程师，让朋友帮助把关了一下才把心放了下来。 其实这位建筑师也是朋友推荐的，只不过是其中报价最便宜的一位。和别的建筑师相比，选择这位建筑师能省大约几百英镑，因此就选择了他。但在工程的推进过程中，不仅负责施工的工头发现了设计图纸中的问题，就连我这个外行也看出了一些欠妥之处。比如：把非承重墙画成了承重墙。在搭建钢梁的位置并没有把额外的支柱画出来。让我们越来越担心他的计算是否正确。让我甚至萌生了再找一个建筑师彻底重新计算的冲动。好在工头非常有经验，一眼就指出了欠妥之处。另外经过朋友的把关，最终的受力计算终于没有问题了。 另外一个教训就是家中的冰箱。最早用的是一款三星的冰箱，当时选择的是在同等配置中价位相对较高的一款。但用了五年之后的一天，突然停止工作了。在购买新冰箱的时候就在想，既然多花钱买到的冰箱照样会出问题，那么还不如省些钱，买一个中低档的冰箱吧。于是就选择了一个在英国非常常见的品牌，但价位偏低的冰箱。但事实证明，真的是一分价钱一分货。冰箱从未出现过大问题，但底层储物壳中会时不时的积水。 中国有句古话：一分价钱一分货。英国这里也有类似的话：You get what you paid。在有了几次不愉快的经历后，我彻底相信了，也慢慢养成了一个习惯，无论买什么实体产品，都不买最便宜的那个。 其实这些古话的背后还是很有道理的。去除了欺诈因素，不同厂家在做同样的产品时，如果每一个步骤都精益求精，追求极致，其各个方面的人力，物力成本必然会提升，导致其价格不可能会太低。 在一些服务行业也是类似的。如果顾客拼命把价格压低，羊毛毕竟是出在羊身上的。服务的提供者肯定会在各个方面削减开支，最终导致的结果就是服务质量的降低。","link":"/you-get-what-you-paid/"},{"title":"让我无比羡慕的国内超市","text":"我的故乡在北方的一个小城。自从十几年前出国后，几乎每年都回国看望父母和亲友。近几年来越来越感受到祖国的强大和经济的繁荣。这次回国在一个超市中购物，看到各种丰富的蔬菜，水果，奶制品和熟食，再联想到几天后回到英国那让人无比发愁的午饭，心中真的是羡慕无比。想想超市中那些现做的肉夹馍，馅饼，饺子，包子，凉皮等等各种美食，有时候真的希望有一个时光通道。。。","link":"/yrfpk/"},{"title":"国外经典儿童图书推荐之 - Za-Za&#39;s Baby Brother（懂得等待和分享）","text":"自从国内二胎政策放开后，不仅很多家长面临是否要二宝的问题，而且很多小朋友也在想：我还想要一个小弟弟或妹妹吗？今天推荐的这本书就是讲述的这样一个故事。让我们来看看这只小斑马的心路历程吧。 图源：pixabay.com Zaza的妈妈又怀孕了。因为妈妈的肚子很大，所以都没有办法抱Zaza了。很快爸爸就开车带着妈妈就去医院生小baby了，小Baby出生后，很多亲戚都来看望小Baby，夸小Baby可爱，漂亮。而Zaza只能在旁边独自玩耍。而爸爸妈妈也变得更忙碌了，当Zaza想让爸爸妈妈陪它玩时，爸爸妈妈只能充满歉意的让它再等一会儿，因为他们要照顾小Baby。只有等小Baby睡觉了，爸爸妈妈才能给Zaza讲故事。这个略感无奈的故事告诉小朋友们要懂得等待和分享，不仅要分享自己的玩具，还要分享爸爸妈妈的时间。","link":"/za-za-s-baby-brother/"},{"title":"哥本哈根步行街","text":"哥本哈根最著名的步行街位于市中心，一端连接市政厅广场，另一端通向丹麦皇宫。 首先偶遇了这里的特色街边小吃， 油炸杏仁。 不得不说， 现炸出来的香甜可口， 卖杏仁的小哥也超级帅！我们买的这一小袋很快被抢光了。 丹麦这里做的各种点心非常好吃，导致我们在酒店的早餐经常会吃多。 途经吉尼斯世界记录博物馆。 街头行为艺术表演 在步行街走累了，就在街边的Wok吃的面，他家既有汤面也有炒面， 吃的还很舒服。 儿子坚持要吃饺子， 结果是油炸的。。。 在哥本哈根的这几天，几乎天天都在这条步行街上暴走，几乎每天步行都是1万步以上。。。","link":"/zkrwx/"},{"title":"最近开始读《三体》这本书，竟然发现书中所说和我许多年来的疑问和困惑竟然不谋而合","text":"早就听说这本书的大名了，但一直没有机会拜读。最近很偶然的一个机会，朋友推荐这本书，于是借了回来。一旦开始，就感觉停不下来了。虽然只读了十几页，但里面提到的问题一直是我一直在想却得不到答案的。先说一说书里提到的两个假说： “射手”假说：有一名神枪手，在一个靶子上每隔十厘米打一个洞。设想这个靶子的平面上生活着一种二维智能生物，它们中的科学家在对自己的宇宙进行观察后，发现了一个伟大的定律： “宇宙每隔十厘米，必然会有一个洞。”它们把这个神枪手一时兴起的随意行为，看成了自己宇宙中的铁律。 “农场主假说”则有一层令人不安的恐怖色彩：一个农场里有一一群火鸡，农场主每天中午十一点来给它们喂食。火鸡中的一名科学家观察这个现象，一直观察了近一年都没有例外，于是它也发现了自己宇宙中的伟大定律：“每天上午十一点，就有食物降临。”它在感恩节早晨向火鸡们公布了这个定律，但这天上午十一点食物没有降临，农场主进来把它们都捉去杀了。 这两个假设说的其实就是人类社会中普适的物理定律的时间和空间的不对等性。其实，也许地球的一切都只是偶然，秩序都是漫长宇宙中的一小段偶然现象而已，这种偶然会突然被打破，那些像农场主和射手一样的高等生物有一天会结束这种秩序，可能是几千几百年后，也可能，就是明天。 我不是无神论者，但也不确认是否有宗教中的神灵存在。但我一直相信有一个TA在默默关注着这个世界，也许就是射手或农场主吧。也许人类社会太渺小了，TA根本就不在乎。。。期待这本书中的故事。。","link":"/zribs/"},{"title":"小人书","text":"最近孩子们参加了一个网课，在网课中听到了很多中国传统文化故事，其中就包括了西游记中的部分情节。不得不说，老师讲的太生动了，有时候我在旁边跟着都听的入了神。比如，在讲悟空和黄风怪斗法的时候，黄风怪口吐黄风，悟空想要顶住，给自己打气，我顶，我顶，我顶不住了，逗得孩子们哈哈大笑，同时这个故事情节也深深的印在了他们的脑海中了。 可能是老师讲的太好了，孩子们对整个西游记的故事产生了浓厚的兴趣。正好家中有一套《西游记》的小人书，于是最近每晚的睡前故事就成了《西游记》。 其实这套《西游记》的小人书是两三年前回国时爷爷送给他们的，当时不远万里搬运会英国。也曾经试着给他们讲过书中的故事，但可能是因为他们从没听过其中的故事吧，对这套书并没有太大的兴趣。讲了几个故事后就不了了之了。 这次趁着他们对《西游记》感兴趣，我正好可以趁热打铁，把整套故事讲给他们听。目前已经给他们讲了快1/3的故事了，两个小朋友仍然兴趣非常浓。看样子这次把整套书都给他们讲一遍应该没有问题了。 在给孩子们讲故事的同时，我自己又把《西游记》重温了一遍。迂腐的唐僧，机智的悟空，呆萌的八戒，憨厚的沙僧，这些从小就陪伴我的角色再一次变得鲜活了起来。 其实我的童年时代就是在《西游记》，《三国演义》，《水浒》等等众多小人书的陪伴中度过的。记得当时只要父母带着出门，必定要去书店买上几本小人书的。回家后就会迫不及待的翻看新买的图书。 就这样日积月累，也记不清读了多少本小人书。记得上高中的时候收拾家中的书籍，我的小人书就放满了好几个纸箱。当时处理掉的时候还有些恋恋不舍。 我家两个娃由于从小在英国长大，从小接触的基本都是西方的经典儿童读物，手绘本。现在感觉还是非常有必要给他们灌输一些中国传统文化了。下次回国应该再给他们买一些优秀的小人书了。","link":"/xiyouji/"},{"title":"安装并使用zsh","text":"最近开始使用zsh，感觉比Linux系统默认的bash要好用太多了，尤其对于经常使用git的各位程序猿来说，提供了很多额外的提示，比如，当前的branch，是否有未提交更改，以及各种快捷命令等等。强烈推荐！下面把安装步骤介绍一下： 首先运行以下命令安装zsh： sudo apt-get install zsh sudo usermod -s /bin/zsh $(whoami) 退出并重新登录后会看到如下提示： 我这里选择输入“2”，让系统自动生成zsh配置文件。 zsh有很多有用的插件，这里推荐“Oh-My-ZSH”这个插件，运行如下命令进行安装： sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot; 安装成功后会有如下提示： 安装结束后可以修改 .zshrc 来更改主题，各种插件，以及各种配置。 下面介绍几个针对git增强的功能： 首先，但你进入一个处于 git 管理的目录时，系统提示符会变为： 上面的 “web” 是当前目录；“master” 是当前 git 的分支；“✗” 代表当前目录下有未提交的更改。是不是非常的一目了然？ 输入 alias 会看到 “Oh-My-ZSH” 添加了很多命令的别名： gsr=&apos;git svn rebase&apos; gss=&apos;git status -s&apos; gst=&apos;git status&apos; gsta=&apos;git stash save&apos; gstaa=&apos;git stash apply&apos; gstall=&apos;git stash --all&apos; gstc=&apos;git stash clear&apos; gstd=&apos;git stash drop&apos; gstl=&apos;git stash list&apos; gstp=&apos;git stash pop&apos; gsts=&apos;git stash show --text&apos; gstu=&apos;git stash --include-untracked&apos; gsu=&apos;git submodule update&apos; gsw=&apos;git switch&apos; gswc=&apos;git switch -c&apos; gtl=&apos;gtl(){ git tag --sort=-v:refname -n -l &quot;${1}*&quot; }; noglob gtl&apos; ...... 用习惯后能节省不少时间。自从开始使用 zsh + “Oh-My-ZSH”感觉越用越顺手，再也无法回到过去的bash了。再次强烈推荐！","link":"/zsh/"},{"title":"户外活动 - Tree Trail","text":"孩子学校老师给发了一封邮件，推荐一个户外活动：Tree Trail。其实就是给了一份地图，在地图上标注了将近30课树，每颗树的名字和介绍也都给提供好了。孩子们的任务就是按照地图去找到每一颗树。 这种活动可以说是好处非常多的。 首先，鼓励孩子们多去户外活动。在当前疫情下，很多孩子都被迫宅在家中，整天面对电脑，平板，手机。这就让我非常担心他们的视力会受到影响。何况，孩子们的天性就爱玩，让他们多亲近自然，肯定是好的。 其次，在整个活动中，孩子们通过类似游戏的方式，可以学习很多树木的知识。这是在课本中学不到的。 还有，这也是一个非常不错的亲子活动和团队活动。一家人一同出去，为了共同的目标，彼此配合，可以增进彼此间的感情和默契。 尽管现在是冬天，有些树的叶子都掉光了。估计这个活动在夏天去更为合适。但仍然决定要带孩子们出去透透气，于是，出发！ 小心，刺猬出没！ 整个一圈走下来，将近两个多小时，这让我在微信运动朋友圈中难得的登上了榜首，回家后感觉浑身好舒畅！","link":"/tree-trail/"}],"tags":[{"name":"疫情","slug":"疫情","link":"/tags/%E7%96%AB%E6%83%85/"},{"name":"德国","slug":"德国","link":"/tags/%E5%BE%B7%E5%9B%BD/"},{"name":"汉堡","slug":"汉堡","link":"/tags/%E6%B1%89%E5%A0%A1/"},{"name":"成都","slug":"成都","link":"/tags/%E6%88%90%E9%83%BD/"},{"name":"巴黎","slug":"巴黎","link":"/tags/%E5%B7%B4%E9%BB%8E/"},{"name":"加密货币","slug":"加密货币","link":"/tags/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81/"},{"name":"中餐","slug":"中餐","link":"/tags/%E4%B8%AD%E9%A4%90/"},{"name":"法国","slug":"法国","link":"/tags/%E6%B3%95%E5%9B%BD/"},{"name":"英国教育","slug":"英国教育","link":"/tags/%E8%8B%B1%E5%9B%BD%E6%95%99%E8%82%B2/"},{"name":"英国文化","slug":"英国文化","link":"/tags/%E8%8B%B1%E5%9B%BD%E6%96%87%E5%8C%96/"},{"name":"丹麦","slug":"丹麦","link":"/tags/%E4%B8%B9%E9%BA%A6/"},{"name":"圣诞节","slug":"圣诞节","link":"/tags/%E5%9C%A3%E8%AF%9E%E8%8A%82/"},{"name":"签证","slug":"签证","link":"/tags/%E7%AD%BE%E8%AF%81/"},{"name":"科学","slug":"科学","link":"/tags/%E7%A7%91%E5%AD%A6/"},{"name":"乒乓球","slug":"乒乓球","link":"/tags/%E4%B9%92%E4%B9%93%E7%90%83/"},{"name":"约克","slug":"约克","link":"/tags/%E7%BA%A6%E5%85%8B/"},{"name":"北京","slug":"北京","link":"/tags/%E5%8C%97%E4%BA%AC/"},{"name":"曼彻斯特","slug":"曼彻斯特","link":"/tags/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9/"},{"name":"剑桥","slug":"剑桥","link":"/tags/%E5%89%91%E6%A1%A5/"},{"name":"读书","slug":"读书","link":"/tags/%E8%AF%BB%E4%B9%A6/"},{"name":"在家办公","slug":"在家办公","link":"/tags/%E5%9C%A8%E5%AE%B6%E5%8A%9E%E5%85%AC/"},{"name":"钢琴","slug":"钢琴","link":"/tags/%E9%92%A2%E7%90%B4/"},{"name":"生日","slug":"生日","link":"/tags/%E7%94%9F%E6%97%A5/"},{"name":"动物","slug":"动物","link":"/tags/%E5%8A%A8%E7%89%A9/"},{"name":"Durham","slug":"Durham","link":"/tags/Durham/"},{"name":"绘本","slug":"绘本","link":"/tags/%E7%BB%98%E6%9C%AC/"},{"name":"Steem","slug":"Steem","link":"/tags/Steem/"},{"name":"Likecoin","slug":"Likecoin","link":"/tags/Likecoin/"},{"name":"户外","slug":"户外","link":"/tags/%E6%88%B7%E5%A4%96/"},{"name":"在家工作","slug":"在家工作","link":"/tags/%E5%9C%A8%E5%AE%B6%E5%B7%A5%E4%BD%9C/"},{"name":"Utopian","slug":"Utopian","link":"/tags/Utopian/"},{"name":"中秋","slug":"中秋","link":"/tags/%E4%B8%AD%E7%A7%8B/"},{"name":"希腊","slug":"希腊","link":"/tags/%E5%B8%8C%E8%85%8A/"},{"name":"爱丁堡","slug":"爱丁堡","link":"/tags/%E7%88%B1%E4%B8%81%E5%A0%A1/"},{"name":"Steemhunt","slug":"Steemhunt","link":"/tags/Steemhunt/"},{"name":"广州","slug":"广州","link":"/tags/%E5%B9%BF%E5%B7%9E/"},{"name":"电影","slug":"电影","link":"/tags/%E7%94%B5%E5%BD%B1/"},{"name":"Hive","slug":"Hive","link":"/tags/Hive/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"DynamoDB","slug":"DynamoDB","link":"/tags/DynamoDB/"},{"name":"烧烤","slug":"烧烤","link":"/tags/%E7%83%A7%E7%83%A4/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Lambda","slug":"Lambda","link":"/tags/Lambda/"},{"name":"生日Party","slug":"生日Party","link":"/tags/%E7%94%9F%E6%97%A5Party/"},{"name":"英国景点","slug":"英国景点","link":"/tags/%E8%8B%B1%E5%9B%BD%E6%99%AF%E7%82%B9/"},{"name":"杭州","slug":"杭州","link":"/tags/%E6%9D%AD%E5%B7%9E/"},{"name":"Chester","slug":"Chester","link":"/tags/Chester/"},{"name":"威尔士","slug":"威尔士","link":"/tags/%E5%A8%81%E5%B0%94%E5%A3%AB/"},{"name":"软件工具","slug":"软件工具","link":"/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"看剧","slug":"看剧","link":"/tags/%E7%9C%8B%E5%89%A7/"},{"name":"DIY","slug":"DIY","link":"/tags/DIY/"},{"name":"活动","slug":"活动","link":"/tags/%E6%B4%BB%E5%8A%A8/"},{"name":"少儿编程","slug":"少儿编程","link":"/tags/%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8B/"},{"name":"开发工具","slug":"开发工具","link":"/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"Telegram","slug":"Telegram","link":"/tags/Telegram/"},{"name":"怀特岛","slug":"怀特岛","link":"/tags/%E6%80%80%E7%89%B9%E5%B2%9B/"},{"name":"Lanzarote","slug":"Lanzarote","link":"/tags/Lanzarote/"},{"name":"运动","slug":"运动","link":"/tags/%E8%BF%90%E5%8A%A8/"},{"name":"ELK","slug":"ELK","link":"/tags/ELK/"},{"name":"Google","slug":"Google","link":"/tags/Google/"},{"name":"localstack","slug":"localstack","link":"/tags/localstack/"},{"name":"Ruby","slug":"Ruby","link":"/tags/Ruby/"},{"name":"西班牙","slug":"西班牙","link":"/tags/%E8%A5%BF%E7%8F%AD%E7%89%99/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Vue.js","slug":"Vue-js","link":"/tags/Vue-js/"},{"name":"音乐剧","slug":"音乐剧","link":"/tags/%E9%9F%B3%E4%B9%90%E5%89%A7/"},{"name":"React.js","slug":"React-js","link":"/tags/React-js/"},{"name":"Chart.js","slug":"Chart-js","link":"/tags/Chart-js/"},{"name":"智能家居","slug":"智能家居","link":"/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"},{"name":"塞尔维亚","slug":"塞尔维亚","link":"/tags/%E5%A1%9E%E5%B0%94%E7%BB%B4%E4%BA%9A/"},{"name":"Scarborough","slug":"Scarborough","link":"/tags/Scarborough/"},{"name":"Heroku","slug":"Heroku","link":"/tags/Heroku/"},{"name":"Streamlit","slug":"Streamlit","link":"/tags/Streamlit/"},{"name":"英格兰","slug":"英格兰","link":"/tags/%E8%8B%B1%E6%A0%BC%E5%85%B0/"},{"name":"餐厅","slug":"餐厅","link":"/tags/%E9%A4%90%E5%8E%85/"},{"name":"ThinkPad","slug":"ThinkPad","link":"/tags/ThinkPad/"},{"name":"伦敦","slug":"伦敦","link":"/tags/%E4%BC%A6%E6%95%A6/"}],"categories":[{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"},{"name":"游记","slug":"游记","link":"/categories/%E6%B8%B8%E8%AE%B0/"},{"name":"美食","slug":"美食","link":"/categories/%E7%BE%8E%E9%A3%9F/"},{"name":"区块链","slug":"区块链","link":"/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"name":"育儿","slug":"育儿","link":"/categories/%E8%82%B2%E5%84%BF/"},{"name":"运动","slug":"运动","link":"/categories/%E8%BF%90%E5%8A%A8/"},{"name":"阅读","slug":"阅读","link":"/categories/%E9%98%85%E8%AF%BB/"},{"name":"工作","slug":"工作","link":"/categories/%E5%B7%A5%E4%BD%9C/"},{"name":"娱乐","slug":"娱乐","link":"/categories/%E5%A8%B1%E4%B9%90/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"思考","slug":"思考","link":"/categories/%E6%80%9D%E8%80%83/"},{"name":"英文教程","slug":"英文教程","link":"/categories/%E8%8B%B1%E6%96%87%E6%95%99%E7%A8%8B/"},{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"}]}