<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aafeng.uk/"/>
  <updated>2020-07-07T08:13:15.519Z</updated>
  <id>https://www.aafeng.uk/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>尝试在Google Cloud平台创建免费VM</title>
    <link href="https://www.aafeng.uk/google-cloud-vm/"/>
    <id>https://www.aafeng.uk/google-cloud-vm/</id>
    <published>2020-07-07T08:13:15.519Z</published>
    <updated>2020-07-07T08:13:15.519Z</updated>
    
    <content type="html"><![CDATA[<p>可能是由于和Amzon AWS竞争吧，Google的云服务平台对于新建账户提供价值300美元的账户余额，可以用于Google的各种计算资源。最为吸引我的是在Google云平台上，可以创建配置相对较高的VM，直到你的免费余额用完为止。而且在免费余额用完后，不会自动从你的信用卡扣钱。只有人工确认后才会转为收费账户。下面就在Google云平台创建一个1 vCPU, 3.75GB RAM的VM为例介绍一下整个过程。</p><a id="more"></a><p>首先登录这个页面：<a href="https://console.cloud.google.com/freetrial/signup/tos?pli=1" rel="external nofollow noopener noreferrer" target="_blank">https://console.cloud.google.com/freetrial/signup/tos?pli=1</a></p><p><img src="/images/technology/googlecloud/vm1.jpg" alt></p><p>第二步，输入基本信息：</p><p><img src="/images/technology/googlecloud/vm2.jpg" alt></p><p>只不过需要输入信用卡信息。不过在上一页中说的很清楚：试用期满之后，除非你人工确认想要继续付费，否则不会从信用卡扣钱。</p><p><img src="/images/technology/googlecloud/vm3.jpg" alt></p><p>验证成功后，可以看到用户面板：</p><p><img src="/images/technology/googlecloud/vm4.jpg" alt></p><p>首先进入“Billing”，可以看到，账户余额转换为英镑后为：243英镑，可以在一年内使用。</p><p><img src="/images/technology/googlecloud/vm5.jpg" alt></p><p>接下来创建一个项目：</p><p><img src="/images/technology/googlecloud/vm6.jpg" alt></p><p>访问：<a href="https://console.cloud.google.com/apis/library/compute.googleapis.com" rel="external nofollow noopener noreferrer" target="_blank">https://console.cloud.google.com/apis/library/compute.googleapis.com</a></p><p>单击“ENABLE”来激活”Compute Engine API”。这个操作比较慢，需要等一小会。</p><p>然后访问：<a href="https://console.cloud.google.com/compute/instances" rel="external nofollow noopener noreferrer" target="_blank">https://console.cloud.google.com/compute/instances</a></p><p><img src="/images/technology/googlecloud/vm7.jpg" alt></p><p>首先是要决定选择什么类型的VM，我只想创建一个在给定的免费余额范围内(243英镑，也就是大约每个月20英镑）配置最高的VM。访问这个页面可以计算各种VM的费用：</p><p><a href="https://cloud.google.com/products/calculator" rel="external nofollow noopener noreferrer" target="_blank">https://cloud.google.com/products/calculator</a></p><p>这里我选择Ubuntu, 1 vCPU, 3.75GB RAM，位于伦敦的VM。如果一周7天，一天24小时都在用的话，每月大约25.31英镑。这样，免费提供的243英镑余额可以用9个多月。</p><p><img src="/images/technology/googlecloud/vm8.jpg" alt></p><p>如果把使用时间降低为每天12个小时，费用明显降了下来。这样Google提供的免费余额可以使用1年：</p><p><img src="/images/technology/googlecloud/vm9.jpg" alt></p><p>既然选好了，下面就开始创建VM了。可以看到，还可以选择Docker image来创建自己的VM。</p><p><img src="/images/technology/googlecloud/vm10.jpg" alt></p><p>都选好之后，单击”Create“按钮，就开始创建VM了，整个过程需要等待一小会。</p><p>创建成功了：</p><p><img src="/images/technology/googlecloud/vm11.jpg" alt></p><p>可以在浏览器中打开SSH窗口：</p><p><img src="/images/technology/googlecloud/vm12.jpg" alt></p><p>如果不能sudo，需要在以下页面中添加你的SSH KEY就可以了：</p><p><a href="https://console.cloud.google.com/compute/metadata/sshKeys" rel="external nofollow noopener noreferrer" target="_blank">https://console.cloud.google.com/compute/metadata/sshKeys</a></p><p><img src="/images/technology/googlecloud/vm13.jpg" alt></p><p>至此，VM已经可以使用了。</p>]]></content>
    
    <summary type="html">
    
      尝试在Google Cloud平台创建免费VM
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>扩建工程记录</title>
    <link href="https://www.aafeng.uk/house-extension-log/"/>
    <id>https://www.aafeng.uk/house-extension-log/</id>
    <published>2020-07-06T21:09:33.621Z</published>
    <updated>2020-07-06T21:09:33.621Z</updated>
    
    <content type="html"><![CDATA[<p>最近家中进行扩建，主要是往花园中新建一间房，和现有厨房，客厅打通，连成一体。 下面把整个过程记录一下。</p><a id="more"></a><h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h2><p>房屋扩建从6月8日开始，第一周主要的打了地基，灌浇了混凝土，把影响地基的树墙砍掉了一部分。</p><p>扩建前的样子：<br><img src="/images/life/house-extension/1.jpg" alt></p><p>开始动工了：<br><img src="/images/life/house-extension/2.jpg" alt></p><p>第一周成果：<br><img src="/images/life/house-extension/3.jpg" alt></p><h2 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h2><p>进一步完成地基部分，把管道重新铺了一下：</p><p><img src="/images/life/house-extension/w2-1.jpg" alt></p><p>开始砌砖，准备保暖层：</p><p><img src="/images/life/house-extension/w2-2.jpg" alt></p><p>在地基上铺满石块，整个扩建出来的区域可以确定了：</p><p><img src="/images/life/house-extension/w2-3.jpg" alt></p><h2 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h2><p>应该是在做隔湿层，黑塑料布下面，石块上面的是很厚的一层泡沫塑料。</p><p><img src="/images/life/house-extension/w3-1.jpg" alt></p><p>接下来在泡沫塑料上浇筑了一层混凝土。至此，地面高度已经和现在房子的裸地基一样了。</p><p>同时外墙已经增高了不少，一侧已经需要脚手架才能干活了：</p><p><img src="/images/life/house-extension/w3-2.jpg" alt></p><h2 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h2><p>这周下雨两天，所以只干了三天。主要就是把两边的墙垒高，在两层墙之间假装保暖层。</p><p><img src="/images/life/house-extension/w4.jpg" alt></p><h2 id="第五周"><a href="#第五周" class="headerlink" title="第五周"></a>第五周</h2><p>把门框和窗框上的钢梁架好：</p><p><img src="/images/life/house-extension/w5-1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      扩建工程记录
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>断舍离 - 扭扭车</title>
    <link href="https://www.aafeng.uk/swing-swiggle-car/"/>
    <id>https://www.aafeng.uk/swing-swiggle-car/</id>
    <published>2020-07-06T20:57:51.911Z</published>
    <updated>2020-07-06T20:57:51.911Z</updated>
    
    <content type="html"><![CDATA[<p>今天在收拾车库的时候看到了这辆扭扭车。它已经闲置在车库中有一段时间了。感觉应该给它找个更好的归宿了。</p><p><img src="/images/kids/swing-wiggle-car-1.jpg" alt></p><a id="more"></a><p>说起来这辆扭扭车是家中利用率最高的玩具之一。两个孩子都对它爱不释手。老大玩了两年后，老二接着玩。每当有别人家小朋友来的时候，这辆扭扭车可以说是小朋友们必争的玩具。</p><p>其实就算有些家长，包括我在内也对它很感兴趣。呵呵，当然不是坐着玩，而是对其原理非常感兴趣。整个小车不需要电池，也不需要充电，只需要用手在方向盘那里扭来扭去，小车就会不断前行，真的很佩服其设计的精巧。</p><p>查了一下百度，是这样说的：</p><blockquote><p>扭扭车操作简单，无需动力装置，充分利用了离心力原理和人体运动中的惯性原理，仅靠左右转动方向盘，就可随意前后行驶。</p></blockquote><p>第一次看到扭扭车是在一位朋友家。儿子试玩后一直就想要一辆，但当时在英国并没有看到类似的产品。于是从国内买了一辆，放在行李箱中背了过来。还好一路顺利，并没有受到任何损伤，顺顺利利的到了英国。</p><p>处于好奇，在英国亚马逊上搜了一下，现在居然能够找到类似产品了。看样子扭扭车已经走出国门了😃</p><p><img src="/images/kids/swing-wiggle-car-2.jpg" alt></p><p>但孩子们慢慢长大，现在更喜欢一家人骑车远行，这辆扭扭车就有些受了冷落。但这毕竟是一辆非常好玩的玩具车。希望尽快给它找到一个好的归宿，继续发挥作用。</p>]]></content>
    
    <summary type="html">
    
      断舍离 - 扭扭车
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>经过了种种教训，我终于彻底相信了，一分价钱一分货</title>
    <link href="https://www.aafeng.uk/you-get-what-you-paid/"/>
    <id>https://www.aafeng.uk/you-get-what-you-paid/</id>
    <published>2020-07-04T22:10:33.018Z</published>
    <updated>2020-07-04T22:10:33.018Z</updated>
    
    <content type="html"><![CDATA[<p>最近在家中的扩建工程中遇到了一件闹心事，整个工程的建筑设计师似乎不太靠谱。让我们对他设计的房屋受力不是很放心。还好有个朋友是个专业的工程师，让朋友帮助把关了一下才把心放了下来。</p><p><img src="/images/life/product.jpg" alt></p><a id="more"></a><p>其实这位建筑师也是朋友推荐的，只不过是其中报价最便宜的一位。和别的建筑师相比，选择这位建筑师能省大约几百英镑，因此就选择了他。但在工程的推进过程中，不仅负责施工的工头发现了设计图纸中的问题，就连我这个外行也看出了一些欠妥之处。比如：把非承重墙画成了承重墙。在搭建钢梁的位置并没有把额外的支柱画出来。让我们越来越担心他的计算是否正确。让我甚至萌生了再找一个建筑师彻底重新计算的冲动。好在工头非常有经验，一眼就指出了欠妥之处。另外经过朋友的把关，最终的受力计算终于没有问题了。</p><p>另外一个教训就是家中的冰箱。最早用的是一款三星的冰箱，当时选择的是在同等配置中价位相对较高的一款。但用了五年之后的一天，突然停止工作了。在购买新冰箱的时候就在想，既然多花钱买到的冰箱照样会出问题，那么还不如省些钱，买一个中低档的冰箱吧。于是就选择了一个在英国非常常见的品牌，但价位偏低的冰箱。但事实证明，真的是一分价钱一分货。冰箱从未出现过大问题，但底层储物壳中会时不时的积水。</p><p>中国有句古话：一分价钱一分货。英国这里也有类似的话：You get what you paid。在有了几次不愉快的经历后，我彻底相信了，也慢慢养成了一个习惯，无论买什么实体产品，都不买最便宜的那个。</p><p>其实这些古话的背后还是很有道理的。去除了欺诈因素，不同厂家在做同样的产品时，如果每一个步骤都精益求精，追求极致，其各个方面的人力，物力成本必然会提升，导致其价格不可能会太低。</p><p>在一些服务行业也是类似的。如果顾客拼命把价格压低，羊毛毕竟是出在羊身上的。服务的提供者肯定会在各个方面削减开支，最终导致的结果就是服务质量的降低。</p>]]></content>
    
    <summary type="html">
    
      经过了种种教训，我终于彻底相信了，一分价钱一分货
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>直播带货，自带流量成了CEO的必备技能？</title>
    <link href="https://www.aafeng.uk/broadcast-sale/"/>
    <id>https://www.aafeng.uk/broadcast-sale/</id>
    <published>2020-07-04T20:42:40.263Z</published>
    <updated>2020-07-04T20:42:40.263Z</updated>
    
    <content type="html"><![CDATA[<p>这两年似乎又兴起了一种新的销售模式：直播带货。从而也催生了很多新生代网红：号称“淘宝第一主播”的薇娅，“口红一哥”李佳琦等在去年双十一的销售额竟然能过亿。</p><p><img src="/images/work/media.jpg" alt><br>图源：Pixabay</p><a id="more"></a><p>由于女儿喜欢一个叫做LOL的玩具而看了Youtube上的一些小网红直播各种玩具的拆箱过程。出于好奇心，Google了一下他们的收入，真的很吓人，最火的小网红能拿到近千万美元的年收入。</p><p>今天读了一篇罗永浩的访谈，感觉讲的很好。最早老罗开始直播的时候，周边人似乎都不能理解，似乎觉得不上档次。但现在这种方式被普遍接受，似乎成为了众多CEO的必备技能之一。</p><p>通过超强的表达能力，自带流量，似乎成为众多CEO的核心竞争力。众多CEO纷纷上场，除了老罗之外，格力的董明珠，小米的雷军等纷纷都成了流量王，在直播间玩的不亦乐乎，同时也在享受着直播带来的巨大利润。</p><p>不可否认，现在无论做什么事，都需要人气和流量。而最迎合现代人的快生活节奏的就是短视频。这么说直播带货成为一种标准营销方式就不足为奇了。</p><p>做直播带货的目的其实主要就是卖货，或者做品牌。前面提到的薇娅，李佳琦就是通过自己的超人气流量卖货。对于众多的CEO来说，似乎主要是在做品牌。其实在币圈中，孙老板可以说是营销高手，通过一次次炒作，吸引流量，只不过他带的货，是币罢了。</p><p>其实，对于众多草根创业者，一边干事，一边做UP主，走的也是同一套逻辑。无论做什么事情，都需要营销，让众人知道。</p><p>但不得不说，这种直播真的不是一般人能扛得住的，一般口才好的人，搞个几次也许还行，但要源源不断的找到好的素材，并通过吸引人的方式表述出来，不是一件简单的事，需要背后团队的共同努力才能做到。</p><p>话说回来，在隔壁的S链，有孙老板站台，个人估计在合适的时机肯定会炒一把。那么Hive这里谁来做这件事呢？也许我并不是很了解，感觉排名最靠前的见证人似乎都是技术大牛。似乎缺少一个能讲故事的人。</p>]]></content>
    
    <summary type="html">
    
      直播带货，自带流量成了CEO的必备技能？
    
    </summary>
    
      <category term="工作" scheme="https://www.aafeng.uk/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>如何将Streamlit应用免费部署到Heroku</title>
    <link href="https://www.aafeng.uk/streamlit-to-heroku/"/>
    <id>https://www.aafeng.uk/streamlit-to-heroku/</id>
    <published>2020-07-04T09:30:08.706Z</published>
    <updated>2020-07-04T09:30:08.706Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了Streamlit这数据分析和可视化的利器。 下面说说如何将你的Streamlit应用程序部署到免费的Heroku账号，这样任何人都可以访问你的应用了。</p><p><img src="/images/technology/streamlit/heroku-logo.png" alt></p><a id="more"></a><p>还是以前面介绍的简单程序为例：</p><p>首先创建一个文件夹比如叫做ml，然后进入该文件夹，创建程序文件stats.py，其源码为：</p><pre><code>import streamlit as stimport pandas as pd st.write(&quot;&quot;&quot;## Download statistics### Line chart&quot;&quot;&quot;)# select DATE_FORMAT(date, &apos;%Y-%m-%d&apos;) as d, count(id) as count from posts group by d;dictionary = {&apos;2020-06-25&apos;:34, &apos;2020-06-26&apos;: 39, &apos;2020-06-27&apos;: 40, &apos;2020-06-28&apos;: 40, &apos;2020-06-29&apos;: 42, &apos;2020-06-30&apos;: 36}series = pd.Series(dictionary)st.line_chart(series)st.write(&quot;&quot;&quot;### Bar chart&quot;&quot;&quot;)st.bar_chart(series)</code></pre><p>在当前目录下运行如下命令来安装pipreqs包，并创建依赖库的文件:</p><pre><code>pip install pipreqspipreqs .</code></pre><p>可以看到，在当前目录下生成了requirements.txt，其内容为：</p><pre><code>streamlit==0.58.0pandas==1.0.3</code></pre><p>创建setup.sh:</p><pre><code>mkdir -p ~/.streamlit/echo &quot;\[general]\n\email = \&quot;YOUR_EMAIL_ADDRESS\&quot;\n\&quot; &gt; ~/.streamlit/credentials.tomlecho &quot;\[server]\n\headless = true\n\enableCORS=false\n\port = $PORT\n\&quot; &gt; ~/.streamlit/config.toml    </code></pre><p>创建Procfile：</p><pre><code>web: sh setup.sh &amp;&amp; streamlit run stats.py        </code></pre><p>创建本地git库</p><pre><code>git initgit add --allgit commit -m &quot;init&quot;</code></pre><p>配置并部署到Heroku:</p><pre><code>heroku loginheroku creategit push heroku masterheroku ps:scale web=1</code></pre><p>按照命令行输出的URL就可以访问你的应用了。    </p><p>查看Heroku日志：</p><pre><code>heroku logs --tail</code></pre><p>要想使用自己域名，需要先通过Heroku验证。然后运行：</p><pre><code>heroku domains:add hivecnstats.aafeng.uk</code></pre>]]></content>
    
    <summary type="html">
    
      如何将Streamlit程序免费部署到Heroku
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Heroku" scheme="https://www.aafeng.uk/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>biu biu biu英国经济复苏计划</title>
    <link href="https://www.aafeng.uk/uk-recovery/"/>
    <id>https://www.aafeng.uk/uk-recovery/</id>
    <published>2020-07-02T21:40:17.821Z</published>
    <updated>2020-07-02T21:40:17.821Z</updated>
    
    <content type="html"><![CDATA[<p>最近英国首相鲍里斯宣布英国后新冠疫情时期的经济恢复计划： Build back better，build back greener，build back faster。这三连Build让我不小心听成了biu biu biu。。。</p><p><img src="/images/life/solar-power.jpg" alt></p><a id="more"></a><p>不过讲真，这可以说是一个雄心勃勃的计划，如果真能实现了，哪怕只是部分实现，已经相当了不起了。</p><p>首先，通过这次疫情，政府意识到了基础设施的不足和缺陷。因此狂砸50亿英镑投资基础建设，包括对NHS，交通干线，和教育系统的投资。</p><p>比如拨专款给”Shovel ready”工程，也就是说那些除了钱不到位，其他都到位的工程。另外，在后疫情阶段，虽然很多学校都开始复课，但由于需要保持社交距离，学校的空间有些捉襟见肘，因此这次会拨教育专款改善学校设施。</p><p>其次是对环保的强调。最近北极升温，局部暴雨，森林大火等自然灾害让人不禁为人类的未来担心。而英国政府提倡的“Green recovery”可以说把环保放在了至关重要的地位。</p><p>英国政府曾经承诺将于<a href="https://www.theguardian.com/environment/2020/feb/06/johnson-urged-to-set-out-firm-plans-for-uks-net-zero-carbon-target" rel="external nofollow noopener noreferrer" target="_blank">2050年实现净碳排放量为零</a>。与此相关，首次听说了一个听起来很魔幻的技术，叫做：Direct Air Capture，直译作“直接空气捕捉”，也就是说直接把空气中的二氧化碳捕捉到，从而达到降低碳排放量的目的。听起来是不是很神奇？</p><p>话说，最近几天教育部长声称，9月所有中小学将会全面复课，拒绝将孩子送回学校的家长还将面临罚款。同时收到了学校的邮件，将会有专款给因为疫情落下功课的孩子们找私教补课。</p><p>种种迹象表明，由于疫情对经济的重创，已经对很多行业造成了毁灭性打击。英国政府似乎非常坚定的要重启经济。希望这个计划能够顺利的<del>biu biu biu</del>build build build。</p>]]></content>
    
    <summary type="html">
    
      biu biu biu英国经济复苏计划
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>试用Streamlit进行数据可视化</title>
    <link href="https://www.aafeng.uk/streamlit/"/>
    <id>https://www.aafeng.uk/streamlit/</id>
    <published>2020-07-01T15:53:46.557Z</published>
    <updated>2020-07-01T15:53:46.557Z</updated>
    
    <content type="html"><![CDATA[<p>早就听说Streamlit是数据分析和机器学习的利器，但一直没有机会尝试。最近花了些时间试用了一下，还真的非常好用！最主要的是其设计思路非常独特：开发者只需要关注于数据及服务器端编码就可以了，那些复杂的客户端交互，响应式设计等等全部由Streamlit这个框架来搞定！这让我想起了过去曾经用过的一个框架：GWT (Google Web Toolkit)，其设计思路可以说和Streamlit是完全一样啊！不同之处是GWT中没有对数据分析和机器学习的支持。</p><a id="more"></a><p>下面通过一个简单的程序来演示Streamlit是如何工作的。</p><p>首先需要安装streamlit及下面需要的pandas:</p><pre><code>pip install streamlitpip install pandas</code></pre><p>接下来写一个对下载数据可视化的程序：</p><pre><code>import streamlit as stimport pandas as pd st.write(&quot;&quot;&quot;## Download statistics### Line chart&quot;&quot;&quot;)# select DATE_FORMAT(date, &apos;%Y-%m-%d&apos;) as d, count(id) as count from posts group by d;dictionary = {&apos;2020-06-25&apos;:34, &apos;2020-06-26&apos;: 39, &apos;2020-06-27&apos;: 40, &apos;2020-06-28&apos;: 40, &apos;2020-06-29&apos;: 42, &apos;2020-06-30&apos;: 36}series = pd.Series(dictionary)st.line_chart(series)st.write(&quot;&quot;&quot;### Bar chart&quot;&quot;&quot;)st.bar_chart(series)</code></pre><p>在上面程序中，演示了Streamlit的几个特点：</p><p><strong>对Markdown的支持</strong>：在st.write中，可以直接使用markdown的语法。<br><strong>客户端统计图形的生成</strong>: 可以看到，这里只需要调用line_chart和bar_chart方法，而无需担心如何将数据传送到客户端，客户端又是如何渲染这些统计图的。</p><p>其运行后的界面如下图所示：</p><p><img src="/images/technology/streamlit/demo.jpg" alt></p><p>可以看到，Streamlit还帮我们生成了保存为PNG, SVG等功能。</p>]]></content>
    
    <summary type="html">
    
      试用Streamlit进行数据可视化
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
      <category term="Streamlit" scheme="https://www.aafeng.uk/tags/Streamlit/"/>
    
  </entry>
  
  <entry>
    <title>Hive Dapp介绍 - rewarding.app</title>
    <link href="https://www.aafeng.uk/rewarding-app/"/>
    <id>https://www.aafeng.uk/rewarding-app/</id>
    <published>2020-06-30T21:18:33.624Z</published>
    <updated>2020-06-30T21:18:33.624Z</updated>
    
    <content type="html"><![CDATA[<p>试用了一下<a href="https://rewarding.app/" rel="external nofollow noopener noreferrer" target="_blank">rewarding.app</a>这个dapp，感觉其功能还是非常强大的。简而言之，这个dapp可以非常灵活的定义各种点赞规则，之后这个dapp就会按照你定义的规则来进行点赞。</p><a id="more"></a><p>登录后可以看到如下界面：</p><p><img src="/images/blockchain/hive/rewarding.app.1.png" alt></p><p>首先需要使用hivesigner对其进行授权。授权成功后，在hiveblocks上可以看到rewarding这个dapp出现在你的Posting授权列表中：</p><p><img src="/images/blockchain/hive/rewarding.app.2.png" alt></p><p>接下来就可以定义点赞规则了。首先看一下第一组参数：</p><p><img src="/images/blockchain/hive/rewarding.app.3.png" alt></p><p>比如：给哪个作者点赞，点赞比例，点赞时段（比如：5分钟到120分钟之间）。</p><p>再来看一下第二组参数：</p><p><img src="/images/blockchain/hive/rewarding.app.4.png" alt></p><p>首先是vote_sbd，这个选项只有在vote_weight为0的时候，rewarding.app会自动换算，比如你想给作者点赞的价值为$0.1，这个dapp会自动帮你计算你需要的点赞比例。接下来的每天最大点赞数，每周最大点赞数，以及最小的VP值等。</p><p>再来看第三组参数：</p><p><img src="/images/blockchain/hive/rewarding.app.5.png" alt></p><p>比如，文章中必须包含某个标记，或者必须不包含某个标记，以及文章中最小的字数。</p><p>至此，感觉这些参数已经足够灵活了，可以定义各种点赞规则。其实除此之外，还有好多参数可以选择。都定义完之后保存规则，会看到这样的一个规则列表：</p><p><img src="/images/blockchain/hive/rewarding.app.6.png" alt></p><p>这界面，实在是太需要改进了。。。</p><p>不过不得不说，这个dapp的功能还是非常强大的，除了自动点赞规则的设计，还有跟赞，跟踩的功能。个人感觉，如果能够适应它的界面，这个工具还是有其可取之处的。</p>]]></content>
    
    <summary type="html">
    
      Hive Dapp介绍 - rewarding.app
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>Get新技能 - 整体厨房的选购</title>
    <link href="https://www.aafeng.uk/kitchen/"/>
    <id>https://www.aafeng.uk/kitchen/</id>
    <published>2020-06-29T21:52:31.296Z</published>
    <updated>2020-06-29T21:52:31.296Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始了一项艰巨的任务：选购整体厨房。最近可以说是把英国的主流整体厨房的品牌，像Magnet, Wren, Howdens等通过线上/线下的预约，已经都看了一遍。总算对整体厨房需要注意的地方有了一个基本的概念。</p><p><img src="/images/life/kitchen2.jpg" alt></p><p>图源：Pixabay</p><a id="more"></a><p>首先说说整体设计。前面提过，在英国这里主流的厨房都是开放式的，厨房，餐厅，客厅都是连在一起的。同时，如果空间允许的话，一般会在厨房的操作台附近再添加一个岛台，把厨房的功能分区，同时还能增加储物空间。因此在选择厨房品牌的时候要考虑其整体设计，以及岛台的设计是否合理。</p><p>在厨房台面的选择上，主要有花岗岩(Granite)，石英石(Quartz)，木制，复合板(Laminate)等多种选择。大理石？在这边的几大品牌中，似乎都不提供。选择用石材作为厨房台面，其特点就是美观大气，经久耐用，但造价较高。目前设计师主推的是复合板材质的台面，其特点是各种样式，颜色的选择很多，造价相对便宜。如果过个几年不想要了，可以很方便的更换新的台面。</p><p>最近在整体比较的过程中有一项新的(可能也不新，但对我而言是新的)设计让我非常喜欢，那就是Handless，也就是说，橱柜，抽屉等都没有把手，这样的厨房感觉非常现代。因此我们在选择的过程中，把这种没有把手的设计作为必须考虑的设计要素之一。</p><p>在灶台的选择上，又有电炉，电磁炉，燃气三种选择。如果喜欢中餐中的爆炒，那么只能选择燃气灶。但在电炉和电磁炉之间，我们有些犹豫。目前越来越多的人选择电磁炉。但我似乎听过电磁炉有辐射，更倾向于电炉。最近在朋友家还看到了一个很奇葩的灶台，四个电磁炉灶口，外加一个燃气灶。把两者的优点结合在了一起。</p><p>面对这么多的选择，刚开始的时候我确实有些无所适从，但随着和各家品牌销售人员的沟通，慢慢的心理有了数。</p>]]></content>
    
    <summary type="html">
    
      Get新技能 - 整体厨房的选购
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>泡泡小组 - 孩子们重返校园</title>
    <link href="https://www.aafeng.uk/bubble-group/"/>
    <id>https://www.aafeng.uk/bubble-group/</id>
    <published>2020-06-29T20:42:26.880Z</published>
    <updated>2020-06-29T20:42:26.880Z</updated>
    
    <content type="html"><![CDATA[<p>经过反复考虑，决定从这周开始，送孩子回学校上学。尽管目前疫情仍不容乐观。但我们所住的小城还是相对安全的。同时考虑到孩子的社交需求，心理健康等因素后，还是把他们送回了学校。</p><p><img src="/images/life/covid19/bubble.jpg" alt></p><p>图源：Pixabay</p><a id="more"></a><p>学校采用了一种叫做泡泡小组(Bubble Group)的方式。我觉得这个比喻非常形象，就像孩子们吹的泡泡一样，不同泡泡的内部之间是完全隔离，彼此不接触的。在学校的每个小组中有15个学生，同处于一个教室，但需要保持社交距离。不同的小组之间没有任何接触。同时学校在每周三关闭，进行深度清洁。一旦有一个小组中的任何人感染病毒，整个小组成员都需要隔离。</p><p>其实算起来已经宅家三个月了。距离学校放暑假也就还有四周多的时间，如果选择不送学校完全能坚持到正式放暑假。但我们考虑到孩子们的社交需求和心理健康因素，毕竟他们需要和别的小朋友们互动。最近英国逐步解封的过程中，发生了很多暴力事件。据说很多起是由于个别人隔离时间过长，引发了很多心理疾病，甚至暴力倾向所致的。</p><p>说的现实一点，可能很多人宅在家中三个月已经到了强弩之末，心理上已经不能再承受更长时间的隔离了。孩子们也是一样的，也许隔离三个月没有问题，甚至再过一个月，以及暑假都没有问题。但是如果等到九月份开学的时候仍旧需要隔离怎么办？甚至是第二波疫情爆发怎么办？我感觉在现在疫情稍微缓和的时候，送孩子回学校四周，孩子和家长从心理上能稍作调整，以应对接下来可能的进一步隔离。</p><p>还有另外一个原因。就像两个月前就有科学家预测，人类将会与新冠病毒长期共存。无论疫情如何，生活仍将继续。和别人的接触似乎无法避免。只能说在各个方面尽最大程度的保护自己吧。</p><p><img src="/images/life/covid19/happy-face.jpg" alt><br>图源：Pixabay</p><p>在今天把孩子从学校接回来的时候，感觉他们明显的比前一段时间更加活跃，话也明显的多。希望这份简单的快乐能够持续下去吧。</p>]]></content>
    
    <summary type="html">
    
      泡泡小组 - 孩子们重返校园
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>英中文化差异 - 开放式厨房</title>
    <link href="https://www.aafeng.uk/open-plan-kitchen/"/>
    <id>https://www.aafeng.uk/open-plan-kitchen/</id>
    <published>2020-06-29T16:25:37.809Z</published>
    <updated>2020-06-29T16:25:37.809Z</updated>
    
    <content type="html"><![CDATA[<p>在家中的扩建工程中，最近开始考虑新厨房和客厅的布局了。在现有的布局中，厨房和客厅是分开的。但在新厨房和客厅的设计中，我们遵循了英国这里的主流设计理念：将厨房和客厅彻底打通，形成一个整体的活动区域(Open Plan)。</p><p><img src="/images/life/kitchen.jpg" alt></p><p>图源：Pixabay</p><a id="more"></a><p>记得在国内的时候，似乎不论房子大小，能够分配给厨房的空间都不会很大。因为大家觉得厨房就是做饭的地方，而客厅才是主要的活动空间。因此应该把主要空间留给客厅。有的人家甚至把厨房挪到了阳台上，以节省出更多的空间来。记得在扩建工程还没有启动的时候，曾经咨询过一个曾经做过设计师的朋友，他强烈建议我们不要Open Plan，而是把厨房的空间缩小，增大客厅空间。</p><p>和国内不同，英国这里的主流观念是更喜欢厨房客厅一体化的设计，也叫做Open Plan Kitchen。关于这点，和英国这里的设计师咨询过，应该是因为英国这边的家庭观念似乎更强。而在全家的活动空间中，厨房和客厅同样重要，使用率也同样高。这也是为什么主流设计理念中，基本上都是开放式厨房。</p><p>我想另外一个原因可能和英国人的烹饪习惯有关吧。毕竟他们在做饭的时候以烤箱和煮锅为主，很少炒菜。至于大火爆炒，更是闻所未闻。因此他们不需要考虑油烟的问题。</p><p>我们在英国生活多年，烹饪习惯也改变了不少。虽然仍爱吃中餐，但从不大火爆炒，应该不会产生大量的油烟。选择这种一体式厨房应该没有问题。所以最终也决定选择这种Open Plan的设计。不过话说回来，有时候在看国内电视剧的时候，似乎有很多剧中的厨房都是开放式的厨房！</p>]]></content>
    
    <summary type="html">
    
      英中文化差异 - 开放式厨房
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>一直在用utf8编码，可utf8mb4编码又是什么鬼？</title>
    <link href="https://www.aafeng.uk/utf8mb4/"/>
    <id>https://www.aafeng.uk/utf8mb4/</id>
    <published>2020-06-27T22:32:59.613Z</published>
    <updated>2020-06-27T22:32:59.613Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算把中文区的文章信息保存到数据库中，然后分析一下这些数据。本来想这应该是一个非常简单的程序。但在实现的过程中遭遇了这个utf8mb4编码的问题。下面把整个排错过程记录一下。</p><p><img src="/images/technology/db/encoding.jpg" alt></p><a id="more"></a><h2 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h2><p>程序很简单，就是读取中文区中的最新N条文章，然后保存到数据库中。对于一般的文章，没有任何问题。但对于个别的文章，比如 ace108 前辈的一篇文章，</p><p>📷Flirting with Silver I | 追求银I😎</p><p>保存的时候出错了：</p><pre><code>mysql.connector.errors.DatabaseError: 1366 (HY000): Incorrect string value: &apos;\xF0\x9F\x93\xB7#M...&apos; for column &apos;title&apos; at row 1</code></pre><p>仔细查看了一下，似乎是因为文章标题中出现了表情符号所致的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在网上查找了一下，很多人都遇到过类似的问题，似乎我的初步判断是正确的。问题在于：在默认设置下，不支持表情字符的编码。</p><p><img src="/images/technology/db/utf8.jpg" alt></p><p>那么，什么是utf8mb4字符集呢？查阅了一下MySQL的<a href="https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf8mb4.html" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>：</p><blockquote><p>utf8mb4 is a superset of utf8mb3. The utfmb4 character set requires a maximum of four bytes per multibyte character.</p></blockquote><p>我们平时用的 utf8 其似乎就是MySQL中的  utf8mb3。而 utf8mb4 是我们常见的 utf8 的父集，以4个字节来保存多字节字符。不难想象，utf8mb4 能够表示的字符范围更广。在MySQL中建议使用 utf8mb4，它是完全兼容 utf8mb3的。</p><p>知道了原因，解决方法就很简单了。</p><p>首先，更改表的字符集：</p><pre><code>ALTER TABLE posts CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</code></pre><p>接下来，更改 “title” 这一列的字符集</p><pre><code>ALTER TABLE hive.posts MODIFY COLUMN title VARCHAR(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL;</code></pre><p>在Python程序中创建数据库连接的时候，指定“utf8mb4”字符集：</p><pre><code>hivedb = mysql.connector.connect(    …...    charset = &apos;utf8mb4&apos;)</code></pre><p>至此问题成功解决，表情符号也能保存到数据库中了。</p>]]></content>
    
    <summary type="html">
    
      一直在用utf8编码，可utf8mb4编码又是什么鬼？
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Scrapy自动获取豆瓣每周热门电影</title>
    <link href="https://www.aafeng.uk/scrapy/"/>
    <id>https://www.aafeng.uk/scrapy/</id>
    <published>2020-06-26T16:18:53.721Z</published>
    <updated>2020-06-26T16:18:53.721Z</updated>
    
    <content type="html"><![CDATA[<p>自从宅在家中后，养成了一个习惯：每周五全家一起在家中看一场电影。但每次在选择电影的时候都很耽误时间。于是就想到实现一个自动的程序，每周五下午的在各个影评的平台自动抓取本周热门电影，再发送消息/邮件给我，作为当晚要播放电影的参考。其实这个功能完全可以使用urllib来实现。不过下面使用Python中的爬虫框架Scrapy来实现。</p><p><img src="/images/technology/python/scrapy/scrapylogo.png" alt></p><a id="more"></a><h2 id="安装并创建项目"><a href="#安装并创建项目" class="headerlink" title="安装并创建项目"></a>安装并创建项目</h2><p>首先安装Scrapy:</p><pre><code>pip install Scrapy</code></pre><p>接下来创建一个项目：</p><pre><code>scrapy startproject douban</code></pre><h2 id="添加核心代码"><a href="#添加核心代码" class="headerlink" title="添加核心代码"></a>添加核心代码</h2><h3 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a>items.py</h3><p>首先修改items.py:</p><pre><code>import scrapyclass DoubanItem(scrapy.Item):    name = scrapy.Field()</code></pre><p>可以看到DoubanItem类是scrapy.Item的子类。这样就便于在后续处理过程中回调。</p><h3 id="使用Scrapy-shell获取电影标题对应的路径"><a href="#使用Scrapy-shell获取电影标题对应的路径" class="headerlink" title="使用Scrapy shell获取电影标题对应的路径"></a>使用Scrapy shell获取电影标题对应的路径</h3><p>要想正确获取影片路径，需要使用浏览器的调试工具和Scrapy自带的命令行工具。</p><p>首先运行：</p><pre><code>scrapy shell &quot;https://movie.douban.com/&quot;</code></pre><p>在浏览器中打开这个页面，在浏览器的开发者工具中查看：</p><p><img src="/images/technology/python/scrapy/scrapy-1.png" alt></p><p>在下面的核心代码中，我们将使用如下标记来定位影片中的标题：</p><pre><code>&lt;div class=&quot;billboard-bd&quot;&gt;&lt;td class=&quot;title&quot;&gt;&lt;a&gt;</code></pre><h3 id="DoubanSpider"><a href="#DoubanSpider" class="headerlink" title="DoubanSpider"></a>DoubanSpider</h3><p>接下来编辑文件douban/spiders/douban_spider.py：</p><pre><code>import scrapyclass DoubanSpider(scrapy.Spider):    name = &quot;douban&quot;    allowed_domains = [&quot;https://movie.douban.com/&quot;]    start_urls = [        &quot;https://movie.douban.com/&quot;    ]    def parse(self, response):        movie_list = []        for movie in response.xpath(&quot;//div[@class=&apos;billboard-bd&apos;]//td[@class=&apos;title&apos;]/a/text()&quot;).getall():            movie_list.append(movie)        print(movie_list)        filename = &quot;/var/tmp/movielist.txt&quot;        with open(filename, &apos;w&apos;) as f:            f.write(str(movie_list))</code></pre><p>类似的，DoubanSpider类继承自scrapy.Spider这个类。在上面的实现中重写了parse方法，自定义处理逻辑。</p><p>尝试运行一下：</p><pre><code>scrapy crawl douban</code></pre><p>从LOG中可以看到，豆瓣返回了一个403错误。这是由于其反爬虫机制导致的。</p><p>打开douban/settings.py，添加如下行：</p><pre><code>USER_AGENT = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0&quot;</code></pre><p>再尝试一下，成功！其输出类似于：</p><pre><code>2020-06-26 15:49:34 [scrapy.extensions.telnet] INFO: Telnet console listening on 127.0.0.1:60232020-06-26 15:49:35 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://movie.douban.com/robots.txt&gt; (referer: None)2020-06-26 15:49:35 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://movie.douban.com/&gt; (referer: None)[&apos;默片解说员&apos;, &apos;数电影的人&apos;, &apos;拍拖故事&apos;, &apos;若水&apos;, &apos;知晓天空之蓝的人啊&apos;, &apos;二十世纪&apos;, &apos;房子的故事&apos;, &apos;温德米尔儿童&apos;, &apos;翻译疑云&apos;, &apos;乳牙&apos;]</code></pre><p>上面这种方式根本就没有用到前面定义的items.py，如果想要使用的话，可以把douban_spider.py更改为：</p><pre><code>import scrapyclass DoubanSpider(scrapy.Spider):    name = &quot;douban&quot;    allowed_domains = [&quot;https://movie.douban.com/&quot;]    start_urls = [        &quot;https://movie.douban.com/&quot;    ]    def parse(self, response):        for movie in response.xpath(&quot;//div[@class=&apos;billboard-bd&apos;]//td[@class=&apos;title&apos;]/a/text()&quot;).getall():            yield {                &apos;name&apos;: movie            }</code></pre><p>需要注意的是，要想输出中文，需要在settings.py中添加：</p><pre><code>FEED_EXPORT_ENCODING = &apos;utf-8&apos;</code></pre><p>再次运行：</p><pre><code>scrapy crawl douban -o movies.json</code></pre><p>其输出为：</p><p><img src="/images/technology/python/scrapy/scrapy-2.png" alt></p><p>同样结果已经保存在json文件中。</p>]]></content>
    
    <summary type="html">
    
      使用Scrapy自动获取豆瓣每周热门电影
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Get新技能：各种地板的选择</title>
    <link href="https://www.aafeng.uk/flooring/"/>
    <id>https://www.aafeng.uk/flooring/</id>
    <published>2020-06-25T22:01:28.120Z</published>
    <updated>2020-06-25T22:01:28.120Z</updated>
    
    <content type="html"><![CDATA[<p>随着家中扩建工程的不断推进，最近需要考虑扩建后的地板了。早些年的时候，只是知道地毯，实木地板，和复合木地板。但最近在不断的选择过程中，才意识到了里面的学问原来还是很多的。</p><p><img src="/images/life/floor-1.jpg" alt></p><a id="more"></a><p>首先是实木地板(Solid Wood)。说白了，实木地板就是一块一块的木板。这种地板的特点就是取材纯天然，但容易变形，需要定期护理。在早期工程木地板技术不成熟的时候，造价较高，因此很多人选择了实木地板。但现在更多的人选择的是下面要介绍的工程木地板。</p><p>第二种是工程木地板(Engineered Wood)。这种木地板其实也是纯木的，只不过不像实木地板，它是由很多层粘合而成的，因此叫做工程木地板。哈哈，就像三明治一样。顶层木的质量最好，其他层的也是纯木，只不过质量不如顶层的好。相较于实木地板，工程木地板的纹理和色彩选择也更多，适用面也更广，比如有地暖的话只能选择工程木地板，而不能选择实木地板。在选择的时候需要注意，其顶层木板越厚，质量一般就越好。比如下图是施工的人推荐的工程木地板，共有9层，顶层非常厚，因此也属于工程木地板中的顶级品质。</p><p><img src="/images/life/floor-2.jpg" alt></p><p>第三种就是复合木地板(laminate)了。复合木地板的底层用的是高密度板，上面是特殊处理过的一个耐磨层。其最大优点是耐磨。但真到有一天上面的耐摩层被破坏了，复合木地板就废了。相比较而言，工程木地板的表面如果磨坏了，还能请专业人士来至少翻新一次。</p><p>最后一种是塑胶地板(Vinyl)。据卖地板的人说，现在选用Vinyl的人越来越多了。这种地板的特点就是寿命长，特别抗造，防水，使用于各种环境。但是感觉就不像木地板那样自然。现在Vinyl的价格还很高，顶级的Vinyl价格甚至会超过高质量工程木地板价格。但对于这种地板，我实在是提不起什么兴趣。主要是觉得铺上后没有地板的感觉。</p><p>虽然施工的人建议我们选择复合木地板。据他说现在选择复合木地板的人最多。不过我们最终还是选择了工程木地板。原因有以下几个：第一，它的材质是天然纯木，同时又很耐磨。第二，即使耐磨层出现问题，还可以再度翻新。第三，可以选择的花色，纹理很多，有我们喜欢的样式。</p><p>伴随着工程的推进，需要学的东西还真多，下一步，厨房的选择，房屋结构的改变，想想有些头大。。。</p>]]></content>
    
    <summary type="html">
    
      Get新技能：各种地板的选择
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>使用AWS Step Functions定制工作流</title>
    <link href="https://www.aafeng.uk/aws-step-functions/"/>
    <id>https://www.aafeng.uk/aws-step-functions/</id>
    <published>2020-06-24T15:57:52.775Z</published>
    <updated>2020-06-24T15:57:52.775Z</updated>
    
    <content type="html"><![CDATA[<p>最近看上了<a href="https://www.lenovo.com/gb/en/laptops/thinkpad/thinkpad-x1/X1-Carbon-Gen-8-/p/22TP2X1X1C8" rel="external nofollow noopener noreferrer" target="_blank">一款Thinkpad的笔记本</a>，但钱包不够鼓。于是想等价格降下来再考虑。难道去天天刷网页看价格吗？似乎不是一个程序猿该有的思维。最简单的方式就是写一个程序，检查该页面中的价格，然后设定为cron job，每天检查一下，给自己发邮件/短信通知。但这种方式实现起来一点刺激都没有，于是想到了AWS中的Step Functions。于是把整个过程用AWS实现了一下，通过一种无服务器的方式来实现这个功能。</p><p><img src="/images/technology/aws/step-functions-1.jpg" alt></p><a id="more"></a><p>首先做一个对比：</p><p><strong>流程控制</strong>：在传统方式中，通过编码来实现。在AWS中，通过Step functions实现。<br><strong>检查价格</strong>：在传统方式中，通过Python抓取网页并分析网页获得。当然，如果有API可用就更简单了。在AWS中，将这个步骤封装到Lambda。<br><strong>消息通知</strong>：这里可以调用一些第三方库来实现。在AWS中，这部分都已经做好了，直接使用SNS就可以。<br><strong>定时运行程序</strong>：在传统方式中，可以设定一个cron job。在AWS中，可以通过使用Eventbridge (过去叫做Cloudwatch)来实现。</p><p>可以看到，相对于传统方式，AWS栈的最大优势就是无需管理自己的服务器。安全补丁，系统升级等等都无需考虑。下面看看如何来实现这个功能把。</p><h2 id="第一步：创建主题和订阅-Topic-subscription"><a href="#第一步：创建主题和订阅-Topic-subscription" class="headerlink" title="第一步：创建主题和订阅(Topic/subscription)"></a>第一步：创建主题和订阅(Topic/subscription)</h2><p>在AWS中创建一个Topic，比如：ThinkpadPriceAlert</p><p><img src="/images/technology/aws/step-functions-2.jpg" alt></p><p>针对这个Topic，添加一个订阅者。这里选择邮件订阅方式。</p><p><img src="/images/technology/aws/step-functions-3.jpg" alt></p><p>需要去邮箱中确认这个订阅。</p><h2 id="第二步：创建Lambda"><a href="#第二步：创建Lambda" class="headerlink" title="第二步：创建Lambda"></a>第二步：创建Lambda</h2><p>接下来创建Lambda，去读取最新价格。这里直接读取网页，然后使用正则表达式提取价格，再以json方式返回价格：</p><pre><code>import jsonimport refrom urllib import requestdef lambda_handler(event, context):    req = request.Request(&apos;https://www.lenovo.com/gb/en/laptops/thinkpad/thinkpad-x1/X1-Carbon-Gen-8-/p/22TP2X1X1C8&apos;)    req.add_header(&apos;User-Agent&apos;, &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0&apos;)    response = request.urlopen(req)    html = response.read().decode(&apos;utf-8&apos;)    price = float(re.search(&apos;&lt;dd itemprop=\&quot;price\&quot;&gt;(.*)&lt;\/dd&gt;&apos;, html).group(1).replace(&apos;£&apos;, &apos;&apos;).replace(&apos;,&apos;,&apos;&apos;))    return {        &apos;statusCode&apos;: 200,        &apos;price&apos;: json.dumps(price)    }</code></pre><h2 id="第三步：使用Step-function创建价格查询流程"><a href="#第三步：使用Step-function创建价格查询流程" class="headerlink" title="第三步：使用Step function创建价格查询流程"></a>第三步：使用Step function创建价格查询流程</h2><p>定义如下的Step functions：</p><pre><code>{  &quot;Comment&quot;: &quot;Thinkpad laptop price checker&quot;,  &quot;StartAt&quot;: &quot;Check Thinkpad Price&quot;,  &quot;States&quot;: {    &quot;Check Thinkpad Price&quot;: {      &quot;Type&quot;: &quot;Task&quot;,      &quot;Resource&quot;: &quot;arn:aws:states:::lambda:invoke&quot;,      &quot;Parameters&quot;: {        &quot;FunctionName&quot;: &quot;arn:aws:lambda:eu-west-1:xxxxxxxxxxxx:function:ThinkpadPriceChecker:$LATEST&quot;      },      &quot;Next&quot;: &quot;Notify Me&quot;    },    &quot;Notify Me&quot;: {      &quot;Type&quot;: &quot;Task&quot;,      &quot;Resource&quot;: &quot;arn:aws:states:::sns:publish&quot;,      &quot;Parameters&quot;: {        &quot;Message.$&quot;: &quot;$.Payload.price&quot;,        &quot;TopicArn&quot;: &quot;arn:aws:sns:eu-west-1:xxxxxxxxxxxx:ThinkpadPriceAlert&quot;      },      &quot;End&quot;: true    }  }}</code></pre><p>需要注意，上面的$.Payload.<strong>price</strong>需要和前面Lambda中的返回值相匹配。至此，就可以运行这个Step Functions了，运行的结果就是收到一封包含最新价格的邮件。</p><h2 id="第四步：创建EventBridge-Rule来定期调用Step-Functions。"><a href="#第四步：创建EventBridge-Rule来定期调用Step-Functions。" class="headerlink" title="第四步：创建EventBridge Rule来定期调用Step Functions。"></a>第四步：创建EventBridge Rule来定期调用Step Functions。</h2><p>类似于Cronjob，可以设定事件被调用的频率，还有在指定时间需要调用的目标，比如一个Lambda，我们这里可以选择前面创建的Step Functions。</p><p><img src="/images/technology/aws/step-functions-4.jpg" alt></p><p><img src="/images/technology/aws/step-functions-5.jpg" alt></p><p>至此整个程序就做好了，每天在邮件中都会收到价格提示。当然，Step Functions中可发掘的功能还有很多，比如：条件选择，并发执行，容错处理等等。讲了这么多，回到主题，希望哪天价格真降下来。。。</p>]]></content>
    
    <summary type="html">
    
      使用AWS Step Functions定制工作流
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>魔幻的操作-英国即将全面解封</title>
    <link href="https://www.aafeng.uk/ease-lockdown/"/>
    <id>https://www.aafeng.uk/ease-lockdown/</id>
    <published>2020-06-23T22:03:46.415Z</published>
    <updated>2020-06-23T22:03:46.415Z</updated>
    
    <content type="html"><![CDATA[<p>就在全球都在为第二波疫情担心的时候，英国政府公布了一系列的政策，人们将在7月4日“重获自由”。这些政策包括：博物馆，艺术画廊，电影院，酒吧，餐厅，酒店等将于7月4日开张；社交距离降低为1米+；从7月4日起，两个家庭之间可以聚会，但仍需保持社交距离。</p><p>英国的主流媒体似乎也在一边倒的支持着这些政策：</p><p><img src="/images/life/covid19/reopen-1.jpg" alt></p><a id="more"></a><p><img src="/images/life/covid19/reopen-2.jpg" alt></p><p>这一系列的政策似乎在民众中很受欢迎。目前我们周边已经有好几家朋友似乎都已经按捺不住，透漏出在7月4日后想要一起聚会的想法。同时在英国的好几个华人家长群的民意调查中，家长们也是一边倒的把(EY和Y1两个年级的)孩子送回了学校，或者计划把孩子送回学校。</p><p>真的不是很理解这一系列政策的依据是什么。现在的疫情数据是比前一段时间的要好看很多。但这正是前一段时间大家纷纷宅在家中的结果啊。感觉缓慢的解封是可以理解的。但这步跨的似乎有点大，真的很担心会扯着了。</p><p>不过话说回来，女儿是符合返校条件的（Y1）。最初我很坚决的反对返校。但她班中的小朋友们纷纷返校，已经过了一周，似乎情况都很正常。我也有些动摇了，已经向学校提出申请，如果一切正常，下周可能会尝试返校。</p><p>哎，无论怎样，生活还要继续。今天晚饭后全家出门散步。沿途看到了很多动物。没有了人类的过多打扰，它们似乎生活的更自在了。</p><p>天鹅在距离岸边不远的地方孵化雏鸟。让我第一次有机会这么近距离的观赏这只高冷的大鸟。</p><p><img src="/images/life/covid19/reopen-3.jpg" alt></p><p>就连平时胆小的兔子似乎也变得不怎么怕人了。</p><p><img src="/images/life/covid19/reopen-4.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      魔幻的操作-英国即将全面解封
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>AWS学习资源总结</title>
    <link href="https://www.aafeng.uk/aws-learning-resources/"/>
    <id>https://www.aafeng.uk/aws-learning-resources/</id>
    <published>2020-06-22T09:28:39.515Z</published>
    <updated>2020-06-22T09:28:39.515Z</updated>
    
    <content type="html"><![CDATA[<p>下面把AWS的学习资源总结了一下。这个列表会不断更新。</p><p><img src="/images/technology/aws/aws.png" alt><img src="/images/technology/aws/aws.png" alt></p><a id="more"></a><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p><a href="https://www.aws.training/Details/eLearning?id=42594" rel="external nofollow noopener noreferrer" target="_blank">Architecting Serverless Solutions</a></p>]]></content>
    
    <summary type="html">
    
      AWS学习资源总结
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
      <category term="Lambda" scheme="https://www.aafeng.uk/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>孩子受欺负了怎么办？</title>
    <link href="https://www.aafeng.uk/bullied/"/>
    <id>https://www.aafeng.uk/bullied/</id>
    <published>2020-06-21T22:16:39.483Z</published>
    <updated>2020-06-21T22:16:39.483Z</updated>
    
    <content type="html"><![CDATA[<p>自从孩子上学后，就一直被这个问题所困扰。毕竟作为家长，没法时时刻刻守在孩子身边，自己的孩子也需要学会如何和别的孩子相处。在遇到自己的权利受到侵犯的时候，应该知道如何应对。</p><p><img src="/images/kids/argue.jpg" alt></p><p>图源：Pixabay</p><a id="more"></a><p>先来说说我听到的两种教育方式：</p><p>第一种就是以牙还牙式。教育孩子不能欺负别的小朋友。但如果别的小朋友欺负上门了，那么也不用客气，打回去就可以了。但这种教育方式可能会误导孩子，导致暴力倾向，影响他们的情商发展。在最初可能是一种自我保护，但久而久之孩子可能会想，看来拳头还真好使，由自我保护慢慢变成了主动去欺负别的孩子。</p><p>说说我家儿子吧。其实我们并没有教育他要打回去。但在学校他有个老铁，拳头比较硬，总是罩着他，只要有小朋友来欺负他，朋友就会替他出头。久而久之，受朋友影响，儿子偶尔也跟着他的朋友去欺负别的小朋友了。在我们的严厉<del>恐吓</del>教育下，总算是刹住了他的这个势头，想想真是头疼。</p><p>第二种方式则是另一个极端。遇到别的孩子欺负上门，躲开就是了。殊不知这种方式更是会影响孩子的性格发展，会让他们变得胆小懦弱。更容易受到别的孩子的欺负。</p><p>我感觉首先是要让孩子明白，暴力不是解决问题的办法。更有效的办法是<strong>沟通</strong>。首先要大声喊出来，你不能抢我的玩具！你打人是不对的！你不能这样对我说话！让欺负人的孩子知道他们的行为是错误的，也觉得这个人不好惹。如果这样还不能解决问题，可以和老师沟通，让老师来协调解决问题。当然，在最极端的情况下，比如当自己的人身安全受到威胁的时候，可以自卫。</p><p>其实我们一直也是在摸索，哪种方式最好，大家有什么好的建议？</p>]]></content>
    
    <summary type="html">
    
      孩子受欺负了怎么办？
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>最好的父亲节礼物</title>
    <link href="https://www.aafeng.uk/fathers-day-2020/"/>
    <id>https://www.aafeng.uk/fathers-day-2020/</id>
    <published>2020-06-21T09:21:19.315Z</published>
    <updated>2020-06-21T09:21:19.315Z</updated>
    
    <content type="html"><![CDATA[<p>一年一度的父亲节如期而至。在几天前儿子和女儿就神神秘秘的在给我准备礼物，甚至连妈妈都被调动了起来。每天晚饭后他们就凑在一起做准备。今天谜底终于揭晓了，原来每人为我写了一首藏头诗。同时还画了两幅父亲节的画送给我。</p><a id="more"></a><p>下面是儿子写的藏头诗(Acrostic Poem)：</p><p><strong>F</strong>ather you are the best,<br><strong>A</strong>nd I really love you the most.<br><strong>T</strong>he special day is coming,<br><strong>H</strong>ope you enjoy our singing.<br><strong>E</strong>verything I love about you,<br><strong>R</strong>ead me a story that is brand new,<br><strong>S</strong>unny days you make us delicious barbecue.</p><p><strong>D</strong>addy is a special person,<br><strong>A</strong>nd each day we have a nice conversation,<br><strong>Y</strong>ou are the best daddy with great imagination. </p><p>儿子的画作：</p><p><img src="/images/life/father-day/2020-1.jpg" alt></p><p><img src="/images/life/father-day/2020-2.jpg" alt></p><p>女儿写的藏头诗：</p><p><strong>F</strong>eeling excited we get ready for father’s day,<br><strong>a</strong>bout half past six “Come down daddy!” We say.<br><strong>t</strong>ea is on the table ready for daddy.<br><strong>h</strong>e smiles at us happily.<br><strong>e</strong>xtremely hungry we start eating.<br><strong>r</strong>abbits are in the garden hopping,<br><strong>s</strong>weet ice-creams are in our mouths melting.</p><p><strong>D</strong>addy enjoys his tea so much,<br><strong>a</strong>nd he gives us a kiss each,<br><strong>y</strong>ou can make your father’s day like this!</p><p>女儿的画作：</p><p><img src="/images/life/father-day/2020-3.jpg" alt></p><p><img src="/images/life/father-day/2020-4.jpg" alt></p><p>也真难为他们了，准备了这么多天才好，真的是父亲节的最好礼物了！</p>]]></content>
    
    <summary type="html">
    
      最好的父亲节礼物
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
