<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aafenguk.github.io/"/>
  <updated>2020-04-12T15:20:25.017Z</updated>
  <id>https://aafenguk.github.io/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>复活节花园寻宝</title>
    <link href="https://aafenguk.github.io/easter-egg-hunting/"/>
    <id>https://aafenguk.github.io/easter-egg-hunting/</id>
    <published>2020-04-12T15:20:25.017Z</published>
    <updated>2020-04-12T15:20:25.017Z</updated>
    
    <content type="html"><![CDATA[<p>复活节如期而至，其实每年都选择在复活节假期回国和家人团聚。但今年因疫情被迫取消了航班，第一次带着孩子在英国度过复活节。</p><p><img src="/images/life/easter/easter-egg.jpg" alt="复活节彩蛋"><br>图源：pixabay</p><p>不过凡事都尽量往好处想，孩子们一直喜欢复活节时在花园中寻找复活节彩蛋这个游戏，但由于每年的复活节都在中国，因此一直没能满足他们的这个心愿。今年正好满足一下他们的这个小小愿望。</p><a id="more"></a><p>由于疫情，现在复活节彩蛋都限购，只买到一点点的彩蛋。但孩子们更喜欢的是这个游戏本身，彩蛋的多少应该不是最重要的。</p><p><img src="/images/life/easter/01.jpg" alt="复活节彩蛋"></p><p>其实，在寻找复活节彩蛋游戏中，还有一个主角，就是复活节小兔子。在传说中，复活节小兔子将彩蛋藏起来。之所以是兔子，可能是因为它们强大的生育能力吧，毕竟复活节意味着新生命的诞生。</p><p>我自然就成了客串小兔子的角色，将彩蛋藏在了花园中。</p><p>藏在了苹果树的树枝上：<br><img src="/images/life/easter/02.jpg" alt="复活节彩蛋"></p><p>梨树上：<br><img src="/images/life/easter/03.jpg" alt="复活节彩蛋"></p><p>孩子们做游戏的小房子这里：</p><p><img src="/images/life/easter/04.jpg" alt="复活节彩蛋"></p><p>浇水用的小水壶中：<br><img src="/images/life/easter/05.jpg" alt="复活节彩蛋"></p><p>很快，这些彩蛋就都被找到了。彩蛋内部一般都是空的，象征着耶稣复活后空空的坟墓。其实时至今日，复活节的宗教色彩已经慢慢淡化了，成了很多家庭度假的热门时段。期待早日恢复正常，把错过的假期补上。</p>]]></content>
    
    <summary type="html">
    
      复活节花园寻宝
    
    </summary>
    
      <category term="生活" scheme="https://aafenguk.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="复活节" scheme="https://aafenguk.github.io/tags/%E5%A4%8D%E6%B4%BB%E8%8A%82/"/>
    
      <category term="彩蛋" scheme="https://aafenguk.github.io/tags/%E5%BD%A9%E8%9B%8B/"/>
    
  </entry>
  
  <entry>
    <title>实时推送Hive区块链信息到Telegram客户端（2）</title>
    <link href="https://aafenguk.github.io/hive-telegram-2/"/>
    <id>https://aafenguk.github.io/hive-telegram-2/</id>
    <published>2020-04-11T09:00:00.000Z</published>
    <updated>2020-04-12T15:19:12.754Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/hive-telegram-1/">上一篇文章</a>中讲到了整个程序的思路，以及如何读取Hive区块链信息，并回溯N个区块。在这篇文章中讲讲如何在区块信息中过滤信息，并根据自己定义的规则生成待发送的信息。</p><p><img src="/images/hive/hive-telegram-2.jpg" alt></p><a id="more"></a><p>首先，需要定义一些用于筛选信息的规则。这里的一个基本原则就是所定义的规则一定要和程序代码分离，这样最终的程序才容易维护。任何时候想要更改规则的话，只需要修改定义规则的配置文件，而无需修改程序代码。比如：</p><pre><code>rules:  votes:    any_to_aafeng:      from:       &quot;*&quot;      to:         aafeng      exclude:    aafeng,aafeng.test      min_weight: 20</code></pre><p>上面定义了一组规则：除去’aafeng’和’aafeng.test’之外的任何用户对’aafeng’这个用户的点赞，如果点赞额度&gt;=20%，则符合这个规则。</p><p>再举一个关于转账的规则：</p><pre><code>transfers:  any_to_aafeng:    from:        &quot;*&quot;    to:          aafeng    min_account: 1            aafeng_to_any:    from:        aafeng    to:          &quot;*&quot;    min_account: 0 </code></pre><p>上面规则定义了：任何向’aafeng’转入的金额&gt;=1，符合规则。任何从’aafeng’转出的金额&gt;=0，符合规则。这条规则对于监测账号的资金变化非常有用。</p><p>除了上述的两类关于点赞和转账的规则，你还可以定义很多规则，比如：留言，发帖，提到你等等。道理都非常类似，这里就不一一例举了。</p><p>规则都定义了好了之后，我们需要考虑在程序中如何支持这样的规则，下面是对点赞规则的实现：</p><pre><code>HIVE_BASE_URL = &apos;\https://hive.blog/&apos;# check if there is a matched vote ruledef get_vote_message(vote_rules, transaction):  messages   = &apos;&apos;  try:    t_voter    = transaction[&quot;voter&quot;]     t_author   = transaction[&quot;author&quot;]    t_weight   = transaction[&apos;weight&apos;]/100.00    t_permlink = transaction[&apos;permlink&apos;]    for vr in vote_rules:      # check exclude       if t_voter in vote_rules[vr][&quot;exclude&quot;].split(&quot;,&quot;):        continue      # check if voting weight matches      if t_weight&gt;0 and t_weight &lt; vote_rules[vr][&quot;min_weight&quot;]:        continue      # check voter and votee matches      if (t_voter==vote_rules[vr][&quot;from&quot;] and t_author==vote_rules[vr][&quot;to&quot;]) or \         (&apos;*&apos;==vote_rules[vr][&quot;from&quot;]     and t_author==vote_rules[vr][&quot;to&quot;]) or \         (t_voter==vote_rules[vr][&quot;from&quot;] and &apos;*&apos;==vote_rules[vr][&quot;to&quot;]):        messages = messages + &quot;VOTE: %s --&gt; %s [%.2f]: %s/@%s/%s\n\n&quot; % (t_voter,t_author,t_weight,HIVE_BASE_URL,t_author,t_permlink)  except Exception as e:    traceback.print_exc()    return None  if messages!=&apos;&apos;:    return messages  else:    return None        </code></pre><p>通过上面的程序，就可以从区块链信息中过滤出自己感兴趣的点赞信息了。下一篇讲讲如何配置Telegram。</p>]]></content>
    
    <summary type="html">
    
      实时推送Hive区块链信息到Telegram客户端（2）
    
    </summary>
    
      <category term="技术" scheme="https://aafenguk.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hive" scheme="https://aafenguk.github.io/tags/Hive/"/>
    
      <category term="Telegram" scheme="https://aafenguk.github.io/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>实时推送Hive区块链信息到Telegram客户端（1）</title>
    <link href="https://aafenguk.github.io/hive-telegram-1/"/>
    <id>https://aafenguk.github.io/hive-telegram-1/</id>
    <published>2020-04-08T09:00:00.000Z</published>
    <updated>2020-04-12T16:04:15.286Z</updated>
    
    <content type="html"><![CDATA[<p>Hive的网页客户端有一个消息通知功能（Notificaitons），每次登录Hive之后，就会看到和你账户相关的信息，比如：谁给你点赞，留言，转发，提到你等等信息。</p><p><img src="/images/hive/hive-notifications.jpg" alt="Hive blog notifications"></p><p>但是，通过这种方式来查看各种通知的体验并不好。首先需要打开hive/peakd的页面，然后需要从菜单中选择查看通知才能够看到。而且，我们不可能总去刷Hive的网页吧。因此，更为便捷和方便的方式就是通过读取Hive区块链的信息，进行分析，找出自己感兴趣的信息，然后发送给自己的Telegram客户端/其他客户端。</p><a id="more"></a><p>要实现这个功能，需要考虑以下这些因素：</p><p>1）区块链信息的读取。这部分可以通过调用Hivepy库中的相关功能来实现。<br>2）定义你感兴趣的规则。比如：所有给你点赞的信息你都想得到通知，某位大鲸发的所有贴子你都想得到通知，任何和你账户相关的转账操作。等等等等。<br>3）配置一个Telegram机器人，一旦第二步中有符合条件的消息，发送给Telegram客户端。当然，这里非常灵活，你可以配置自己喜欢的客户端，比如Slack，Discord等等，道理都是类似的。</p><p>这篇文章主要来说一说如何检测Hive区块链的信息。</p><p>基本思路就是：首先获取当前区块，然后检测当前块中是否有自己感兴趣的信息，如果有的话，存储到一个变量中以便后面发送/处理。之后向前回溯上一个区块，再做同样的检测，如此进行下去，一直检测到指定数目的区块后停止。</p><p>这里就涉及一个基本的问题：究竟该向前回溯多少个区块呢？这就取决于你这个程序被执行的频率了。举个例子，如果你这个程序每三秒运行一次，而Hive区块链每三秒生成一个块(印象中Steem区块链是每三秒一块，Hive应该没有变)，那么你的程序就不需要进行回溯了。如果你的程序每一分钟运行一次的话，那么你的程序需要回溯60/3 - 1次。</p><p>下面先看看如何读取当前区块：</p><pre><code>from hive import Hivefrom hive.blockchain import Blockchainhblocks = Hive()b       = Blockchain()cb      = b.get_current_block()print(cb)</code></pre><p>运行上面程序，可以看到其输出结果为：</p><pre><code>{&apos;block_id&apos;: &apos;0285ea9524d0cc9609991b4e15f52dfbae4663a5&apos;, &apos;signing_key&apos;: &apos;STM6ZHuTjdyS2vPLsaTyd1bsguGo28jsNcKKASFFTbckBWNKpFqdo&apos;, &apos;timestamp&apos;: &apos;2020-04-07T11:07:54&apos;, &apos;extensions&apos;: [], &apos;transaction_merkle_root&apos;: &apos;ce9c9aea30054f975f69be2bbf852b1804c2eee1&apos;, &apos;transaction_ids&apos;: [&apos;e2134800e3a04dd519d43242d33b938d446508b1&apos;, &apos;e5a979e66d092b5c4c2936bbdc68fa9287a244d9&apos;, &apos;c2cf361839450ab9f3a0176135edeb6d81b9bd90&apos;], &apos;witness&apos;: &apos;blocktrades&apos;, &apos;witness_signature&apos;: &apos;1fd20adda3b1f85adcb864661fef0d696a626b3eb9f4301b0381e69bd3aded604f4d77bfa409554ba4c0a42e43fe368ff992360039f2714e28f5b2fdb20356ad0d&apos;, &apos;previous&apos;: &apos;0285ea94c52b1aeda5ed28063a7c64fb5b881f31&apos;, &apos;transactions&apos;: [{&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 4010214059, &apos;transaction_num&apos;: 0, &apos;signatures&apos;: [&apos;1f116bb1406e8479fd0644e7e8288510f4ea61d65bd1614e03fd67e204c0c2fa0f1a4ebb3d0632131005b0c44f5191b75bec768e96b08c6fc983e049c5d1c61864&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;e2134800e3a04dd519d43242d33b938d446508b1&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:17:45&apos;, &apos;ref_block_num&apos;: 60034, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 10000, &apos;voter&apos;: &apos;news-steem&apos;, &apos;permlink&apos;: &apos;20200407t104855949z-post&apos;, &apos;author&apos;: &apos;minimalpris&apos;}]]}, {&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 3413890307, &apos;transaction_num&apos;: 1, &apos;signatures&apos;: [&apos;205471fe218b0b09b9a0a2ad860286b0a110ebb6d7ef3df6b624b976506054fc645f1cfe2e371a236cd79bb97d7a7a8682ffa00994d3fefd18bf62289ebc3a3e63&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;e5a979e66d092b5c4c2936bbdc68fa9287a244d9&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:08:21&apos;, &apos;ref_block_num&apos;: 60051, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 4000, &apos;voter&apos;: &apos;retinox&apos;, &apos;permlink&apos;: &apos;it-was-all-about-green-a-restful-pleasant-color&apos;, &apos;author&apos;: &apos;priyanarc&apos;}]]}, {&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 3519458629, &apos;transaction_num&apos;: 2, &apos;signatures&apos;: [&apos;204064b9720aa2aa1a8380e7b81bdb0f332a628608db586fd4a9abf1ddd03fa4137d7db804973b639032a0683f1108a1a1ed0b71c1ec4c8dd0df59fd8a6b192cfe&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;c2cf361839450ab9f3a0176135edeb6d81b9bd90&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:17:48&apos;, &apos;ref_block_num&apos;: 60035, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 600, &apos;voter&apos;: &apos;ctime&apos;, &apos;permlink&apos;: &apos;it-was-all-about-green-a-restful-pleasant-color&apos;, &apos;author&apos;: &apos;priyanarc&apos;}]]}]}</code></pre><p>如果向前回溯一次，共读取两个块的代码如下：</p><pre><code>NUMBER_OF_BLOCKS_TO_CHECK = 2 for i in range(NUMBER_OF_BLOCKS_TO_CHECK):    print(&quot;block id: %s&quot; % cb[&quot;block_id&quot;])    print(&quot;==========================&quot;)    for transaction in cb[&quot;transactions&quot;]:        for operation in transaction[&quot;operations&quot;]:            print(operation[0])                                                                                                            previousid = int(cb[&quot;previous&quot;][:8], base=16)    cb = b.hive.get_block(previousid)</code></pre><p>其运行结果如下：</p><pre><code>block id: 0285eb1b051eb25a0475e4867499303f48d7d77e==========================transfervotecustom_jsonvotevoteblock id: 0285eb1aff2e699579bdd7136493f3a5ea4dedbf==========================votevotevotevotevotevotevotevotevotevotevotevote</code></pre><p>至此，我们已经可以读取块中的信息，<a href="/hive-telegram-2/">下一篇文章</a>会说说怎么定义感兴趣的规则。</p>]]></content>
    
    <summary type="html">
    
      实时推送Hive区块链信息到Telegram客户端（1）
    
    </summary>
    
      <category term="技术" scheme="https://aafenguk.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hive" scheme="https://aafenguk.github.io/tags/Hive/"/>
    
      <category term="Telegram" scheme="https://aafenguk.github.io/tags/Telegram/"/>
    
  </entry>
  
</feed>
