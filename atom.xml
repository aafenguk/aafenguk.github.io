<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aafeng.uk/"/>
  <updated>2021-01-05T17:44:59.382Z</updated>
  <id>https://www.aafeng.uk/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>备考SATs</title>
    <link href="https://www.aafeng.uk/sats/"/>
    <id>https://www.aafeng.uk/sats/</id>
    <published>2021-01-05T17:44:59.382Z</published>
    <updated>2021-01-05T17:44:59.382Z</updated>
    
    <content type="html"><![CDATA[<p>儿子的小学生活只剩下不到7个月了，今年五月就要参加SATs(Standard Assessment Tests)考试了。于是昨天参加了一个关于如何准备SATs考试的在线会议。尽管会议是一个培训机构组织的，其主要目的还是为了招生，但其中还是有很多有用信息的。</p><p><img src="https://user-images.githubusercontent.com/63479035/103679739-224e5f80-4f7d-11eb-928e-ec14a9dff755.png" alt="image"><br>Source: Pixabay</p><p>去年由于疫情，孩子们的学习进度都或多或少的受到一些影响。但至于受到多大的影响，心理还真的不是很有数。参加了这次会议后，才知道了差距，看样子儿子在接下来的几个月中要加油了。</p><p>根据NFER (National Foundation for Educational Research)的研究结果，英国的小学生的学习进度大约滞后了三个月。也就是说，小学的教学进度大约滞后了33%。那么，缺的这些知识只能靠家长和课外补习班了。</p><p>况且，在疫情期间，由于都是在家学习，老师在网上教学效果会打折扣，同时家长一边工作，一边带娃，这样孩子们的学习效果还会再打折扣。而且，并不是所有家长都有能力辅导孩子们功课的。如此算来，前面说的滞后三个月可能还是比较乐观的估计。。。</p><p>可能是考虑到这些吧，官方取消了今年SATs考试的Science，英语也取消了grammar, punctuation，还有spelling，只考Reading。这样考生的压力就会小很多，主要专注于数学和英语阅读理解就可以了。同时考试结果也不像往年的A，B，C等级别，而仅有达标(AS)和未达标(NS)两种。</p><p>如果想要看看教学大纲，可以参考官网：<a href="https://www.gov.uk/education/school-curriculum" rel="external nofollow noopener noreferrer" target="_blank">https://www.gov.uk/education/school-curriculum</a><br>在schoolrun这个网站上还有很多试题可以参考：<a href="https://www.theschoolrun.com/" rel="external nofollow noopener noreferrer" target="_blank">https://www.theschoolrun.com/</a></p><p>非常有趣的是，一位经验丰富的老师也分享了一些考试技巧，让我觉得非常熟悉，这不是当年我在准备各种考试时候的技巧吗？比如：先不要和难题死磕，而是先把最有把握拿分的题做完，再啃那些难题。如果实在做不出来，也不要空着那些选择题，可以蒙一下。万一对了呢？？？再比如说，在英文阅读理解时，要把关键词先画出来。</p><p>无论如何，看来接下来的几个月不会太轻松了。。。</p>]]></content>
    
    <summary type="html">
    
      备考SATs
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>育儿 - 早期智力开发真的好吗？</title>
    <link href="https://www.aafeng.uk/kids-training-classes/"/>
    <id>https://www.aafeng.uk/kids-training-classes/</id>
    <published>2021-01-02T23:36:25.649Z</published>
    <updated>2021-01-02T23:36:25.649Z</updated>
    
    <content type="html"><![CDATA[<p>最近孩子参加了一个国内的思维训练课程。在辅导孩子作业的时候，感觉作为一个6岁的孩子，所学的知识似乎有些太超前了。呵呵，不知道是因为国外对早期的智力开发并不是很提倡而导致的差异，我感觉对孩子的智力挖掘似乎有些过早了。</p><a id="more"></a><p>这个课程涉及的方面很多：数独，快速两位数加减法（技巧），空间想象力，推理能力等等。这还只是上课一个月以来接触到的，后续还会有很多知识点。</p><p>就拿今天孩子的一道作业题为例吧：</p><p><img src="https://user-images.githubusercontent.com/63479035/103468418-c606f800-4d50-11eb-85a9-9685984447aa.png" alt="image"></p><p>对于这道题，我首先考虑着既然是一道空间想象力的训练题，那么就靠脑子想吧。可是想了半天，不光女儿，就连我都想不出来。难道是我的空间想象力太差了？不应该啊，我毕竟是数学专业科班出身啊，当时大学期间的空间解析几何学的还是很好的。但就是没想出来。。。囧😳</p><p>再怎么讲，问题还是要解决的。正好家中有好多立方体玩具，于是采用了一个笨办法：把所有配件都做好，然后一个一个的拼接，看看怎么能拼出来？</p><p>这是做好的组件：</p><p><img src="https://user-images.githubusercontent.com/63479035/103468520-aa502180-4d51-11eb-9862-7fc4b4ed7aab.png" alt="image"></p><p>然而，问题来了，就算拿着这些组件，按照各种组合尝试，我也是试了很多次才试出来。那么，怎么才能教会一个6岁的小朋友呢？于是果断的把这道题转换为一个简单的游戏，帮助女儿把正方体拼出来就好了，目前还是不做深究了。</p><p>和女儿同班的都是国内的小朋友，女儿在班中还是个妥妥的小学霸，几乎所有问题都是最早答出来的。那就意味着，这道题应该是所有小朋友都答不上来的。那么教育机构这样做是不是有些拔苗助长了？做不出来的话，有些打击家长和孩子的自信心；（家长）做出来了，似乎又很难和这么小的孩子讲清楚。</p><p>看样子，家长们还是需要淡定一些，不要陷入这种不必要的内卷。。。。</p>]]></content>
    
    <summary type="html">
    
      育儿 - 早期智力开发真的好吗？
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>周末影院 - Soul</title>
    <link href="https://www.aafeng.uk/soul-review/"/>
    <id>https://www.aafeng.uk/soul-review/</id>
    <published>2020-12-28T17:25:21.630Z</published>
    <updated>2020-12-28T17:25:21.630Z</updated>
    
    <content type="html"><![CDATA[<p>这个周末看了一部朋友强烈推荐的影片：《Soul》，中文翻译成了《心灵奇旅》。这果然是一部非常治愈的影片，这两天刷爆了朋友圈，很多朋友都看了这部影片并给出好评。</p><a id="more"></a><p>如果说的高大上一点，这部影片探讨了“我为什么活着”这个哲学问题。假如你现在死去，是否会有遗憾？</p><p>影片从一个黑人音乐老师Joe开始。他是一个非常普通的人，在一所中学教音乐，每天面对一群并不喜欢音乐的孩子，做着无聊的工作，过着平淡的生活。和很多人一样，Joe也有自己的梦想：在一个爵士乐队中演奏钢琴。很快机会来了，Joe被一个乐队选中，可是在他出门的时候，却不小心掉在一个下水道口中，摔死了。。。</p><p>自此，他的灵魂踏上了一个奇异之旅，来到了一个众多灵魂所在的生前世界，在那里，众多灵魂在转世之前将要形成自己独特的个性和兴趣爱好。这就让人不禁在想：是什么让我们成为现在的自己？ 我们为什么与众不同？ 我们的性格、爱好、习惯又是怎么形成的？在这里Joe遇到了一个老油条22号灵魂。22可以说是一个负能量的集合体，他在这个生前世界中已经游荡了千年，但并不想转世为人。</p><p>Joe极力想像22证明现实世界的魅力，他和22的现实之旅也就开始了，这是一个改变22的旅程，也是改变Joe的旅程。在这个旅程之中，Joe慢慢明白了人生的意义。</p><p>在电影中，让我们面对了一个又一个的问题：如果你早就知道，人生本不完美，就算努力也未必会获得成功，那么你还愿意活这一次吗？如果你像Joe一样，遭遇不幸生命戛然而止，你会觉得遗憾吗？</p><p>生命是短暂的，我们可能会遭遇很多的不幸，这就正如鲜花终将凋谢，亲人终将离我们而去。。。但正因为如此，我们才要活在当下，珍惜所有。如果爱是永恒的，生命是永恒的，可能我们就不会珍惜了。。。</p><p>这部电影的主角太普通了，以至于很多人都会在他身上找到共同点，在生命中的某个时刻，会和电影中的某个片段重合，那么，我们该要怎么做，才能不留下遗憾呢？</p>]]></content>
    
    <summary type="html">
    
      周末影院 - Soul
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>放风 - 冷清的圣诞集市</title>
    <link href="https://www.aafeng.uk/xmas-market/"/>
    <id>https://www.aafeng.uk/xmas-market/</id>
    <published>2020-12-21T08:03:49.580Z</published>
    <updated>2020-12-21T08:03:49.580Z</updated>
    
    <content type="html"><![CDATA[<p>算算已经好长时间没有带孩子出门了。听朋友说小城中心的灯光布置的非常漂亮，圣诞集市也开了，很有圣诞感觉。于是决定带孩子们去看看。</p><p><img src="https://user-images.githubusercontent.com/63479035/102750613-07b19f00-435e-11eb-9cd3-bffae1db2bee.png" alt="image"><br><a id="more"></a></p><p>其实做这个决定的时候也有些犹豫。后来想了想，圣诞灯光/集市是户外的，而且目前的人流远不如往年那么拥挤，如果带好口罩，注意防护，应该还行吧。毕竟长时间憋在家中，人都会憋坏的。</p><p>路过了几家酒店，和往年热闹的气氛相比，这些酒店门口都没有看到任何客人。甚至有的酒店大厅都黑着灯。今年的疫情给了旅游行业重创，希望这些酒店能够撑住这个行业的严冬。。。</p><p><img src="https://user-images.githubusercontent.com/63479035/102751733-3466b600-4360-11eb-8725-35205baff3d0.png" alt="image"></p><p>市中心最热闹的就那么几条步行街，很自然的就走到了圣诞集市。圣诞集市的摊贩似乎没有太大变化，卖食品，尤其是各种甜食的都还在，卖装饰品，家居用品的等等都还在。但那些卖新鲜肉的，鱼类的摊贩都没有了，可能是疫情导致的吧。</p><p>往年的圣诞集市可以说是熙熙攘攘，人挨着人，有的摊位前挤满了人，要想近前得话只能排队等。但今年的圣诞集市可以说是太冷清了。很多摊位前都没有人。极个别摊位前会有一两个人。我真的担心这些摊主们还能支撑下去吗？</p><p>在街边有好几家贩卖圣诞食物的摊位，主要就是各种饮品，包括Mulled Wine。往年我都会买上一杯，但今年想想还是算了吧。这边另外一种冬季特有的美食就是烤栗子。哎，也算了吧。</p><p>市中心唯一热闹的地方就是这个旋转木马。可以看到排队的人群都保持着社交距离，木马之间的距离应该也是安全的。同时每批人结束后，摊主都会进行消毒。从孩子们的眼神中能看到他们的渴望。但我还是说，这个还是算了吧，等疫情过去，再补回来。</p><p><img src="https://user-images.githubusercontent.com/63479035/102752592-af7c9c00-4361-11eb-9bf5-a98f81bd183a.png" alt="image"></p><p>尽管多了很多限制，但孩子们玩的还是非常开心的。毕竟对于他们而言，只要能出门，就已经很不错了。</p>]]></content>
    
    <summary type="html">
    
      放风 - 冷清的圣诞集市
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>在DynamoDB中使用GSI</title>
    <link href="https://www.aafeng.uk/dynamodb-gsi/"/>
    <id>https://www.aafeng.uk/dynamodb-gsi/</id>
    <published>2020-12-11T17:54:12.688Z</published>
    <updated>2020-12-11T17:54:12.688Z</updated>
    
    <content type="html"><![CDATA[<p>由于DynamoDB是一个基于键/值方式存储的数据库，因此其性能卓越，能够快速返回待查询的信息。不过，当要进行稍微复杂查询的时候，就要在设计初期考虑清楚，其Partition Key(PK)，Sort Key(SK)，以及Global Secondary Index(GSI)的设计了。</p><p><img src="/images/technology/aws/DynamoDB.png" alt><br><a id="more"></a></p><p>下面举一个例子来说明：</p><p>首先创建一个表：students<br>Partition key: StudentId<br>Sort key: RegistrationDate<br>普通字段：OriginCountry</p><p>这个例子主要是说明GSI是如何使用的。因此不要在数据库设计上较真。</p><p>之所以这么说，是因为在DynamoDB的数据库设计中，尤其是其PK和SK的命名尽量要保证能够描述所有即将保存的数据。这点和传统的关系型数据库不同。在关系型数据库中，把不同的信息保存在不同表中，再建立表和表之间的关系。但在DyanmoDB中，可以把很多不同种类的信息放入同一个表中。比如：学生的基本信息，考试成绩可以放在同一个表中。这里的PK描述的是“这是关于谁的信息”，而SK描述的是这个信息是关于什么的。这也是为什么PK叫做Partition Key的原因了，如果用DynamoDB存储海量数据，那么不同PK值对应的数据可能存储在不同的分区中，在同一个分区中，则可以使用SK快速定位数据。</p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>添加如下的记录到上面的表中：</p><p><img src="https://user-images.githubusercontent.com/63479035/101931726-bb35c900-3bd1-11eb-8e44-3f2fb8c280d7.png" alt="image"></p><p>可以使用AWS DynamoDB控制台来手动添加数据，也可以通过编码方式来实现。比如，在Node.js中通过编码方式实现数据的添加：</p><p>首先，将KEY/SECRET添加到.env文件中。其文件内容为：</p><pre><code>KEY=XXXXSECRET=XXXX</code></pre><p>运行如下Node代码添加一条记录：</p><pre><code>const AWS = require(&apos;aws-sdk&apos;)require(&apos;dotenv&apos;).config({path: &apos;.env&apos;})const dynamoDb = new AWS.DynamoDB.DocumentClient({  region: &apos;eu-west-1&apos;,  credentials: {    accessKeyId: process.env.KEY,    secretAccessKey: process.env.SECRET  }})const addItem = async data =&gt; {  const params = {    TableName: &apos;test&apos;,    Item: {      StudentId: &apos;20200106&apos;,      RegistrationDate: &apos;2020-01-02 09:08:30&apos;,      OriginCountry: &apos;China&apos;    }  }  await dynamoDb.put(params).promise()}addItem()</code></pre><h2 id="通过get查询单一数据"><a href="#通过get查询单一数据" class="headerlink" title="通过get查询单一数据"></a>通过get查询单一数据</h2><pre><code>const AWS = require(&apos;aws-sdk&apos;)require(&apos;dotenv&apos;).config({path: &apos;.env&apos;})const dynamoDb = new AWS.DynamoDB.DocumentClient({  region: &apos;eu-west-1&apos;,  credentials: {    accessKeyId: process.env.KEY,    secretAccessKey: process.env.SECRET  }})const getItem = async data =&gt; {    const params = {      TableName: &quot;students&quot;,      Key: {        StudentId: &apos;20200101&apos;,        RegistrationDate: &apos;2020-01-02 09:01:00&apos;      }    }    const result = await dynamoDb.get(params).promise()    return result.Item}getItem().then(x =&gt; {    console.log(x)})</code></pre><p>运行后返回结果：</p><p>{ RegistrationDate: ‘2020-01-02 09:01:00’,<br>  OriginCountry: ‘UK’,<br>  StudentId: ‘20200101’ }</p><h2 id="使用GSI进行多维度查询"><a href="#使用GSI进行多维度查询" class="headerlink" title="使用GSI进行多维度查询"></a>使用GSI进行多维度查询</h2><p>现在问题来了，如果我们想要查询所有来自于“UK”的学生，怎么办？目前只有一个笨办法：Scan。也就是一条一条记录的读取比较。可以想象，如果数据量比较大的时候，这种方式是不可行的。</p><p>如果要想高效查询的话，需要建立GSI。</p><p><img src="https://user-images.githubusercontent.com/63479035/101935369-e2db6000-3bd6-11eb-9528-2d6ddb1260ae.png" alt="image"></p><p>接下来就可以通过GSI进行查询了。</p><pre><code>const AWS = require(&apos;aws-sdk&apos;)require(&apos;dotenv&apos;).config({path: &apos;.env&apos;})const dynamoDb = new AWS.DynamoDB.DocumentClient({  region: &apos;eu-west-1&apos;,  credentials: {    accessKeyId: process.env.KEY,    secretAccessKey: process.env.SECRET  }})const getAllItems = async data =&gt; {  const params = {    TableName: &apos;test&apos;,    IndexName: &apos;GSI1&apos;,    KeyConditionExpression: &apos;OriginCountry = :country AND begins_with(RegistrationDate, :date)&apos;,    ExpressionAttributeValues: {      &apos;:country&apos;: &apos;UK&apos;,      &apos;:date&apos;: &apos;2020&apos;    }  }  const result = await dynamoDb.query(params).promise()  return result.Items}getAllItems().then(x =&gt; {  console.log(x)})</code></pre><p>可以看到返回了多条记录：</p><pre><code>[ { RegistrationDate: &apos;2020-01-02 09:01:00&apos;,    OriginCountry: &apos;UK&apos;,    StudentId: &apos;20200101&apos; },  { RegistrationDate: &apos;2020-01-02 09:05:00&apos;,    OriginCountry: &apos;UK&apos;,    StudentId: &apos;20200102&apos; },  { RegistrationDate: &apos;2020-01-02 09:07:00&apos;,    OriginCountry: &apos;UK&apos;,    StudentId: &apos;20200104&apos; } ]</code></pre><p>总结一下，GSI其实就像是从另一个角度来建立PK。一旦建立了GSI，就可以像PK+SK一样，使用GSI+SK来快速检索数据。</p>]]></content>
    
    <summary type="html">
    
      在DynamoDB中使用GSI
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>英国圣诞传统饮品-Mulled Wine</title>
    <link href="https://www.aafeng.uk/mulled-wine/"/>
    <id>https://www.aafeng.uk/mulled-wine/</id>
    <published>2020-12-09T17:48:57.900Z</published>
    <updated>2020-12-09T17:48:57.900Z</updated>
    
    <content type="html"><![CDATA[<p>在英国圣诞节的传统美食中，Mulled Wine香料酒是不可或缺的饮品之一。在往年圣诞前后，几乎所有的圣诞集市，各种和圣诞相关的活动场所，都有贩卖Mulled Wine的。</p><p><img src="https://user-images.githubusercontent.com/63479035/101666221-d7a4fa80-3a45-11eb-8290-3165c3d43843.png" alt="image"></p><a id="more"></a><p>今年很多圣诞集市都取消了，因此要想喝到Mulled Wine，就只能从超市买回来自己热着喝了。当然，也可以自己配这种香料酒。</p><p>【<a href="https://amzn.to/3m1zJzp" rel="external nofollow noopener noreferrer" target="_blank">查看英国Amazon上的Mulled Wine</a>】</p><p>我个人很喜欢这种香料酒。主要在英国，冬天很是阴冷。喝上一杯热红酒暖胃，感觉很舒服。尽管热红酒的原料红酒一般比较廉价，但由于加热过程能起到醒酒的功效，因此酒的口感会大幅度提升，同时，由于添加了各种香料和糖，酒的口感就会更加温润，让人难以拒绝。</p><p>如果要自己配制的话，也十分简单。当然，红酒是主要原料。有些国家也选择其他果酒作为主要原料。同时再配以少许桂皮，八角，橙子或柠檬，糖。用小火煮10分钟左右就好了。由于在煮的过程中酒精会挥发，因此可以考虑再添加一点朗姆酒或白兰地之类的酒。</p><p>说起这种香料酒的起源，据说是来自古罗马时期。当时的罗马士兵到处征战，打到天寒地冻的北欧，就用这种热红酒驱寒，随着古罗马版图的扩张，这种习俗就扩展到了整个欧洲。现在成了英国，德国，奥地利，挪威，瑞典等国家备受欢迎的冬季饮品。</p><p>每年圣诞节期间，去当地人家做客的时候，主人都会准备一些香料酒来招待客人。有次看到有位英国人家竟然机智的把电饭锅的保温功能利用上了。把香料酒加热后放入电饭锅后，即取即喝，非常方便。</p><p>如果没有喝过的话，建议可以尝试一下，别有一番风味。</p>]]></content>
    
    <summary type="html">
    
      英国圣诞传统饮品-Mulled Wine
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>最近尝试的菜谱</title>
    <link href="https://www.aafeng.uk/recipes/"/>
    <id>https://www.aafeng.uk/recipes/</id>
    <published>2020-12-07T15:45:14.227Z</published>
    <updated>2020-12-07T15:45:14.227Z</updated>
    
    <content type="html"><![CDATA[<p>最近喜欢上了美食作家王刚的Youtube美食频道。按照他的菜谱做出来的菜失败率极低。但有个问题就是，每次对着视频要反复看几遍才行，比较耽误工夫。下面记录一下我做过菜的简要步骤。极个别菜是按照别的厨师菜谱做的。这样下次再做的时候就省时间了。</p><a id="more"></a><h2 id="口水鸡"><a href="#口水鸡" class="headerlink" title="口水鸡"></a>口水鸡</h2><p>姜拍散，葱切段<br>姜葱下锅，放入盐，料酒<br>整鸡放入锅中，加入花椒<br><del>大火烧开后关火，盖盖闷40分钟</del>在开水中煮30分钟，再用开水闷10分钟<br>40分钟后将鸡捞出放入凉开水中泡凉<br>料汁：姜末，蒜末，辣椒碎，盐2克，糖2勺，生抽10克，醋2克，煮鸡原汤少许，红油，花椒面<br>鸡肉切块，撒上料汁，葱花</p><h2 id="腐乳鸡翅"><a href="#腐乳鸡翅" class="headerlink" title="腐乳鸡翅"></a>腐乳鸡翅</h2><p><img src="/images/food/wanggang/fu-ru-ji-chi.jpg" alt></p><p>碗中加入2块玫瑰腐乳，一勺腐乳汁，一大勺生抽，2勺料酒，一勺老抽，一勺蚝油，盐，黑胡椒粉，拌匀<br>鸡翅洗净后加入酱汁，蒜末，姜片，腌制1小时<br>放入电饭锅，按煮饭按钮<br>炒锅中炒青椒丝，放入鸡翅，芝麻，翻炒出锅</p><h2 id="盐水鸭"><a href="#盐水鸭" class="headerlink" title="盐水鸭"></a>盐水鸭</h2><p><img src="/images/food/wanggang/yan-shui-ya.jpg" alt></p><p>将鸭肉用食盐及花椒粉腌制5个小时。<br>锅中加水烧开，放入葱，姜，八角，香叶<br>将鸭肉放入锅中煮40分钟后用凉水冷却后切成块装盘。</p><h2 id="自贡名菜-小煎鸭"><a href="#自贡名菜-小煎鸭" class="headerlink" title="自贡名菜-小煎鸭"></a>自贡名菜-小煎鸭</h2><p><img src="/images/food/wanggang/zi-gong-xiao-jian-ya.jpg" alt></p><p>将鸭子切成小块。<br><del>小辣椒50克</del>（我用的一个青椒）<br><del>小米辣30克</del><br>大蒜若干<br>姜片100克<br>葱两根</p><p>加料酒焯鸭肉<br>加油，花椒，炒鸭肉<br>加入<del>干辣椒</del>，大蒜，炒香<br>加入豆瓣酱，炒出红油<br>我添加了这步：加水炖30分钟，否则鸭肉不软，孩子咬不动<br>加入小辣椒，炒香<br>加入盐，糖，生抽<br>加入葱，姜片<br>加入少量香醋翻炒，出锅</p><h2 id="红烧鱼"><a href="#红烧鱼" class="headerlink" title="红烧鱼"></a>红烧鱼</h2><p>鱼洗净，切一字花刀放入盆中，准备姜片，葱段，料酒腌制10分钟。<strong>不要放盐</strong><br>准备姜末，蒜末，红泡椒碎<br>宽油炸鱼至金黄色<br>加底油，花椒，姜葱末，泡椒，豆瓣酱<br>加入清水，熬制两分钟<br>加入糖，盐，胡椒粉，生抽，醋<br>加入鱼烧8分钟后将于捞出<br>汤汁中加入淀粉收浓后淋在鱼上</p><h2 id="爆炒鱿鱼"><a href="#爆炒鱿鱼" class="headerlink" title="爆炒鱿鱼"></a>爆炒鱿鱼</h2><p>鱿鱼切花刀后切成小片，鱿鱼须切段<br>烧开水，水中加盐，多放盐<br>焯鱿鱼，放入料酒，<strong>时间一定要短</strong><br>锅中加油，蒜，葱，姜，豆瓣酱<br>加入青红椒<br>加入鱿鱼，不要翻锅<br>加入糖，酱油，料酒<br>加入生粉水勾芡</p><h2 id="藕片蒸肉"><a href="#藕片蒸肉" class="headerlink" title="藕片蒸肉"></a>藕片蒸肉</h2><p>剁五花肉肉馅，加入姜葱碎<br>盆中加入盐，酱油，蚝油三克，黄酒20克，老抽，米粉拌匀，再加入干淀粉将水分收干<br>藕去皮切薄片<br>莲藕两头切碎，胡萝卜，香菇剁碎放入拌好的肉馅盆中<br>将肉放入藕片中夹好，放入盘中<br>蒸12分钟<br>调汁：酱油，蚝油，几勺白糖<br>锅中加入调好的料汁+蜂蜜水+淀粉勾芡<br>淋在藕片上</p><h2 id="糖醋排骨"><a href="#糖醋排骨" class="headerlink" title="糖醋排骨"></a>糖醋排骨</h2><p><img src="/images/food/wanggang/tang-cu-pai-gu.jpg" alt></p><p>姜片，葱段<br>冰糖80克，醋50克，盐1克，生抽10克<br>排骨加料酒焯水<br>排骨煸炒五分钟<br>加入姜，葱，料酒，翻炒2分钟<br>加入糖色翻炒<br>加入调料汁，翻炒后加入清水<br>大火烧开后转小火炖40分钟<br>收汁时加入白芝麻<br>加入葱花翻炒出锅</p><h2 id="风味排骨"><a href="#风味排骨" class="headerlink" title="风味排骨"></a>风味排骨</h2><p>排骨放入盆中，加入盐，碱，清水，抓洗三分钟，倒出水<br>放入盐，胡椒粉，生抽，料酒，生姜，蚝油，五香粉，拌匀后放入蒜油10克腌制<br>蒜末，姜末，辣椒粒，葱白切粒<br>干辣椒段，香菜切段<br>宽油，放入排骨炸五分钟，倒入盘中<br>放入干辣椒小火爆香，放入辅料爆香<br>加入老干妈或豆豉两勺<br>加入排骨<br>加入五香粉，熟芝麻，翻炒均匀<br>加入葱油，香菜翻炒几下出锅</p><h2 id="懒人可乐排骨"><a href="#懒人可乐排骨" class="headerlink" title="懒人可乐排骨"></a>懒人可乐排骨</h2><p>排骨放入盆中，加入盐三勺，面碱1勺，料酒，五分钟后洗净排骨<br>焯水<br>柠檬半个，姜片，两根小葱，八角，桂皮，香叶，冰糖，生抽20克，可乐1000克，盐<br>锅中加入料汁<br>加入排骨烧开，转小火烧40分钟<br>收汁后装盘</p><h2 id="青椒炒猪肝"><a href="#青椒炒猪肝" class="headerlink" title="青椒炒猪肝"></a>青椒炒猪肝</h2><p>猪肝洗净，切薄片，加入盐，白胡椒粉，酱油，蛋黄一个，淀粉三克，拌匀，加入植物油<br>青椒切片<br>姜末，蒜末，葱段<br>碗中加入盐，胡椒粉，蚝油，生抽，老抽，水，干淀粉，拌匀<br>宽油，烧热后，将猪肝下锅离火将猪肝滑熟，倒出备用<br>加入葱姜蒜，青椒片，炒熟<br>加入猪肝，料汁，料酒<br>炒熟后，加入少许油出锅</p><h2 id="葱爆牛肉"><a href="#葱爆牛肉" class="headerlink" title="葱爆牛肉"></a>葱爆牛肉</h2><p><img src="/images/food/wanggang/cong-bao-niu-rou.jpg" alt></p><p>牛肉切片，放入碗中清洗，挤干水分备用<br>盆中加盐，胡椒粉，老抽，酱牛肉搅拌至<strong>水干粘手</strong><br>加入蛋清一个，继续搅拌<br>加入淀粉10克，拌匀<br>加入植物油10克拌匀</p><p>姜切小片，蒜片，红椒一个切片，葱切斜段/洋葱</p><p>蒸鱼豉油8克，料酒5克，盐，胡椒粉，淀粉，拌匀</p><p>锅中加油，将牛肉炒熟倒出备用<br>锅中加入油，将葱姜，红椒下锅，加入蚝油，甜面酱各3克爆香<br>加入牛肉翻炒，加入葱段炒至断生<br>加入料汁，翻炒出锅</p><h2 id="酱牛肉"><a href="#酱牛肉" class="headerlink" title="酱牛肉"></a>酱牛肉</h2><p>牛肉浸泡三小时<br>盆中加入黄豆酱400克，酱油150克，糖色，老抽20克，搅拌均匀<br>生姜拍散<br>八角2颗，桂皮一块，香叶4片，拍破的草果2颗，小茴香5克<br>锅中放入清水，牛肉冷水下锅焯水<br>锅中放油，酱汁炒香<br>加入牛肉，清水没过牛肉，烧开后放入小葱，转小火煮60分钟<br>关火浸泡30分钟<br>捞出小葱，大火烧开撇去浮沫，关火浸泡40分钟<br>烧开，加入盐5克，胡椒粉1克，白糖3克，关火浸泡30分钟<br>放凉后抹上香油，用保鲜膜包好放入冰箱<br>酱汁可以再次使用制作排骨，猪蹄之类</p><h2 id="牛排"><a href="#牛排" class="headerlink" title="牛排"></a>牛排</h2><p>用刀背把牛肉断筋<br>牛排撒盐，黑胡椒粉，抹上油，腌制至少一个小时<br>平底锅烧热，<strong>不放油</strong>，放入牛排，<br>煎完一面再换另一面，表面略焦黑就可以翻面<br>关火，将调料放入锅中，可选红酒，红油，或生抽</p><h2 id="红焖羊肉"><a href="#红焖羊肉" class="headerlink" title="红焖羊肉"></a>红焖羊肉</h2><p><img src="/images/food/wanggang/hong-men-yang-rou.jpg" alt></p><p>萝卜切滚刀块<br>羊肉切块<br>葱段<br>开水中焯萝卜<br>冷水加入羊肉，料酒后烧开焯一下<br>加油，八角，花椒，香叶，葱，姜，孜然粉，小茴香<br>加入豆瓣酱，羊排翻炒<br>加入料酒<br>加入清水没过羊排，炖40分钟<br>加入胡椒粉，老抽，生抽，盐，萝卜后炖5分钟</p><h2 id="炝拌牛心包菜"><a href="#炝拌牛心包菜" class="headerlink" title="炝拌牛心包菜"></a>炝拌牛心包菜</h2><p>包菜切细丝<br>蒜末，花椒，干辣椒段，热油浇入碗中<br>加入盐，糖，葱油，蒸鱼豉油8克，醋5克<br>料汁水倒入盆中拌匀</p><h2 id="风味茄子"><a href="#风味茄子" class="headerlink" title="风味茄子"></a>风味茄子</h2><p>茄子切块，放入盆中，加入白醋3克，土豆淀粉10克拌匀，撒上少许清水<br>再加入土豆淀粉30克拌匀<br>撒清水，加淀粉40克拌匀<br>蒜末，葱末，姜末，青花椒<br>清水30克，生抽8克，蚝油3克，糖半勺，淀粉1勺，拌匀<br>宽油炸茄子至金黄色，捞出备用<br>料头炒香后放入料汁，收浓后放入油<br>放入茄子翻炒后出锅</p><h2 id="小炒茄子"><a href="#小炒茄子" class="headerlink" title="小炒茄子"></a>小炒茄子</h2><p>茄子切丝放入盆中<br>加入盐，白醋，拌匀<br>稍肥五花肉切片<br>蒜拍散<br>尖辣椒切成滚刀块<br>爆炒五花肉<br>加入蒜，辣椒<br>茄子下锅炒三分钟<br>茄子吐出油后大火炒一分钟<br>加入盐，糖，蚝油，生抽</p><h2 id="肉末芹菜粒"><a href="#肉末芹菜粒" class="headerlink" title="肉末芹菜粒"></a>肉末芹菜粒</h2><p><img src="https://user-images.githubusercontent.com/63479035/101096998-4bfc1b80-35b8-11eb-9093-0212cef255e9.png" alt="image"></p><p>芹菜切粒<br>蒜末姜末<br>锅中放油，花椒，肉末炒香，放入蒜末，姜末，料酒，豆瓣酱炒出红油<br>放入芹菜粒炒香<br>加入盐，糖，生抽</p><h2 id="醋溜白菜"><a href="#醋溜白菜" class="headerlink" title="醋溜白菜"></a>醋溜白菜</h2><p>白菜洗净，斯成块，菜帮和叶子分开<br>蒜末，干辣椒<br>汁：生抽8克，醋8克，盐1克，1勺糖，淀粉2克，拌匀<br>油热后放入蒜末，干辣椒<br>加入菜梗，爆炒至断生<br>加入菜叶，炒熟<br>加入汁，收汁后出锅</p><h2 id="素炒西兰花"><a href="#素炒西兰花" class="headerlink" title="素炒西兰花"></a>素炒西兰花</h2><p>蒜片，葱段<br>西兰花切成小块，放入盆中加盐清洗<br>红椒切片，蟹腿菇<br>锅中加水烧开后，加盐，油，放入西兰花焯水，冲凉并沥干水分<br>锅中加油，蒜片，葱段，西兰花，翻炒一分钟后加入少许水<br>加盐，少许糖<br>加少许水淀粉翻炒出锅</p><h2 id="蚂蚁上树"><a href="#蚂蚁上树" class="headerlink" title="蚂蚁上树"></a>蚂蚁上树</h2><p>红薯粉放入盆中，开水泡15分钟后沥干水分<br>五花肉200克剁成肉末<br>姜末，蒜末，泡椒碎，芹菜粒，葱碎<br>油加热后放入花椒，爆香肉末<br>加入姜，泡椒<br>加豆瓣酱炒出红油<br>加入粉条炒匀<br>白糖，胡椒粉，老抽，生抽<br>加入芹菜粒<br>加入葱蒜</p><h2 id="家常豆腐"><a href="#家常豆腐" class="headerlink" title="家常豆腐"></a>家常豆腐</h2><p>豆腐切菱形块<br>猪肉切片<br>午餐肉切菱形块，红椒半个切片<br>木耳一小片<br>蒜苗切段<br>红泡椒切段，泡姜片<br>宽油炸豆腐，豆腐出国前，将午餐肉，红椒下锅<br>猪肉下锅爆香，加入泡椒，泡姜，豆瓣酱，加入少量水烧开<br>盐，糖，生抽<br>加入豆腐，午餐肉，小火烧两分钟至入味<br>加入木耳，蒜苗<br>加入水淀粉勾芡</p><h2 id="萝卜羊肉汤"><a href="#萝卜羊肉汤" class="headerlink" title="萝卜羊肉汤"></a>萝卜羊肉汤</h2><p>白萝卜切滚刀块<br>羊肉800克切成小块<br>姜拍散<br>小葱三根拍散切段<br>焯羊肉<br>煸炒羊肉三分钟<br>加入白酒，葱，姜炒香<br>大火烧开后转小火炖40分钟<br>放入萝卜，烧开后小火炖20分钟<br>加入盐，糖，胡椒粉</p><p>蘸料：<br>蒜末30克，小米辣15克，酱油，盐，糖，香油5克，小葱10克，香菜<br>加入少许羊肉汤</p><h2 id="饺子馅"><a href="#饺子馅" class="headerlink" title="饺子馅"></a>饺子馅</h2><p><strong>香料油</strong><br>小茴香20克，八角10克，桂皮8克，香叶2克，花椒5克，草果2个砸开，生姜50克，葱100克<br>小火炸香料，<strong>一定小火</strong>，倒入碗中，加盖凉凉后使用</p><p><strong>香料水</strong><br>小茴香6克，花椒2克，桂皮1克，八角2克，香叶2克，草果1个去籽，浇开水泡15分钟</p><p>肉馅，葱末，姜末，盐，胡椒粉，白酒，生抽，拌匀<br>加入香料水，拌匀<br>加入香料油，拌匀</p><h2 id="鸡蛋炒米粉"><a href="#鸡蛋炒米粉" class="headerlink" title="鸡蛋炒米粉"></a>鸡蛋炒米粉</h2><p>米粉在水中浸泡，沥干水分备用<br>米粉盆中加入盐，老抽<br>打鸡蛋，放盐，搅拌<br>切火腿丝<br>葱段，生菜，豆芽<br>炒蛋，放入辅料<br>放入米粉翻炒一分钟<br>加入生抽</p><h2 id="拔丝土豆"><a href="#拔丝土豆" class="headerlink" title="拔丝土豆"></a>拔丝土豆</h2><p>土豆切小块洗净放入盆中<br>加入土豆淀粉，拌匀<br>白糖50克放入碗中<br>盛菜盘中撒入白糖<br>锅烧热后放入宽油，放入土豆，稍后放入白糖<br>土豆炸透后捞出沥油<br>将多余的油倒出<br>将土豆放回锅中<br>翻炒均匀后出锅</p>]]></content>
    
    <summary type="html">
    
      最近尝试的菜谱
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>舌之契约 - THE LAW OF THE TONGUE</title>
    <link href="https://www.aafeng.uk/law-of-tongue/"/>
    <id>https://www.aafeng.uk/law-of-tongue/</id>
    <published>2020-12-06T10:46:46.352Z</published>
    <updated>2020-12-06T10:46:46.352Z</updated>
    
    <content type="html"><![CDATA[<p>偶然间看到了一篇震撼人心的动物和人之间的故事：舌之契约：THE LAW OF THE TONGUE。</p><p><img src="https://user-images.githubusercontent.com/63479035/101266980-07a18480-374c-11eb-89c6-97d39e40a4fa.png" alt="image"></p><a id="more"></a><p>故事发生在20世纪初，讲述的是在40年间，一只叫做“Old Tom”的虎鲸带领鲸群帮助人类捕获须鲸并建立契约的故事。</p><p>在最早期的时候，澳大利亚新南威尔士的渔民一直在捕获须鲸，而须鲸同时也是虎鲸的食物。因此人类和虎鲸之间就存在着某种程度的竞争。</p><p>后来在当地土著人的帮助下，捕鲸人和Old Tom带领的虎鲸群建立起了某种默契：首先虎鲸把须鲸赶到近海处，然后Old Tom会把尾巴伸出水面告知捕鲸人做好准备。接下来由捕鲸人猎杀须鲸。接下来虎鲸们会吃掉须鲸的唇和舌头，然后把剩余的须鲸身体留给人类。这也是为什么这段故事叫做”舌之契约“的原因。这个契约一直执行了40年的时间。在这期间，捕鲸人换了三代，但Old Tom的鲸鱼团队一直在忠实的执行着契约，这为当地的捕鲸人带来了巨大的财富。</p><p>但不幸的是，这个契约最终还是被人类破坏了。在一次捕鲸活动中，天气十分恶劣。一位船员由于担心须鲸被暴风雨冲走，没等虎鲸们享用须鲸的舌头就把须鲸拖拽到船上。在这个过程中，Old Tom也被拽掉了一排牙齿。对于一只虎鲸来说，这就意味着死亡。在不久之后，Old Tom的尸体在一处浅滩被发现。可以想象，当时的虎鲸群该是多么的震惊和失望。因此自那之后，契约不复存在，虎鲸群再也没有回来。</p><p>看完这则故事之后，首先是震撼于这则故事本身，同时也惊叹于鲸群对契约精神的信守和”一根筋“：如果人类遵守规则，我会履行自己的职责。但一旦人类破坏了契约，那我将一去不返。</p><p>和动物相比，更为复杂的是人性，在很多时候，可能会因为种种外力而破坏契约，或者做出某种变通，甚至是变更契约。有些人会对天发誓，其实有些发誓的人自己都不相信自己的誓言，更谈不上任何契约精神。反倒是“人在曹营身在汉”，倒是经常为人所津津乐道。仔细想想，似乎我们从动物身上该学习的东西太多了。</p>]]></content>
    
    <summary type="html">
    
      舌之契约 - THE LAW OF THE TONGUE
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>公路惊魂</title>
    <link href="https://www.aafeng.uk/car-tyre-problem/"/>
    <id>https://www.aafeng.uk/car-tyre-problem/</id>
    <published>2020-12-04T22:05:15.934Z</published>
    <updated>2020-12-04T22:05:15.934Z</updated>
    
    <content type="html"><![CDATA[<p>前两天英国刚刚放宽了疫情封锁政策，很多商家从12月2号重新开张营业，于是决定去宜家一趟，把前一段没有处理完的事情办完。但没有想到的是，今天遭遇了在英国开车十几年来最为惊险的一幕。</p><p><img src="https://user-images.githubusercontent.com/63479035/101218139-70203100-367a-11eb-9b2d-da916415c6cc.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>昨天在出发前发现车胎有些瘪了，于是约好今天一大早去车厂检查。发现有一个后轮扎了螺丝钉，漏气了。车厂建议可以补胎，也可以换新轮胎。由于考虑到最近用车比较频繁，同时今天要去宜家，怕刚补好的胎不靠谱，于是就换了一款质量很好的车胎，心想这下应该没问题了吧。</p><p>在宜家紧紧张张的把所有事情都办完后，看了看时间，还不是很晚，于是很放松的开上车往回返。从宜家上高速只有一小段距离，车行进途中并没有发现任何问题。但在上高速前的最后一个红绿灯那里正好被红灯拦住了。</p><p>这时候，从我们后面的车中下来一位男士，跑到我们车窗前告诉我们车胎没气了。我下车一看，果然如此，车胎彻底瘪了，甚至还不如换之前被扎了的车胎。现在想想还有些后怕，如果后面的人没有告诉我们，再过一分钟我们就要开到高速上了，其后果真的不堪设想。。。</p><p>于是立刻把车的双闪打开，打电话通知了AA，被告知大约半小时左右能到。也曾经尝试这把车换道停在路边，但由于正处在最为繁忙的高速路入口，根本就没有可能并过去。于是没招了，只能在车里干等。在等待的过程中有好几辆车专门停下来问我们是否需要帮忙。想想大家都有自己的事要忙，我们还是等AA来吧。真的很感谢这些热心人。</p><p>好不容易预约的时间快到了。果然看到两辆车打着警示灯停了下来，但他们却不是AA公司的。看了下他们的制服，原来他们是Traffic Officer，应该是有热心人报告了，于是他们过来协助。他们中的一位将后面的车都拦住了，而另一辆车打着警示灯给我们开路，我们的车跟着它，这样一直把我们带到了一个安全的停车带。</p><p>再等了一会后，AA的车终于到了，车上的工作人员迅速帮我们把备胎换好，并对车况做了一个快速的检查，确认没事了，我们这才慢慢的把车开回家（备胎最快只能开50英里）。</p><p>现在回想一下，真的很感谢车后的热心人，否则等我察觉到车的异常后可能就很危险了。另外，对于AA的服务质量和服务态度真的100%满意。想想已经给AA交了10多年的年费了，这还是第一次使用他家的服务。</p>]]></content>
    
    <summary type="html">
    
      公路惊魂
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS学习资源总结</title>
    <link href="https://www.aafeng.uk/aws-learning-resources/"/>
    <id>https://www.aafeng.uk/aws-learning-resources/</id>
    <published>2020-11-23T16:11:26.228Z</published>
    <updated>2020-11-23T16:11:26.228Z</updated>
    
    <content type="html"><![CDATA[<p>下面把AWS的学习资源总结了一下。这个列表会不断更新。</p><p><img src="/images/technology/aws/aws.png" alt><img src="/images/technology/aws/aws.png" alt></p><a id="more"></a><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p><a href="https://www.aws.training/Details/eLearning?id=42594" rel="external nofollow noopener noreferrer" target="_blank">Architecting Serverless Solutions</a></p><h2 id="Dynamodb"><a href="#Dynamodb" class="headerlink" title="Dynamodb"></a>Dynamodb</h2><p><a href="https://www.dynamodbguide.com/what-is-dynamo-db" rel="external nofollow noopener noreferrer" target="_blank">https://www.dynamodbguide.com/what-is-dynamo-db</a><br><a href="https://www.dynamodbguide.com/" rel="external nofollow noopener noreferrer" target="_blank">https://www.dynamodbguide.com/</a><br><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/workbench.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/workbench.html</a><br><a href="https://hub.docker.com/r/amazon/dynamodb-local/" rel="external nofollow noopener noreferrer" target="_blank">https://hub.docker.com/r/amazon/dynamodb-local/</a><br><a href="https://www.youtube.com/watch?v=HaEPXoXVf2k&amp;ab_channel=AmazonWebServices" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=HaEPXoXVf2k&amp;ab_channel=AmazonWebServices</a><br><a href="https://www.youtube.com/watch?v=lh7q5hCrCSU&amp;list=PL6oNLEZTnXshgy4iHFULjYvcwbeMTotJp" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=lh7q5hCrCSU&amp;list=PL6oNLEZTnXshgy4iHFULjYvcwbeMTotJp</a><br><a href="https://www.youtube.com/watch?v=BnDKD_Zv0og" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=BnDKD_Zv0og</a></p><h2 id="Layers"><a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2><p><a href="https://github.com/mthenw/awesome-layers" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/mthenw/awesome-layers</a></p>]]></content>
    
    <summary type="html">
    
      AWS学习资源总结
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
      <category term="Lambda" scheme="https://www.aafeng.uk/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>关于DynamoDB的一个误解 - 多表查询</title>
    <link href="https://www.aafeng.uk/dynamodb-joins/"/>
    <id>https://www.aafeng.uk/dynamodb-joins/</id>
    <published>2020-11-23T12:06:27.146Z</published>
    <updated>2020-11-23T12:06:27.146Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始接触到DynamoDB的时候，对它有一种误解：和传统的关系型数据库相比，使用DynamoDB无法有效的进行多表查询。</p><p><img src="https://user-images.githubusercontent.com/63479035/99859907-721dc680-2b89-11eb-8af7-91f5a4c28e35.png" alt="image"></p><a id="more"></a><p>但随着学习的深入，慢慢明白了，其实DynamoDB和传统关系型数据库可以说是各有所长。DynamoDB如果设计上没有问题，可以进行类似的多表查询，而且效率奇高。但对于超级复杂的多表查询，DyanmoDB并不擅长，这是关系型数据库最为擅长的。</p><p>其实，说到DynamoDB，其最大的优点包括：</p><ul><li>由于基于键/值对的设计，其查询效率超高</li><li>基于AWS serverless，无维护成本</li><li>可以auto-scaling，可扩展性好</li></ul><p>在传统的关系型数据库中，要进行多表查询，往往会把不同表中的数据通过外键关联之后再进行查询。这样就可以组合出非常灵活的查询条件来。</p><p>在NoSQL数据库中，其设计思路从根本上是不同的。因此如果用传统的关系型数据库设计思路来理解，就会很难理解。比如在DynamoDB中，可以把在关系型数据库中的多个表放入在DynamoDB的一个表中，再通过Partition Key, Sort Key以及Global Secondary Index进行”多表“查询。</p><p>可以这么说吧，如果DynamoDB在设计时考虑到了这种组合查询的话，在后期进行开发的时候是没有问题的。由于DynamoDB是完全基于键/值进行存储的，因此其查询速度超快。但对于设计时没有考虑到的字段，就无法进行这种查询了。</p><p>因此，总结一下：如果有大量多表之间的复杂查询，选择关系型数据库。如果只是简单的”多表“查询，则应该选择NoSQL。可以这么说，90%左右的数据库选用NoSQL更为适合。只有10%左右的用例更适合选择关系型数据库。</p>]]></content>
    
    <summary type="html">
    
      关于DynamoDB的一个误解 - 多表查询
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>放过烂人烂事，其实就是放过自己</title>
    <link href="https://www.aafeng.uk/forgive-yourself/"/>
    <id>https://www.aafeng.uk/forgive-yourself/</id>
    <published>2020-11-23T12:06:17.514Z</published>
    <updated>2020-11-23T12:06:17.514Z</updated>
    
    <content type="html"><![CDATA[<p>前一段提到过，在更换家中户门的时候，遭遇了一个奇葩的人。和他面对面交流的时候，感觉人很好也很靠谱。但和他打电话预约装门时间的时候，却连续放了我三次鸽子。这两天终于下定决心，不再和这个烂人纠缠。哪怕再找一个更贵一些的公司，也认了。</p><p><img src="https://user-images.githubusercontent.com/63479035/99901303-ae4a4780-2cad-11eb-8eea-74b702cbeb96.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>最开始的时候，还想过要投诉他。毕竟像他这样对客户的，我到了英国这么多年还是头一次见过。但给他公司打电话之后才知道他就是老板。当然，在英国这里还有很多行业的监管机构，但却费时费力，到底要不要投诉？</p><p>后来慢慢想通了，我的时间有限，该做的事情又不少，干嘛把时间和经历浪费在这种人身上呢？就算真的去投诉他。要花费自己不少时间和精力，同时还影响自己的心情。</p><p>其实，在生活中难免会遇到各种各样不顺心的事情。这个时候就有两个选择：花时间和精力去较真，或者不与之纠缠，把精力集中到自己该做的事情上。</p><p>在这个时候就需要仔细考虑了，当前的烦心事真的需要花费时间和精力去做吗？自己是不是还有更重要的事情去做？有个成语叫做：退一步海阔天空。现在随着年龄的增长，慢慢体会到了它的含义。有的时候，退一步并不代表委曲求全，而是不要把精力和时间浪费到不该浪费的事情上。</p><p>举个最简单的例子：如果在街上有一只狗冲你叫了几声，在经历过短暂的惊吓之后，难道你要和它计较吗？</p><p>还曾经听过一个更为极端的例子。有位男士生活非常美满，事业有成，家庭幸福。但有一次在行车的时候自己的车被另外一个人刮蹭了一下。他觉得过错100%在于对方，于是下车理论，两人越吵越厉害，最后动起了手。这位男士受伤后被送到医院，最终不治身亡，留下了伤心欲绝的妻儿。</p><p>我想，如果这位男士能够重新选择的话，应该不会再犯同样的错误了吧？他和一个烂人争执，最终受害的是自己和家人。如果当时退一步的话，自己还有大把的美好人生和自己心爱的人一起度过，难道不好吗？</p><p>慢慢的，我明白了这个道理，如果遇到了一些烦心事，可以考虑退一步，毕竟放过那些烂人烂事，就是放过自己。</p>]]></content>
    
    <summary type="html">
    
      放过烂人烂事，其实就是放过自己
    
    </summary>
    
      <category term="思考" scheme="https://www.aafeng.uk/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在Ruby on Rails的项目中使用React</title>
    <link href="https://www.aafeng.uk/how-to-add-react-to-ror/"/>
    <id>https://www.aafeng.uk/how-to-add-react-to-ror/</id>
    <published>2020-11-23T12:06:05.586Z</published>
    <updated>2020-11-23T12:06:05.586Z</updated>
    
    <content type="html"><![CDATA[<p>下面总结一下如何在一个Ruby on Rails的项目中通过<a href="https://github.com/reactjs/react-rails" rel="external nofollow noopener noreferrer" target="_blank">react-rails</a>添加对React的支持。</p><p><img src="https://user-images.githubusercontent.com/63479035/99960108-208d5b80-2d84-11eb-8eff-4275ef44bb5e.png" alt="image"></p><a id="more"></a><p>首先在Gemfile中添加：</p><pre><code>gem &apos;webpacker&apos;gem &apos;react-rails&apos;</code></pre><p>接下来运行：</p><pre><code>bundle install</code></pre><p>运行：<br>    rails webpacker:install      </p><p>如果提示Node版本过低的话，更新至最新版本：</p><pre><code>nvm install v14.15.1</code></pre><p>再重新运行：</p><pre><code>rails webpacker:install  </code></pre><p>运行:</p><pre><code>rails webpacker:install:react rails generate react:install</code></pre><p>如果在运行最后一条命令的时候遇到错误：<br>    Running via Spring preloader in process 4175<br>    Could not find generator ‘react:install’. Maybe you meant ‘qa:install’, ‘rspec:install’ or      ‘devise:install’<br>    Run <code>rails generate --help</code> for more options.</p><p>可以运行如下命令来修复：<br>    spring stop</p><p>接下来就可以尝试创建一个组件：<br>    rails g react:component HelloWorld greeting:string</p><p>创建成功后如果需要在.erb文件中使用React组件：</p><pre><code>&lt;%= javascript_pack_tag &apos;application&apos; %&gt;&lt;%= react_component(&quot;HelloWorld&quot;, { greeting: &quot;Hello from react-rails.&quot; }) %&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      如何在Ruby on Rails的项目中使用React
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>由VPS到无服务器的迁移之旅-计划</title>
    <link href="https://www.aafeng.uk/from-vps-to-serverless-planning/"/>
    <id>https://www.aafeng.uk/from-vps-to-serverless-planning/</id>
    <published>2020-11-13T10:03:25.464Z</published>
    <updated>2020-11-13T10:03:25.464Z</updated>
    
    <content type="html"><![CDATA[<p>算算自己租赁VPS的时间已经有好多年了。在VPS上主要做两类事情，一类是跑一些cron job，这个需要一个不间断运行的服务器。另一类是测试一些自己感兴趣的技术，和一些side projects。但自从越来越多的接触无服务器架构后，感觉似乎没有必要再继续使用VPS了。</p><p><img src="https://user-images.githubusercontent.com/63479035/99056896-e4434980-2592-11eb-9be8-856e26cd5d74.png" alt="image"></p><p>首先来说说使用VPS的缺点。</p><p>第一点就是需要不停的维护VPS上的各种软件，比如升级版本，安全补丁。最为头疼的就是当操作系统的版本需要升级了，需要把VPS彻底重新升级一下，再把原来就操作系统上的应用全部安装，配置一遍。在这个过程中可能面临各种版本冲突。。。反正我每次升级操作系统，就没有顺利过。。。</p><p>第二点就是费用。VPS的费用可以说是从几美元，到几十，甚至上百美元每月的都有。自己选择了一个不是特别贵，但也不便宜的VPS。月付之后，感觉利用率并不高。也就是说性价比很低。</p><p>还有就是性能问题。毕竟是和别人共享主机资源。如果遇到了一个比较“忙”的邻居，你的VPS性能就会急剧下降。在我的VPS就曾经出现过两三次，登陆后键入一个ls命令之后要等上几秒钟才有反应。。。</p><p>那么，升级到无服务器架构有什么优势呢？</p><p>首先，也是我最为喜欢的，就是再也不用担心操作系统版本升级的问题了，也不用考虑各种安全补丁了。。。这些维护工作都有提供商负责了。对于最终用户，既然无服务器，自然就没有任何需要维护的了。YEAH！</p><p>关于费用问题，我在使用了一段时间的AWS之后，感觉费用还是很低的。我这里说的不是那些EC2，而是AWS中的诸多微服务，比如Lambda, APIGateway之类的。</p><p>接下来就要开始这个迁移了。希望一切顺利，在目前使用的VPS操作系统被迫升级之前全部搞完。</p>]]></content>
    
    <summary type="html">
    
      由VPS到无服务器的迁移之旅-计划
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>如何在Ruby中读写Excel Spreadsheet</title>
    <link href="https://www.aafeng.uk/manipulate-spreadsheet-in-ruby/"/>
    <id>https://www.aafeng.uk/manipulate-spreadsheet-in-ruby/</id>
    <published>2020-11-09T10:36:02.519Z</published>
    <updated>2020-11-09T10:36:02.519Z</updated>
    
    <content type="html"><![CDATA[<p>在很多系统中生成报表时，都需要使用Excel格式的文件。在这种情况下，推荐使用roo进行Excel的读取，使用caxlsx进行Excel的写入。</p><p><img src="https://user-images.githubusercontent.com/63479035/98529325-61aa4980-2275-11eb-9a2d-bd6eb6122003.png" alt="image"></p><a id="more"></a><h2 id="写入操作"><a href="#写入操作" class="headerlink" title="写入操作"></a>写入操作</h2><pre><code>require &apos;axlsx&apos;p = Axlsx::Package.newwb = p.workbookwb.add_worksheet(name: &apos;Worksheet1&apos;) do |sheet|  sheet.add_row [&apos;R1C1&apos;, &apos;R1C2&apos;, &apos;R1C3&apos;]  sheet.add_row [1, 2, 3]endp.serialize &apos;test.xlsx&apos;</code></pre><h2 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h2><pre><code>require &apos;roo&apos;rows = Roo::Spreadsheet.open(&apos;test.xlsx&apos;)rows.each_with_index { |row, index|  puts &quot;#{row[0]}, #{row[1]}, #{row[2]}&quot;}    </code></pre>]]></content>
    
    <summary type="html">
    
      如何在Ruby中读写Excel Spreadsheet
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Ruby" scheme="https://www.aafeng.uk/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Just dance</title>
    <link href="https://www.aafeng.uk/justdance/"/>
    <id>https://www.aafeng.uk/justdance/</id>
    <published>2020-11-09T10:03:00.932Z</published>
    <updated>2020-11-09T10:03:00.932Z</updated>
    
    <content type="html"><![CDATA[<p>最近家中新买了一个XBox上的健身游戏：Just dance。于是全家都有了一个共同爱好，跳舞。。。</p><p><img src="https://user-images.githubusercontent.com/63479035/98472218-8d7fed80-21e9-11eb-91af-dfd2fee4476c.png" alt="image"></p><a id="more"></a><p><img src="https://user-images.githubusercontent.com/63479035/98472227-9d97cd00-21e9-11eb-8717-d1e0dbaf1756.png" alt="image"></p><p>最早的时候无论大人还是孩子，都是跟着“PE with Joe”做各种健身操的。可以说“PE with Joe”还是很专业的，只要照着做，不仅能够健身，还能减肥。但对于孩子来说，PE with Joe的吸引力还不够。</p><p>但在一个偶然的机会看到朋友圈中有人推荐Just dance这个游戏。这个游戏最大的亮点就是把趣味性和健身结合到了一起。尤其对于孩子，就在游戏当中达到了健身的目的。</p><p>最早在Youtube上跟着一些免费视频跳。但是这些视频其实都是别人在跳的时候录制的。屏幕上显示的分数都是别人的。因此缺少了互动性。孩子们也有些失望，毕竟无论跳的好坏，最后的得分都是一样的。</p><p>后来看到孩子们这么喜欢这个游戏，又是就购买了一个付费版本的游戏。在这个游戏中，可以通过智能手机上的客户端连接到Justdance的服务器。在每个游戏中可以根据参与者的表现来打分。</p><p>同时游戏的趣味性大大增加，比如可以选择各种流行歌曲，也可以选择各种主题，比如：Frozen冰雪奇缘，万圣节，圣诞节等等。这样，孩子们就可以和自己喜欢的角色一同跳舞。游戏中还有一个最为吸引人的部分就是可以和世界各地的游戏玩家PK，在每支舞中看看谁的得分最高，排名如何。让参与者感觉是和其他的真人在同台竞技。</p><p>感觉自从疫情开始后，这种类似的虚拟网络游戏应该要火爆很多吧。</p>]]></content>
    
    <summary type="html">
    
      Just dance
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>墨菲定律</title>
    <link href="https://www.aafeng.uk/murphy-law/"/>
    <id>https://www.aafeng.uk/murphy-law/</id>
    <published>2020-11-07T23:15:15.993Z</published>
    <updated>2020-11-07T23:15:15.993Z</updated>
    
    <content type="html"><![CDATA[<p>最近有件非常有趣的事。我在超市发现了一种小黄瓜，非常脆爽可口。因此每周都会买上几盒。但有一次买回来的略有些苦，因此再下周买的时候就只买了一盒。但买了一盒的时候，黄瓜的味道又没有任何问题了。再下一周，又多买了几盒，结果又是苦味的黄瓜。如此反复了好几次。反正，只要我买少了，黄瓜味道就好，只要买多了，就是苦味的。</p><p><img src="https://user-images.githubusercontent.com/63479035/98447579-d23e5280-211d-11eb-8f49-2fece7a51189.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>我当然明白，其实黄瓜是否苦，在我购买之前就已经确定了，这只是几次巧合而已。但这仍然让我想起了著名的墨菲定律。</p><p>关于墨菲定律的最有名，也是最通俗的一个表述就是：“如果一个事情有可能会变得很糟糕，那么它一定会变得很糟糕”。</p><p>就拿我买黄瓜这件事来说吧，我最近似乎有了心理障碍，每次在买之前都在想，“这次多买几盒吧，也许不会苦？”，“这次就买一盒吧，上次买的都是苦的。”。但每次都事与愿违，买到的黄瓜总是我认为比较糟糕的结果：苦的时候买了很多，不苦的时候只买了一盒。</p><p>记得刚工作的时候，单位中有一位老工程师，经常在我耳边念叨墨菲定律，听的我耳朵都要起茧子了。但不得不说的是，墨菲定律似乎总在时不时的出现在我们的生活中。</p><p>比如：在修理一些电器的时候，拆之前就曾经想过，一定要小心些，记住每个步骤，万一再往回装的时候漏掉某个螺丝就不好了。但经常发生的就是，每次把电器修完后，再重新装好后，总是会剩下一个螺丝。也就是说，事情朝着我们不期望的方向发生了。</p><p>再比如说，每次夏天和朋友们烧烤的时候，发现烟总是朝着人的方向飘来。人为了躲避烟而换了位置，但风向似乎随之就变。。。</p><p>再比如说，无论是多么简单的工作，人都会出错。。。</p><p>也许这纯粹是一种心理作用，或者心理暗示吧。当人们认为某种事情会朝着比较糟糕的方向发展的时候，心理上从某种程度上就会接受它，进而影响了自己的行动和判断力，从而会增大向那个方向发展的概率。</p><p>无论如何，我决定今后连续几周都多买几盒黄瓜，一定要打破这个烦人的定律。</p>]]></content>
    
    <summary type="html">
    
      墨菲定律
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>如何将Beem程序在AWS Lambda上运行</title>
    <link href="https://www.aafeng.uk/run-beem-application-on-aws-lambda/"/>
    <id>https://www.aafeng.uk/run-beem-application-on-aws-lambda/</id>
    <published>2020-11-04T22:51:20.491Z</published>
    <updated>2020-11-04T22:51:20.491Z</updated>
    
    <content type="html"><![CDATA[<p>大约两，三年前就开始在VPS上跑Steem的程序了，后来有了Hive链，也开始跑Hive的程序。其实Steem/Hive的Python库还是很好用的。于是就有了几个Cronjob，点点赞，领取一些收益之类的。但近期随着对AWS服务了解的越来越多。感觉再在VPS跑Cronjob似乎有点Out了。于是开始考虑把一系列的Cronjob都搬到AWS上来，这样做最大的优势就是避免了以后服务器的维护成本。不用再考虑升级Ubuntu的各个版本/打各种安全补丁了。同时，也能节省一些银子。相信我，AWS的一系列Serverless服务真正用起来之后，在这些服务上的花费真的比想象中的要低不少。</p><p><img src="https://user-images.githubusercontent.com/63479035/98176051-b6556980-1eef-11eb-898d-13066c63fa35.png" alt="image"></p><a id="more"></a><p>下面就以一个最简单的Beem/Hive程序为例来说明。假设我们想把下面这个Python程序挪到AWS Lambda中去：</p><pre><code>from beem.vote import Votevote = Vote(u&quot;@aafeng/bolton-abbey|abit&quot;)print(vote.json())</code></pre><p>上面这个程序非常简单，只是返回一个包含A神对我的一篇文章的点赞数据。</p><p>下面来说说如何在AWS Lambda中运行这个程序。整个过程中遇到了两个坑，下面会详细说。</p><p>这里有一个前提条件，就是已经安装了serverless框架。如果没有安装，请先自行安装，并配置好AWS的账号信息(~/.aws/credentials)。</p><h2 id="创建Lambda依赖库（layer）"><a href="#创建Lambda依赖库（layer）" class="headerlink" title="创建Lambda依赖库（layer）"></a>创建Lambda依赖库（layer）</h2><p><strong>这一步需要在一个AWS Linux的EC2中运行</strong>，后面说到第一个坑的时候会详细介绍。当然，在网上也看到有人说可以创建一个AWS Linux的docker镜像，然后在docker镜像中运行pip来安装Python依赖库。但我并没有尝试。应该也可以吧。</p><p>如果我们想要写一系列的Beem/Hive程序，肯定不想把依赖库打包到每一个Lambda中。因此这里可以创建一个AWS中共享的依赖库(Layer)。</p><p>运行：</p><pre><code>sls create --template aws-python3 --name beem-layer --path beem-layer</code></pre><p>这就会创建如下目录和文件：</p><pre><code>beem-layer├── handler.py└── serverless.yml</code></pre><p>接下来创建目录：</p><pre><code>cd beem-layermkdir libstouch libs/requirements.txt</code></pre><p>目录结构如下：</p><pre><code>→  beem-layer tree ..├── handler.py├── libs│   └── requirements.txt└── serverless.yml</code></pre><p>requirements.txt内容如下：</p><pre><code>beem</code></pre><p>安装依赖库：</p><pre><code>cd libspip install -t python/lib/python3.8/site-packages -r requirements.txt</code></pre><p>修改serverless.yml文件如下：</p><pre><code>service: my-layersframeworkVersion: &apos;2&apos;provider:  name: aws  runtime: python3.8  region: eu-west-1layers:  beem-dependencies:    path: libs    compatibleRuntimes:      - python3.8    description: &quot;Python beem dependencies&quot;</code></pre><p>在上面并没有定义Lambda函数，只是定义了layer，因此无需修改默认的handler.py，因为根本不会用到这个文件。</p><p>部署：</p><pre><code>sls deploy</code></pre><p>可以看到，很容易就在AWS中创建了一个layer。</p><p>注意：<strong>这里有第一个坑!</strong> 在后面的应用中使用这个layer的时候，总是提示找不到.so库。花了不少时间才搞清楚其原因在于：在安装Python依赖库时候的环境是Ubuntu 18，而在运行Lambda时候的环境则是Amazon Linux。两者不匹配自然就找不到所有的依赖库了。</p><p>因此最为简单的办法就是在Amazon EC2 (with Amazon Linux)中安装Python的依赖库。这样就保持了开发/部署环境和运行环境的一致。</p><h2 id="创建Lambda"><a href="#创建Lambda" class="headerlink" title="创建Lambda"></a>创建Lambda</h2><p>首先运行如下命令创建serverless APP:</p><pre><code>sls create --template aws-python3 --name beem-app --path beem-app</code></pre><p>接下来修改serverless.yml:</p><pre><code>service: beem-appframeworkVersion: &apos;2&apos;provider:  name: aws  runtime: python3.8  region: eu-west-1functions:  hello:    handler: handler.hello    layers:      - &quot;YOUR_LAYER_ARN&quot;</code></pre><p>修改handler.py:</p><pre><code>import jsonfrom beem.vote import Votedef hello(event, context):    vote = Vote(u&quot;@aafeng/bolton-abbey|abit&quot;)    response = {        &quot;statusCode&quot;: 200,        &quot;body&quot;: vote.json()    }    return response</code></pre><p>部署：</p><pre><code>sls deploy</code></pre><p>运行</p><pre><code>sls invoke -f hello</code></pre><p>结果，遇到了第二个坑。提示错误信息如下：</p><pre><code>{    &quot;errorMessage&quot;: &quot;[Errno 30] Read-only file system: &apos;/home/sbx_user1051&apos;&quot;,    &quot;errorType&quot;: &quot;OSError&quot;,    &quot;stackTrace&quot;: [        &quot;  File \&quot;/var/task/handler.py\&quot;, line 6, in hello\n    vote = Vote(u\&quot;@aafeng/bolton-abbey|abit\&quot;)\n&quot;,        &quot;  File \&quot;/opt/python/lib/python3.8/site-packages/beem/vote.py\&quot;, line 52, in __init__\n    self.blockchain = blockchain_instance or shared_blockchain_instance()\n&quot;,        &quot;  File \&quot;/opt/python/lib/python3.8/site-packages/beem/instance.py\&quot;, line 29, in shared_blockchain_instance\n    default_chain = get_default_config_store()[\&quot;default_chain\&quot;]\n&quot;,        &quot;  File \&quot;/opt/python/lib/python3.8/site-packages/beem/storage.py\&quot;, line 46, in get_default_config_store\n    return generate_config_store(SqliteConfigurationStore, blockchain=\&quot;hive\&quot;)(*args, **kwargs)\n&quot;,        &quot;  File \&quot;/opt/python/lib/python3.8/site-packages/beemstorage/sqlite.py\&quot;, line 200, in __init__\n    SQLiteFile.__init__(self, *args, **kwargs)\n&quot;,        &quot;  File \&quot;/opt/python/lib/python3.8/site-packages/beemstorage/sqlite.py\&quot;, line 61, in __init__\n    os.makedirs(self.data_dir)\n&quot;,        &quot;  File \&quot;/var/lang/lib/python3.8/os.py\&quot;, line 213, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n&quot;,        &quot;  File \&quot;/var/lang/lib/python3.8/os.py\&quot;, line 213, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n&quot;,        &quot;  File \&quot;/var/lang/lib/python3.8/os.py\&quot;, line 213, in makedirs\n    makedirs(head, exist_ok=exist_ok)\n&quot;,        &quot;  File \&quot;/var/lang/lib/python3.8/os.py\&quot;, line 223, in makedirs\n    mkdir(name, mode)\n&quot;    ]}</code></pre><p>仔细读一下，原来是beem在运行的时候会尝试装载其配置文件，这个文件为~/.local/share/beem/beem.sqlite，如果该文件不存在，beem会尝试创建这个文件。而Lambda运行时只有对”/tmp“目录有写入权限的。因此出现了访问权限问题。</p><p>最快捷的解决方法就是直接修改文件：python/lib/python3.8/site-packages/beemstorage/sqlite.py</p><pre><code>#self.sqlite_file = os.path.join(self.data_dir, self.storageDatabase)self.data_dir = &quot;/tmp/&quot;self.sqlite_file = &quot;/tmp/beem.sqlite&quot;</code></pre><p>然后回到Amazon Linux，重新部署依赖库。</p><p>然后再调用Lambda：</p><pre><code>sls invoke -f hello</code></pre><p>返回结果为：</p><pre><code>{    &quot;statusCode&quot;: 200,    &quot;body&quot;: {        &quot;percent&quot;: 5000,        &quot;reputation&quot;: &quot;119989167017696&quot;,        &quot;rshares&quot;: &quot;13053196760301&quot;,        &quot;time&quot;: &quot;2020-10-27T11:27:18&quot;,        &quot;voter&quot;: &quot;abit&quot;,        &quot;weight&quot;: 1202589,        &quot;authorpermvoter&quot;: &quot;@aafeng/bolton-abbey|abit&quot;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      如何将Beem / Hive程序在AWS Lambda上运行
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>美食作家忠粉</title>
    <link href="https://www.aafeng.uk/wanggang-fans/"/>
    <id>https://www.aafeng.uk/wanggang-fans/</id>
    <published>2020-11-02T16:59:25.800Z</published>
    <updated>2020-11-02T16:59:25.800Z</updated>
    
    <content type="html"><![CDATA[<p>最近成了美食作家王刚的忠粉。自从前一段时间第一次按照他的教程成功制作了烧茄子之后，就一发不可收拾，几乎所有的菜都尽量按照他的教程来做。目前屡试不爽，还没有失败的记录。</p><a id="more"></a><p>先来晒晒最近烧过的菜：</p><p><img src="https://user-images.githubusercontent.com/63479035/97895823-30d58c00-1d2c-11eb-944c-cb54c0a998bf.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/63479035/97895904-49de3d00-1d2c-11eb-80b6-c1d7179ca9ee.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/63479035/97895943-56629580-1d2c-11eb-8d4e-ac65403e54ed.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/63479035/97895980-61b5c100-1d2c-11eb-9d23-cd2a9e7825a7.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/63479035/97896037-72fecd80-1d2c-11eb-9ee7-31af44cb2e42.png" alt="image"></p><p>总结一下，问什么我这个本来对做饭不是很感兴趣的人竟然成了王刚的忠粉：</p><p>首先，是王刚的视频都非常短小，一般都是两分钟左右。但在这两分钟之内，能够把每个菜的关键步骤都讲的很清楚。</p><p>其次，可操作性很强。由于每个步骤讲的都非常清楚，比如：放的调料准确的量是多少讲的非常精确。</p><p>同时，其成功率非常高。只要照着他给出的步骤做，失败率极低。目前，我做的菜还没有失败过的。</p><p>当然，缺点就是几乎所有的菜都要求”宽油“，这样吃下去，估计全家人都会变胖。。。</p>]]></content>
    
    <summary type="html">
    
      美食作家忠粉
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>英国第二次Lockdown+吐槽</title>
    <link href="https://www.aafeng.uk/second-lockdown/"/>
    <id>https://www.aafeng.uk/second-lockdown/</id>
    <published>2020-11-01T22:17:51.721Z</published>
    <updated>2020-11-01T22:17:51.721Z</updated>
    
    <content type="html"><![CDATA[<p>这个周末，英国首相Johnson宣布，英格兰将于下周四进行第二次lockdown，届时英格兰所有酒吧，餐厅将被迫关闭，取消家庭互访，非必要时需要宅在家中。但各中小学和大学仍正常开学。</p><p><img src="https://user-images.githubusercontent.com/63479035/97816779-76904700-1c8f-11eb-9090-0caae23090e9.png" alt="image"></p><a id="more"></a><p>对于这个政策，我和很多人一样，有着很多不理解的地方。</p><p>首先，是学校还照常开学。不知道那些做决策的人是怎么想的。难道病毒会因为学校而避而远之吧？在学校中，尤其是小学中，小朋友之间很难保持社交距离。在目前感染人数居高不下的情况下，真的替学校中的师生们担心。</p><p>对于这一点，支持和反对学校照开的人都大有人在。支持方主要觉得在经历了第一次lockdown之后，大家知道了边工作边带娃的诸多负面影响。因此都倾向于把孩子送回学校。反对方则认为这会大大增大在校师生的感染几率。</p><p>可能很多人在想，这主要是为了照顾那些位于关键工作岗位(Key Workers)人家中的孩子的。但这完全可以采取和第一次lockdown时候一样的政策，只为那些Key Worker家的孩子提供上学的机会，这样就会大大减少在校师生人数，同时也会减少被感染的机率。</p><p>同时还有一处比较模糊的地方。政策中提到了那些处于教育目的的工作仍可以继续。比如：各种私教，课外班。但我们目前获得的信息是，孩子们的小提琴课仍然继续，但芭蕾课将会停课。因此感觉这完全要看老师对于这个政策的理解了。</p><p>还有一点让我比较困惑的是，目前还没有听说哪座学校中允许孩子一直佩戴口罩。比如我家孩子所在的学校中，如果佩戴了口罩的话，到了教室中需要摘掉。这就让我彻底不理解了，为什么？？？</p><p>对于lockdown政策，我还是基本赞同的，只是感觉政府在控制疫情和不影响经济的权衡中找到的这个平衡点似乎不是很理想，毕竟要让很多师生冒着被感染的风险去学校，哎。。。</p>]]></content>
    
    <summary type="html">
    
      英国第二次Lockdown+吐槽
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
