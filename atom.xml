<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aafeng.uk/"/>
  <updated>2020-05-01T22:46:20.583Z</updated>
  <id>https://www.aafeng.uk/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>化赞为赏-说说什么是Likecoin和赞赏公民？</title>
    <link href="https://www.aafeng.uk/likecoin/"/>
    <id>https://www.aafeng.uk/likecoin/</id>
    <published>2020-05-01T20:48:00.000Z</published>
    <updated>2020-05-01T22:46:20.583Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间开始使用支持Likecoin的网站，包括steem.buzz，matters。同时也加入了付费的赞赏公民，同时还在自己的博客中加入了赞赏按钮。感觉还是很喜欢这个年轻的生态系统。有些朋友在问到底什么是Likecoin，什么又是赞赏公民，他们到底有什么用等问题。下面把我所理解的总结一下，希望大家都能加入<a href="https://liker.land/civic?from=aafeng17936" rel="external nofollow noopener noreferrer" target="_blank">赞赏公民</a>，支持这个有活力的生态系统。</p><p><img src="/images/blockchain/liker/liker.png" alt="Liker Land"></p><a id="more"></a><h2 id="什么是Likecoin"><a href="#什么是Likecoin" class="headerlink" title="什么是Likecoin"></a>什么是Likecoin</h2><p>Likecoin是一种基于区块链的虚拟货币。它就像比特币一样，价格随市场需求会有波动，在写这篇文章的时候Likecoin的价格大约是每1美元可以购买200个Likecoin。Likecoin最早是基于以太坊网络的，但现在它运行在自己的链上。现在Likecoin指的是运行在它自己链上的代币，早期运行于以太坊上的代币叫做：LikeCoin (ERC-20)。</p><p><img src="/images/blockchain/liker/likecoin.png" alt="Likecoin"></p><h2 id="Likecoin区块链的维护者-Validators"><a href="#Likecoin区块链的维护者-Validators" class="headerlink" title="Likecoin区块链的维护者 - Validators"></a>Likecoin区块链的维护者 - Validators</h2><p>有了Likecoin这个代币后，那么由谁来支持最底层的区块链网络呢？又有谁来支持/验证区块链中的交易，保证区块链的数据安全呢？在不同的网络中有不同的叫法，在比特币网络中叫做矿工，在Steem/Hive网络中叫做见证人。在Likecoin中则叫做Validator。只不过有一点让我不太理解的就是，Likecoin网络中的Validator似乎是人工决定的，而且目前只有固定的10个。既然是区块链，就应该是完全开放的，谁都可以成为Validator，只不过要根据用户投票来决定谁能出块。这就像Steem/Hive网络中的见证人机制，排名前20的见证人+排名20之后的见证人中随机抽取一名，共组成21名见证人来出块。</p><p><a href="https://likecoin.bigdipper.live/validators" rel="external nofollow noopener noreferrer" target="_blank">查看Likecoin中Validator信息</a></p><h2 id="如何注册Likecoin账号？"><a href="#如何注册Likecoin账号？" class="headerlink" title="如何注册Likecoin账号？"></a>如何注册Likecoin账号？</h2><p>Likecoin的账号注册非常简单，有两种选择。可以通过邮件/密码注册一个账号，也可以通过其他方式，比如Google账号，facebook, twitter, apple，以及matters网站来注册。</p><p><img src="/images/blockchain/liker/likecoin2.png" alt="Likecoin"></p><h2 id="构建于Likecoin基础上的应用网站"><a href="#构建于Likecoin基础上的应用网站" class="headerlink" title="构建于Likecoin基础上的应用网站"></a>构建于Likecoin基础上的应用网站</h2><p>既然基于Likecoin的底层区块链已经有了，那么接下来就需要在此之上的应用了。这里介绍如下几个：</p><h3 id="Matters"><a href="#Matters" class="headerlink" title="Matters"></a>Matters</h3><p><a href="https://matters.news/" rel="external nofollow noopener noreferrer" target="_blank">Matters</a> 以一个基于Likecoin代币奖励机制的内容激励平台。任何Likecoin用户都可以在Matters登陆后发文。如果有人给你的文章点赞，你就会获得以Likecoin方式奖励的收益。</p><h3 id="Steem-buzz"><a href="#Steem-buzz" class="headerlink" title="Steem.buzz"></a>Steem.buzz</h3><p>Steem.buzz是Steem中文社区中的新手村村长 ericet 维护的一个Steem区块链前端应用程序。但在Steem.buzz中为众多的Likecoin用户添加了赞赏功能。在每一篇发在Steem网络的文章下面还会出现一个赞赏按钮。如果有人点了赞赏按钮，你就会获得Likecoin作为奖励。</p><h2 id="什么是赞赏公民？"><a href="#什么是赞赏公民？" class="headerlink" title="什么是赞赏公民？"></a>什么是赞赏公民？</h2><p>前面已经说过，Likecoin的注册用户对文章点赞的话，文章作者会有一定的收益。但这个收益是比较有限的。而<a href="https://liker.land/civic?from=aafuk47017" rel="external nofollow noopener noreferrer" target="_blank">赞赏公民</a>则相当于是”VIP“用户，每月缴纳5美元的月费。他们的赞赏会更值钱。其实，5美元/月并不多，也就是一杯咖啡的钱，但以此来资助自己喜欢的作者，激励他们创作出更好的作品来，读者本身也是受益者。何况，赞赏公民似乎更希望和其他赞赏公民互动，增加彼此的收益。</p>]]></content>
    
    <summary type="html">
    
      化赞为赏-说说什么是Likecoin和赞赏公民？
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Likecoin" scheme="https://www.aafeng.uk/tags/Likecoin/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS CloudWatch监测Lambda运行，并通过SNS发送通知</title>
    <link href="https://www.aafeng.uk/cloudwatch-sns/"/>
    <id>https://www.aafeng.uk/cloudwatch-sns/</id>
    <published>2020-05-01T10:48:00.000Z</published>
    <updated>2020-05-01T16:30:09.677Z</updated>
    
    <content type="html"><![CDATA[<p>在运行Amazon AWS的众多服务时，一旦某个服务出现了故障，我们肯定想要第一时间得到通知。 或者当某项服务的资源使用超过某个阀值时，我们可能想要赋予其更多资源。 要实现类似的功能，我们可以使用SNS（Simple Notification Servivce)和SQS(Simple Queue Service)。下面通过一个简单的例子来说明如何使用AWS CloudWatch监测Lambda运行，并通过SNS发送通知。</p><a id="more"></a><h2 id="创建SNS-Topic及其订阅"><a href="#创建SNS-Topic及其订阅" class="headerlink" title="创建SNS Topic及其订阅"></a>创建SNS Topic及其订阅</h2><p>在任何消息系统中，最常见的方式就是设定一个主题(Topic)，然后添加一些订阅者(Subscription)。这样一旦有任何新的消息发送到Topic，所有的订阅者都会收到消息推送。下面说说如何在SNS中设置Topic和Subscription。</p><p>首先再AWS SNS中创建一个Topic</p><p><img src="/images/technology/aws/sns-1.png" alt="SNS"></p><p>接下来我们分别创建两个订阅：Email和短信。先来看看Email方式的订阅：</p><p><img src="/images/technology/aws/sns-2.png" alt="SNS"></p><p>创建结束后，需要打开自己的邮箱进行确认。</p><p><img src="/images/technology/aws/sns-3.png" alt="SNS"></p><p>接下来创建一个通过短信方式的订阅。</p><p>我们可以看到，除Email和短信外，订阅消息的方式还有很多种。这样当消息抵达队列中时，可以调用一个HTTP/HTTPS的地址，可以触发一个Lambda，可以转发到Amazon的消息队列中。</p><p><img src="/images/technology/aws/sns-4.png" alt="SNS"></p><h2 id="创建一个当Lambda发生错误时触发的消息"><a href="#创建一个当Lambda发生错误时触发的消息" class="headerlink" title="创建一个当Lambda发生错误时触发的消息"></a>创建一个当Lambda发生错误时触发的消息</h2><p>在CloudWatch中创建一个Alarm：</p><p><img src="/images/technology/aws/alarm-1.png" alt="CloudWatch"></p><p>这时候需要选择一个Metric，这里选择“Lamba - errors”这个Metric。</p><p>同时还要设定一些触发条件，比如当错误数超过某个阀值时会触发，或者当Lambda被调用的次数超过某个阀值时会触发。</p><p><img src="/images/technology/aws/alarm-2.png" alt="CloudWatch"></p><p>接下里需要配置，当Alarm被触发时需要做的动作：</p><p><img src="/images/technology/aws/alarm-3.png" alt="CloudWatch"></p><p>对于某些资源，还可以触发”Autoscaling“，这样在资源不足的情况下就可以非常快速的升级配置，实现更快的响应率。可以说这里的这些Action非常灵活，可以符合众多应用需求。</p><p>由于我设定的是当Lambda被调用次数超过0次时会触发Alaram，因此在调用一次Lambda后很快就收到了消息提示。</p><p><img src="/images/technology/aws/alarm-4.png" alt="CloudWatch"></p>]]></content>
    
    <summary type="html">
    
      使用AWS CloudWatch监测Lambda运行，并通过SNS发送通知
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS Amplify自动部署Hexo静态站点</title>
    <link href="https://www.aafeng.uk/aws-amplify/"/>
    <id>https://www.aafeng.uk/aws-amplify/</id>
    <published>2020-05-01T04:48:00.000Z</published>
    <updated>2020-05-01T09:18:23.926Z</updated>
    
    <content type="html"><![CDATA[<p>最近尝试了一下Amazon AWS的Amplify，感觉非常好用。下面介绍一下如何使用Amplify自动将Hexo生成的静态站点发布到AWS。 其实使用AWS的优点还是有很多的。 比如： 前12个月免费，12月后对于访问量不是很高的个人站点而言，费用也非常低，每个月可能都不到1美元； 全球CDN网络支持，和众多AWS服务的无缝集成等等。下面把具体步骤总结一下：</p><p><img src="/images/technology/aws/amplify-1.png" alt="Amplify"></p><a id="more"></a><h2 id="安装并配置AWS-Amplify"><a href="#安装并配置AWS-Amplify" class="headerlink" title="安装并配置AWS Amplify"></a>安装并配置AWS Amplify</h2><p>首先运行如下命令安装Amplify：</p><pre><code>npm install -g @aws-amplify/cli</code></pre><p>如果还没有在~/.aws/credentials中创建profile，运行如下命令配置Amplify:</p><pre><code>amplify configure</code></pre><p>其运行结果就会在credentials中创建一个profile:</p><pre><code>[amplify]aws_access_key_id=XXXXXXXXXXXXXXXXXXXaws_secret_access_key=XXXXXXXXXXXXXXXXXXXXXX</code></pre><p>当然，如果想要使用现有的profile，可以忽略上面的这一步。</p><h2 id="生成Hexo静态站点"><a href="#生成Hexo静态站点" class="headerlink" title="生成Hexo静态站点"></a>生成Hexo静态站点</h2><p>下面以一个简单的静态站点为例。运行如下命令生成一个静态站点，并安装Node.js的依赖库：</p><pre><code>hexo init amplify-testcd amplify-testnpm install</code></pre><p>在本地测试一下Hexo是否能正常工作：</p><pre><code>hexo s</code></pre><p>访问 <a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a> 应该能看到刚刚生成的站点。</p><h2 id="使用Amplify初始化-部署静态站点"><a href="#使用Amplify初始化-部署静态站点" class="headerlink" title="使用Amplify初始化/部署静态站点"></a>使用Amplify初始化/部署静态站点</h2><p>进入到站点目录并运行：</p><pre><code>amplify init</code></pre><p>会有一系列的问题需要回答，我的选择如下：</p><pre><code>amplify initNote: It is recommended to run this command from the root of your app directory? Enter a name for the project amplifytest? Enter a name for the environment prod? Choose your default editor: IntelliJ IDEA? Choose the type of app that you&apos;re building javascriptPlease tell us about your project? What javascript framework are you using none? Source Directory Path:  source? Distribution Directory Path: public? Build Command:  npm run-script build? Start Command: npm run-script startUsing default provider  awscloudformation? Do you want to use an AWS profile? Yes? Please choose the profile you want to use amplifyAdding backend environment prod to AWS Amplify Console app: XXXXXXXX</code></pre><p>运行结果会显示初始化成功的信息：</p><pre><code>✔ Successfully created initial AWS cloud resources for deployments.✔ Initialized provider successfully.</code></pre><p>添加额外站点信息：</p><pre><code>amplify hosting add</code></pre><p>这是我的选项：</p><pre><code>? Select the plugin module to execute Hosting with Amplify Console (Managed hosting with custom domains, Continuous deployment)? Choose a type Manual deployment</code></pre><p>发布站点：</p><pre><code>amplify publish</code></pre><p>发布成功后会有提示：</p><pre><code>✔ Zipping artifacts completed.✔ Deployment complete!https://prod.XXXXXXXX.amplifyapp.com</code></pre><p>进入到AWS Amplify，可以看到已经成功部署：</p><p><img src="/images/technology/aws/amplify-2.png" alt="Amplify"></p><h2 id="连接到自己的域名"><a href="#连接到自己的域名" class="headerlink" title="连接到自己的域名"></a>连接到自己的域名</h2><p>在AWS Amplify的Domain management中，选择”Add domain”并进行配置：</p><p><img src="/images/technology/aws/amplify-3.png" alt="Amplify"></p><p>接下来Amplify会验证你对域名的所有权，按照提示在你的域名管理站点中添加相应的CNAME记录。</p><p><img src="/images/technology/aws/amplify-4.png" alt="Amplify"></p><p>然后在你的域名管理网站中添加对应的CNAME。需要等待一定时间DNS更改才能生效。</p>]]></content>
    
    <summary type="html">
    
      使用AWS Amplify自动部署Hexo静态站点
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>使用Bitbucket Pipelines自动部署Serverless项目到AWS Lambda</title>
    <link href="https://www.aafeng.uk/bitbucket-pipelines-serverless/"/>
    <id>https://www.aafeng.uk/bitbucket-pipelines-serverless/</id>
    <published>2020-04-30T18:58:00.000Z</published>
    <updated>2020-04-29T21:22:26.366Z</updated>
    
    <content type="html"><![CDATA[<p>最近越来越多的在项目中用到AWS Lambda，也就是AWS无服务器架构中的核心编程单元。其最大的优势就是开发人员不用操心底层系统的架构和维护，只需要专注于核心代码。但AWS整个系统的部署要涉及的步骤非常繁琐，因此这里推荐使用serverless框架。就算使用这个框架，似乎还不够自动。因此下面介绍一下如何使用Bitbucket Pipelines将上面的所有环节都连接到一起，开发人员只关注Lambda代码的实现，一旦提交代码到Bitbucket，就会自动构建并部署到AWS。</p><p><img src="/images/technology/aws/bitbucket.png" alt="Bitbucket Pipelines"></p><a id="more"></a><p>首先，添加一个AWS用户，具有对Lambda和Cloudformation的访问权限。当然，如果你的Lambda需要访问其他AWS资源，比如S3，DynamoDB等等，需要添加额外的权限。记录下该用户的ACCESS_KEY_ID和SECRET_ACCESS_KEY，后面要用到。</p><p>接下来，使用serverless创建一个项目：</p><pre><code>serverless create --template aws-python3 --name data-api</code></pre><p>注意将region添加到serverless.yml中，否则系统默认的region可能不是你想要的。最终的serverless.yml文件内容：</p><pre><code>service: data-apiprovider:  name: aws  region: eu-west-1  runtime: python3.7functions:  hello:    handler: handler.hello    events:      - http:          path: hello          method: get</code></pre><p>处理逻辑集中在handler.py中：</p><pre><code>import jsondef hello(event, context):    body = {        &quot;message&quot;: &quot;Lambda + Bitbucket pipelines test&quot;    }    response = {        &quot;statusCode&quot;: 200,        &quot;body&quot;: json.dumps(body)    }    return response</code></pre><p>将整个项目提交并推送到Bitbucket中。</p><p>接下来需要在Bitbucket repository中激活Pipelines，</p><p><img src="https://images.hive.blog/DQmdyunTKDHUMTGZ3K3V1cJ5nFouKrYrTXiTQhVET64yeiY/image.png" alt="image.png"></p><p>添加Repository级别的环境变量AWS_DEFAULT_REGION, AWS_ACCESS_KEY_ID以及AWS_SECRET_ACCESS_KEY：</p><p><img src="https://images.hive.blog/DQmPtnM7gGVACUvynsiFERdoFSZa7pQQAQnRjgR4jymeeag/image.png" alt="image.png"></p><p>最后需要创建一个针对Bitbucket Pipeline的配置文件bitbucket-pipelines.yml。在Bitbucket中有很多现成的模板可以使用，这里输入serverless，就可以看到这个专门针对serverless框架的模板，可以选择这个并在此基础上进行修改：</p><p><img src="https://images.hive.blog/DQmZYSCBgygmcnKEMTdNUekWRyDzFBbmTNUSrMNo93qnbr9/image.png" alt="image.png"></p><p>最终的bitbucket-pipelines.yml文件内容：</p><pre><code>image: python:3.7.3pipelines:  default:    - step:        caches:          - pip        script:           - pipe: atlassian/serverless-deploy:0.1.4            variables:              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY</code></pre><p>至此，配置完成。 以后一旦代码提交到Bitbucket，Pipeline就会自动构建并部署到AWS，是不是很方便？</p><p>也可以在pipeline配置文件中定义不同的pipeline，比如针对production的pipeline:</p><pre><code>branches:  production:  - step:      caches:        - pip      script:        - pipe: atlassian/serverless-deploy:0.1.4          variables:            AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION            AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID            AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY            EXTRA_ARGS: &apos;--stage prod&apos;</code></pre><p>这样就可以人工构建产品环境下的服务了。</p><p>关于pipelines的更多配置，请参考：<a href="https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html" rel="external nofollow noopener noreferrer" target="_blank">https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html</a></p>]]></content>
    
    <summary type="html">
    
      使用Bitbucket Pipelines自动部署Serverless项目到AWS Lambda
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>英国疫情日记2020-04-28 - 没有他们的负重前行，又哪来的岁月静好？</title>
    <link href="https://www.aafeng.uk/covid19-20200428/"/>
    <id>https://www.aafeng.uk/covid19-20200428/</id>
    <published>2020-04-28T20:38:00.000Z</published>
    <updated>2020-04-29T07:41:02.129Z</updated>
    
    <content type="html"><![CDATA[<p>英国疫情这两天似乎有所缓解，近几天新冠病毒死亡人数有所下降，曾经进入重症监护室的首相Johnson重新回到唐宁街10号主持工作。尽管大多数议员还是通过网络方式参与，但英国议会已经重新开始工作。似乎一切都在往好的方向转变。</p><a id="more"></a><p>大家似乎在家中已经宅够了，都期待早日走出家门。甚至在一些公共场合已经有了拥挤的人群。路上的车辆也明确多了起来，在伦敦的部分区域竟然又开始堵车。很多人开始讨论何时复工和复学。但大病后复出的Johnson对复工/复学还是非常谨慎的。在经济损失和人身安全之间选择了后者。其实，不难想象，近几天的疫情有所缓解不正是两周前大家宅在家中的结果吗？如果现在放飞自我，疫情只会再次加重。</p><p>但无论如何，自己还是做好充足准备吧。除了早期高价购买的一些口罩，最近通过不同渠道又准备了一些口罩。最给力的是京东前一段免费为海外华人赠送的口罩。本来以为是按照报名人数随机抽取的，没有想到一下收到了120个口罩，感觉一下变身土豪了：</p><p><img src="/images/life/covid19/20200428-1.jpg" alt="英国疫情记录"></p><p>今天上午11点，全英国集体默哀一分钟，向在抗疫最前线牺牲的英雄们致敬。就连天公似乎也感受到这这种气氛，一改前两周的风和日丽，转为更为“英国”的阴雨天。向这些英雄们致敬，没有他们的负重前行，又怎么可能迎来岁月静好？</p>]]></content>
    
    <summary type="html">
    
      英国疫情日记2020-04-28 - 没有他们的负重前行，又哪来的岁月静好？
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>使用Serverless Requirements在AWS无服务器架构中配置Python依赖库</title>
    <link href="https://www.aafeng.uk/serverless-requirements/"/>
    <id>https://www.aafeng.uk/serverless-requirements/</id>
    <published>2020-04-28T19:48:00.000Z</published>
    <updated>2020-04-28T11:06:03.114Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在尝试<a href="https://aws.amazon.com/" rel="external nofollow noopener noreferrer" target="_blank">AWS</a> Serverless（无服务器架构）的系列产品，比如：S3, Lambda, APIGateway等等。在使用<a href="https://serverless.com/" rel="external nofollow noopener noreferrer" target="_blank">Serverless</a>这个框架通过Python编写Lambda的时候经常会遇到一个问题就是：在Python中要使用其他依赖库怎么办？本来Lambda就是AWS微服务架构中的最小单元了，那么如何导入这些依赖库呢？其中的一个方案就是使用<a href="https://serverless.com/plugins/serverless-python-requirements/" rel="external nofollow noopener noreferrer" target="_blank">Serverless Requirements</a>这个插件来管理这些依赖库。下面以一个简单的例子进行说明。</p><p><img src="/images/technology/aws/serverless.png" alt="Serverless"></p><a id="more"></a><p>当然，前提是已经安装了serverless，如未安装，请先行安装，整个安装过程非常简单。安装完毕后创建一个项目:</p><pre><code>serverless create --template aws-python3 --name dependency-test --path dependency-testcd dependency-test</code></pre><p>进入”dependency-test”目录后可以看到共生成了两个文件：handler.py和serverless.yml。</p><p>先来看看handler.py这个文件，将注释删除后可以看到整个代码非常简单：</p><pre><code>import jsondef hello(event, context):    body = {        &quot;message&quot;: &quot;Go Serverless v1.0! Your function executed successfully!&quot;,        &quot;input&quot;: event    }    response = {        &quot;statusCode&quot;: 200,        &quot;body&quot;: json.dumps(body)    }    return response</code></pre><p>下面我们以<a href="https://github.com/numpy/numpy" rel="external nofollow noopener noreferrer" target="_blank">numpy</a>这个最为常见的依赖库为例来进行说明。将handler.py修改成如下这样：</p><pre><code>import jsonimport numpy as npdef hello(event, context):    a = np.arange(9).reshape(3, 3)    body = {        &quot;array&quot;: str(a)    }    response = {        &quot;statusCode&quot;: 200,        &quot;body&quot;: json.dumps(body)    }    return responseif __name__ == &quot;__main__&quot;:    print(hello(&apos;&apos;, &apos;&apos;))</code></pre><p>其实在Lambda中，完全不用添加最后两行，这里只是为了在本地运行以做测试的。运行：</p><pre><code>python handler.py</code></pre><p>可以看到如下结果：</p><pre><code>{&apos;statusCode&apos;: 200, &apos;body&apos;: &apos;{&quot;array&quot;: &quot;[[0 1 2]\\n [3 4 5]\\n [6 7 8]]&quot;}&apos;}</code></pre><p>接下来需要将其部署到AWS，首先初始化当前目录，并安装依赖库：</p><pre><code>npm install --save serverless-python-requirements</code></pre><p>这样就会生成package-lock.json以及node_modules目录。是不是有些奇怪？Python的代码下出现了Node.js的文件和库。其实这也没什么奇怪的。因为Serverless这个框架就是用Node.js实现的，其插件”serverless-python-requirements”也是用Node.js实现的，自然就需要node_modules了。</p><p>为了能让”serverless-python-requirements”正常工作，需要添加requirements.txt这个文件，其内容为：</p><pre><code>numpy==1.18.3</code></pre><p>然后修改默认的serverless.yml，添加对serverless-python-requirements这个插件的引用：</p><pre><code>service: dependency-testprovider:  name: aws  runtime: python3.8functions:  hello:    handler: handler.hello    events:      - http:          path: dependency_test          method: getplugins:  - serverless-python-requirementscustom:  pythonRequirements:    dockerizePip: true</code></pre><p>部署到AWS</p><pre><code>serverless deploy</code></pre><p>可以看到已经成功部署：</p><p><img src="/images/technology/aws/serverless2.png" alt="Serverless"></p><p>测试一下：</p><p><img src="/images/technology/aws/serverless3.png" alt="Serverless"></p>]]></content>
    
    <summary type="html">
    
      使用Serverless Requirements在AWS无服务器架构中配置Python依赖库
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AWS" scheme="https://www.aafeng.uk/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>宅家期间，少儿编程学起来</title>
    <link href="https://www.aafeng.uk/kids-programming/"/>
    <id>https://www.aafeng.uk/kids-programming/</id>
    <published>2020-04-28T04:58:00.000Z</published>
    <updated>2020-04-28T06:49:42.176Z</updated>
    
    <content type="html"><![CDATA[<p>近期一直宅在家中，难得有了很多陪伴孩子的时间。这也使得我能够了却一桩长时间以来的心愿：教孩子编程。</p><p><img src="/images/kids/coding/kids-programming-1.jpg" alt="少儿编程"></p><a id="more"></a><p>由于我本身就从事IT，因此也算有些优势，至少明白程序该怎么写。之所以想要培养孩子学会编程，主要感觉这是一项必备技能。无论他们以后从事什么工作，能够自己写一些代码，肯定对他们的工作和学习都会有所帮助。至于以后他们从事什么职业，这就不是我现在需要操心的了。</p><p>说干就干，那么该选择什么编程语言呢？很多学校都在似乎用Scratch这样的图形化编程语言。因为这种语言非常直观，让孩子们一看就能懂，容易上手。但我权衡再三，决定选择Python。原因有以下几个：</p><ul><li>首先，Python是我个人最喜欢的编程语言。说起来也很有意思，Python并不是我工作中使用的编程语言，但我却对它情有独钟，除工作之外的程序基本上我都尽量使用Python。</li><li>Python的市场需求很大，应用面非常广泛。尤其是在数据挖掘和人工智能方面得到到大量的应用。如果孩子对编程感兴趣，那么以后肯定要接触人工智能的。那索性从开始就把这个最基础的工具学好。</li><li>Python完全适合8岁+的孩子们学习。无论是国内还是国外，都有很多同龄的小朋友们在学，而且效果似乎不错。</li><li>Python的库非常丰富，包括适合初学者的图形库，比如：turtle。因此更容易引起孩子们的学习兴趣。</li></ul><p>这里推荐<a href="https://trinket.io/" rel="external nofollow noopener noreferrer" target="_blank">Trinket</a>这个网站，在这里可以使用图形库turtle编写各种图形化的程序。这个网站就像是一个在线IDE，代码编写，运行在网上全都有了。</p><p><img src="/images/kids/coding/kids-programming-2.png" alt="少儿编程"></p><p><img src="/images/kids/coding/kids-programming-3.png" alt="少儿编程"></p>]]></content>
    
    <summary type="html">
    
      宅家期间，少儿编程学起来
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
      <category term="少儿编程" scheme="https://www.aafeng.uk/tags/%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>男孩应有担当，女孩要聪慧有气质</title>
    <link href="https://www.aafeng.uk/raise-boys-and-girls/"/>
    <id>https://www.aafeng.uk/raise-boys-and-girls/</id>
    <published>2020-04-26T18:58:00.000Z</published>
    <updated>2020-04-26T18:34:51.944Z</updated>
    
    <content type="html"><![CDATA[<p>“男孩应。。。，女孩应。。。”。 看到有人讨论这个话题，顿时被吸引过来。 原因很简单，我正好有一双儿女，感觉似乎想说的话很多，但似乎又不知道从何说起。</p><p><img src="/images/kids/siblings.jpg" alt="育儿"></p><a id="more"></a><p>图源：pixabay</p><p>我是一个比较传统的人，觉得男孩子一定要有担当，肩负起小男子汉的责任来。我家儿子是老大，从小我们就教育他要照顾妹妹，保护妹妹和妈妈，培养他的小男子汉气质。为了培养他的独立性，我们给他报了英国的童子军，随着年龄的增长，他们会进行各种野外训练，希望这样能够磨练他的品质和男人的阳刚之气。我认为培养他的男子汉气质的同时也要培养他的各个方面的素养，因此我们给他报了很多辅导班，钢琴，小提琴，马术，合唱团，游泳，空手道等等，希望从不同方面塑造他的性格。</p><p>女儿非常聪明可爱。我们尽量培养她的气质。最主要就是“聪”和“慧”两个字。我们主要在音乐，艺术，表演方面进行培养。在她妈妈的影响下，她从小就对各种经典音乐剧耳熟能详，而且她很喜欢读书，各种经典儿童书籍已经读了很多。她从小有着全家人的宠爱，但我们心中有一杆秤，不能让她恃宠而骄，当她和哥哥发生争执时，我们只看事情对错，不能因为她小就让哥哥事事都让着她。而且培养她要大气，懂的站在对方的角度考虑问题，懂的将自己心爱的东西和别人分享。</p><p>国内似乎有一种说法叫做中性美，其实就是男孩女性化，女孩男性化，对于这种观点，我不能完全赞同。但我觉得作为一个男孩子，如果在擅长各种体育运动的同时，能够演奏一种乐器，这是另一种魅力。而作为一个女孩子，也要有一定的独立意识，不能过于依赖男性。</p>]]></content>
    
    <summary type="html">
    
      男孩应有担当，女孩要聪慧有气质
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>Steemit与Hive新用户注册体验比较</title>
    <link href="https://www.aafeng.uk/steemit-hive-account-creation/"/>
    <id>https://www.aafeng.uk/steemit-hive-account-creation/</id>
    <published>2020-04-25T16:58:00.000Z</published>
    <updated>2020-04-25T18:30:42.256Z</updated>
    
    <content type="html"><![CDATA[<p>自从Hive从Steem硬分叉以来，感觉Hive团队还是做了很多实事，这边的变化还是很大的。今天把Steemit及Hive.blog的新用户注册方式做一个对比。</p><a id="more"></a><h2 id="Hive新用户注册"><a href="#Hive新用户注册" class="headerlink" title="Hive新用户注册"></a>Hive新用户注册</h2><p>我们先来看看Hive的新用户注册页面：</p><p><img src="/images/hive/account-creation-1.png" alt="Hive新用户注册"></p><p>可以看到，免费的注册方式就有三种：Hive.blue, Esteem, 以及HiveInvite三种方式。</p><p>首先试用了一下通过Esteem来注册：</p><p><img src="/images/hive/account-creation-2.png" alt="Hive新用户注册"></p><p>只需要输入用户名，邮件，推荐者(可选)，就可以注册一个新账户了。之后Esteem会发送一封验证邮件到你的邮箱中。点击邮箱中的链接确认后用户就被创建了。整个过程只需要两分钟时间，赞！</p><p>接下来试用了一下Hive.blue。注册界面有些复杂。首先需要填写基本的信息：</p><p><img src="/images/hive/account-creation-3.png" alt="Hive新用户注册"></p><p>接下来需要填写一个社交网络或网址，需要包含“HIVE ACCOUNT APPLICANT”。感觉这个要求有点二，反正我是不会往自己facebook/tweeter上发这种信息的。。。</p><p><img src="/images/hive/account-creation-4.png" alt="Hive新用户注册"></p><p>接下来还要求：</p><p><img src="/images/hive/account-creation-5.png" alt="Hive新用户注册"></p><p>要用这个账号来做什么？这不是废话吗？？？你的第一个帖子？不多于5000字？！这绝对要把用户吓走了。整体评价：差。</p><p>最后看了看Hiveinvite：</p><p><img src="/images/hive/account-creation-6.png" alt="Hive新用户注册"></p><p>这种方式需要验证你的邮箱，或者/和社交账号。其亮点是创建账号后会给新的账号代理5HP-15HP。这就解决了新注册用户无法发帖的问题。但其缺点就是可以申请的账号数量非常有限。整体而言推荐新用户使用但不保证能够成功。</p><h2 id="Steemit新用户注册"><a href="#Steemit新用户注册" class="headerlink" title="Steemit新用户注册"></a>Steemit新用户注册</h2><p><img src="/images/hive/account-creation-steemit.png" alt="Hive新用户注册"></p><p>Steemit的注册方式似乎没有什么变化，免费用户需要1-2天的时间，整个过程中需要验证邮箱和电话。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>个人感觉在免费创建账号上来说，在Hive上使用Esteem注册新用户的体验最好，使用Hiveinvite注册新用户也有其亮点。在Steemit长的用户注册过程似乎没有什么改进。</p>]]></content>
    
    <summary type="html">
    
      Steemit与Hive新用户注册体验比较
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>安装并使用zsh</title>
    <link href="https://www.aafeng.uk/zsh/"/>
    <id>https://www.aafeng.uk/zsh/</id>
    <published>2020-04-24T19:48:00.000Z</published>
    <updated>2020-04-24T20:55:06.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始使用zsh，感觉比Linux系统默认的bash要好用太多了，尤其对于经常使用git的各位程序猿来说，提供了很多额外的提示，比如，当前的branch，是否有未提交更改，以及各种快捷命令等等。强烈推荐！下面把安装步骤介绍一下：</p><p><img src="/images/technology/linux/zsh-1.png" alt="zsh"></p><a id="more"></a><p>首先运行以下命令安装zsh：</p><pre><code>sudo apt-get install zshsudo usermod -s /bin/zsh $(whoami)</code></pre><p>退出并重新登录后会看到如下提示：</p><p><img src="/images/technology/linux/zsh-2.png" alt="zsh"></p><p>我这里选择输入“2”，让系统自动生成zsh配置文件。</p><p>zsh有很多有用的插件，这里推荐“Oh-My-ZSH”这个插件，运行如下命令进行安装：</p><pre><code>sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></pre><p>安装成功后会有如下提示：</p><p><img src="/images/technology/linux/zsh-3.png" alt="zsh"></p><p>安装结束后可以修改 .zshrc 来更改主题，各种插件，以及各种配置。</p><p>下面介绍几个针对git增强的功能：</p><p>首先，但你进入一个处于 git 管理的目录时，系统提示符会变为：</p><p><img src="/images/technology/linux/zsh-4.png" alt="zsh"></p><p>上面的 “web” 是当前目录；“master” 是当前 git 的分支；“✗” 代表当前目录下有未提交的更改。是不是非常的一目了然？</p><p>输入</p><pre><code>alias</code></pre><p>会看到 “Oh-My-ZSH” 添加了很多命令的别名：</p><pre><code>gsr=&apos;git svn rebase&apos;gss=&apos;git status -s&apos;gst=&apos;git status&apos;gsta=&apos;git stash save&apos;gstaa=&apos;git stash apply&apos;gstall=&apos;git stash --all&apos;gstc=&apos;git stash clear&apos;gstd=&apos;git stash drop&apos;gstl=&apos;git stash list&apos;gstp=&apos;git stash pop&apos;gsts=&apos;git stash show --text&apos;gstu=&apos;git stash --include-untracked&apos;gsu=&apos;git submodule update&apos;gsw=&apos;git switch&apos;gswc=&apos;git switch -c&apos;gtl=&apos;gtl(){ git tag --sort=-v:refname -n -l &quot;${1}*&quot; }; noglob gtl&apos;......</code></pre><p>用习惯后能节省不少时间。自从开始使用 zsh + “Oh-My-ZSH”感觉越用越顺手，再也无法回到过去的bash了。再次强烈推荐！</p>]]></content>
    
    <summary type="html">
    
      安装并使用zsh
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://www.aafeng.uk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如何取消订阅赞赏公民</title>
    <link href="https://www.aafeng.uk/how-to-cancel-civic-liker/"/>
    <id>https://www.aafeng.uk/how-to-cancel-civic-liker/</id>
    <published>2020-04-23T18:58:00.000Z</published>
    <updated>2020-04-22T20:16:13.899Z</updated>
    
    <content type="html"><![CDATA[<p>首先，访问liker.land的设置页面： <a href="https://liker.land/settings/" rel="external nofollow noopener noreferrer" target="_blank">https://liker.land/settings/</a> ，如果没有登录，请使用自己的liker账号登录。</p><p><img src="/images/blockchain/liker/cancel-civic-liker-1.png" alt="赞赏公民"></p><a id="more"></a><p>然后单击”赞赏公民 (生效中)”，</p><p><img src="/images/blockchain/liker/cancel-civic-liker-2.png" alt="赞赏公民"></p><p>单击 “取消《赞赏公民》订阅”就可以了。</p>]]></content>
    
    <summary type="html">
    
      如何取消订阅赞赏公民
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Likecoin" scheme="https://www.aafeng.uk/tags/Likecoin/"/>
    
  </entry>
  
  <entry>
    <title>幸运的新冠病毒患者?</title>
    <link href="https://www.aafeng.uk/covid19-20200423/"/>
    <id>https://www.aafeng.uk/covid19-20200423/</id>
    <published>2020-04-23T18:50:00.000Z</published>
    <updated>2020-04-23T19:55:00.580Z</updated>
    
    <content type="html"><![CDATA[<p>最近各个国家纷纷宣告自己的疫苗研发进度。英国牛津大学的疫苗也要开始进行人体实验了。最近在一个微信群里看到有人分享了自己感染/治愈新冠状病毒的经历。</p><p><img src="/images/life/covid19.jpg" alt="新冠病毒"></p><a id="more"></a><p>有小两口说最近使用冠状病毒的试剂进行了测试，其结果有三个指标：C线表明测试有效，G线为红色表明体内存在长期抗体，M线表明是最近感染了冠状病毒。但他们检测的结果是只有C/G线，但没有M线。说明他们早感染过了，并且体内有了抗体。</p><p>他们回想了一下，小两口在二月份的时候曾经有过感冒症状，嗓子疼了好几天，有一点咳嗽，感觉非常疲惫，总想睡觉。曾经有一天发烧38度，但第二天就好了。嗅觉和味觉都变得不是很敏感。</p><p>现在回想起来，在今年一月份的时候，我曾经非常诡异的连续感冒了近一个月，嗓子疼的要冒烟一样。其实最近几年来，我时不时的会得个感冒，一般也就是3，4天左右就好了。而且我已经养成了习惯，感冒了从来都不吃任何药，只是多喝水，靠自身的免疫系统慢慢恢复。但一月份的感冒和以往相比非常异常。而且在同一时间，我有个同事身体超级棒，这辈子从未生过病，但他也得了类似的症状，修了有生以来的第一次病假。</p><p>微信群里顿时有人开玩笑说，好希望早点感染那种轻症的病毒，早点产生抗体，这样就不用太过担心了。哈哈，希望我也有抗体了吧。。。</p>]]></content>
    
    <summary type="html">
    
      幸运的新冠病毒患者?
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.aafeng.uk/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>英国全面开启网络授课模式</title>
    <link href="https://www.aafeng.uk/uk-online-classroom/"/>
    <id>https://www.aafeng.uk/uk-online-classroom/</id>
    <published>2020-04-22T18:58:00.000Z</published>
    <updated>2020-04-22T19:53:15.103Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于目前疫情，英国学校复课似乎遥遥无期。于是英国政府于本周一推出了一系列的网课，全面开启网络教学模式。上网课的网站叫做<a href="https://www.thenational.academy/online-classroom" rel="external nofollow noopener noreferrer" target="_blank">Oak National Academy</a>，里面涵盖各个年级，各个科目的课程。</p><p><img src="/images/kids/online-course-1.png" alt="英国网络授课"></p><a id="more"></a><p>以英国小学为例，这里的小学从4岁开始上Reception，然后5岁为Year 1，6岁为Year 2，直到10岁为Year 6。到小学毕业一般为11岁左右。在系统中按照年级进行了划分。对于每个年级，从周一到周五的课程设计就和他们在学校中一样，各个科目都配有相应的时间。</p><p>以我家孩子正在上的五年级为例，每天有三门课程：英语，数学，和基础课（包括历史，地理，科学等）。</p><p><img src="/images/kids/online-course-2.png" alt="英国网络授课"></p><p>比如基础课的话题是：In 1066, who was the rightful heir to the throne?  1066年,谁是合法的王位继承人?<br>数学：An Introduction To Translation  坐标轴上坐标转换<br>英语：Setting Description: Reading Comprehension – Fact Retrieval 阅读理解-事实检索</p><p>在每节课中，既有老师的在线授课，也有课后习题，最后还有一个小测验。整体设计的非常合理。不过感觉自从网课开始后，家长们压力更大了，要想达到好的学习效果，最好全程陪。但家长们也有自己的工作要做。和很多朋友们交流，大家都感觉压力山大。哎，希望疫情早日过去，回到正常生活。</p>]]></content>
    
    <summary type="html">
    
      英国全面开启网络授课模式
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
      <category term="英国教育" scheme="https://www.aafeng.uk/tags/%E8%8B%B1%E5%9B%BD%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>我的疫情记录 - 2020.04.21</title>
    <link href="https://www.aafeng.uk/covid19-20200421/"/>
    <id>https://www.aafeng.uk/covid19-20200421/</id>
    <published>2020-04-21T10:58:00.000Z</published>
    <updated>2020-04-21T21:09:52.691Z</updated>
    
    <content type="html"><![CDATA[<p>至今已经宅家三周了。这两天英国政府又宣布继续封城三周。三周后再讨论下一步的措施。下面说说我周边一些人的心态和变化。</p><p><img src="/images/life/20200417_flowers.jpg" alt="我家附近的油菜花田，摄于2020.04.17"></p><a id="more"></a><p>有一个朋友在市中心开了一家咖啡店。但从开始封城，他们就决定把店关了。因为各种费用的确是一笔不小的负担。尽管政府有一定的补助，但也是杯水车薪，让他们入不敷出，不如早做决断，哪怕等疫情过后东山再起。还有另外一家很有名的中国超市老板说，他们也就能再撑几个月的时间，如果几个月后还不能恢复正常的话，他们也只能关门了。由此可见，这次的疫情对这些小公司，自雇者的冲击太大了。与之相反的是各大超市越做越大，销售额暴增，甚至想订一个送货时段都要靠拼人品。和同事的聊天中同事提到了一点就是：尽量去照顾那些比较小的店铺，便利店等，尽量不要让他们倒闭，否则等疫情过后，作为消费者也会感受到不便和损失的。</p><p>第二是人们心理的变化。以封城为例，众多民众从最初的抵触，到现在的接受，甚至是过度的担心。甚至有的家长说即使是复课了，短期内也不会让孩子回到学校上学。可以说，除非有效的疫苗能够很快的被研发出来并量产，否则人们的生活很难恢复正常。</p><p>第三是各种在线服务的火爆。举一个简单的例子，最近专门支持在线会议的软件Zoom股价暴涨。可见众多企业和机构的需求量有多大。可以预见，众多提供在线服务的平台一定会得到一个高速发展。</p><p>等到有一天疫情彻底过去，它对人们的影响也不会消失。忘记在哪里看到了一个可悲的事实，在疫情期间家暴明显增加，有心理问题的人数明显增加。在疫情过后，人类社会将会面临一个长期而缓慢的恢复过程。</p>]]></content>
    
    <summary type="html">
    
      我的疫情记录 - 2020.04.21
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>以特殊的方式给儿子庆祝生日</title>
    <link href="https://www.aafeng.uk/my-sons-birthday-2020/"/>
    <id>https://www.aafeng.uk/my-sons-birthday-2020/</id>
    <published>2020-04-20T20:58:00.000Z</published>
    <updated>2020-04-20T21:51:11.609Z</updated>
    
    <content type="html"><![CDATA[<p>转眼又到了儿子的生日。往年都是让儿子自己选择来举办一个生日Party。在英国，小朋友们的Party类型选择很多，比如在游乐场Party，蹦床Party，做Pizza的Party，森林中的户外活动主题Party，镭射枪对战Party，保龄球Party等等。说白了就是家长们轮流买单，让孩子们一起嗨。今年由于疫情显然是没法搞生日Party了，但仪式感还是要有的。</p><a id="more"></a><p>儿子的礼物已经事先给他准备好了。他前段时间一直想要一个Amazon Alexa，想要问Alexa各种奇怪的问题。我考虑再三，决定还是选择了Google Home Hub作为替代产品，主要原因是对整套Google产品印象分非常高。相信他一定也会喜欢的。还有就是一套他非常想要的书《The Treehouse Collection》。</p><p><img src="/images/kids/birthday/google-home-hub.png" alt="Google Home Hub"></p><p>尽管现在不能和他的小伙伴们见面，但他的小伙伴们早就在Whatsapp群中送上了各种生日祝福，有录视频的，有留下语音的，也有发送电子贺卡的。最让我们感动的是他最好的朋友的妈妈，带上儿子最好的朋友，专程开车来到我们家门口，把礼物远远的留下，并为儿子当面唱了一首生日快乐歌。</p><p>媳妇今天专门为孩子做了一个生日蛋糕。做的是孩子们最喜欢的戚风蛋糕。本来是要搭配些水果的。但现在购物不便，就变通了一下。和媳妇做的蛋糕相比，我<a href="/5wpl8/">前些天做的蛋糕</a>简直就是弱爆了。。。</p><p><img src="/images/kids/birthday/20200420-cake.png" alt="Google Home Hub"></p>]]></content>
    
    <summary type="html">
    
      儿子生日 + 虚拟Party
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
      <category term="生日" scheme="https://www.aafeng.uk/tags/%E7%94%9F%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>最近遇到的一个Cron job的坑</title>
    <link href="https://www.aafeng.uk/cronjob-problem/"/>
    <id>https://www.aafeng.uk/cronjob-problem/</id>
    <published>2020-04-20T04:58:00.000Z</published>
    <updated>2020-04-21T21:08:35.303Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/technology/linux/bash.png" alt="Cron job"></p><p>最近写了一个Python程序，将其添加到了cronjob中，希望让其定期自动运行，但一直不能正常工作。其实在这之前一直在使用cronjob，也从没遇到过什么问题，因此感觉肯定是一个很初级的错误导致的。 下面把这次排错的经历记录一下。</p><a id="more"></a><p>其Cronjob设置如下：</p><pre><code>30 04 * * * /home/aafeng/batch/liker/aafeng_liker.sh &gt;&gt; /home/aafeng/cronjobs/logs/aafeng_liker.log</code></pre><p>它就是不工作，而且日志文件为空，根本就没有任何线索。</p><p>首先想到的是环境变量的配置有问题。于是添加了这一句：</p><pre><code>. $HOME/.bash_profile    </code></pre><p>其作用就相当于运行：</p><pre><code>source $HOME/.bash_profile  </code></pre><p>这样就能保证在运行脚本之前装载所有环境变量，于是Cron job就成为了：   </p><pre><code>30 04 * * * . $HOME/.bash_profile; /home/aafeng/batch/liker/aafeng_liker.sh &gt;&gt; /home/aafeng/cronjobs/logs/aafeng_liker.log    </code></pre><p>但仍然没有任何作用。    </p><p>检查一下系统日志文件/var/log/syslog，发现这条错误信息：</p><pre><code>Apr 20 11:11:02 vmi164206 CRON[16662]: (CRON) info (No MTA installed, discarding output)</code></pre><p>这条错误消息说明，Cron job产生了输出，Cron守护进程想要将这些输出通过email发送给我，但是我的MTA (Mail Transfer Agent) 并没有正确配置，因此才出现上面的错误提示。</p><p>要想解决这个问题，有几种不同的方法：</p><ul><li>安装并配置MTA，比如：postfix，但我在VM上根本就不使用mail，因此并不想采取这种方式</li><li>进行错误输出重定向，添加： 2&gt;&amp;1，将错误输出到日志文件中</li></ul><p>我选择了第二种方式，这样Cron job就成为了：</p><p>  30 04 <em> </em> * . $HOME/.bash_profile; /home/aafeng/batch/liker/aafeng_liker.sh &gt;&gt; /home/aafeng/cronjobs/logs/aafeng_liker.log 2&gt;&amp;1</p><p>再检查自己的日志文件，终于有输出了：</p><pre><code>Traceback (most recent call last):  File &quot;likercli.py&quot;, line 3, in &lt;module&gt;  import mysql.connector  ModuleNotFoundError: No module named &apos;mysql&apos;</code></pre><p>提示找不到mysql这个库。但我明明已经安装了啊。 将Python的完整路径添加后问题解决：</p><pre><code>/home/aafeng/environments/myenv/bin/python xxxxxx</code></pre><p>其实这并不能完全解释为什么找不到mysql这个库。因为前面已经通过</p><pre><code>. $HOME/.bash_profile</code></pre><p>装载了所有配置，包括Python virtual env，这样应该就能直接定位到/home/aafeng/environments/myenv/bin/python 啊，但就是无法直接工作。算了，既然加上完整的Python路径能正常运行，就先不管它了。</p>]]></content>
    
    <summary type="html">
    
      最近遇到的一个Cron job的坑
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://www.aafeng.uk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hive Engine及5月1日的空投</title>
    <link href="https://www.aafeng.uk/hive-engine-airdrop/"/>
    <id>https://www.aafeng.uk/hive-engine-airdrop/</id>
    <published>2020-04-19T20:58:00.000Z</published>
    <updated>2020-04-19T22:26:19.792Z</updated>
    
    <content type="html"><![CDATA[<p>在说正文之前先说重点。Hive Engine将于5月1日对Steem Engine中ENG，EM，EM4代币的持有者进行空投，但前提是这些代币必须处于锁定 (staked) 状态，且不能处于解锁 (unstaking)的过程中。因此，如果持有以上的三种代币，请锁定并耐心等待空投。</p><p><img src="/images/hive/hive-engine-1.png" alt="Hive Engine"></p><a id="more"></a><p>其实自从Hive从Steem硬分叉之后，我一直在想是否会有一个和Steem Engine等同的Hive Engine出来？近期正好看到 @aggroed 的<a href="https://hive.blog/hive-engine/@aggroed/hive-engine-plans-for-april-and-may" rel="external nofollow noopener noreferrer" target="_blank">这篇文章</a>。才知道Hive Engine已经上线，并将于5月1日进行空投。</p><p>其访问网址为：<a href="https://hive-engine.com/" rel="external nofollow noopener noreferrer" target="_blank">https://hive-engine.com/</a></p><p>登录方式可以选择Hive的那些key来登录，或者选择Hive Keychain。我这里使用  Hive Keychain登录：</p><p><img src="/images/hive/hive-engine-2.png" alt="Hive Engine"></p><p>登录之后看到自己空空如也的钱包:-(</p><p><img src="/images/hive/hive-engine-3.png" alt="Hive Engine"></p><p>关于5月1日的空投，请参考这篇<a href="https://hive.blog/hive-engine/@aggroed/hive-engine-plans-for-april-and-may" rel="external nofollow noopener noreferrer" target="_blank">英文原文</a>。文章中有些信息是针对代币发行者的，下面仅对部分我认为和普通代币持有者相关的信息进行摘要：</p><blockquote><p>We’ll be sun setting EMFOUR. Any holder of EMFOUR will receive an airdrop of 4 EM for every EMFOUR they own and we’ll remove EMFOUR from the market.</p></blockquote><p>在Steem Engine上的EMFOUR代币持有者，将会获得EM代币空投，其比例为每个EMFOUR会获得4个EM。之后EMFOUR将被从市场中移除。</p><blockquote><p>Many people hold ENG/EM/EMFOUR and are wondering what the future holds for them. I’m currently targeting a series of airdrops that would commence on May 1st. It will require ENG/EM to be staked and not in the unstaking process for it to count towards the airdrop.</p></blockquote><p>在5月1日起会进行空投，但仅限于将ENG/EM锁定的持有者，且该代币不能处于解锁的过程中。</p>]]></content>
    
    <summary type="html">
    
      Hive Engine及5月1日的空投
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Hive Keychain介绍</title>
    <link href="https://www.aafeng.uk/hive-keychain/"/>
    <id>https://www.aafeng.uk/hive-keychain/</id>
    <published>2020-04-19T05:58:00.000Z</published>
    <updated>2020-04-19T07:17:29.927Z</updated>
    
    <content type="html"><![CDATA[<p>最近试用了一下 Hive Keychain，感觉非常好用，向大家推荐一下。</p><p><img src="/images/hive/keychain-1.png" alt="Hive Keychain"></p><a id="more"></a><h2 id="Hive-Keychain是做什么的？"><a href="#Hive-Keychain是做什么的？" class="headerlink" title="Hive Keychain是做什么的？"></a>Hive Keychain是做什么的？</h2><p>简而言之，Hive Keychain就是把你所需要的各种Key，主要是Active Key和Posting Key保存在Keychain里。这样你在进行相应操作，比如：转账等时不需要每次都输入那些key了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Chrome Web Store 下载地址：<a href="https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep" rel="external nofollow noopener noreferrer" target="_blank">https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep</a></p><p>单击“Add to Chrome”</p><p><img src="/images/hive/keychain-2.png" alt="Hive Keychain"></p><p>然后按照提示进行安装，整个过程非常简单。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>单击Hive Keychain的图标，然后设置一个Keychain的密码：</p><p><img src="/images/hive/keychain-3.png" alt="Hive Keychain"></p><p>首先需要添加各种需要的key，包括Active key，Posting key，和Memo Key。</p><p>这里，添加了我自己的posting key。</p><p><img src="/images/hive/keychain-4.png" alt="Hive Keychain"></p><p>添加后就能看到自己账户的基本信息了：</p><p><img src="/images/hive/keychain-5.png" alt="Hive Keychain"></p><p>如果要进行转账的话，需要添加Active key，需要在”MANAGE ACCOUNTS” -&gt; “你的用户名” 这里添加：</p><p><img src="/images/hive/keychain-6.png" alt="Hive Keychain"></p><p>都设置好后就可以进行各种操作了：比如转账，查看转账历史，对见证人投票等。</p><p><img src="/images/hive/keychain-7.png" alt="Hive Keychain"></p>]]></content>
    
    <summary type="html">
    
      Hive Keychain介绍
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>自家腌的咸鸡蛋，真香</title>
    <link href="https://www.aafeng.uk/preserved-eggs/"/>
    <id>https://www.aafeng.uk/preserved-eggs/</id>
    <published>2020-04-18T19:58:00.000Z</published>
    <updated>2020-04-18T20:21:48.856Z</updated>
    
    <content type="html"><![CDATA[<p>前一段腌制的咸鸡蛋两周前时间就已经满了，开始陆陆续续的吃。今天是最后一锅，效果也是最好的一锅。几乎个个冒油，真的非常香。</p><p><img src="https://user-images.githubusercontent.com/63479035/79635181-58d21900-8167-11ea-8019-f6507a5eef95.png" alt="image"></p><a id="more"></a><p>从小家中就有定期腌鸡蛋的传统。至于为什么是鸡蛋，而不是鸭蛋，可能是因为我童年生活的北方小城那里的鸭蛋比较少，也相对贵一些吧。母亲每过一段时间就会腌制一批鸡蛋。当时家中用的是瓦罐，看着也更有感觉。有时候不等第一罐腌好，母亲就开始腌制第二罐，这样就能保证总有咸鸡蛋吃。</p><p>有些朋友也尝试过腌制咸鸡蛋，但经常会腌的发黑发臭。其实这里面只有一点需要注意，尽量保持将鸡蛋腌制在无菌/少菌环境中。在整个腌制过程中不要用生水，一定要用开水化开盐水，而且要用凉白开把鸡蛋洗干净后再放入盐水中。</p><p>其实现在物资极为丰富，即使在国外，也能在中超中买到咸鸭蛋，而且几乎个个冒油。但我仍然把这个习惯保持了下来，也算母亲给我的一个童年回忆吧。</p>]]></content>
    
    <summary type="html">
    
      自家腌的咸鸡蛋，真香
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。</title>
    <link href="https://www.aafeng.uk/captain-tom-moore/"/>
    <id>https://www.aafeng.uk/captain-tom-moore/</id>
    <published>2020-04-18T04:30:00.000Z</published>
    <updated>2020-04-18T22:08:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>这两天朋友圈被这位叫做Captain Tom Moore的英国老爷爷刷屏了。曾经参与二战的英国退伍老兵Tom Moore将于月底迎接他的100岁生日。近几日他在著名的justgiving网站发起了一项为英国NHS(National Health Service，国家医疗系统)的募捐活动 (募捐活动网址：<a href="https://www.justgiving.com/fundraising/tomswalkforthenhs" rel="external nofollow noopener noreferrer" target="_blank">https://www.justgiving.com/fundraising/tomswalkforthenhs</a><br>)。善款将被捐赠给NHS，以支持那些在NHS工作的众多无名英雄们。</p><a id="more"></a><p>老爷爷设定的目标对于年轻人来说是轻而易举的一件事：绕着自己家花园走100圈</p><blockquote><p>Cpt Tom Moore is walking 100 lengths of his garden for NHS Charities Together because our fantastic NHS workers are national heroes</p></blockquote><p>但作为一位百岁高龄的老人来说，这的确是一项巨大的挑战，老爷爷需要借助于自己的助步器，步履蹒跚的来完成这项挑战。网友们得知后非常感动，纷纷慷慨解囊。起初他设定的目标为50万英镑，但截止到我写这篇文章的时候，已经收到来自世界各地，共近90万人的捐赠，总共募集到1800万英镑，为设定募捐目标的3625%！</p><p><img src="/images/life/captain-tom-moore.jpg" alt="Captain Tom Moore"></p><p>看了一下 justgiving 上对老爷爷的介绍。他曾经被派往印度和日军作战。说起来也是一位抗日英雄！</p><blockquote><p>Tom was born and brought up in Keighley, Yorkshire. He went to Keighley Grammar School and later completed an apprenticeship as a Civil Engineer. Tom went onto being enlisted in 8 DWR (145 RAC) at the beginning of the war, and in 1940 was selected for Officer training. He was later posted to 9DWR in India, and served and fought on the Arakan, went to Regiment to Sumatra after the Japanese surrender and returned to be Instructor at Armoured Fighting Vehicle School in Bovington.</p></blockquote><p>老爷爷说的一句话让我非常感动：“当你看到我胸前这些勋章时，就能明白好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。”。的确，在面对敌人，面对可怕的病毒时，可能每个人都曾经害怕，但我们必须勇敢。如果每个人都畏惧不前，只能让病毒更加肆虐，让更多的人遭受不幸。正是奋斗在抗疫最前线的众多无名英雄，给了众人希望，让我们有了前行的动力。</p>]]></content>
    
    <summary type="html">
    
      好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
</feed>
