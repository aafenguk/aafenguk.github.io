<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aafeng.uk/"/>
  <updated>2020-04-20T09:59:52.609Z</updated>
  <id>https://www.aafeng.uk/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最近遇到的一个Cron job的坑</title>
    <link href="https://www.aafeng.uk/cronjob-problem/"/>
    <id>https://www.aafeng.uk/cronjob-problem/</id>
    <published>2020-04-20T04:58:00.000Z</published>
    <updated>2020-04-20T09:59:52.609Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/technology/linux/bash.png" alt="Cron job"></p><p>最近写了一个Python程序，希望对<a href="https://steem.buzz/created/cn" rel="external nofollow noopener noreferrer" target="_blank">CN区</a>的众多liker小伙伴们自动赞赏。 设定好了一个Cronjob，希望让其自动运行，但每次都不能自动执行。 </p><a id="more"></a><p>其Cronjob设置如下：</p><pre><code>30 04 * * * /home/aafeng/batch/liker/aafeng_steemliker.sh &gt;&gt; /home/aafeng/cronjobs/logs/steemliker.log</code></pre><p>而且问题是日志文件为空，根本就没有任何线索。</p><p>首先想到的是环境变量的配置有问题。于是添加了这一句：</p><pre><code>. $HOME/.bash_profile    </code></pre><p>Cron job就成为了：   </p><pre><code>30 04 * * * . $HOME/.bash_profile; /home/aafeng/batch/liker/aafeng_steemliker.sh &gt;&gt; /home/aafeng/cronjobs/logs/steemliker.log    </code></pre><p>但仍然没有任何作用。    </p><p>检查一下系统日志文件/var/log/syslog，发现这条错误信息：</p><pre><code>Apr 20 11:11:02 vmi164206 CRON[16662]: (CRON) info (No MTA installed, discarding output)</code></pre><p>这条错误消息在于，Cron job产生了输出，Cron守护进程想要将这些输出通过email发送给我，但是我的MTA (Mail Transfer Agent) 并没有正确配置，因此会出现上面的错误提示。</p><p>要想解决这个问题，有几种不同的方法：</p><ul><li>安装并配置MTA，比如：postfix，但我在VM上根本就不使用mail，因此并不想采取这种方式</li><li>进行错误输出重定向，添加： 2&gt;&amp;1，将错误输出到日志文件中</li></ul><p>我选择了第二种方式，这样Cron job就成为了：</p><pre><code>30 04 * * * . $HOME/.bash_profile; /home/aafeng/batch/liker/aafeng_steemliker.sh &gt;&gt; /home/aafeng/cronjobs/logs/steemliker.log 2&gt;&amp;1</code></pre><p>再检查自己的日志文件，终于有输出了：</p><pre><code>Traceback (most recent call last):  File &quot;likercli.py&quot;, line 3, in &lt;module&gt;  import mysql.connector  ModuleNotFoundError: No module named &apos;mysql&apos;</code></pre><p>提示找不到mysql这个库。但我明明已经安装了啊。 将Python的完整路径添加后问题解决：</p><pre><code>/home/aafeng/environments/myenv/bin/python xxxxxx</code></pre>]]></content>
    
    <summary type="html">
    
      最近遇到的一个Cron job的坑
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://www.aafeng.uk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hive Engine及5月1日的空投</title>
    <link href="https://www.aafeng.uk/hive-engine-airdrop/"/>
    <id>https://www.aafeng.uk/hive-engine-airdrop/</id>
    <published>2020-04-19T20:58:00.000Z</published>
    <updated>2020-04-19T22:26:19.792Z</updated>
    
    <content type="html"><![CDATA[<p>在说正文之前先说重点。Hive Engine将于5月1日对Steem Engine中ENG，EM，EM4代币的持有者进行空投，但前提是这些代币必须处于锁定 (staked) 状态，且不能处于解锁 (unstaking)的过程中。因此，如果持有以上的三种代币，请锁定并耐心等待空投。</p><p><img src="/images/hive/hive-engine-1.png" alt="Hive Engine"></p><a id="more"></a><p>其实自从Hive从Steem硬分叉之后，我一直在想是否会有一个和Steem Engine等同的Hive Engine出来？近期正好看到 @aggroed 的<a href="https://hive.blog/hive-engine/@aggroed/hive-engine-plans-for-april-and-may" rel="external nofollow noopener noreferrer" target="_blank">这篇文章</a>。才知道Hive Engine已经上线，并将于5月1日进行空投。</p><p>其访问网址为：<a href="https://hive-engine.com/" rel="external nofollow noopener noreferrer" target="_blank">https://hive-engine.com/</a></p><p>登录方式可以选择Hive的那些key来登录，或者选择Hive Keychain。我这里使用  Hive Keychain登录：</p><p><img src="/images/hive/hive-engine-2.png" alt="Hive Engine"></p><p>登录之后看到自己空空如也的钱包:-(</p><p><img src="/images/hive/hive-engine-3.png" alt="Hive Engine"></p><p>关于5月1日的空投，请参考这篇<a href="https://hive.blog/hive-engine/@aggroed/hive-engine-plans-for-april-and-may" rel="external nofollow noopener noreferrer" target="_blank">英文原文</a>。文章中有些信息是针对代币发行者的，下面仅对部分我认为和普通代币持有者相关的信息进行摘要：</p><blockquote><p>We’ll be sun setting EMFOUR. Any holder of EMFOUR will receive an airdrop of 4 EM for every EMFOUR they own and we’ll remove EMFOUR from the market.</p></blockquote><p>在Steem Engine上的EMFOUR代币持有者，将会获得EM代币空投，其比例为每个EMFOUR会获得4个EM。之后EMFOUR将被从市场中移除。</p><blockquote><p>Many people hold ENG/EM/EMFOUR and are wondering what the future holds for them. I’m currently targeting a series of airdrops that would commence on May 1st. It will require ENG/EM to be staked and not in the unstaking process for it to count towards the airdrop.</p></blockquote><p>在5月1日起会进行空投，但仅限于将ENG/EM锁定的持有者，且该代币不能处于解锁的过程中。</p>]]></content>
    
    <summary type="html">
    
      Hive Engine及5月1日的空投
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Hive Keychain介绍</title>
    <link href="https://www.aafeng.uk/hive-keychain/"/>
    <id>https://www.aafeng.uk/hive-keychain/</id>
    <published>2020-04-19T05:58:00.000Z</published>
    <updated>2020-04-19T07:17:29.927Z</updated>
    
    <content type="html"><![CDATA[<p>最近试用了一下 Hive Keychain，感觉非常好用，向大家推荐一下。</p><p><img src="/images/hive/keychain-1.png" alt="Hive Keychain"></p><a id="more"></a><h2 id="Hive-Keychain是做什么的？"><a href="#Hive-Keychain是做什么的？" class="headerlink" title="Hive Keychain是做什么的？"></a>Hive Keychain是做什么的？</h2><p>简而言之，Hive Keychain就是把你所需要的各种Key，主要是Active Key和Posting Key保存在Keychain里。这样你在进行相应操作，比如：转账等时不需要每次都输入那些key了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Chrome Web Store 下载地址：<a href="https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep" rel="external nofollow noopener noreferrer" target="_blank">https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep</a></p><p>单击“Add to Chrome”</p><p><img src="/images/hive/keychain-2.png" alt="Hive Keychain"></p><p>然后按照提示进行安装，整个过程非常简单。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>单击Hive Keychain的图标，然后设置一个Keychain的密码：</p><p><img src="/images/hive/keychain-3.png" alt="Hive Keychain"></p><p>首先需要添加各种需要的key，包括Active key，Posting key，和Memo Key。</p><p>这里，添加了我自己的posting key。</p><p><img src="/images/hive/keychain-4.png" alt="Hive Keychain"></p><p>添加后就能看到自己账户的基本信息了：</p><p><img src="/images/hive/keychain-5.png" alt="Hive Keychain"></p><p>如果要进行转账的话，需要添加Active key，需要在”MANAGE ACCOUNTS” -&gt; “你的用户名” 这里添加：</p><p><img src="/images/hive/keychain-6.png" alt="Hive Keychain"></p><p>都设置好后就可以进行各种操作了：比如转账，查看转账历史，对见证人投票等。</p><p><img src="/images/hive/keychain-7.png" alt="Hive Keychain"></p>]]></content>
    
    <summary type="html">
    
      Hive Keychain介绍
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>自家腌的咸鸡蛋，真香</title>
    <link href="https://www.aafeng.uk/preserved-eggs/"/>
    <id>https://www.aafeng.uk/preserved-eggs/</id>
    <published>2020-04-18T19:58:00.000Z</published>
    <updated>2020-04-18T20:21:48.856Z</updated>
    
    <content type="html"><![CDATA[<p>前一段腌制的咸鸡蛋两周前时间就已经满了，开始陆陆续续的吃。今天是最后一锅，效果也是最好的一锅。几乎个个冒油，真的非常香。</p><p><img src="https://user-images.githubusercontent.com/63479035/79635181-58d21900-8167-11ea-8019-f6507a5eef95.png" alt="image"></p><a id="more"></a><p>从小家中就有定期腌鸡蛋的传统。至于为什么是鸡蛋，而不是鸭蛋，可能是因为我童年生活的北方小城那里的鸭蛋比较少，也相对贵一些吧。母亲每过一段时间就会腌制一批鸡蛋。当时家中用的是瓦罐，看着也更有感觉。有时候不等第一罐腌好，母亲就开始腌制第二罐，这样就能保证总有咸鸡蛋吃。</p><p>有些朋友也尝试过腌制咸鸡蛋，但经常会腌的发黑发臭。其实这里面只有一点需要注意，尽量保持将鸡蛋腌制在无菌/少菌环境中。在整个腌制过程中不要用生水，一定要用开水化开盐水，而且要用凉白开把鸡蛋洗干净后再放入盐水中。</p><p>其实现在物资极为丰富，即使在国外，也能在中超中买到咸鸭蛋，而且几乎个个冒油。但我仍然把这个习惯保持了下来，也算母亲给我的一个童年回忆吧。</p>]]></content>
    
    <summary type="html">
    
      自家腌的咸鸡蛋，真香
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。</title>
    <link href="https://www.aafeng.uk/captain-tom-moore/"/>
    <id>https://www.aafeng.uk/captain-tom-moore/</id>
    <published>2020-04-18T04:30:00.000Z</published>
    <updated>2020-04-18T22:08:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>这两天朋友圈被这位叫做Captain Tom Moore的英国老爷爷刷屏了。曾经参与二战的英国退伍老兵Tom Moore将于月底迎接他的100岁生日。近几日他在著名的justgiving网站发起了一项为英国NHS(National Health Service，国家医疗系统)的募捐活动 (募捐活动网址：<a href="https://www.justgiving.com/fundraising/tomswalkforthenhs" rel="external nofollow noopener noreferrer" target="_blank">https://www.justgiving.com/fundraising/tomswalkforthenhs</a><br>)。善款将被捐赠给NHS，以支持那些在NHS工作的众多无名英雄们。</p><a id="more"></a><p>老爷爷设定的目标对于年轻人来说是轻而易举的一件事：绕着自己家花园走100圈</p><blockquote><p>Cpt Tom Moore is walking 100 lengths of his garden for NHS Charities Together because our fantastic NHS workers are national heroes</p></blockquote><p>但作为一位百岁高龄的老人来说，这的确是一项巨大的挑战，老爷爷需要借助于自己的助步器，步履蹒跚的来完成这项挑战。网友们得知后非常感动，纷纷慷慨解囊。起初他设定的目标为50万英镑，但截止到我写这篇文章的时候，已经收到来自世界各地，共近90万人的捐赠，总共募集到1800万英镑，为设定募捐目标的3625%！</p><p><img src="/images/life/captain-tom-moore.jpg" alt="Captain Tom Moore"></p><p>看了一下 justgiving 上对老爷爷的介绍。他曾经被派往印度和日军作战。说起来也是一位抗日英雄！</p><blockquote><p>Tom was born and brought up in Keighley, Yorkshire. He went to Keighley Grammar School and later completed an apprenticeship as a Civil Engineer. Tom went onto being enlisted in 8 DWR (145 RAC) at the beginning of the war, and in 1940 was selected for Officer training. He was later posted to 9DWR in India, and served and fought on the Arakan, went to Regiment to Sumatra after the Japanese surrender and returned to be Instructor at Armoured Fighting Vehicle School in Bovington.</p></blockquote><p>老爷爷说的一句话让我非常感动：“当你看到我胸前这些勋章时，就能明白好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。”。的确，在面对敌人，面对可怕的病毒时，可能每个人都曾经害怕，但我们必须勇敢。如果每个人都畏惧不前，只能让病毒更加肆虐，让更多的人遭受不幸。正是奋斗在抗疫最前线的众多无名英雄，给了众人希望，让我们有了前行的动力。</p>]]></content>
    
    <summary type="html">
    
      好运总是眷顾那些勇敢的人，这就是为何我们必须勇敢的原因。
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Hive的账户恢复操作及相关工具推荐</title>
    <link href="https://www.aafeng.uk/hive-account-recovery-and-tool/"/>
    <id>https://www.aafeng.uk/hive-account-recovery-and-tool/</id>
    <published>2020-04-17T04:58:00.000Z</published>
    <updated>2020-04-17T07:15:33.623Z</updated>
    
    <content type="html"><![CDATA[<p>在前几天的<a href="/hive-steem-steem/">一篇文章</a>中提到了如何更改恢复账号。那么，如果密码真的被盗，该怎么使用恢复账号来更改自己的密码呢？下面介绍一下账号恢复操作的逻辑，并推荐一个进行账号恢复的工具。</p><p><img src="/images/hive/account-recovery-1.jpg" alt="Hive账户恢复"></p><a id="more"></a><p>图源：Pixabay</p><h2 id="账号恢复操作的逻辑"><a href="#账号恢复操作的逻辑" class="headerlink" title="账号恢复操作的逻辑"></a>账号恢复操作的逻辑</h2><p>以我的一个测试账号 aafuk 为例，当初我使用了 aafeng 这个账号来创建的 aafuk，因此 aafuk 的恢复账号就是 aafeng。那么，如果 aafuk 的密码被盗，在30天之内是可以通过恢复账号，这里是 aafeng 来重置 aafuk 的密码的。这里 aafuk 对 aafeng 是信任的，因此可以由 aafeng 来恢复 aafuk 的密码。但是，系统设计巧妙的一处就是：在整个密码恢复的过程中，aafuk 既不需要提供被盗的密码给 aafeng，也不需要提供 自己想要设置的新密码给 aafeng，仅仅需要提供新密码对应的公钥就可以。</p><p><img src="/images/hive/account-recovery-2.png" alt="Hive账户恢复"></p><h2 id="账号恢复操作步骤"><a href="#账号恢复操作步骤" class="headerlink" title="账号恢复操作步骤"></a>账号恢复操作步骤</h2><p>感谢 @reazuliqbal 提供的账号恢复工具，其访问地址为：<a href="https://reazuliqbal.com/HiveAccountRecovery/" rel="external nofollow noopener noreferrer" target="_blank">https://reazuliqbal.com/HiveAccountRecovery/</a></p><p><img src="/images/hive/account-recovery-3.png" alt="Hive账户恢复"></p><p>下面步骤中使用 aafeng 来恢复 aafuk 这个账号的密码：</p><h3 id="第一步，由-aafuk-操作"><a href="#第一步，由-aafuk-操作" class="headerlink" title="第一步，由 aafuk 操作"></a>第一步，由 aafuk 操作</h3><p>首先单击“Recover Account”，并输入待恢复账号(这里是aafuk)，新密码 (可以由这个工具来生成，也可以使用自己设定的密码）。</p><p><img src="/images/hive/account-recovery-4.png" alt="Hive账户恢复"></p><p>然后单击“Get Public Owner Key”来生成公钥。嗯，似乎出问题了。原因在于我这个测试账户在过去30天内没有更改过密码，不能往下继续。这也意味着如果你的密码被盗超过30天，似乎就没法恢复了。</p><p><img src="/images/hive/account-recovery-5.png" alt="Hive账户恢复"></p><p>好吧，为了进行这个实验，我把 aafuk 的密码改了一下，继续：</p><p>这次可以了，得到了一个公钥：</p><p>New public owner key: STM6e9UQLs5DRKd1ttCeAZWf5Hdqs24aun1rSw459WpgE7Qibcajv</p><p><img src="/images/hive/account-recovery-6.png" alt="Hive账户恢复"></p><p>接下来，把公钥发送给你所设定的恢复账号，这里这里 <strong>发送的是公钥，不是密码，发送的是公钥，不是密码，发送的是公钥，不是密码</strong>。</p><p>第二步：由 aafeng 操作</p><p>访问这个页面：<br><a href="https://reazuliqbal.com/HiveAccountRecovery/request-recovery.html" rel="external nofollow noopener noreferrer" target="_blank">https://reazuliqbal.com/HiveAccountRecovery/request-recovery.html</a></p><p>依次输入待恢复账号，第一步获取的公钥，恢复账号，以及恢复账号的 Active Key，然后单击 “Submit Recovery Request”。</p><p><img src="/images/hive/account-recovery-7.png" alt="Hive账户恢复"></p><p>系统提示这个请求已经被成功提交。</p><p><img src="/images/hive/account-recovery-7a.png" alt="Hive账户恢复"></p><p>这时在 hiveblock 上查看，从 aafeng 和 aafuk 的账号中都可以看到这个交易：</p><p><img src="/images/hive/account-recovery-8.png" alt="Hive账户恢复"></p><h3 id="第三步：由-aafuk-操作"><a href="#第三步：由-aafuk-操作" class="headerlink" title="第三步：由 aafuk 操作"></a>第三步：由 aafuk 操作</h3><p>接下来可以输入前面生成的新密码，还有你账户的旧密码：</p><p><img src="/images/hive/account-recovery-9.png" alt="Hive账户恢复"></p><p>单击“Recover Account”</p><p>提示账号已经成功恢复。</p><p><img src="/images/hive/account-recovery-10.jpg" alt="Hive账户恢复"></p><p>使用新密码登录，成功！</p>]]></content>
    
    <summary type="html">
    
      Hive的账户恢复操作及相关工具推荐
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>我家孩子最爱的杂志，没有之一：The Week Junior</title>
    <link href="https://www.aafeng.uk/the-week-junior/"/>
    <id>https://www.aafeng.uk/the-week-junior/</id>
    <published>2020-04-15T20:59:00.000Z</published>
    <updated>2020-04-17T06:09:17.426Z</updated>
    
    <content type="html"><![CDATA[<p>儿子前一段在学校迷上了《The Week Junior》这本杂志，不仅在学校天天读，回家后还经常和我们谈到他在杂志上看到的各种新闻，最新消息等等。感觉这本杂志让他长了不少见识，也拓展了他的兴趣爱好。</p><p><img src="/images/kids/the-week-junior.jpg" alt="The Week Junior"></p><a id="more"></a><p>最近由于疫情学校停课，于是我们自己订了一份这个杂志，以满足儿子阅读的愿望。《The Week Junior》杂志是周刊，专门为8-14岁的小朋友们设计。杂志涉及的话题非常广泛，包括时事新闻，科学，环境，体育，艺术，有趣的APP，动物等等。</p><p>这份杂志鼓励互动，其中有一个“Over to you”页面，可以聆听众多小读者的想法。这份杂志也鼓励创新，提倡“Critical thinking”，在每份杂志中都有一页提供一个比较有争议的话题，并提出正反方的观点和论据。希望通过这种方式培养孩子们独立思考能力。就像国内的各种辩论赛，或者雅思考试中的议论文一样，支持哪种观点并不重要，重要的是你需要有理有据，自圆其说。</p><p>为了鼓励小读者们认真阅读，还有一个测试页面来检查孩子们的理解。想要偷懒是不行的。。。</p><p>杂志中还有“Do something”和“How to”，鼓励孩子们的动手能力。这可以是一个手工，一个试验，也可以根据食谱做一顿饭。作为一个小吃货，儿子似乎对这项活动情有独钟。下面是这周的食谱和儿子的成果：</p><p><img src="/images/kids/the-week-junior2.jpg" alt="The Week Junior"></p><p><img src="/images/kids/the-week-junior3.jpg" alt="The Week Junior"></p>]]></content>
    
    <summary type="html">
    
      我家孩子最爱的杂志，没有之一：The Week Junior
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
      <category term="读书" scheme="https://www.aafeng.uk/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>实时推送Hive区块链信息到Telegram客户端（3）</title>
    <link href="https://www.aafeng.uk/hive-telegram-3/"/>
    <id>https://www.aafeng.uk/hive-telegram-3/</id>
    <published>2020-04-15T11:44:45.000Z</published>
    <updated>2020-04-15T13:53:48.752Z</updated>
    
    <content type="html"><![CDATA[<p>在前面两篇文章（<a href="/hive-telegram-1/">第一篇</a>, <a href="/hive-telegram-2/">第二篇</a>）中讲到了如何读取Hive区块链信息，回溯N个区块，如何在区块信息中过滤信息，并根据自己定义的规则生成待发送的信息。下面介绍一下如何配置Python Telegram客户端并发送信息。</p><p><img src="/images/dev/telegram.jpg" alt="telegram-send"></p><a id="more"></a><p>首先需要安装telegram-send这个包：</p><pre><code>pip3 install telegram-send</code></pre><p>接下来需要进行配置，运行：</p><pre><code>telegram-send --configure</code></pre><p>其运行结果如下图所示，提示你访问BotFather页面：<a href="https://telegram.me/BotFather" rel="external nofollow noopener noreferrer" target="_blank">https://telegram.me/BotFather</a> 并创建一个机器人，随后需要将token粘贴过来。</p><p><img src="/images/dev/telegram-2.png" alt="telegram-send"></p><p>打开上面的页面。如果你还没有Telegram账号，需要先创建一个。</p><p><img src="/images/dev/telegram-botfather.jpg" alt="telegram-send"></p><p>这里我通过网页方式访问Telegram。</p><p>依次输入以下命令来创建一个你自己的bot：</p><pre><code>/newbot你的bot名字你的bot用户名</code></pre><p>接下来你就会获得一个token：</p><p><img src="/images/dev/telegram-3.jpg" alt="telegram-send"></p><p>返回Linux命令行界面，粘贴你刚获取的token。</p><p><img src="/images/dev/telegram-4.png" alt="telegram-send"></p><p>打开你的bot页面，我这里就是：<a href="https://telegram.me/aafeng_bot" rel="external nofollow noopener noreferrer" target="_blank">https://telegram.me/aafeng_bot</a></p><p>粘贴刚才命令行中获取的密码，bot就会提示已经配置成功；</p><p><img src="/images/dev/telegram-5.png" alt="telegram-send"></p><p>测试一下，在命令行运行：</p><pre><code>telegram-send &quot;Hello, telegram&quot;</code></pre><p>可以成功收到信息：</p><p><img src="/images/dev/telegram-6.png" alt="telegram-send"></p><p>发送图片：</p><pre><code>telegram-send --image test.png</code></pre><p>发送文件：</p><pre><code>telegram-send --file test.txt</code></pre><p>在Python程序中发送Telegram消息：</p><pre><code>import telegram_sendtelegram_send.send(messages=&quot;test message&quot;)</code></pre><p>把telegram部分和前面程序结合起来：</p><pre><code>telegram_messages = []while i&lt;= number_of_blocks_to_check:  for transaction in cb[&quot;transactions&quot;]:    for operation in transaction[&quot;operations&quot;]:      if operation[0] == &quot;vote&quot;:        message = get_vote_message(vote_rules, operation[1])        if message is not None:          telegram_messages.append(message)  previousid = int(cb[&quot;previous&quot;][:8], base=16)  cb = b.hive.get_block(previousid)  i = i+1if len(telegram_messages)&gt;0:  telegram_send.send(messages=telegram_messages)</code></pre><p>然后把这个程序放在cron job中，就可以检测区块链，把感兴趣的内容推送到你Telegram客户端了。</p><p><img src="/images/dev/telegram-7.jpg" alt="telegram-send"></p>]]></content>
    
    <summary type="html">
    
      实时推送Hive区块链信息到Telegram客户端（3）
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
      <category term="Telegram" scheme="https://www.aafeng.uk/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>疫情对生活习惯的改变</title>
    <link href="https://www.aafeng.uk/covid19-20200414/"/>
    <id>https://www.aafeng.uk/covid19-20200414/</id>
    <published>2020-04-14T19:05:18.000Z</published>
    <updated>2020-04-14T19:52:39.761Z</updated>
    
    <content type="html"><![CDATA[<p>今天收到单位的邮件，通知了一个坏消息：有一位同事不幸感染新冠病毒去世了。在接下来的例会中，大家更多的是彼此间的问候，工作谈的并不是很多。最近很多同事，尤其是家中有孩子的，感觉和之前坐办公室时的效率相比，简直是差了太多了。还好单位HR在开始在家办公不久就发了一封邮件，大意是在当前形势下，充分信任大家，不要感觉需要和原来坐班时一样出活，只要try your best就可以了。更多需要注意自己的心理健康，以及工作/家庭之间的平衡。</p><a id="more"></a><p>我感觉对一般人影响最大的就是购物方式基本上都在网上进行了。现在经常需要在固定的时段刷各个超市的网站，希望能够订到送货时段。和朋友们也经常交流如何能够订到合适的送货时段，在哪家超市可以买到想要的食材等等话题。</p><p>由于很多东西网购经常没货，而且网购的slot经常订不上。因此今早又去了一趟超市。不像疫情刚开始大家纷纷囤货时超市的热闹，现在超市门口没有几个人。而且很多超市都有工作人员控制人流，在入口处还帮助顾客对购物车进行消毒。很多超市还要求在购物时只沿着一个方向走。</p><p><img src="/images/life/aldi20200414.jpg" alt="冷冷清清的ALDI超市门口"></p><p>除此之外，各种在线活动，在线教育网站，Youtube频道等越来越火爆。就连小学的小朋友之间也时不时在网上约着群聊。不知道等到疫情过后，已经习惯在网上进行各种活动的我们是否还能再适应回去？？？</p>]]></content>
    
    <summary type="html">
    
      疫情对生活习惯的改变
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>将Hive文章备份到静态站点</title>
    <link href="https://www.aafeng.uk/hive-backup/"/>
    <id>https://www.aafeng.uk/hive-backup/</id>
    <published>2020-04-13T20:49:03.000Z</published>
    <updated>2020-04-17T07:23:28.327Z</updated>
    
    <content type="html"><![CDATA[<p>这两天做了一件工作：将Hive/Steem上自己发的文章进行了整理，并备份到自己的静态站点上： <a href="https://www.aafeng.uk">https://www.aafeng.uk</a></p><p><img src="/images/blockchain/hive-backup-1.jpg" alt="Hive文章备份"></p><a id="more"></a><p>之所以这样做的原因是因为已经在Steem/Hive链上坚持把自己生活中的一些琐事记录在区块链上。初始时不觉得，最近越来越觉得对自己来说是件很有纪念意义的事。毕竟上面记录了自己生活中的点点滴滴。万一有一天其依托的区块链挂了，我这些信息怎么办？？？</p><p>我选择了自己最熟悉的 <a href="https://github.com/hexojs/hexo" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>来生成静态站点。主题则选择了 <a href="https://github.com/ppoffice/hexo-theme-icarus" rel="external nofollow noopener noreferrer" target="_blank">Icarus</a>。</p><p>对于我个人而言，使用这个静态站点更为便捷。首先是其分类非常清晰，我自己在每个分类中的文章数一目了然。</p><p><img src="/images/blockchain/hive-backup-2.jpg" alt="Hive文章备份"></p><p>其归档功能也让我能迅速的定位到某个时段的文章。</p><p><img src="/images/blockchain/hive-backup-3.jpg" alt="Hive文章备份"></p><p>同时还有一个时间线：</p><p><img src="/images/blockchain/hive-backup-4.jpg" alt="Hive文章备份"></p><p>这样，无论以后进行浏览还是查找，都非常方便了。更为重要的是，我把自己的数据和图片都备份到了本地（备份图片时还真的有些坑。。。）。万一链真的断了，我也不怕了。当然，还是希望链越做越大的。</p>]]></content>
    
    <summary type="html">
    
      将Hive文章备份到静态站点
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
      <category term="Hexo" scheme="https://www.aafeng.uk/tags/Hexo/"/>
    
      <category term="Icarus" scheme="https://www.aafeng.uk/tags/Icarus/"/>
    
  </entry>
  
  <entry>
    <title>断舍离</title>
    <link href="https://www.aafeng.uk/5w3nes/"/>
    <id>https://www.aafeng.uk/5w3nes/</id>
    <published>2020-04-13T04:50:00.000Z</published>
    <updated>2020-04-15T08:45:00.540Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直宅在家中。由于时时刻刻都生活/工作在这个小空间，因此更加觉得家中有些杂乱，很多不必要的东西可以扔掉。正好单位在复活节期间多放了两天假，加上本来的复活节大周末，总共六天的时间。于是和媳妇决定对家中进行大刀阔斧的整理。</p><p><img src="/images/downloaded/5w3nes_0.jpg" alt="image.png"><br>图源：pixabay</p><a id="more"></a><p>首先进行整顿的是家中的书架，架子上摆放着一家人的书。其中很多是针对新生儿的育儿书籍。这些书当年都是从国内人肉扛回来的。现在肯定不需要了，于是进行了分类：破损的直接回收扔掉，好一些的送给朋友和捐助给一些慈善店。</p><p>对于有些书，比如一些经典儿童绘本，媳妇总是有一些舍不得。这个时候我就劝她，好好想一想，过去一年，甚至几年内，是否用过，如果没有的话，说明就不需要这本书了。那么，它就应该把位置让出来。这样我们就能把当前更需要的书摆上书架。</p><p>其实对于一本你真正需要，或者喜欢的书，你经常会情不自禁的去读它。比如，我最喜欢的图书之一：《极简宇宙史》。迄今已经读过两遍了。我在书架中给它留了一个最好的位置，因为我知道我还会再读一遍的。</p><p>经过这一番整理，原本杂乱臃肿的书架顿时清爽了，感觉似乎心头的一块大石头被搬走，自己的心情也好了很多。</p>]]></content>
    
    <summary type="html">
    
      断舍离
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>复活节花园寻宝</title>
    <link href="https://www.aafeng.uk/6da9hx/"/>
    <id>https://www.aafeng.uk/6da9hx/</id>
    <published>2020-04-12T04:03:24.000Z</published>
    <updated>2020-04-15T08:39:41.718Z</updated>
    
    <content type="html"><![CDATA[<p>复活节如期而至，其实每年都选择在复活节假期回国和家人团聚。但今年因疫情被迫取消了航班，第一次带着孩子在英国度过复活节。</p><p><img src="/images/downloaded/6da9hx_0.jpg" alt="image.png"><br>图源：pixabay</p><p>不过凡事都尽量往好处想，孩子们一直喜欢复活节时在花园中寻找复活节彩蛋这个游戏，但由于每年的复活节都在中国，因此一直没能满足他们的这个心愿。今年正好满足一下他们的这个小小愿望。</p><a id="more"></a><p>由于疫情，现在复活节彩蛋都限购，只买到一点点的彩蛋。但孩子们更喜欢的是这个游戏本身，彩蛋的多少应该不是最重要的。</p><p><img src="/images/downloaded/6da9hx_1.jpg" alt="image.png"></p><p>其实，在寻找复活节彩蛋游戏中，还有一个主角，就是复活节小兔子。在传说中，复活节小兔子将彩蛋藏起来。之所以是兔子，可能是因为它们强大的生育能力吧，毕竟复活节意味着新生命的诞生。</p><p>我自然就成了客串小兔子的角色，将彩蛋藏在了花园中。</p><p>藏在了苹果树的树枝上：<br><img src="/images/downloaded/6da9hx_2.jpg" alt="image.png"></p><p>梨树上：<br><img src="/images/downloaded/6da9hx_3.jpg" alt="image.png"></p><p>孩子们做游戏的小房子这里：</p><p><img src="/images/downloaded/6da9hx_4.jpg" alt="image.png"></p><p>浇水用的小水壶中：<br><img src="/images/downloaded/6da9hx_5.jpg" alt="image.png"></p><p>很快，这些彩蛋就都被找到了。彩蛋内部一般都是空的，象征着耶稣复活后空空的坟墓。其实时至今日，复活节的宗教色彩已经慢慢淡化了，成了很多家庭度假的热门时段。期待早日恢复正常，把错过的假期补上。</p>]]></content>
    
    <summary type="html">
    
      复活节花园寻宝
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
      <category term="英国文化" scheme="https://www.aafeng.uk/tags/%E8%8B%B1%E5%9B%BD%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>实时推送Hive区块链信息到Telegram客户端（2）</title>
    <link href="https://www.aafeng.uk/hive-telegram-2/"/>
    <id>https://www.aafeng.uk/hive-telegram-2/</id>
    <published>2020-04-11T07:44:45.000Z</published>
    <updated>2020-04-15T13:27:56.854Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/hive-105017/@aafeng/hive-telegram-1">上一篇文章</a>中讲到了整个程序的思路，以及如何读取Hive区块链信息，并回溯N个区块。在这篇文章中讲讲如何在区块信息中过滤信息，并根据自己定义的规则生成待发送的信息。</p><p><img src="/images/hive/hive-telegram-2.jpg" alt="image.png"><br>图源：pixabay</p><a id="more"></a><p>首先，需要定义一些用于筛选信息的规则。这里的一个基本原则就是所定义的规则一定要和程序代码分离，这样最终的程序才容易维护。任何时候想要更改规则的话，只需要修改定义规则的配置文件，而无需修改程序代码。比如：</p><pre><code>rules:  votes:    any_to_aafeng:      from:       &quot;*&quot;      to:         aafeng      exclude:    aafeng,aafeng.test      min_weight: 20</code></pre><p>上面定义了一组规则：除去’aafeng’和’aafeng.test’之外的任何用户对’aafeng’这个用户的点赞，如果点赞额度&gt;=20%，则符合这个规则。</p><p>再举一个关于转账的规则：</p><pre><code>transfers:  any_to_aafeng:    from:        &quot;*&quot;    to:          aafeng    min_account: 1            aafeng_to_any:    from:        aafeng    to:          &quot;*&quot;    min_account: 0 </code></pre><p>上面规则定义了：任何向’aafeng’转入的金额&gt;=1，符合规则。任何从’aafeng’转出的金额&gt;=0，符合规则。这条规则对于监测账号的资金变化非常有用。</p><p>除了上述的两类关于点赞和转账的规则，你还可以定义很多规则，比如：留言，发帖，提到你等等。道理都非常类似，这里就不一一例举了。</p><p>规则都定义了好了之后，我们需要考虑在程序中如何支持这样的规则，下面是对点赞规则的实现：</p><pre><code>HIVE_BASE_URL = &apos;https://hive.blog/&apos;# check if there is a matched vote ruledef get_vote_message(vote_rules, transaction):  messages   = &apos;&apos;  try:    t_voter    = transaction[&quot;voter&quot;]     t_author   = transaction[&quot;author&quot;]    t_weight   = transaction[&apos;weight&apos;]/100.00    t_permlink = transaction[&apos;permlink&apos;]    for vr in vote_rules:      # check exclude       if t_voter in vote_rules[vr][&quot;exclude&quot;].split(&quot;,&quot;):        continue      # check if voting weight matches      if t_weight&gt;0 and t_weight &lt; vote_rules[vr][&quot;min_weight&quot;]:        continue      # check voter and votee matches      if (t_voter==vote_rules[vr][&quot;from&quot;] and t_author==vote_rules[vr][&quot;to&quot;]) or \         (&apos;*&apos;==vote_rules[vr][&quot;from&quot;]     and t_author==vote_rules[vr][&quot;to&quot;]) or \         (t_voter==vote_rules[vr][&quot;from&quot;] and &apos;*&apos;==vote_rules[vr][&quot;to&quot;]):        messages = messages + &quot;VOTE: %s --&gt; %s [%.2f]: %s/@%s/%s\n\n&quot; % (t_voter,t_author,t_weight,HIVE_BASE_URL,t_author,t_permlink)  except Exception as e:    traceback.print_exc()    return None  if messages!=&apos;&apos;:    return messages  else:    return None        </code></pre><p>通过上面的程序，就可以从区块链信息中过滤出自己感兴趣的点赞信息了。下一篇讲讲如何配置Telegram。</p>]]></content>
    
    <summary type="html">
    
      实时推送Hive区块链信息到Telegram客户端（2）
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
      <category term="Telegram" scheme="https://www.aafeng.uk/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>出门放风</title>
    <link href="https://www.aafeng.uk/6x7r52/"/>
    <id>https://www.aafeng.uk/6x7r52/</id>
    <published>2020-04-10T07:44:15.000Z</published>
    <updated>2020-04-15T08:47:47.282Z</updated>
    
    <content type="html"><![CDATA[<p>算一算已经宅在家中两周多了。在这两周中，除了我自己出门去了一趟超市外，全家人都老老实实的在家闭关，该上班的上班，该学习的学习。孩子们每天上下午固定两次在花园中活动一下，蹦床成了他们最爱的项目。</p><a id="more"></a><p>最近在网上看了一个张文宏教授的在线访谈，知道了在地广人稀的地方，只要多加注意，是可以去散散步的。想一想我家似乎这两个条件都满足啊，我们住的远离市中心，可以说在一个小村落里。同时这两天的天气实在是太好了，处处都能嗅到春天的气息。因此决定全家出动，就在家附近去散散步，不要辜负这大好春光。</p><p><img src="/images/downloaded/6x7r52_0.jpg" alt="image.png"></p><p>本来村里的人就不多，现在更是都宅在家中，因此出门几乎没见到几个人。路上都是空空况况的。零星遇到的行人之间也都很有默契的彼此保持至少三米以上的距离。</p><p><img src="/images/downloaded/6x7r52_1.jpg" alt="image.png"></p><p><img src="/images/downloaded/6x7r52_2.jpg" alt="image.png"></p><p>与这冷冷清清的街道相比，一簇簇的水仙花还有各种知名的，不知名的小花已经完全盛开，将路边点缀的生机盎然。</p><p><img src="/images/downloaded/6x7r52_3.jpg" alt="image.png"></p><p><img src="/images/downloaded/6x7r52_4.jpg" alt="image.png"></p><p><img src="/images/downloaded/6x7r52_5.jpg" alt="image.png"></p><p><img src="/images/downloaded/6x7r52_6.jpg" alt="image.png"></p><p><img src="/images/downloaded/6x7r52_7.jpg" alt="image.png"></p><p><img src="/images/downloaded/6x7r52_8.jpg" alt="image.png"></p><p><img src="/images/downloaded/6x7r52_9.jpg" alt="image.png"></p><p>同时趁着现在路上几乎没有车，让孩子们骑车正式上路，顺便给他们讲了讲各种需要注意的交通规则。</p><p>虽然活动半径距离住处都没超过200米，但一家人走走停停，回家时已经是一个多小时之后了，感觉浑身舒畅。希望生活能够早日回归正常，和众多亲友们再次相聚。</p>]]></content>
    
    <summary type="html">
    
      出门放风
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Hive和Steem都已经分家了，绝大多数账户的恢复账户还都是Steem意味着什么？</title>
    <link href="https://www.aafeng.uk/hive-steem-steem/"/>
    <id>https://www.aafeng.uk/hive-steem-steem/</id>
    <published>2020-04-09T07:39:03.000Z</published>
    <updated>2020-04-15T09:02:06.770Z</updated>
    
    <content type="html"><![CDATA[<p>Hive从Steem硬分叉之后，发生了很多事情。其中有一点就是，所有的Steem账户都在Hive上有了一个”分身”，用户名相同，密码相同，所有的设置都相同。其中重要的一点就是：绝大多数账户的恢复账户(Recovery account)是steem这个账户。究其原因，这取决于账户的创建方式。如果是通过Steemit官网创建的，那么默认恢复账号就是’steem’，如果是通过别的账户创建的，那么，恢复账号就是其父账号。</p><p><img src="/images/downloaded/hive-steem-steem_0.jpg" alt="image.png"></p><a id="more"></a><p>那么，这意味着什么呢？如果你的Hive密码丢失了，那么你所设置的Recovery account是可以帮你找回密码的。过去在Steem网络中，steem属于’官方’账号，在丢失密码时可以向其寻求帮助来找回密码。但是，在Hive中，steem这个账号似乎没有这个义务来帮助用户恢复密码了。</p><p>那么，对于众多Hive用户来说，建议更换Recovery账号，这样万一不幸丢失密码，可以多一层保险。推荐设置为自己家人或者好友的账号作为恢复账号。甚至，设置一个小号作为恢复账号都可以。</p><p>如果打算修改系统恢复账号，可以有以下几种方式：</p><p>首先，可以通过peakd.com来进行恢复。在首页中单击”ACTIONS”-&gt;”Keys &amp; Permissions”，</p><p><img src="/images/downloaded/hive-steem-steem_1.jpg" alt="image.png"></p><p>然后选择：”Recovery account”</p><p><img src="/images/downloaded/hive-steem-steem_2.jpg" alt="image.png"></p><p>然后按照提示进行操作就可以。在操作过程中需要提供Owner Key。</p><p>第二种方式：写一段简短的代码来实现这个操作。我是信任peakd.com这个网站的，但还是不想提供自己的Owner key给第三方。这时，可以通过Beem库实现这个操作。毕竟这是开源软件，可以读一下源代码明白是怎么运作的。具体更改恢复账号操作的源代码如下：</p><pre><code>import beemusername = &apos;aafeng.test&apos;wif = {  &quot;owner&quot;: “YOUR_OWNER_KEY”}hive = beem.Steem(nodes=[&apos;https://api.hive.blog&apos;], keys=wif)account = beem.account.Account(username, steem_instance=hive)account.change_recovery_account(new_recovery_account=&apos;aafeng&apos;)</code></pre><p>运行这段程序，可以看到，我测试账号的恢复账号更改操作已经提交。</p><p><img src="/images/downloaded/hive-steem-steem_4.jpg" alt="image.png"></p><p>需要注意的是，出于账户安全的考虑，这个操作需要30天才能完成。</p><p>关于更多恢复账号的讨论，可以参阅这篇英文文章：<a href="https://peakd.com/witness-update/@engrave/review-your-recovery-account-if-you-dont-want-to-lose-your-assets" rel="external nofollow noopener noreferrer" target="_blank">https://peakd.com/witness-update/@engrave/review-your-recovery-account-if-you-dont-want-to-lose-your-assets</a></p>]]></content>
    
    <summary type="html">
    
      Hive和Steem都已经分家了，绝大多数账户的恢复账户还都是Steem意味着什么？
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
      <category term="Steem" scheme="https://www.aafeng.uk/tags/Steem/"/>
    
  </entry>
  
  <entry>
    <title>实时推送Hive区块链信息到Telegram客户端（1）</title>
    <link href="https://www.aafeng.uk/hive-telegram-1/"/>
    <id>https://www.aafeng.uk/hive-telegram-1/</id>
    <published>2020-04-08T05:49:03.000Z</published>
    <updated>2020-04-13T19:28:11.923Z</updated>
    
    <content type="html"><![CDATA[<p>Hive的网页客户端有一个消息通知功能（Notificaitons），每次登录Hive之后，就会看到和你账户相关的信息，比如：谁给你点赞，留言，转发，提到你等等信息。</p><p><img src="/images/downloaded/hive-telegram-1_0.jpg" alt="image.png"></p><p>但是，通过这种方式来查看各种通知的体验并不好。首先需要打开hive/peakd的页面，然后需要从菜单中选择查看通知才能够看到。而且，我们不可能总去刷Hive的网页吧。因此，更为便捷和方便的方式就是通过读取Hive区块链的信息，进行分析，找出自己感兴趣的信息，然后发送给自己的Telegram客户端/其他客户端。</p><a id="more"></a><p>要实现这个功能，需要考虑以下这些因素：</p><p>1）区块链信息的读取。这部分可以通过调用Hivepy库中的相关功能来实现。<br>2）定义你感兴趣的规则。比如：所有给你点赞的信息你都想得到通知，某位大鲸发的所有贴子你都想得到通知，任何和你账户相关的转账操作。等等等等。<br>3）配置一个Telegram机器人，一旦第二步中有符合条件的消息，发送给Telegram客户端。当然，这里非常灵活，你可以配置自己喜欢的客户端，比如Slack，Discord等等，道理都是类似的。</p><p>这篇文章主要来说一说如何检测Hive区块链的信息。</p><p>基本思路就是：首先获取当前区块，然后检测当前块中是否有自己感兴趣的信息，如果有的话，存储到一个变量中以便后面发送/处理。之后向前回溯上一个区块，再做同样的检测，如此进行下去，一直检测到指定数目的区块后停止。</p><p>这里就涉及一个基本的问题：究竟该向前回溯多少个区块呢？这就取决于你这个程序被执行的频率了。举个例子，如果你这个程序每三秒运行一次，而Hive区块链每三秒生成一个块(印象中Steem区块链是每三秒一块，Hive应该没有变)，那么你的程序就不需要进行回溯了。如果你的程序每一分钟运行一次的话，那么你的程序需要回溯60/3 - 1次。</p><p>下面先看看如何读取当前区块：</p><pre><code>from hive import Hivefrom hive.blockchain import Blockchainhblocks = Hive()b       = Blockchain()cb      = b.get_current_block()print(cb)</code></pre><p>运行上面程序，可以看到其输出结果为：</p><pre><code>{&apos;block_id&apos;: &apos;0285ea9524d0cc9609991b4e15f52dfbae4663a5&apos;, &apos;signing_key&apos;: &apos;STM6ZHuTjdyS2vPLsaTyd1bsguGo28jsNcKKASFFTbckBWNKpFqdo&apos;, &apos;timestamp&apos;: &apos;2020-04-07T11:07:54&apos;, &apos;extensions&apos;: [], &apos;transaction_merkle_root&apos;: &apos;ce9c9aea30054f975f69be2bbf852b1804c2eee1&apos;, &apos;transaction_ids&apos;: [&apos;e2134800e3a04dd519d43242d33b938d446508b1&apos;, &apos;e5a979e66d092b5c4c2936bbdc68fa9287a244d9&apos;, &apos;c2cf361839450ab9f3a0176135edeb6d81b9bd90&apos;], &apos;witness&apos;: &apos;blocktrades&apos;, &apos;witness_signature&apos;: &apos;1fd20adda3b1f85adcb864661fef0d696a626b3eb9f4301b0381e69bd3aded604f4d77bfa409554ba4c0a42e43fe368ff992360039f2714e28f5b2fdb20356ad0d&apos;, &apos;previous&apos;: &apos;0285ea94c52b1aeda5ed28063a7c64fb5b881f31&apos;, &apos;transactions&apos;: [{&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 4010214059, &apos;transaction_num&apos;: 0, &apos;signatures&apos;: [&apos;1f116bb1406e8479fd0644e7e8288510f4ea61d65bd1614e03fd67e204c0c2fa0f1a4ebb3d0632131005b0c44f5191b75bec768e96b08c6fc983e049c5d1c61864&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;e2134800e3a04dd519d43242d33b938d446508b1&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:17:45&apos;, &apos;ref_block_num&apos;: 60034, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 10000, &apos;voter&apos;: &apos;news-steem&apos;, &apos;permlink&apos;: &apos;20200407t104855949z-post&apos;, &apos;author&apos;: &apos;minimalpris&apos;}]]}, {&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 3413890307, &apos;transaction_num&apos;: 1, &apos;signatures&apos;: [&apos;205471fe218b0b09b9a0a2ad860286b0a110ebb6d7ef3df6b624b976506054fc645f1cfe2e371a236cd79bb97d7a7a8682ffa00994d3fefd18bf62289ebc3a3e63&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;e5a979e66d092b5c4c2936bbdc68fa9287a244d9&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:08:21&apos;, &apos;ref_block_num&apos;: 60051, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 4000, &apos;voter&apos;: &apos;retinox&apos;, &apos;permlink&apos;: &apos;it-was-all-about-green-a-restful-pleasant-color&apos;, &apos;author&apos;: &apos;priyanarc&apos;}]]}, {&apos;block_num&apos;: 42330773, &apos;ref_block_prefix&apos;: 3519458629, &apos;transaction_num&apos;: 2, &apos;signatures&apos;: [&apos;204064b9720aa2aa1a8380e7b81bdb0f332a628608db586fd4a9abf1ddd03fa4137d7db804973b639032a0683f1108a1a1ed0b71c1ec4c8dd0df59fd8a6b192cfe&apos;], &apos;extensions&apos;: [], &apos;transaction_id&apos;: &apos;c2cf361839450ab9f3a0176135edeb6d81b9bd90&apos;, &apos;expiration&apos;: &apos;2020-04-07T11:17:48&apos;, &apos;ref_block_num&apos;: 60035, &apos;operations&apos;: [[&apos;vote&apos;, {&apos;weight&apos;: 600, &apos;voter&apos;: &apos;ctime&apos;, &apos;permlink&apos;: &apos;it-was-all-about-green-a-restful-pleasant-color&apos;, &apos;author&apos;: &apos;priyanarc&apos;}]]}]}</code></pre><p>如果向前回溯一次，共读取两个块的代码如下：</p><pre><code>NUMBER_OF_BLOCKS_TO_CHECK = 2 for i in range(NUMBER_OF_BLOCKS_TO_CHECK):    print(&quot;block id: %s&quot; % cb[&quot;block_id&quot;])    print(&quot;==========================&quot;)    for transaction in cb[&quot;transactions&quot;]:        for operation in transaction[&quot;operations&quot;]:            print(operation[0])                                                                                                            previousid = int(cb[&quot;previous&quot;][:8], base=16)    cb = b.hive.get_block(previousid)</code></pre><p>其运行结果如下：</p><pre><code>block id: 0285eb1b051eb25a0475e4867499303f48d7d77e==========================transfervotecustom_jsonvotevoteblock id: 0285eb1aff2e699579bdd7136493f3a5ea4dedbf==========================votevotevotevotevotevotevotevotevotevotevotevote</code></pre><p>至此，我们已经可以读取块中的信息，下一篇文章会说说怎么定义感兴趣的规则。</p>]]></content>
    
    <summary type="html">
    
      实时推送Hive区块链信息到Telegram客户端（1）
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
      <category term="Telegram" scheme="https://www.aafeng.uk/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>作为用户，看好Hive链生态系统，加仓HIVE</title>
    <link href="https://www.aafeng.uk/hive-hive/"/>
    <id>https://www.aafeng.uk/hive-hive/</id>
    <published>2020-04-07T04:34:51.000Z</published>
    <updated>2020-04-13T19:30:39.841Z</updated>
    
    <content type="html"><![CDATA[<p>自从上周六STEEM发生0.22.8888软分叉，冻结众多前见证人资产之后，昨天HIVE币价暴跌，最低时被腰斩。</p><p><img src="/images/downloaded/hive-hive_0.jpg" alt="image.png"></p><a id="more"></a><p>关于HIVE和STEEM的硬分叉，双方可以说是各执一词，我就不在这里做过多评论了。但作为STEEM/HIVE用户，就目前而言，我更看好HIVE的生态系统。毕竟大多数的Dapp都迁移到Hive网络上了。包括这两天众多Dapp都要使用的基础服务Steemconnect也已经声明将于六月停止在Steem上的服务，在Hive上的hivesigner则可以正常使用。</p><p>由于HIVE有着一个完善的生态系统，因此我相信HIVE的币价会回归正常。在B网加仓了HIVE：</p><p><img src="/images/downloaded/hive-hive_1.jpg" alt="image.png"></p><p><strong>郑重声明，这只是我的个人行为，不能作为你的投资建议，风险自负。</strong></p><p>作为一个普通用户，我更赞同早期Steem的宣传口号：Money talks，哪边把用户量做上去，把币价抬起来，哪边就能吸引更多的用户。目前我看到的是硬分叉前Steem中的大多数Dapp都迁移到了Hive网络，这样就会携带其大量用户进入Hive。当然，也期待孙老板能把Steem的蛋糕做大，币价也能做上去。</p>]]></content>
    
    <summary type="html">
    
      作为用户，看好Hive链生态系统，加仓HIVE
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>我的第一次烘培经历</title>
    <link href="https://www.aafeng.uk/5wpl8/"/>
    <id>https://www.aafeng.uk/5wpl8/</id>
    <published>2020-04-05T09:36:24.000Z</published>
    <updated>2020-04-15T09:03:32.290Z</updated>
    
    <content type="html"><![CDATA[<p>媳妇前两天过生日。在现在疫情下考虑还是不去买生日蛋糕了。何况英国超市中的生日蛋糕上面都是厚厚的一层糖霜，想想就够了。于是决定，自己动手给媳妇做一个生日蛋糕。先上个成品图吧：</p><p><img src="/images/downloaded/5wpl8_0.jpg" alt="image.png"></p><a id="more"></a><p>其实，媳妇绝对是一个烘培高手，一般孩子们和我的生日蛋糕都是她来做。各种糕点都是轻松搞定，什么戚风蛋糕，中式月饼，Brownie等等，迄今为止还没有失败的记录。做出来的糕点不仅我们自己喜欢吃，单位同事，朋友们也都是赞不绝口。但是，总不能让媳妇自己给自己做生日蛋糕吧。</p><p>何况，现在成天宅在家中，这也算带着孩子们的一项活动。于是立刻开始动手啦。</p><p>从网上查找了一下菜谱，选择了一款最为简单的海绵蛋糕作为我有生以来的第一次烘培尝试。</p><p>首先用打蛋器将鸡蛋打好，菜谱上说要打的非常起泡才好。但我用打蛋器只能打成这个程度，随它去吧。</p><p><img src="/images/downloaded/5wpl8_1.jpg" alt="image.png"></p><p>然后在蛋液中混入食用油，糖，牛奶，再用打蛋器打好。</p><p><img src="/images/downloaded/5wpl8_2.jpg" alt="image.png"></p><p>接下来将面粉放入蛋液中并搅匀。在这个步骤中比例是很关键的。按照教程上说的，蛋/糖/面粉的比例是2:1:1，最佳状态是最终的食材混合物能够达到粘在搅拌器上不掉下来的程度。但我按照这个比例配出来的太稀了，根本达不到这个效果。可能是我中间按照自己的感觉加入了牛奶和食用油的原因吧。于是就不停的加入面粉。最终根本就不管这个比例了，完全跟着感觉走。后来和媳妇请教时才知道，她每次都是严格按照比例，用厨房秤称出每一项食材的重量的。哎，看样子，做任何事情都是有规矩的，不能像我这样随意来。也许，只有达到高手境界才能随意发挥吧。</p><p>也不知道加了多少面粉之后，食材的混合物终于可以挂在搅拌器上了。我迫不及待的将其导入烘培盘中，然后在事先预热的烤箱中烤了共25分钟。</p><p>蛋糕终于烤好了！尽管没有媳妇烤的蛋糕松软，但是似乎味道还很不错。我这第一次的尝试也算成功了吧。。。</p>]]></content>
    
    <summary type="html">
    
      我的第一次烘培经历
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
      <category term="生日" scheme="https://www.aafeng.uk/tags/%E7%94%9F%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>通过程序自动获得Hive免费账号</title>
    <link href="https://www.aafeng.uk/autoclaim-hive-account/"/>
    <id>https://www.aafeng.uk/autoclaim-hive-account/</id>
    <published>2020-04-04T09:40:15.000Z</published>
    <updated>2020-04-15T08:37:06.208Z</updated>
    
    <content type="html"><![CDATA[<p>前几天写了<a href="/@aafeng/hive">一篇文章</a>总结了如何使用第三方工具获得免费账号。但作为一个懒人，肯定还是想要通过程序自动实现的好。下面介绍一个完整的步骤。</p><p><img src="/images/downloaded/autoclaim-hive-account_0.jpg" alt="image.png"></p><a id="more"></a><p>首先说一说前提条件。你的账户需要足够的HP才可以，我现在有5000多的HP，满血时只能获得两个免费账号。同时需要事先安装好<a href="https://github.com/holgern/beem" rel="external nofollow noopener noreferrer" target="_blank">Beem</a>。</p><p>程序的基本思路就是根据目前Resource Credits的百分比来决定是否要领取免费账号（Claim account）。比如：可以设置为如果RC &gt;= 80%，就进行领取。</p><p>至于目前RC百分比的判断，可以采用如下的代码：</p><pre><code>from beem.account import Accountcreator = Account(&apos;aafeng&apos;)current_rc = float(creator.get_rc()[&apos;rc_manabar&apos;][&apos;current_mana&apos;])max_rc = float(creator.get_rc()[&apos;max_rc&apos;])print(100 * current_rc / max_rc)</code></pre><p>其输出结果为：</p><pre><code>76.26412538197629</code></pre><p>这个数字就是目前RC的百分比。接下来需要定义一个RC_THRESHOLD,再用上面的百分比和RC_THRESHOLD进行比较，从而决定是否要Claim account。使用Beem claim account的代码片段如下：</p><pre><code>RC_THRESHOLD = 75hive = Steem(node=&quot;https://anyx.io&quot;, keys=[active_key])if 100* current_rc / max_rc &gt; RC_THRESHOLD:    hive.claim_account(‘aafeng’)</code></pre><p>把上面的代码放在一起：</p><pre><code>from sys import argvfrom beem import Steemfrom beem.account import AccountRC_THRESHOLD = 75if __name__ == &quot;__main__&quot;:    user       = argv[1]    active_key = argv[2]    hive = Steem(node=&quot;https://anyx.io&quot;, keys=[active_key])                                                                                creator = Account(user)    current_rc = float(creator.get_rc()[&apos;rc_manabar&apos;][&apos;current_mana&apos;])    max_rc = float(creator.get_rc()[&apos;max_rc&apos;])    if 100* current_rc / max_rc &gt; RC_THRESHOLD:        hive.claim_account(creator)                                                                                                              print(&quot;Claimed an account&quot;)    else:        print(&quot;Below RC threshold&quot;)</code></pre><p>运行这个程序：</p><pre><code>python autoca.py aafeng YOUR_ACTIVE_KEY</code></pre><p>已经成功的Claim了一个账号。再把这个程序加入Cron job，就可以完全不用管它了。。。</p><p>当然，对于HP值很大的账号来说，可以在程序中多次Claim账号，这就需要把上面的程序稍作修改，每次Claim完之后再检测一下当前的RC百分比，然后再次进行判断来决定是否继续Claim。这里需要注意每次Claim账号之后，需要在程序中停顿几秒，等待节点信息更新后，否则可能获取不到最新的RC百分比。</p>]]></content>
    
    <summary type="html">
    
      通过程序自动获得Hive免费账号
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Hive" scheme="https://www.aafeng.uk/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>注册赞赏公民，支持Steem中文社区 + 使用经验分享</title>
    <link href="https://www.aafeng.uk/6sxpjo/"/>
    <id>https://www.aafeng.uk/6sxpjo/</id>
    <published>2020-04-03T04:56:33.000Z</published>
    <updated>2020-04-15T09:02:29.750Z</updated>
    
    <content type="html"><![CDATA[<p>受 @ericet 影响，最近尝试使用 like 的赞赏功能。感觉非常好用，就交付了每月5美元的赞赏公民(CIVIC LIKER)月费。这样我的赞赏能量就更大了。同时昨天在 @ericet 提供的核心代码基础上进行了修改，写了一段代码，对 <a href="https://steem.buzz/" rel="external nofollow noopener noreferrer" target="_blank">https://steem.buzz/</a> 上所有配置了赞赏功能的 CN 区用户自动进行了赞赏。</p><p><img src="/images/downloaded/6sxpjo_1.jpg" alt="image.png"></p><a id="more"></a><p>下面总结一下自己的体会，完全是自己的理解，如有偏差，欢迎大家指正。</p><p>首先，什么是赞赏公民？赞赏公民类似于Steem/Hive上的大鲸，其赞赏(点赞)的权重较大。但Steem/Hive上的大鲸的点赞力度也根据SP/HP值而有所区分。赞赏公民只有每月5美元这一种选项，因此点赞权重应该一样。</p><p>其次，在Steem/Hive中有Voting Power的概念，满血时点赞产生的收益最大，随着点赞次数增加，点赞产生的收益逐步递减。当VP为0时，点赞不产生任何收益。但在like网络中似乎并没有VP的概念，似乎可以无数次点赞。但是，根据我目前测试，针对同一个用户的多篇文章点赞，其产生的收益并不相同，似乎也在递减。我目前看到的是前两篇一样，第三篇的收益会降低。再往后目前还没有尝试。但具体细节怎样，由于找不到相关文档，我目前也不清楚。</p><p>关于Steem/Hive网络和赞赏功能的集成。目前似乎只有 @ericet 在 <a href="https://steem.buzz/" rel="external nofollow noopener noreferrer" target="_blank">https://steem.buzz/</a> 上将赞赏功能和Steem集成到了一起。目前我还没有看到将赞赏功能和Hive整合的网站。</p><p>其实，like网络已经提供了很多方式和你的自媒体进行整合，比如有Wordpress插件，Medium集成等。对于其它系统搭建的网站，都不难整合的。细节请看到这里：<a href="https://github.com/likecoin/likecoin-button" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/likecoin/likecoin-button</a></p><p><img src="/images/downloaded/6sxpjo_4.jpg" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      注册赞赏公民，支持Steem中文社区 + 使用经验分享
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Steem" scheme="https://www.aafeng.uk/tags/Steem/"/>
    
      <category term="Likecoin" scheme="https://www.aafeng.uk/tags/Likecoin/"/>
    
  </entry>
  
</feed>
