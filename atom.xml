<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aafeng.uk/"/>
  <updated>2020-05-27T15:31:18.408Z</updated>
  <id>https://www.aafeng.uk/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>体验了一下Python数据可视化神器pyecharts</title>
    <link href="https://www.aafeng.uk/pyecharts/"/>
    <id>https://www.aafeng.uk/pyecharts/</id>
    <published>2020-05-27T15:31:18.408Z</published>
    <updated>2020-05-27T15:31:18.408Z</updated>
    
    <content type="html"><![CDATA[<p>最近试用了一个由百度开源的数据可视化Python软件包<a href="https://github.com/pyecharts/pyecharts" rel="external nofollow noopener noreferrer" target="_blank">pyecharts</a>。它将Python和<a href="https://echarts.apache.org/en/index.html" rel="external nofollow noopener noreferrer" target="_blank">echarts</a>结合在一起，提供强大的数据可视化支持，感觉非常好用。向大家强烈推荐。</p><p><img src="/images/technology/python/pyecharts/pyecharts.png" alt="pyecharts"></p><p>首先看下其官方的介绍：</p><blockquote><ul><li>简洁的 API 设计，使用如丝滑般流畅，支持链式调用</li><li>囊括了 30+ 种常见图表，应有尽有</li><li>支持主流 Notebook 环境，Jupyter Notebook 和 JupyterLab</li><li>可轻松集成至 Flask，Sanic，Django 等主流 Web 框架</li><li>高度灵活的配置项，可轻松搭配出精美的图表</li><li>详细的文档和示例，帮助开发者更快的上手项目</li><li>多达 400+ 地图文件，并且支持原生百度地图，为地理数据可视化提供强有力的支持</li></ul></blockquote><p>对我而言，比较吸引我的特点包括：简洁的API设计，支持各种常见图表，和Jupyter Notebook的集成，以及丰富的文档。</p><p>其安装非常简单，只需要运行：</p><pre><code>pip install pyecharts</code></pre><h2 id="生成渲染后的HTML页面"><a href="#生成渲染后的HTML页面" class="headerlink" title="生成渲染后的HTML页面"></a>生成渲染后的HTML页面</h2><p>如下代码会生产一个简单的柱状图：</p><pre><code>from pyecharts.charts import Barfrom pyecharts import options as optsbar = (    Bar()    .add_xaxis([&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;June&quot;])    .add_yaxis(&quot;Downloads&quot;, [114, 155, 97, 131, 185, 270])    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Downloads&quot;)))bar.render()</code></pre><p>上面代码会在当前目录下生成一个文件：render.html，该文件会显示如下的柱状图：</p><p><img src="/images/technology/python/pyecharts/pyecharts2.png" alt="pyecharts"></p><h2 id="在Jupyter-notebook中使用"><a href="#在Jupyter-notebook中使用" class="headerlink" title="在Jupyter_notebook中使用"></a>在Jupyter_notebook中使用</h2><p>和前面的代码一样，只不过在最后需要调用：</p><pre><code>bar.render_notebook()</code></pre><p><img src="/images/technology/python/pyecharts/pyecharts3.png" alt="pyecharts"></p><h2 id="生成渲染后图片"><a href="#生成渲染后图片" class="headerlink" title="生成渲染后图片"></a>生成渲染后图片</h2><p>首先安装snapshot_selenium：</p><pre><code>pip install snapshot_selenium</code></pre><p>还需要安装Chrome。 切换到root用户运行：</p><pre><code>curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key addecho &quot;deb [arch=amd64]  http://dl.google.com/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google-chrome.listapt-get -y updateapt-get -y install google-chrome-stable</code></pre><p>运行如下代码就可以在当前目录下生成一个PNG图片：</p><pre><code>from pyecharts.charts import Barfrom pyecharts import options as optsfrom pyecharts.render import make_snapshotfrom snapshot_selenium import snapshot as driverbar = (    Bar()    .add_xaxis([&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;June&quot;])    .add_yaxis(&quot;Downloads&quot;, [114, 155, 97, 131, 185, 270])    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Downloads&quot;)))make_snapshot(driver, bar.render(), &quot;bar.png&quot;)</code></pre><p>pyecharts支持的图表超过30种，我仅仅尝试了两种，但感觉其他图表都类似，应该非常容易上手。下一步项目中如果需要的话，应该能够拿起来就用了。</p>]]></content>
    
    <summary type="html">
    
      体验了一下Python数据可视化神器pyecharts
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记 - collections</title>
    <link href="https://www.aafeng.uk/python-collections/"/>
    <id>https://www.aafeng.uk/python-collections/</id>
    <published>2020-05-26T14:00:46.461Z</published>
    <updated>2020-05-26T14:00:46.461Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中，除了系统默认的容器：dict, list, set, tuple之外，还有一个非常强大的模块：collections。在这个模块中有很多非常好用的功能，能供简化我们的代码。下面举几个例子，欢迎大家指正。</p><p><img src="/images/technology/python/python3.png" alt="Python"></p><a id="more"></a><h2 id="namedtuple-提高代码可读性"><a href="#namedtuple-提高代码可读性" class="headerlink" title="namedtuple - 提高代码可读性"></a>namedtuple - 提高代码可读性</h2><p>首先来看一个例子：假设我们有一组数据。想用Python对这组数据进行处理。最为直观的做法是：</p><pre><code>people_list = [(&apos;Jim&apos;, &apos;male&apos;, 30), (&apos;Julie&apos;, &apos;female&apos;, 25)]for p in people_list:    print (f&apos;{p[0]} is a {p[2]} year old {p[1]}&apos;)</code></pre><p>但以上代码的最大缺点就是其可读性太差。上面的p[0], p[1], p[2]具体代表什么数据要检查前面的代码才能知道。设想如果处理的数据量更大，比如，共有十几，甚至几十列数据，如果在查看p[35], p[48]之类的代码时肯定会痛苦万分的。</p><p>这个时候就应该考虑使用collections中的namedtuple:</p><pre><code>import collectionsPerson = collections.namedtuple(&apos;Person&apos;, &apos;name gender age&apos;)people_list = [Person(&apos;Jim&apos;, &apos;male&apos;, 30), Person(&apos;Julie&apos;, &apos;female&apos;, 25)]for p in people_list:    print (f&apos;{p.name} is a {p.age} year old {p.gender}&apos;)</code></pre><p> 以上代码的可读性明显增强。不过使用namedtuple的一个缺点(有时也是优点)就是它的属性是只读的。</p><h2 id="Counter-优雅的统计代码"><a href="#Counter-优雅的统计代码" class="headerlink" title="Counter - 优雅的统计代码"></a>Counter - 优雅的统计代码</h2><p>假设我们需要对一个列表进行统计：</p><pre><code>[&apos;red&apos;,&apos;yellow&apos;,&apos;blue&apos;,&apos;red&apos;,&apos;yellow&apos;,&apos;red&apos;,&apos;black&apos;,&apos;white&apos;,&apos;red&apos;]</code></pre><p>我们希望统计每种颜色出现的次数：</p><pre><code>{&apos;red&apos;: 4, &apos;yellow&apos;: 2, &apos;blue&apos;: 1, &apos;black&apos;: 1, &apos;white&apos;: 1}</code></pre><p>如果使用一个循环，则代码显得非常臃肿：</p><pre><code>color_list = [&apos;red&apos;,&apos;yellow&apos;,&apos;blue&apos;,&apos;red&apos;,&apos;yellow&apos;,&apos;red&apos;,&apos;black&apos;,&apos;white&apos;,&apos;red&apos;]stats = {}for i in color_list:    if stats.get(i) is None:        stats[i] = 1    else:        stats[i] += 1ordered_stats = dict(sorted(stats.items(), key=lambda count: count[1], reverse=True))print(ordered_stats)</code></pre><p>但如果使用collections中的Counter的话，代码就显得非常简洁了：</p><pre><code>from collections import Countercolor_list = [&apos;red&apos;,&apos;yellow&apos;,&apos;blue&apos;,&apos;red&apos;,&apos;yellow&apos;,&apos;red&apos;,&apos;black&apos;,&apos;white&apos;,&apos;red&apos;]stats = Counter(color_list).most_common()</code></pre><p>Counter也可以用来统计一段话中每个字符出现的次数。</p><pre><code>from collections import Counters = &apos;The clever fox jumped over the lazy brown dog.&apos;print(Counter(s).most_common())</code></pre><h2 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h2><p>在使用字典时，一般可以使用 ‘dict = {}’对其进行初始化。在后续使用中，可以使用 ‘dict[element] = xx’，但有一个前提就是，element必须是已经存在的，否则就会出错。比如：</p><p><img src="/images/technology/python/dict1.png" alt="Python"></p><p>当然，我们可以在使用前检查某个元素是否存在：</p><pre><code>&apos;julie&apos; in dict.keys()</code></pre><p>但这会使代码显得很臃肿。</p><p>更为简洁的方法就是使用defaultdict，比如：</p><p><img src="/images/technology/python/dict2.png" alt="Python"></p><p>上面介绍了collections模块中的namedtuple, Counter, defaultdict，使用它们可以简化我们的代码，也能增强程序的可读性。</p>]]></content>
    
    <summary type="html">
    
      Python学习笔记 - collections
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>英国小学即将复课</title>
    <link href="https://www.aafeng.uk/back-to-school/"/>
    <id>https://www.aafeng.uk/back-to-school/</id>
    <published>2020-05-25T22:13:06.487Z</published>
    <updated>2020-05-25T22:13:06.487Z</updated>
    
    <content type="html"><![CDATA[<p>英国政府最近宣布，小学Early Years，Year 1，Year 6将于6月1号复课。但并不是强制性的，家长如果觉得想继续在家Home schooling，可以不去学校，不会计入旷课。</p><a id="more"></a><p>和很多朋友以及家长群中的众多家长沟通过后，家长们明显是两个态度。有些家长认为虽然目前英国疫情有所缓解，但还不放心把孩子送回学校。毕竟让孩子们一整天在学校这么小的空间中严格遵循社交隔离，似乎不太可能。而且，如果孩子们被限制到一个特别小的空间中，完全不能和别的小朋友们互动，那在学校该有多么难受？？？况且，如果老师们的精力都用在监督和提醒小朋友们之间的社交隔离，哪里还有精力进行教学？</p><p>另一种意见则认为，孩子们在过去两个月中在家，由家长负责教育，而家长们同时还要工作。很多家长们的心理几乎快要崩溃。听到这个消息后，感觉终于有盼头了。盼着到了6月1号把孩子们送回学校，自己可以专心工作。</p><p>其实，我个人倾向于第一种观点。虽然现在疫情有所好转，但并没有完全消除。现在直接把孩子们送回学校，增加互相接触的机会。万一再引发第二波疫情，后果将不堪设想。况且，经过最近一段时间的在家工作/辅导功课。似乎也没有最初想象中的那么糟糕。尽管工作效率比不上在办公室的时候，但和媳妇分好工，分别在不同时段兼顾孩子。在该工作的时段精力高度集中的工作，感觉也还比较出活。</p><p>最近听一位护士朋友说，英国的各大城市疫情数据都非常看好，但在一些旅游景点的确诊病例却在增加。可见形式还没有那么乐观。我决定先不送孩子自己上学，在家给他们辅导一下，顺便检查一些知识点上的欠缺，似乎比在学校时学到的东西还多。</p><p>不过无论如何，该放松的时候也要放松一下。趁着这两天有风（话说英国的天气，经常妖风肆虐），把从国内拿来的风筝装好了，去家附近的草地上去试玩了一下。英国的风还真的给力，不用任何技巧，我站着不动，风筝自己就飞了起来。你能看到下面图片中的风筝吗？</p><p><img src="/images/life/kite.jpg" alt="Kite"></p><p>照片摄于2020.5，在家附近大草坪上放风筝</p>]]></content>
    
    <summary type="html">
    
      英国小学即将复课
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter的几个设置</title>
    <link href="https://www.aafeng.uk/jupyter_settings/"/>
    <id>https://www.aafeng.uk/jupyter_settings/</id>
    <published>2020-05-25T11:46:35.598Z</published>
    <updated>2020-05-25T11:46:35.598Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/jupyter/">前面的文章</a>中介绍了Jupyter，但在进一步的使用中，发现一些需要设置/安装/配置的选项，比如：如何禁用默认的Terminal窗口，如何让多个用户使用Jupyter，如何在Jupyter中使用Turtle画图等。下面总结如下。</p><p><img src="/images/technology/jupyter/jupyter.jpg" alt="Jupyter"></p><a id="more"></a><h2 id="禁用terminal"><a href="#禁用terminal" class="headerlink" title="禁用terminal"></a>禁用terminal</h2><p>在默认情况下，打开Jupyter窗口后，可以新建一个终端窗口。在终端窗口中可以运行各种Linux命令。在终端窗口中使用的是运行Jupyter的用户，因此具有和该用户同样的权限。因此，如果打算和别人分享Jupyter，最好不要用权限过大的用户运行Jupyter，同时应该禁用终端窗口。不过，严格的讲，这并不能阻止恶意用户运行Linux命令，只要能运行Python脚本，就会有多种方式达到这个目的。但系统安全是一个渐进的过程。至少对于不太熟悉Linux的用户，如果一不小心进入终端窗口，再一不小心误删了文件，不也麻烦吗？</p><p><img src="/images/technology/jupyter/terminal1.png" alt="Jupyter"></p><p>要想禁止Linux终端窗口，可以在Jupyter的配置文件(用户根目录下.jupyter/jupyter_notebook_config.py)中添加一行就可以了：</p><pre><code>c.NotebookApp.terminals_enabled = False</code></pre><p>可以看到，终端已经被禁用。</p><p><img src="/images/technology/jupyter/terminal2.png" alt="Jupyter"></p><h2 id="在Jupyter中设定多个账号"><a href="#在Jupyter中设定多个账号" class="headerlink" title="在Jupyter中设定多个账号"></a>在Jupyter中设定多个账号</h2><p>默认的配置文件在/home/USERNAME/.jupyter/jupyter_notebook_config.py中。其初始设置非常简单：</p><pre><code>c.NotebookApp.allow_origin = &apos;*&apos; #allow all originsc.NotebookApp.ip = &apos;0.0.0.0&apos; # listen on all IPs</code></pre><p>如果想要多个用户共同使用Jupyter，可以为这些用户设置不同的端口，密码，和工作目录。比如：可以创建配置文件：/home/USERNAME/.jupyter/user1_config.py:</p><pre><code>c.NotebookApp.allow_origin = &apos;*&apos; c.NotebookApp.ip = &apos;0.0.0.0&apos; c.NotebookApp.terminals_enabled = Falsec.NotebookApp.port = 8890c.NotebookApp.notebook_dir = &apos;/home/user1/jupyter_notes&apos;</code></pre><p>在运行Jupyter的时候指定配置文件：</p><pre><code>jupyter notebook --config /home/user1/.jupyter/user1_config.py</code></pre><p>依次类推，可以为不同用户创建不同的配置文件，这样就可以彼此之间互不干扰了。</p>]]></content>
    
    <summary type="html">
    
      Jupyter的几个设置
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>开始使用Jupyter Notebook</title>
    <link href="https://www.aafeng.uk/jupyter/"/>
    <id>https://www.aafeng.uk/jupyter/</id>
    <published>2020-05-24T09:38:08.775Z</published>
    <updated>2020-05-24T09:38:08.775Z</updated>
    
    <content type="html"><![CDATA[<p>一直听说过Jupyter很好用，但自己并没有试过。最近在教孩子编程的时候正好尝试了一下，感觉确实很好用。它最大的优点就是把代码和程序运行的结果放在了同一个页面中。这样就特别适合初学者，一边学习，一边运行，直接能看到结果。当然，Jupyter的作用远不止这些，比如在Jupyter Notebook中可以添加程序代码，Markdown，方程式，图片等等各种类型的数据。可以用Jupyter来进行数据清理，数据转换，数据可视化，统计建模，机器学习等等。</p><p><img src="/images/technology/jupyter/jupyter.png" alt="Jupyter"></p><a id="more"></a><p>其官方定义如下：</p><blockquote><p>The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.</p></blockquote><p>可以把Jupyter安装在本机，然后运行命令：”jupyter notebook”，它就会启动一个Web服务器，默认情况下会监听“8888”端口。</p><p><img src="/images/technology/jupyter/jupyter2.png" alt="Jupyter"></p><p>可以看到，在同一个Web页面中，可以编辑并运行代码，非常方便。这种直观的方式尤其适合初学者，让他们能够把注意力集中到要学习的内容上，而不是编程环境上。</p><p>同时，由于可以把Markdown和代码混排，特别适合老师们准备教案。不仅有文字说明，也有程序代码的源代码和运行结果。</p><p>Jupyter的另一大用途就是数据可视化，把代码和运行结果放在同一个页面，调整代码后，即刻可以看到更新后的图表，非常方便。比如，有人<a href="https://www.kaggle.com/neelkudu28/covid-19-visualizations-predictions-forecasting" rel="external nofollow noopener noreferrer" target="_blank">统计了印度的冠状病毒疫情数据</a>，并做了相应的图表：</p><p><img src="/images/technology/jupyter/jupyter3.png" alt="Jupyter"></p><p>除了自己安装并运行Jupyter服务器之外，也可以使用很多云计算平台的相关服务，比如：</p><ul><li><a href="https://mybinder.org/" rel="external nofollow noopener noreferrer" target="_blank">mybinder</a>: 这个网站可以把你提交到Github的Jupyter Notebook装载并运行，这样别人无需搭建环境，就能看到你Notebook的运行结果。</li><li><a href="https://www.kaggle.com/notebooks" rel="external nofollow noopener noreferrer" target="_blank">kaggle</a>：在这个平台上可以创建自己的Notebook，也可以搜索，使用别人的Notebook。</li><li><a href="https://colab.research.google.com/" rel="external nofollow noopener noreferrer" target="_blank">Google colab</a></li><li><a href="https://www.ibm.com/uk-en/cloud/watson-studio" rel="external nofollow noopener noreferrer" target="_blank">IBM Watson Studio</a></li><li><a href="https://paiza.cloud/en/" rel="external nofollow noopener noreferrer" target="_blank">Paiza Cloud</a></li></ul><p>感觉越来越喜欢这个工具了，打算花点时间进一步探索一下。</p>]]></content>
    
    <summary type="html">
    
      开始使用Jupyter Notebook
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何在Jupyter中使用Turtle</title>
    <link href="https://www.aafeng.uk/jupyter-turtle/"/>
    <id>https://www.aafeng.uk/jupyter-turtle/</id>
    <published>2020-05-24T06:23:33.644Z</published>
    <updated>2020-05-24T06:23:33.644Z</updated>
    
    <content type="html"><![CDATA[<p>一直在使用Python Turtle教孩子编程。最近感觉Jupyter特别适合教学，那么怎样在Jupyter中使用Turtle呢？答案是<a href="https://github.com/takluyver/mobilechelonian" rel="external nofollow noopener noreferrer" target="_blank">mobilechelonian</a>。</p><p><img src="/images/technology/jupyter/jupyter.jpg" alt="Jupyter"></p><a id="more"></a><p>首先在Notebook中安装依赖库并进行测试：</p><pre><code>!pip install mobilechelonian!pip install matplotlibimport numpy as npimport matplotlib.pyplot as pltfrom mobilechelonian import Turtlefrom mobilechelonian import prepare_jsprepare_js()</code></pre><p>运行以上代码就会安装mobilechelonian。接下来就可以使用Turtle来画图了：</p><pre><code>from mobilechelonian import Turtlet = Turtle()t.speed(5)t.pencolor(&quot;blue&quot;)for i in range(4):    t.left(90)    t.forward(60)</code></pre><p><img src="/images/technology/jupyter/jupyter-turtle.png" alt="Jupyter"></p>]]></content>
    
    <summary type="html">
    
      如何在Jupyter中使用Turtle
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>新冠病毒过后，我们还能回到过去的工作模式吗？</title>
    <link href="https://www.aafeng.uk/wfh/"/>
    <id>https://www.aafeng.uk/wfh/</id>
    <published>2020-05-22T21:33:52.814Z</published>
    <updated>2020-05-22T21:33:52.814Z</updated>
    
    <content type="html"><![CDATA[<p>转眼已经在家工作两个月了。似乎已经慢慢习惯了在家办公的方方面面。今天单位开会，老板表达出了一个意思，在家办公至少要到今年年底，至于什么时候返回办公室，目前不清楚不知道。这不禁让我想到，等到新冠病毒彻底被控制了，我们还能像原来一样回到办公室上班吗？会有什么不一样吗？</p><p><img src="/images/work/clock.jpg" alt="在家办公"></p><p>图源：Pixabay</p><a id="more"></a><p>经过这一段时间的适应，很多人都觉得在家办公似乎没有想象中的那么糟糕，虽然整体而言不如在办公室的时候更有组织，更有条理，但似乎大家都适应的不错，该做的工作都做了。同时很多单位都在思考，一旦疫情结束了，还有必要租那么昂贵的办公室吗？把这笔费用省下来，可以投入到其他方面，对公司而言整体上是更划算的。</p><p>而且，通过这一段时间的在家办公，大家也开始反思过去的一些工作习惯是否合理？会议是否安排的过多，同时也过长？由于现在有了社交距离，只能通过一些即时通讯软件进行沟通。而在使用这些软件时，并不能像面对面沟通那样期待对方的及时反馈。如果需要集中精力工作，只需要暂时不去看那些软件就可以了。</p><p>就我个人而言，整体感觉如果孩子们能够回到学校上学，那么在家办公的效率更高。因为在同一个办公室里，虽然更方便彼此之间的沟通，但也难免彼此之间互相干扰。如果独自在家办公，在需要沟通时通过Slack，Zoom之类的通讯软件进行沟通。在不需要交流的时候，自己可以精力更加集中，更加出活。</p><p>在疫情真正结束后，目前没人能想象出会以什么形式工作。但有一点可以肯定，这样疫情将会彻底改变人们的工作模式。</p>]]></content>
    
    <summary type="html">
    
      新冠病毒过后，我们还能回到过去的工作模式吗？
    
    </summary>
    
      <category term="工作" scheme="https://www.aafeng.uk/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="疫情" scheme="https://www.aafeng.uk/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>如何将Likecoin以英镑/欧元/美元提现？</title>
    <link href="https://www.aafeng.uk/likecoin-withdraw/"/>
    <id>https://www.aafeng.uk/likecoin-withdraw/</id>
    <published>2020-05-22T11:44:08.558Z</published>
    <updated>2020-05-22T11:44:08.558Z</updated>
    
    <content type="html"><![CDATA[<p>很多人讨论过如何将Likecoin以人民币，台币提现。下面总结一下如何以英镑/欧元/美元的方式提现。其基本步骤就是：通过Like Land APP将LIKECOIN转到交易所，比如：<a href="https://www.liquid.com/sign-up/?affiliate=e4wfjlmE746444" rel="external nofollow noopener noreferrer" target="_blank">Liquid</a>，或者<a href="https://www.bitasset.com/reg?icode=jhhl" rel="external nofollow noopener noreferrer" target="_blank">BitAsset</a>；在这些交易所将LIKECOIN兑换为比特币；然后再将比特币转到支持英镑/欧元/美元的其他交易所；在交易所把比特币兑换成英镑/欧元/美元再提现。</p><p><img src="/images/blockchain/liker/liker.png" alt="LIKECOIN"></p><a id="more"></a><h2 id="第一步，将LIKECOIN转至BitAsset交易所"><a href="#第一步，将LIKECOIN转至BitAsset交易所" class="headerlink" title="第一步，将LIKECOIN转至BitAsset交易所"></a>第一步，将LIKECOIN转至BitAsset交易所</h2><p>登录<a href="https://www.bitasset.com/reg?icode=jhhl" rel="external nofollow noopener noreferrer" target="_blank">BitAsset交易所</a>，选择“Wallet” -&gt; “My Wallet”</p><p><img src="/images/blockchain/liker/withdraw-1.png" alt="Likecoin提现"></p><p>单击”Deposit”后选择”LIKE”作为”Chain Name”</p><p><img src="/images/blockchain/liker/withdraw-2.png" alt="Likecoin提现"></p><p>可以复制地址，或者打开对应的QR码：</p><p>进入Liker Land手机APP，扫描交易所的这个QR码，设定转账金额，并按“确认”按钮。</p><p>几分钟后就能在交易所看到LIKECOIN已经到账。</p><h2 id="第二步：将LIKECOIN转为BTC"><a href="#第二步：将LIKECOIN转为BTC" class="headerlink" title="第二步：将LIKECOIN转为BTC"></a>第二步：将LIKECOIN转为BTC</h2><p>在交易所钱包中选择：LIKE -&gt; Transaction -&gt; LIKE-BTC</p><p>在这个交易对中，设定交易的LIKECOIN金额，价格，然后单击“SELL”</p><p><img src="/images/blockchain/liker/withdraw-3.png" alt="Likecoin提现"></p><p>如果你挂单的价格被买方接受，很快交易就会结束，会有BTC到账。</p><h2 id="第二步，将BTC转至Kraken"><a href="#第二步，将BTC转至Kraken" class="headerlink" title="第二步，将BTC转至Kraken"></a>第二步，将BTC转至Kraken</h2><p>接下来需要选择一个支持英镑/欧元/美元的交易所。这样的交易所有很多，下面以 Kraken 为例。</p><p>在交易所的’Wallet’，将BTC转出。输入Kraken中的BTC地址，然后设定转出金额。</p><p><img src="/images/blockchain/liker/withdraw-4.png" alt="Likecoin提现"></p><p>可以看到，BitAsset会收取1%的手续费。</p><p>需要进行二次验证：</p><p><img src="/images/blockchain/liker/withdraw-5.png" alt="Likecoin提现"></p><p>交易开始后，需要等待一段时间。毕竟比特币的交易速度还是非常慢的。</p><h2 id="第四步：在交易所把比特币转换为法币"><a href="#第四步：在交易所把比特币转换为法币" class="headerlink" title="第四步：在交易所把比特币转换为法币"></a>第四步：在交易所把比特币转换为法币</h2><p>我使用比较多的交易所是Brittrex (支持欧元/美元)和Kraken(支持英镑/欧元/美元/加元/日元)。再这些交易所把比特币兑换成法币后，就可与提现到自己银行账号了。当然，这些交易所都需要进行实名验证。</p>]]></content>
    
    <summary type="html">
    
      如何将Likecoin以英镑/欧元/美元提现？
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="Likecoin" scheme="https://www.aafeng.uk/tags/Likecoin/"/>
    
  </entry>
  
  <entry>
    <title>感性思维和理性思维</title>
    <link href="https://www.aafeng.uk/thinking/"/>
    <id>https://www.aafeng.uk/thinking/</id>
    <published>2020-05-20T21:52:56.579Z</published>
    <updated>2020-05-20T21:52:56.579Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个理工背景男，我是典型的理性思维，做任何事情都喜欢事先做好计划，然后按照计划有条不紊的执行。而媳妇则是典型的文科生，注重的是她的感受，而不是事情本身的逻辑性。因此，我们偶尔拌嘴时，无论谁对谁错，她更在乎的是我的态度，而不是事情本身。只要态度好，事情本身是完全可以商量的。</p><p><img src="/images/thinking/thinking.jpg" alt="思维"></p><p>图源：Pixabay</p><a id="more"></a><p>感性思维更注重个体的感受和体验，凭着自己的感觉做事。但由于受到个体思维的控制，因此异变，也容易走极端。大学刚毕业时有一个好友曾经和我表述了一个观点：“我只分远近，不分对错”。当时就觉得他思考问题的方式太过极端。当然，注重感性思维也有优点，我这位朋友给人的感觉就是够义气，他的周边也总有一大帮老铁。</p><p>与之相对的，则是理性思维。亚里士多德曾经说过一句名言：“吾爱吾师，但吾更爱真理”。受此影响，学生们对老师的观点是批判性接受，因为会把老师的研究成果进一步发展，达到一个新的高度。毕竟站在巨人的肩膀上，能够看的更远。记得刚到英国读书的时候，感觉课堂上学生们似乎对老师不够尊重，在老师上课的时候会随时打断老师，提出各种尖锐的问题。而老师也不生气，和学生平等的交流。当时不是很理解，但现在明白了，因为在他们心中，更爱的是真理本身。其实，在认识事务的过程中，是感性思维先起作用，随后是理性思维去认识事情本质。</p><p>其实在工作和生活中，这两种思维是可以互补的。举一个典型的例子，大家都知道打一巴掌，再给个枣这个“经典”育儿方法。其中打的这个巴掌就是理性思维的结果，犯了错误就要批评教育。只不过，教育完了，也要联络一下感情。这样下次再进行教育的时候才能更有效。</p><p>类似这样的例子还有很多。能够做到在两者自由切换的人，该感性的的时候就感性（讲故事），该理性的时候理性（讲道理）。才能在各种场合游刃有余。</p>]]></content>
    
    <summary type="html">
    
      感性思维和理性思维
    
    </summary>
    
      <category term="思考" scheme="https://www.aafeng.uk/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>如果财务自由了，我会做什么？</title>
    <link href="https://www.aafeng.uk/financial-freedom/"/>
    <id>https://www.aafeng.uk/financial-freedom/</id>
    <published>2020-05-19T21:31:49.056Z</published>
    <updated>2020-05-19T21:31:49.056Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到matters上很多人在讨论一个话题，如果财务自由了，我会。。。让我也不禁开始做了一个白日梦，如果我财务自由了，会做些什么呢？</p><p><img src="/images/life/jump.jpg" alt="财务自由"></p><a id="more"></a><p>我首先想到的就是要多陪陪家人。自从在国外定居后，由于年假有限，每年只有几周的时间回国。而每次回去，难免会有很多聚会和应酬，真正能留给家人的时间并不多。因此，如果没有工作的牵绊，希望能多陪陪家人。</p><p>世界那么大，我没去过的地方还很多。所谓读万卷书，行万里路。我很喜欢“在路上”的感觉。因此第二个想到的就是旅游。如果真的既有时间又不用担心费用，我会花费更多的时间在旅游上。</p><p>要想照顾家人，想去游遍世界，都需要一个好的身体，因此我会花更多的时间在健身上。平时早上送孩子上学后我去上班，看到有些家长一身运动装，肯定是送完孩子去健身的。当时就很羡慕。如果我不用去上班了，肯定也会和他们一样，多花些时间在健身上。乒乓球，游泳，瑜伽，自行车，想坚持的运动似乎还不少。。。</p><p>有一件事可能很多人不太理解。如果不用工作了，我还想写程序。只不过现在是为了工作而写。到时候是为了自己的兴趣而写。其实我觉得写代码还是很有成就感的。看着一行行代码按照自己设定的方式准确无误的运行，还是很满足的。</p><p>好了，白日梦先做到这里，其实，如果后面的那个条件对于很多人是很难实现的。无论是否能够实现财务自由，该做的还是要做的。比如：还是要尽量多抽取时间，避免不必要的应酬，多和家人在一起。每年去至少2，3个没有去过的地方，感受一下不一样的世界。体育锻炼也不能省，越是工作忙，越应该坚持。</p>]]></content>
    
    <summary type="html">
    
      如果财务自由了，我会做什么？
    
    </summary>
    
      <category term="思考" scheme="https://www.aafeng.uk/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Python学习笔记</title>
    <link href="https://www.aafeng.uk/python-tips/"/>
    <id>https://www.aafeng.uk/python-tips/</id>
    <published>2020-05-19T20:24:45.899Z</published>
    <updated>2020-05-19T20:24:45.899Z</updated>
    
    <content type="html"><![CDATA[<p>其实Python我已经用了很多年了，用起来也比较顺手。但最近开始教自己的孩子学习Python时，还是发现了许多自己需要更新的知识。有些是自己没用过，不知道的，有些则是能让Python程序更加优雅，或者更加有效的。下面总结几点。</p><p><img src="/images/technology/python/python.png" alt="Python"></p><a id="more"></a><h2 id="关于格式化字符串"><a href="#关于格式化字符串" class="headerlink" title="关于格式化字符串"></a>关于格式化字符串</h2><p>我一般使用的方式是：</p><pre><code>&quot;One for %s, one for me.&quot; % name</code></pre><p>这种方式能够正常工作，但建议的方式是：</p><pre><code>&apos;One for {name}, one for me.&apos;.format(name=name)</code></pre><p>或者简化为：</p><pre><code>&apos;One for {}, one for me.&apos;.format(name)</code></pre><h2 id="sort-和-sorted的区别"><a href="#sort-和-sorted的区别" class="headerlink" title="sort 和 sorted的区别"></a>sort 和 sorted的区别</h2><p>首先进行一个简单的试验：</p><p><img src="/images/technology/python/python2.png" alt="Python"></p><p>可以看到，sorted会将列表进行排序，并返回一个新的列表。而sort()则会将列表进行排序。在Python的函数中，尽量不要使用sort()方法，以避免改变传入的参数。就像别人借给你一样东西，肯定希望你完好无损的归还一样。</p><h2 id="关于数组越界的问题"><a href="#关于数组越界的问题" class="headerlink" title="关于数组越界的问题"></a>关于数组越界的问题</h2><p>Python其实很聪明的，它知道如何判断数组越界，并会在数组越界时自动的帮你处理。比如，有些人的Python代码会这样写：</p><pre><code>sorted_array = sorted(scores,reverse=True)return sorted_array[0:3] if len(sorted_array)&gt;=3 else sorted_array</code></pre><p>其实完全不必，可以简化为：</p><pre><code>return sorted(scores,reverse=True)[0:3]</code></pre><h2 id="强大的Python数组操作"><a href="#强大的Python数组操作" class="headerlink" title="强大的Python数组操作"></a>强大的Python数组操作</h2><p>举一个简单的例子：把如下字符串：</p><pre><code>&quot;1 2 3 4\n5 6 7 8\n9 8 7 6&quot;</code></pre><p>转换为一个二位数组：</p><pre><code>1 2 3 45 6 7 89 8 7 6</code></pre><p>可以先使用 splitlines：</p><pre><code>s = &quot;1 2 3 4\n5 6 7 8\n9 8 7 6&quot;&gt;&gt;&gt; lines = s.splitlines()&gt;&gt;&gt; lines[&apos;1 2 3 4&apos;, &apos;5 6 7 8&apos;, &apos;9 8 7 6&apos;]</code></pre><p>然后再进一步处理：</p><pre><code>&gt;&gt;&gt; rows = [[int(v) for v in row.split()] for row in lines]&gt;&gt;&gt; rows[[1, 2, 3, 4], [5, 6, 7, 8], [9, 8, 7, 6]]</code></pre>]]></content>
    
    <summary type="html">
    
      Python 学习笔记
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://www.aafeng.uk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>制作网红巴斯克芝士蛋糕</title>
    <link href="https://www.aafeng.uk/cheese-cake/"/>
    <id>https://www.aafeng.uk/cheese-cake/</id>
    <published>2020-05-19T08:09:29.085Z</published>
    <updated>2020-05-19T08:09:29.085Z</updated>
    
    <content type="html"><![CDATA[<p>最近孩子们看上了丑萌的巴斯克芝士蛋糕，于是在妈妈的带领下进行尝试，成功的做出了这款网红蛋糕。而我的角色是摄影师，全程记录了整个制作过程。整体感觉这款蛋糕真的很丑，但做法超级简单，失败率极低，而且真心好吃！</p><p><img src="/images/food/cheesecake/1.jpg" alt="巴斯克芝士蛋糕"></p><a id="more"></a><p>这款蛋糕的名字巴斯克源于其发源地西班牙巴斯克地区。其实这款蛋糕在几十年前就被发明了出来，但在2019年才成为了网红，据说其最大的卖点就是看起来像是烤糊了。。。</p><p>这款蛋糕的主要原料就是软芝士，我们用的是两盒180克的Philadelphia奶酪。再配以糖，鸡蛋，面粉，奶油和黄油。注意这个奶酪千万不要买错了喔，曾经听过一个悲催的故事，有人用Cheddar Cheese试图做芝士蛋糕，其结果就可想而知了。。。</p><p><img src="/images/food/cheesecake/2.jpg" alt="巴斯克芝士蛋糕"></p><p>Philadelphia奶酪需要在室温下放置一段时间以便于搅拌。随后和其他原料一起搅拌，需要注意搅拌器的速度应调至最低，待拌匀无颗粒后倒入蛋糕模具中。</p><p>可以在模具四壁涂上些黄油，这样就比较容易把烘培纸放好，也便于在制作完毕后脱模。</p><p>所有准备工作都做好后，把模具放入预热到200度的模具中烤30分钟就可以了。乍一看，似乎真的是烤过了。。。</p><p><img src="/images/food/cheesecake/3.jpg" alt="巴斯克芝士蛋糕"></p><p>在蛋糕冷却后最好放入冰箱冷藏几个小时后再食用，效果更好！看看最后装盘的效果，Yummy！</p><p><img src="/images/food/cheesecake/4.jpg" alt="巴斯克芝士蛋糕"></p>]]></content>
    
    <summary type="html">
    
      制作网红巴斯克芝士蛋糕
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java应用程序性能调优的神器 - Glowroot</title>
    <link href="https://www.aafeng.uk/glowroot/"/>
    <id>https://www.aafeng.uk/glowroot/</id>
    <published>2020-05-17T19:43:11.206Z</published>
    <updated>2020-05-17T19:43:11.206Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个Java Web应用中的性能问题。在某个时段整个程序的响应时间过长。在分析了日志后没有任何头绪。于是祭出了Glowroot这个Java性能调优的大杀器，终于将问题找了出来。下面把这个强悍的工具向大家介绍一下。</p><p><img src="/images/technology/glowroot/glowroot.png" alt="Glowroot"></p><a id="more"></a><h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><p>首先在其<a href="https://glowroot.org/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载压缩包。如果对其源码感兴趣的话，这里是其<a href="https://github.com/glowroot/glowroot" rel="external nofollow noopener noreferrer" target="_blank">Github页面</a>。将压缩文件下载并解压缩后会在相应子目录(glowroot)中看到glowroot.jar这个文件。</p><p>由于我是对Tomcat容器中的程序进行性能调优，因此需要将Glowroot对应子目录的所有者改为运行Tomcat的用户，我这里是”tomcat”。这么做的主要原因是因为Glowroot在运行时需要创建logs, tmp等子目录并要在其中创建文件。</p><pre><code>sudo chown tomcat:tomcat glowroot</code></pre><p>接下来需要在启动Tomcat的时候添加JVM的参数。如果是通过apt方式安装的Tomcat，那么配置文件在：/etc/default/tomcat8，添加如下内容：</p><pre><code>-javaagent:/opt/york/digilib/glowroot/glowroot.jar</code></pre><p>至此，就可以进行测试了。重新启动Tomcat，访问本机的4000端口：</p><pre><code>http://localhost:4000</code></pre><p>就可以看到Glowroot的主界面了：</p><p><img src="/images/technology/glowroot/glowroot2.png" alt="Glowroot"></p><h2 id="主要性能指标"><a href="#主要性能指标" class="headerlink" title="主要性能指标"></a>主要性能指标</h2><p>首先，在Glowroot中可以很方便的查看响应时间的瓶颈，甚至能定位到具体的某个类。比如，在下图中可以看到spring controller占用了响应时间的83.9%，这肯定不正常。其实，我性能调优最后的结论就是spring controller出的问题。最终的解决方案也是基于这个发现的。</p><p><img src="/images/technology/glowroot/glowroot3.png" alt="Glowroot"></p><p>还可以查看各个线程的资源使用，同样，其分析结果直指spring中的doGet方法：</p><p><img src="/images/technology/glowroot/glowroot4.png" alt="Glowroot"></p><p>除此之外，还有对各种REST API调用的分析等。</p><h2 id="进一步配置"><a href="#进一步配置" class="headerlink" title="进一步配置"></a>进一步配置</h2><p>Glowroot有一个配置文件：admin.json。在刚安装的时候，你是找不到这个文件的。你可以选择自己手工创建它。但由于刚开始使用时不知道该如何进行配置，这里建议先不要管它，直接重新启动Tomcat，这样在Glowroot被首次启动后，就会在其目录下创建admin.json这个文件。这个时候你就可以在其基础上进行修改了，这样就会简单的多。</p><p>Glowroot的默认配置下，只能从本机访问，如果要从外部访问，可以更改这一段：</p><pre><code>&quot;bindAddress&quot;: &quot;0.0.0.0&quot;,</code></pre><p>如果要更改端口：</p><pre><code>&quot;port&quot;: 4000,</code></pre><p>默认设置下，匿名账户具有管理员权限，这肯定是要改的。以下会添加新用户’admin’，将匿名用户(anonymous)的角色改为’Anonymous’，并添加一个新的角色“Anonymous”：</p><p>   “users”: [<br>      {<br>        “username”: “admin”,<br>        “password”: “xxxxxxxx”,<br>        “roles”: [<br>          “Administrator”<br>        ]<br>      },<br>      {<br>        “username”: “anonymous”,<br>        “roles”: [<br>          “Anonymous”<br>        ]<br>      }<br>    ],<br>    {<br>      “name”: “Anonymous”,<br>      “permissions”: [<br>        “agent:transaction”,<br>        “agent:error”,<br>        “agent:jvm:gauges”,<br>        “agent:jvm:threadDump”,<br>        “agent:jvm:heapHistogram”,<br>        “agent:jvm:mbeanTree”,<br>        “agent:jvm:systemProperties”,<br>        “agent:jvm:environment”,<br>        “agent:config:view”,<br>        “admin:view”<br>      ]<br>    }</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之前也用过jvisualvm进行Java应用程序的性能调优，但感觉它特别吃内存，会严重影响服务器的性能。Glowroot似乎没有这个问题，添加这个模块后并没有感觉服务器的性能下降。同时，感觉Glowroot更加直观好用，能够迅速定位到出问题的类，以及相应的线程。从而帮助你快速找到问题的根源所在。</p>]]></content>
    
    <summary type="html">
    
      Java应用程序性能调优的神器 - Glowroot
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>细思极恐 - 其实我们都是斯金纳箱中的鸽子</title>
    <link href="https://www.aafeng.uk/skinner-box/"/>
    <id>https://www.aafeng.uk/skinner-box/</id>
    <published>2020-05-17T10:36:48.172Z</published>
    <updated>2020-05-17T10:36:48.172Z</updated>
    
    <content type="html"><![CDATA[<p>不知道你有没有这样的经历，有时候手机不在旁边感觉似乎缺了点什么。而下意识的拿起手机似乎又不知道为什么要把它拿起来，也不知道要拿它做什么。最近看到一个观点似乎能够完美的解释这种行为。说白了，我们掉到了那些专业的产品设计师所设计好的坑里了。我们平常的很多行为，比如：对手机的使用，对某款游戏的上瘾，其实都是处于别人的掌控之中。我们更像是行为心理学中的经典实验，斯金纳箱中的鸽子。</p><p><img src="/images/life/pigeon.jpg" alt="斯金纳箱中的鸽子"></p><a id="more"></a><p>斯金纳是行为心理学的大师，他把巴甫洛夫和桑代克关于条件反射的理论更上一层楼，提出了一个新的观点：操作性条件反射。说白了，就是动物（包括人）的很多条件反射是完全可以操作的。比如：人的恐怖情绪是可以被操控的。他曾经做过一个著名的鸽子实验。在实验中，他把鸽子关在笼子中，每过15秒就用喂食器自动给鸽子喂食，这样过了一段时间后，他发现了一个奇怪的现象：笼中的鸽子在被喂食前做着各种这样的奇怪动作，有的鸽子左右摇头，有的鸽子走来走去，有的鸽子翩翩起舞，似乎鸽子们通过这种方式来祈求食物的到来。即使后来他彻底停止了对鸽子的喂食，但鸽子仍然在做着各种动作，仍然希望食物的来临。</p><p>斯金纳还曾经做过一个很不人道（后来被禁止）的实验，证明了可以控制人的恐惧感。在实验中他们把各种毛绒玩具放在一个小婴儿面前，婴儿对这些玩具展示出强烈的兴趣。实验者带着圣诞老人的面具来到婴儿面前，婴儿也非常喜欢。之后他们做了一件事，就是在婴儿和玩具接触的时候，制造出一种让人不适的噪音来，婴儿听到噪音后吓得大哭。之后只要婴儿一接触这些玩具，他们就制造出噪音。久而久之，婴儿就把这些玩具和噪音联系到了一起。之后只要看到毛绒玩具就很恐惧。</p><p>其实在我们的生活中，有很多这样的例子。很多产品的设计师也在把这种观点应用到了各种产品中。比如：我家孩子经常使用一个APP，叫做Receipt Hog，每次购物后我会把小票给他们，他们用这个APP把小票扫描进去，并做一个简单的问卷，就会得到一定的积分，达到一定分值后可以兑换现金，同时还会随机的给他们抽奖的机会。迄今为止他们已经领到10英镑了。但现在我所看到的是，孩子们对待小票的行为已经完全被这个APP所控制。每次购物回来后，他们肯定不会忘记和我要小票。</p><p>还有一个有趣的例子就是我经常去一家超市购物，感觉这家超市在深入的研究客户的行为。如果我有一段时间不去他家购物，他家就会给我寄送优惠券来，比如：满40英镑返8镑。如果我使用了这些优惠券，他们会停止给我寄，再过一段时间会尝试给我寄力度稍微小一些的优惠券，如果我没有用那些优惠券，他们就会再寄来我曾经用过的优惠券，于是我又乖乖的去他家消费了。感觉我的购物行为完全被他家的优惠券牵着鼻子走。。。</p><p>我想类似的例子数不胜数。等到人工智能得到进一步发展后，人类是否终将被某些AI所完全控制，甚至人类思维将会和AI彻底融合？</p>]]></content>
    
    <summary type="html">
    
      细思极恐 - 其实我们都是斯金纳箱中的鸽子
    
    </summary>
    
      <category term="思考" scheme="https://www.aafeng.uk/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>你是刺猬思维还是狐狸思维？</title>
    <link href="https://www.aafeng.uk/fox-hedgehog/"/>
    <id>https://www.aafeng.uk/fox-hedgehog/</id>
    <published>2020-05-17T10:35:52.928Z</published>
    <updated>2020-05-17T10:35:52.928Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了一篇文章，对自己的触动很大。文章说的是狐狸思维和刺猬思维在币圈投资中的体现。但其中所讲的道理，适用于生活中的方方面面。</p><p><img src="/images/life/fox.jpg" alt="狐狸思维"></p><a id="more"></a><p>图源：Pixabay</p><p>狐狸和刺猬的故事源于古希腊寓言故事，狐狸想要吃掉刺猬，想尽各种方法进攻，希望能够找到刺猬的弱点。而刺猬只有一招，就是把全身缩成一团，用全身的刺来保护自己。最终狐狸机关算尽还是败在了刺猬的手中。其实这个故事讲的是一个道理：狐狸懂的很多，思维多元化，办法也很多；<strong>刺猬却能够懂的最重要的事</strong>，思维是集中和单一的，但可以做到一招先，吃遍天。</p><p>说白了，刺猬思维是典型的一根筋，认准了一件事情，就不再改变，朝着一个目标努力，直到把事情做完为止。而狐狸思维说的则是很会变通的人，他们脑瓜活络，能够有很多的好点子，但其中的有些人却没有明确的目标，甚至不知道自己想要什么。</p><p>在币圈中估计大家身边都有很多典型的“狐狸”和“刺猬”，我也听说过很多类似的故事。在币圈，有些人认准大饼，买入后长期持有，结果跑赢了绝大多数频繁进行交易的人。金庸迷们熟悉的角色郭靖也是典型的一根筋思维，不懂变通，但却能学会降龙十八掌，傲视群雄。</p><p>其实，我觉得任何事情都不是绝对的。可以在“狐狸”式思维和“刺猬”式思维中有机的切换和变通。在进行思考的时候选择“狐狸”式思维，而在做事的时候则要“刺猬”式思维。</p><p>你是狐狸还是刺猬呢？</p>]]></content>
    
    <summary type="html">
    
      你是刺猬思维还是狐狸思维？
    
    </summary>
    
      <category term="思考" scheme="https://www.aafeng.uk/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>真实 or 梦境？</title>
    <link href="https://www.aafeng.uk/dream/"/>
    <id>https://www.aafeng.uk/dream/</id>
    <published>2020-05-17T10:21:10.512Z</published>
    <updated>2020-05-17T10:21:10.512Z</updated>
    
    <content type="html"><![CDATA[<p>从新冠状病毒爆发开始，我就有一种奇怪的感觉，感觉自己似乎生活在梦境中，也劝说自己相信这是一个噩梦，很快就有梦醒的时刻。最近这两天一则噩耗让我更加希望自己是生活在一个梦境中。有一位关系最好的前同事不幸病故，更让我不敢相信，也不愿相信其真实性。以至于这两天我感觉有些精神恍惚，每天早晨醒来后都希望自己刚刚做过了一个噩梦，现在梦醒了，一切都过去了。我究竟是在梦中，还是醒着？那位同事是在我的梦中去世的？我很困惑。</p><p><img src="/images/life/dream.jpg" alt="dream"><br>图源：Pixabay</p><a id="more"></a><p>中国古代就有庄生梦蝶的故事，庄生也感觉非常困惑，是他梦到了蝴蝶，还是蝴蝶梦到了他。可见古人很早就开始思考我们处于一个真实世界的可能性。</p><p>马斯克曾经说过一句让世人震惊的话：“我们活在真实世界的概率只有十亿分之一”。对此，我还是比较赞同的，觉得我们生活在虚拟世界中是一个大概率事件。这可能是源于我的职业。作为一名IT工作者，我们可以创造很多程序，包括一些游戏。在这些游戏中，我们更像一个能够创造一切的“神”，我们可以定义角色，赋予其各种属性，比如：外貌，财富值，生命值等等。我们也可以在游戏世界中创造很多规则和事件，比如：游戏中的国家，社会，战争，甚至，某种叫做新冠的传染病。。。游戏中的玩家都有所追求，比如游戏中的财富，武力，等等，可能也想规避某些东西。。。</p><p>想象一下我们所处的世界，以及我们周边的一切。为什么一个没有生命的小小病毒，就能够重创整个世界？为什么在病毒体中的DNA能够在被感染的人体内疯狂复制自己。那这个如此精妙的DNA又是谁来创造的？为什么人类之间会有爱，亲情，嫉妒，愤怒等等复杂的感情？为什么这些感情会左右人们做出很多自己无法控制的事情？为什么人类的寿命是有限的？那么是谁设定的这个限制？为什么光速是速度的极限？难道超过了这个限制运行这个“程序/游戏”的服务器就会宕机？</p><p>有人在验证自己在梦中还是醒着的状态的时候经常会掐自己一把，如果能够感觉到疼痛，就不是在做梦。可是现在科技如此发达，虚拟现实(VR)完全可以让你感觉到痛感，愉悦感等等。</p><p>我无法解答这些问题，也无法证明/证伪我究竟是生活在一个真实世界，还是一个虚拟世界/梦境中。只是希望，无论真实还是梦境，珍惜身边的一切，体验真实/游戏中的每一刻。</p>]]></content>
    
    <summary type="html">
    
      真实 or 梦境？
    
    </summary>
    
      <category term="思考" scheme="https://www.aafeng.uk/categories/%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>试用AI加持的代码增强工具Kite</title>
    <link href="https://www.aafeng.uk/kite/"/>
    <id>https://www.aafeng.uk/kite/</id>
    <published>2020-05-16T21:55:22.923Z</published>
    <updated>2020-05-16T21:55:22.923Z</updated>
    
    <content type="html"><![CDATA[<p>平时写代码主要用IntelliJ和PyCharm，基本上还算满意。最近在一个很偶然的机会看到了Kite这个代码增强工具，试用了一下VS Code+Kite，感觉还是非常好用的，可以和IntelliJ IDEA这样的付费商业软件相媲美。</p><p><img src="/images/technology/kite/kite.png" alt="Kite"></p><a id="more"></a><p>它支持的代码编辑器非常全面，包括：VS Code, IntelliJ, PyCharm, Sublime, Atom, WebStorm, Vim等。</p><p><img src="/images/technology/kite/kite2.png" alt="Kite"></p><p>就连Python之父也对其赞不绝口：</p><p><img src="/images/technology/kite/kite3.png" alt="Kite"></p><p>安装过程非常简单，首先在<a href="https://kite.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载，然后运行安装程序。</p><p>安装中建议只选择你需要的插件以节省磁盘空间并提升速度：</p><p><img src="/images/technology/kite/kite4.png" alt="Kite"></p><p>对我而言，IntelliJ/PyCharm的代码补全功能已经够强大了，不需要Kite，但他们有些太臃肿。因此我只想把Kite安装到轻量级的编辑器VS Code中。</p><p><img src="/images/technology/kite/kite5.png" alt="Kite"></p><p>创建了一个Python源文件，试用一下：</p><p><img src="/images/technology/kite/kite6.png" alt="Kite"></p><p>感觉Kite的基于AI的代码补全非常好用，Kite会根据你的键盘输入自动显示相应的列表。和IntelliJ相比，毫不逊色。</p><p>还有一键调用文档的功能。</p><p><img src="/images/technology/kite/kite7.png" alt="Kite"></p><p>一旦激活后，只要把光标停留在对应的类/方法处，Kite窗口中就会显示对应的文档：</p><p><img src="/images/technology/kite/kite8.png" alt="Kite"></p><p>总而言之，Kite这个辅助编码工具还是很好用的，能够大幅度提高开发效率。有了它的陪伴，就可以更加愉快的编码了。。。</p>]]></content>
    
    <summary type="html">
    
      试用AI加持的代码增强工具Kite
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>18年投的一个ICO项目2Key终于要上交易所了</title>
    <link href="https://www.aafeng.uk/2key/"/>
    <id>https://www.aafeng.uk/2key/</id>
    <published>2020-05-14T21:05:50.119Z</published>
    <updated>2020-05-14T21:05:50.119Z</updated>
    
    <content type="html"><![CDATA[<p><strong>声明：下面只是我个人的经历分享，不作为您的投资建议。</strong></p><p>今天朋友联系我说18年一起投的一个ICO项目2Key要发币了，而且在5月19号要上交易所。我整个就懵了，2Key是什么？？？翻了翻过去的记录，似乎还真的投过这个币，现在忘的彻彻底底了。</p><p><img src="/images/blockchain/2key.jpg" alt="2Key"></p><a id="more"></a><p>当时选择投资这个ICO主要有以下几个考虑：</p><ul><li>首先，这个项目有卖点。2Key强调的是“智能链接”，可以用2Key来创建多级推荐活动。在这些活动中奖励推荐链中的每一个人。在整个活动过程中，可以实时跟踪活动是如何传播的。</li><li>其次，项目的合伙人/合作方包括：Enigma, Ledger, Metamask, Zoom (Zoom在两年前还没有和2Key合作，这应该是今年的事)等这些知名的名字，应该靠谱。</li><li>感觉团队是是实实在在的做事，比如他们专门针对系统的Bug有一套赏金系统：<a href="https://www.2key.network/bug-bounty" rel="external nofollow noopener noreferrer" target="_blank">https://www.2key.network/bug-bounty</a></li></ul><p>查看了一下项目的Github活跃度，代码更新还是比较频繁的：</p><p><img src="/images/blockchain/2key2.png" alt="2Key"></p><p>2Key现在的币价是$0.08，在5月19号要上架Bilaxy和Hotbit交易所。希望上架后币价能涨一些吧。</p><p>最后给出项目的相关信息：</p><p>代币名称：2KEY<br>发行总量：6亿<br>合约地址：0xe48972fcd82a274411c01834e2f031d4377fa2c0<br>官网：<a href="https://www.2key.network/" rel="external nofollow noopener noreferrer" target="_blank">https://www.2key.network/</a><br>源码：<a href="https://github.com/2key/contracts" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/2key/contracts</a></p>]]></content>
    
    <summary type="html">
    
      18年投的一个ICO项目2Key终于要上交易所了
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>一次将Solr数据备份和恢复的曲折经历</title>
    <link href="https://www.aafeng.uk/solr-data-restore/"/>
    <id>https://www.aafeng.uk/solr-data-restore/</id>
    <published>2020-05-14T04:57:45.000Z</published>
    <updated>2020-05-14T11:05:27.506Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备开始一个新的项目。其实也不是全新的，其现有代码已经运行了5年，现在需要添加很多新的功能。在这个项目中使用了Solr，因此首先需要把其数据备份并恢复到自己的VM上来以坐测试和开发。于是一个曲折的故事就开始了。。。</p><p><img src="/images/technology/solr/solr.png" alt="Solr"></p><a id="more"></a><h2 id="Solr-7-5"><a href="#Solr-7-5" class="headerlink" title="Solr 7.5"></a>Solr 7.5</h2><p>其实我自己的VM上已经有了Solr，其版本是7.5，而服务器上的版本是7.6，想想这个两个版本差距不大，于是想直接把数据复制过来不就可以了吗？这个过程非常简单，就是把服务器上/var/solr/data目录下这个项目对应的子文件夹整个复制到本机的同样目录，并重新启动Solr就可以了。但当重新启动Solr后发现了如下错误：</p><pre><code>SolrCore Initialization Failuresxxxx: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Error opening new searcherPlease check your logs for more information</code></pre><p>检查日志文件，发现如下错误：</p><pre><code>Suppressed: org.apache.lucene.index.CorruptIndexException: checksum passed (4454119c). possibly transient resource issue, ......</code></pre><p>提示索引文件出错，首先想到的是在打包压缩和复制的过程中出现了错误，于是又走了一遍，还是同样的错误。这时觉得应该就是版本之间的兼容性问题了。确实也是，新版本支持旧版本的索引文件很好理解。但反过来，把新版本的索引文件复制到旧版本上去，不被支持就很好理解了。</p><h2 id="最新的Solr-8-5-1"><a href="#最新的Solr-8-5-1" class="headerlink" title="最新的Solr 8.5.1"></a>最新的Solr 8.5.1</h2><p>那好吧，索性就使用最新的版本8.5.1吧，这样所有的问题不就都解决了吗？其安装过程也非常简单，下载tgz文件，解压，再运行install_solr_service.sh就可以了。</p><p>但安装完毕后却出现了新的问题：</p><pre><code>xxxx: org.apache.solr.common.SolrException:org.apache.solr.common.SolrException: Could not load conf for core xxxx: Can&apos;t load schema /var/solr/data/xxxx/conf/schema.xml: Plugin init failure for [schema.xml] fieldType &quot;textSuggest&quot;: Plugin init failure for [schema.xml] analyzer/filter: Error loading class &apos;solr.StandardFilterFactory&apos;Please check your logs for more information</code></pre><p>原来是StandardFilterFactory在Solr 8中不能正常工作。找到了项目中的schema.xml，把相应的行注释掉，重新启动Solr，貌似问题解决了。但感觉并不是很满意，毕竟需要对配置做修改才能正常工作，而且不知道是否会对其他部分产生负面影响。</p><h2 id="Solr-7-7-3"><a href="#Solr-7-7-3" class="headerlink" title="Solr 7.7.3"></a>Solr 7.7.3</h2><p>最终决定尝试一下Solr 7.x中的最终版本7.7.3。整个安装步骤非常简单，下载并解压后运行：</p><pre><code>./install_solr_service.sh ../../solr-7.7.3.tgz -f</code></pre><p>但在启动过程中会发现如下错误：</p><p><img src="/images/technology/solr/solr2.png" alt="Solr"></p><p>这个问题倒是好解决，编辑文件/etc/security/limits.conf，添加：</p><pre><code>solr hard nofile 65535solr soft nofile 65535solr hard nproc 65535solr soft nproc 65535</code></pre><p>重新启动Solr</p><pre><code>sudo systemctl restart solr</code></pre><p>终于能够正常工作了，没有任何错误提示。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在Solr数据备份/恢复的时候一定要注意各个版本之间的差异。虽然不断保持软件的最新版本是一个好习惯，但在生产环境中，还是要慎之又慎，尽量选用兼容性最好前提下的最新版本。 </p>]]></content>
    
    <summary type="html">
    
      一次将Solr数据备份和恢复的曲折经历
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>比特币减半了，可你的信仰还在吗？</title>
    <link href="https://www.aafeng.uk/btc-halving/"/>
    <id>https://www.aafeng.uk/btc-halving/</id>
    <published>2020-05-13T22:16:33.873Z</published>
    <updated>2020-05-13T22:16:33.873Z</updated>
    
    <content type="html"><![CDATA[<p>比特币已经如期在区块高度630000处完成了第三次减半，随之而来的是挖矿难度增大，加上各种丢失密钥的情况时有发生，比特币应该是越来越稀缺，越来越值钱才对。但让众多持币者失望的是，比特币并没有迎来大家期待的暴涨。</p><p><img src="/images/blockchain/btc.jpg" alt="比特币"></p><a id="more"></a><p>记不清在哪里看到有人做过统计，比特币的最大持有者已经由早期的矿工慢慢变成了大的虚拟货币交易所。交易所在每一笔交易中收取交易费。伴随着比特币的减半，更加加剧了这种趋势，让最大的几家交易所越做越大。那么交易所有动力让币价一直暴涨吗？似乎有，但动力不足。因为交易所有着更为赚钱的手段：合约。</p><p>其实看看周围的朋友熟人，无论是新老韭菜，还是一些大佬，似乎没在合约市场爆过仓都不好意思说自己是玩币一族。但看看那些惊心触目的数据就可以知道，在合约市场上，用暴利来形容庄家的赚钱速度似乎都嫌不够。交易所则更像是一个大赌场，它自己不仅是玩家，更是庄家，同时每一笔交易还收取手续费。有这么赚钱的方式，干嘛着急把比特币的价格拉高，让比特币的价格不断震荡，多空双爆，多香！只要不把比特币玩死，就足够了。</p><p>其实在2013年的时候，就有朋友向我推销比特币，但很遗憾的是，我没有被朋友洗脑，和比特币就那么华丽丽的错过了。现在不能想，不然错过了着几个亿，大腿都要拍断了。。。</p><p>后来到了2017年的时候再次接触比特币，可能也有些FOMO的心理吧，成了坚定的持币一族。近两万美元的比特币见过，3000多美元的比特币也见过。但自从买了硬件钱包后，因为嫌麻烦，只往钱包里存过两次，再也没有碰过钱包。现在想想，反正投入的也不多，就接着放着吧。</p><p>你的信仰还在吗？</p>]]></content>
    
    <summary type="html">
    
      比特币减半了，可你的信仰还在吗？
    
    </summary>
    
      <category term="区块链" scheme="https://www.aafeng.uk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
  </entry>
  
</feed>
