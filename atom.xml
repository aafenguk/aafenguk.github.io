<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aafeng.uk/"/>
  <updated>2021-07-02T13:53:28.004Z</updated>
  <id>https://www.aafeng.uk/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在线开发工具总结</title>
    <link href="https://www.aafeng.uk/online-devtool/"/>
    <id>https://www.aafeng.uk/online-devtool/</id>
    <published>2021-06-29T09:17:45.879Z</published>
    <updated>2021-07-02T13:53:28.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在线测试REST-API工具"><a href="#在线测试REST-API工具" class="headerlink" title="在线测试REST API工具"></a>在线测试REST API工具</h2><h3 id="reqbin"><a href="#reqbin" class="headerlink" title="reqbin"></a>reqbin</h3><p><a href="https://reqbin.com/" rel="external nofollow noopener noreferrer" target="_blank">https://reqbin.com/</a></p><h3 id="测试Web-sockets"><a href="#测试Web-sockets" class="headerlink" title="测试Web sockets"></a>测试Web sockets</h3><p><a href="https://websocket.org/echo.html" rel="external nofollow noopener noreferrer" target="_blank">https://websocket.org/echo.html</a></p><h2 id="在线API-endpoints"><a href="#在线API-endpoints" class="headerlink" title="在线API endpoints"></a>在线API endpoints</h2><h3 id="starwars-API"><a href="#starwars-API" class="headerlink" title="starwars API"></a>starwars API</h3><p><a href="https://swapi.dev/" rel="external nofollow noopener noreferrer" target="_blank">https://swapi.dev/</a></p><h3 id="jokes"><a href="#jokes" class="headerlink" title="jokes"></a>jokes</h3><p><a href="https://api.icndb.com/jokes" rel="external nofollow noopener noreferrer" target="_blank">https://api.icndb.com/jokes</a><br><a href="https://api.icndb.com/jokes/random" rel="external nofollow noopener noreferrer" target="_blank">https://api.icndb.com/jokes/random</a><br><a href="https://api.icndb.com/jokes/1" rel="external nofollow noopener noreferrer" target="_blank">https://api.icndb.com/jokes/1</a></p><h3 id="news"><a href="#news" class="headerlink" title="news"></a>news</h3><p><a href="https://newsapi.org/" rel="external nofollow noopener noreferrer" target="_blank">https://newsapi.org/</a></p>]]></content>
    
    <summary type="html">
    
      在线开发工具总结
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>React开发常用组件总结</title>
    <link href="https://www.aafeng.uk/react-libraries/"/>
    <id>https://www.aafeng.uk/react-libraries/</id>
    <published>2021-06-25T20:27:35.714Z</published>
    <updated>2021-06-26T13:29:46.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="JSON-Server"><a href="#JSON-Server" class="headerlink" title="JSON Server"></a>JSON Server</h3><p>安装：</p><pre><code>npm install -g json-server</code></pre><p>运行：</p><pre><code>json-server --watch data/db.json --port 8000 -H 0.0.0.0</code></pre><h2 id="UI相关"><a href="#UI相关" class="headerlink" title="UI相关"></a>UI相关</h2><p>react-hook-form: <a href="https://github.com/react-hook-form/react-hook-form" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/react-hook-form/react-hook-form</a><br>react-loader-spinner: <a href="https://github.com/mhnpd/react-loader-spinner" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/mhnpd/react-loader-spinner</a><br>styled-components: <a href="https://github.com/styled-components/styled-components" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/styled-components/styled-components</a></p>]]></content>
    
    <summary type="html">
    
      React开发常用组件总结
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React" scheme="https://www.aafeng.uk/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>试用Notion笔记软件</title>
    <link href="https://www.aafeng.uk/notion/"/>
    <id>https://www.aafeng.uk/notion/</id>
    <published>2021-06-21T18:52:58.790Z</published>
    <updated>2021-06-21T18:53:26.249Z</updated>
    
    <content type="html"><![CDATA[<p>最近经同事推荐尝试了一下Notion这个软件，感觉还是不错的。</p><p><img src="https://user-images.githubusercontent.com/63479035/122812401-8a91c300-d2c9-11eb-9b75-35f03c9da8da.png" alt="image"></p><p>其实使用Evernote已经好多年了。最早选择它的时候还没有Onenote。后来有了Onenote之后又懒得再换了。这么多年下来，在Evernote上保存了很多笔记。</p><p>对于Evernote，个人感觉这个软件整体做的还不错，但总感觉其中的功能有些让人不是特别满意。比如：免费版本只能在两个设备间同步数据；不支持程序代码的高亮显示。</p><p>在试用了Notion之后，被其强悍的功能所折服。打算下一步正式用一段时间，看看是否真的好用。</p><p>在我看来，Notion具有以下优点。</p><p>首先就是其灵活性。在Notion中，可以管理笔记，进行项目管理，待办事情列表等等。也就是说，在Notion中，针对使用者的约束会更少，让使用者有更大的空间自由发挥。</p><p>其次，就算在笔记这项最为重要的功能中，也有很多亮点。比如，在表格中可以进行统计。这不是把Excel的功能也搞进来了吗？</p><p>还有就是其强大的Markdown支持，对常见编程语言代码的高亮显示等功能。</p><p>当然，版本备份功能也是必不可少的。在Notion中可以查看自己的修改记录。</p><p>还有很多我尚未尝试的功能，比如：gallery，calender，board，数学公式等等。</p><p>不过，自己对Notion的界面不是很喜欢。反倒是Evernote的界面更对我的胃口。其实也讲不出原因，第一眼喜欢就是喜欢，反之亦然。就像我从第一眼看见Netbeans的时候就产生一种排斥感，但对于eclipse就出奇的喜欢。不论怎样，先进一步试用一下吧，毕竟，它所提供的功能更为重要。</p>]]></content>
    
    <summary type="html">
    
      试用Notion笔记软件
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>useContext+reducers+local storage</title>
    <link href="https://www.aafeng.uk/usecontext/"/>
    <id>https://www.aafeng.uk/usecontext/</id>
    <published>2021-06-20T22:03:57.000Z</published>
    <updated>2021-06-24T09:56:35.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在React中，Context API提供了一种简洁又干净的方法在不同组件中共享状态。 其典型应用场景包括： 用户认证，界面语言，主题等“全局”性的设置。</p><p><img src="https://user-images.githubusercontent.com/63479035/123172610-47745300-d475-11eb-93b9-f8e06387ac02.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><h2 id="使用Context-Provider"><a href="#使用Context-Provider" class="headerlink" title="使用Context Provider"></a>使用Context Provider</h2><p>要想使用上下文，首先需要创建上下文的提供者： Context Provider。 比如：想要创建一个和用户认证相关的上下文。</p><p>首先，添加src/contexts/LoginContext.js:</p><pre><code>import React, { createContext, useState } from &apos;react&apos;;export const LoginContext = createContext();export default function LoginContextProvider({ children }) {    const [isAuthenticated, setIsAuthenticated] =  useState(false);    const [role, setRole] =  useState(&apos;public&apos;);    const login = () =&gt; {        setIsAuthenticated(true);    }    const logout = () =&gt; {        setIsAuthenticated(false);        setRole(&apos;&apos;);    }    return (        &lt;LoginContext.Provider value={{ isAuthenticated, login, logout, role, setRole }}&gt;            { children }        &lt;/LoginContext.Provider&gt;    )}</code></pre><p>对其进行调用的组件：</p><pre><code>import React, { useContext } from &apos;react&apos;;import {LoginContext} from &apos;../contexts/LoginContext&apos;;export default function LoginTest() {    const loginContext = useContext(LoginContext);    const { isAuthenticated, login, logout, role, setRole } = loginContext;    return (        &lt;div style={{margin: "25px"}}&gt;            You are {isAuthenticated? &quot;logged in.&quot;: &quot;logged out.&quot;}&lt;br/&gt;            Your role: {role}&lt;br/&gt;            &lt;button onClick={isAuthenticated? logout:login}&gt;{isAuthenticated? &quot;Logout&quot;:&quot;Login&quot;}&lt;/button&gt;            &lt;button onClick={() =&gt; setRole(&apos;Admin&apos;)}&gt;Change role to Admin&lt;/button&gt;            &lt;button onClick={() =&gt; setRole(&apos;public&apos;)}&gt;Change role to public&lt;/button&gt;        &lt;/div&gt;    )}</code></pre><p>在App.js中，</p><pre><code>&lt;LoginContextProvider&gt;    &lt;LoginTest/&gt;&lt;/LoginContextProvider&gt;</code></pre><p><img src="https://user-images.githubusercontent.com/63479035/123218024-20447280-d4c3-11eb-8c49-4e668a348c83.png" alt="image"></p><h2 id="使用Context-Provider保存全局数据"><a href="#使用Context-Provider保存全局数据" class="headerlink" title="使用Context Provider保存全局数据"></a>使用Context Provider保存全局数据</h2><p>有些时候甚至可以把数据放到Context Provider中，比如：</p><pre><code>import React, { createContext, useState } from &apos;react&apos;;export const BookContext = createContext();const BookContextProvider = ({children}) =&gt; {  const [books, setBooks] = useState([    {title: &apos;Java程序设计&apos;, id: 1101},    {title: &apos;Python程序设计&apos;, id: 1102},    {title: &apos;React in Action&apos;, id: 1103},  ]);  return (    &lt;BookContext.Provider value={{books}}&gt;      {children}    &lt;/BookContext.Provider&gt;  )}export default BookContextProvider;</code></pre><p>在组件中使用BookContext:</p><pre><code>const { books } = useContext(BookContext);</code></pre><p>这样就可以在不同组件中共享 books 实例。</p><h2 id="使用reducer"><a href="#使用reducer" class="headerlink" title="使用reducer"></a>使用reducer</h2><p>首先，在使用Context Provider的时候，不是必须使用reducer的，但如果使用，可以简化代码。比如，在CustomerContextProvider中，我们可以添加addCustomer, removeCustomer等方法并把它们传递给使用Context的组件中，但这样做对于简单应用还好。对于稍微复杂的应用，就会过于烦琐了。最好的方法是使用reducer将这些方法统一进行管理。</p><h3 id="创建reducer"><a href="#创建reducer" class="headerlink" title="创建reducer"></a>创建reducer</h3><p>首先，需要创建一个Reducer，并将操纵状态的逻辑放在reducer中：</p><pre><code>import uuid from &apos;react-uuid&apos;;export const customerReducer = (state, action) =&gt; {  switch (action.type) {    case &apos;ADD_CUSTOMER&apos;:      return [...state, {        name: action.customer.name,         phone: action.customer.phone,         id: uuid()}      ];    case &apos;REMOVE_CUSTOMER&apos;:      return state.filter(customer =&gt; customer.id !== action.id);    case &apos;ADD_DUMMY_CUSTOMERS&apos;:      return [        {id: uuid(), name: &apos;Stuart&apos;, phone: &apos;07853110066&apos;},        {id: uuid(), name: &apos;Lucas&apos;, phone: &apos;07853110067&apos;},        {id: uuid(), name: &apos;Andy&apos;, phone: &apos;07853110068&apos;}      ];        case &apos;RESET_CUSTOMER&apos;:      return [];        default:      return state;  }} </code></pre><h3 id="在ContextProvider中使用reducer"><a href="#在ContextProvider中使用reducer" class="headerlink" title="在ContextProvider中使用reducer"></a>在ContextProvider中使用reducer</h3><p>接下来，在CustomerContext中，就不要使用useState，而是使用useReducer了。因为state的管理已经转移到reducer中了。</p><pre><code>import React, { createContext, useReducer } from &apos;react&apos;;import { customerReducer } from &apos;../reducers/customerReducer&apos;;export const CustomerContext = createContext();const CustomerContextProvider = (props) =&gt; {  const [customers, dispatch] = useReducer(customerReducer, []);  return (    &lt;CustomerContext.Provider value={{ customers, dispatch }}&gt;      {props.children}    &lt;/CustomerContext.Provider&gt;  );}export default CustomerContextProvider;</code></pre><h3 id="在UI组件中使用Context和reducer"><a href="#在UI组件中使用Context和reducer" class="headerlink" title="在UI组件中使用Context和reducer"></a>在UI组件中使用Context和reducer</h3><p>接下来在UI组件中只需要通过传递给dispatch相应的参数就可以调用相应的状态更新方法了：</p><pre><code>import React, { useContext } from &apos;react&apos;;import { CustomerContext } from &apos;../contexts/CustomerContext&apos;;export default function CustomerList() {    const customerContext = useContext(CustomerContext);    const { customers, dispatch } = customerContext;    return (        &lt;div&gt;            Current customers (click to delete):            &lt;hr/&gt;            &lt;ul&gt;            {customers.map(customer =&gt; {                return (                     &lt;li key={customer.id} onClick={() =&gt; dispatch({ type: &apos;REMOVE_CUSTOMER&apos;, id: customer.id })}&gt;{customer.name} / {customer.phone}&lt;/li&gt;                );            })}            &lt;/ul&gt;            &lt;button onClick={() =&gt; dispatch({ type: &apos;ADD_DUMMY_CUSTOMERS&apos; })}&gt;Add dummy customers&lt;/button&gt;            &lt;button onClick={() =&gt; dispatch({ type: &apos;RESET_CUSTOMER&apos; })}&gt;Reset customers&lt;/button&gt;        &lt;/div&gt;    )}</code></pre><h2 id="Local-Storage"><a href="#Local-Storage" class="headerlink" title="Local Storage"></a>Local Storage</h2><p>key value pairs</p><p>值必须为字符串类型。</p><p>需要将JSON转换为字符串后才能够保存到local storage。<br>customer = {“name”:”George”,”phone”:”07882223333”}<br>localStorage.setItem(‘c1’, JSON.stringify(customer))</p><p>因此在读取后需要再次转换为JSON：<br>george = JSON.parse(localStorage.getItem(‘c1’))</p><p>如果想要使用local storage，在CustomerContext.js中：</p><pre><code>const [customers, dispatch] = useReducer(customerReducer, [], () =&gt; {    const localData = localStorage.getItem(&apos;customers&apos;);    return localData ? JSON.parse(localData) : [];});useEffect(() =&gt; {    localStorage.setItem(&apos;customers&apos;, JSON.stringify(customers));}, [customers]);</code></pre>]]></content>
    
    <summary type="html">
    
      使用Context Provider及useContext管理React中的上下文, 使用reducer，local storage
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>安装eufy家用安全摄像头</title>
    <link href="https://www.aafeng.uk/eufy-security-camera/"/>
    <id>https://www.aafeng.uk/eufy-security-camera/</id>
    <published>2021-06-20T21:45:13.701Z</published>
    <updated>2021-06-21T17:34:39.529Z</updated>
    
    <content type="html"><![CDATA[<p>最近不断听到伦敦等地出现一些暴力事件，于是就考虑在家安装一组安全摄像头。经朋友推荐，选择了eufyCam家用摄像头。</p><p><img src="https://user-images.githubusercontent.com/63479035/122688729-e8fd6980-d215-11eb-88ac-5eb548406ffb.png" alt="image"></p><a id="more"></a><p>其实，我所在的小城安全系数本来就很高。我所住的街区也从未听说过入室盗窃的事件。不过安装一下毕竟还是有好处的。至少在有人敲门的时候能够看清对方。</p><p>在网上下单后，很快就送到了。官网说的是3-7个工作日，但没有想到第二天就送到了。奇怪的是，竟然是Amazon Prime的包装。可能两家是有合作吧。</p><p>整个安装过程还是非常简单的。</p><p>首先是把主机通过网线和家中的路由器连接在一起，然后进行了初始设置。</p><p>然后从Google Play Store上安装了他家的APP，在APP中根据提示添加了主机，以及两个配套的摄像头。这里需要注意的是，在选择摄像头位置的时候，需要拿着摄像头看看WIFI信号是否足够强。</p><p>接下来就是把摄像头安装到户外了。说明书上提到，一定要避免阳光的直接照射。这主要是因为摄像头内置有电池，在阳光暴晒下可能会有危险。不过话说，安装在户外，又要避免阳光，似乎并不容易。我选择安装在排水管道的下方，肯定会被照到，但应该还好吧。</p><p>安装好之后，只要有人走进，手机APP就会有提示。摄像头还有白天和夜间模式两种。同时，它还有人脸识别功能，能够检测到走进的人。APP内部还有宠物识别功能。但对于我来说，似乎没什么用。</p><p>安装完毕后，倒没有觉得更安全了，但却感觉很好玩。随时可以看到家附近情况的感觉还是很不错的。</p><p>如果喜欢的话，欢迎使用我的<a href="https://bit.ly/3cSjKBW" rel="external nofollow noopener noreferrer" target="_blank">推荐链接</a>，你能获得40英镑的折扣（订单超过200英镑，且为原价商品才能获得折扣），我则会获得40英镑的Amazon购物券。也算是双赢吧。</p>]]></content>
    
    <summary type="html">
    
      安装eufy家用安全摄像头
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>英国的茴香</title>
    <link href="https://www.aafeng.uk/fennel/"/>
    <id>https://www.aafeng.uk/fennel/</id>
    <published>2021-06-12T20:15:09.937Z</published>
    <updated>2021-06-12T20:15:46.032Z</updated>
    
    <content type="html"><![CDATA[<p>今年英国的天气很古怪。5月份之前一直气温很低。第一批育好的苗种到外面后因为低温基本上都挂了。但最近的温度一直居高不下，有了夏天的感觉。第二批苗长势良好。</p><p>西红柿和蚕豆已经开花了。豆角也即将爬上架子了，角瓜似乎正在酝酿力量，准备爆发。尤其是茴香的长势非常好，家人看到照片后提醒，如果再不吃就要老了。<br><img src="https://user-images.githubusercontent.com/63479035/121783619-8c5fd600-cba7-11eb-8d1d-b0e362b5f12b.png" alt="image"></p><a id="more"></a><p>奇怪的是，在英国超市中也能买到茴香，但确实和国内的很不相同：根部很大，几乎没有叶子。用英国这种茴香做馅，几乎就吃不出茴香味道。。。<br><img src="https://user-images.githubusercontent.com/63479035/121787974-7232f180-cbc1-11eb-9678-862d871d3c16.png" alt="image"><br>Source: Pixabay</p><p>对于我家这株疯长的茴香，我想既然在英国，那么根部一定非常巨大了。那么好吧，我就连根带叶子一起吃了。</p><p>于是满怀期待的连根拔起：<br><img src="https://user-images.githubusercontent.com/63479035/121783673-e5c80500-cba7-11eb-8936-d58e2608f5cb.png" alt="image"></p><p>嗯？根怎么是这样的？？？无论如何，这多么大一株茴香，用来做馅应该是足够了。</p><p>很快，猪肉茴香馅的馅饼，啊不，茴香盒子：<br><img src="https://user-images.githubusercontent.com/63479035/121783699-0a23e180-cba8-11eb-8b61-70c362681378.png" alt="image"></p><p>看来这种茴香才是我记忆中的茴香，记忆中的味道。以后必须要继续种这种茴香了。。。</p>]]></content>
    
    <summary type="html">
    
      英国的茴香
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>说说转行</title>
    <link href="https://www.aafeng.uk/change-career/"/>
    <id>https://www.aafeng.uk/change-career/</id>
    <published>2021-06-10T16:49:55.329Z</published>
    <updated>2021-06-10T16:50:31.120Z</updated>
    
    <content type="html"><![CDATA[<p>前面聊到了职业选择的问题。这就涉及了一个相关的问题：如果选择了一个自己喜欢的职业还好，可以一直做下去。但如果选择了一个自己不喜欢的职业，该转行吗？怎么转？</p><p><img src="https://user-images.githubusercontent.com/63479035/121564884-d021d680-ca13-11eb-8919-1770f1638cae.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>说到转行，其实每个人的考虑都不尽相同。每个人也都有自己的故事。</p><p>到了英国之后，周边有些朋友原来学的专业是英语。可到了英国之后，就相当于没有了专业。于是，被迫转行。有的人选择做会计，从头学起的那种，可以说学的很辛苦。也有的原来在国内就是英语老师，到了英国后，转行做了中文老师。毕竟都是老师，转行的相对要容易的多。这种转行可以说是为生活所迫，选择了一个适合自己的行业。</p><p>记得原来在国内的时候，认识一位女士，在一家大银行做会计。按照当时的收入，应该算是稳定的金领一族。但她对自己的工作越来越没有兴趣，于是报名参加了一个IT相关的培训班。一开始学习，她就知道这才是自己真心喜欢的职业。的确，她在程序设计上的确很有天赋，毕业后很快就拿到了一份满意的IT工作。可以说她是非常幸运的，也有非常有魄力的，自己改变了自己的职业，也改变了自己的命运。</p><p>其实，要想转行成功，我个人感觉最好选择一个就近的行业。而不是来个180度的大转弯。这样搞不好就把自己整坑里了。</p><p>比如：原来做IT相关工作的。如果不想再做技术方面的工作了，可以考虑做针对IT行业的招聘专员/猎头。这样就可以充分利用自己原来的经验。或者，如果表达能力不错的，可以转行做IT培训，把自己的开发经验传授给别人。</p><p>周边朋友既有转行做相关行业的，也有转行从事一个彻底陌生行业的。不知道再过些年自己会不会动转行的念头？</p>]]></content>
    
    <summary type="html">
    
      说说转行
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>在英国体验自嗨锅</title>
    <link href="https://www.aafeng.uk/self-service-hot-pot/"/>
    <id>https://www.aafeng.uk/self-service-hot-pot/</id>
    <published>2021-06-08T21:13:30.095Z</published>
    <updated>2021-06-08T21:13:30.095Z</updated>
    
    <content type="html"><![CDATA[<p>火锅一直是我最喜欢的美食之一。有句话说的好，“没有什么是一顿火锅不能解决的”。记得疫情之前，每次去伦敦都不忘记预定好海底捞的餐位去享受一下他家的美食和服务。</p><p>现在不太可能去伦敦了，而且近一两年应该也会尽量避免去。那么，想吃火锅了怎么解决？当然可以自己在家吃，但似乎和餐厅里的味道还是不太一样。</p><p>看到朋友圈有人发了自嗨锅的照片，感觉不错。这两天买了几个自嗨锅尝试一下。</p><a id="more"></a><p>首先选则了海底捞的素食锅，之所以选择素食锅，是因为肉类的选择似乎太少了。可能是英国这边的种类没法和国内相比吧。<br><img src="https://user-images.githubusercontent.com/63479035/121250634-dbeb8c80-c89d-11eb-8906-ea6672c7ad42.png" alt="image"></p><p>拆开包装后，里面的货还不少。<br><img src="https://user-images.githubusercontent.com/63479035/121250868-23721880-c89e-11eb-9634-e95910caa563.png" alt="image"></p><p>按照说明把食材放入白色的碗中再加水拌匀：<br><img src="https://user-images.githubusercontent.com/63479035/121251284-9bd8d980-c89e-11eb-8c66-80fa32bf1016.png" alt="image"></p><p>同时还尝试了另一个叫做鲜锋品牌的牛肉火锅：<br><img src="https://user-images.githubusercontent.com/63479035/121250746-00dfff80-c89e-11eb-8dba-8f8ef5f13fe5.png" alt="image"></p><p>将加热包放入黑色的大碗中加热15-20分钟左右，就可以食用了。</p><p><img src="https://user-images.githubusercontent.com/63479035/121250442-a181ef80-c89d-11eb-8d31-9e73adf78205.png" alt="image"><br>Source: Pixabay</p><p>整体而言，感觉还是不错的。不过，对于海底捞的素食锅略感失望，其味道和我预期的差距较大。反倒是原先不知道的品牌鲜锋倒是给了我一个大大的惊喜。味道很浓郁，同时汤料中没有过多的花椒，吃起来比较容易。</p><p>下次出门玩的话，尤其是在野外露营，带几个自嗨锅，省时，环保，美味，似乎全占了。。。</p><p><a href="https://amzn.to/2TbA2Pk" rel="external nofollow noopener noreferrer" target="_blank">英国亚马逊上似乎就有卖的</a>。</p>]]></content>
    
    <summary type="html">
    
      在英国体验自嗨锅
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>英国的啤酒</title>
    <link href="https://www.aafeng.uk/beer/"/>
    <id>https://www.aafeng.uk/beer/</id>
    <published>2021-06-07T18:13:08.370Z</published>
    <updated>2021-06-07T18:13:52.706Z</updated>
    
    <content type="html"><![CDATA[<p>在英国和同事们去酒吧，点的最多的就是啤酒了。而在英国这里，啤酒的种类真的是太多了。我对英国啤酒品牌的了解可以说是太少了。每次到酒吧，基本上都是抄作业，同事们点什么我就跟着点，呵呵，黑啤除外，实在是接受不了那种味道。</p><p><img src="https://user-images.githubusercontent.com/63479035/121067966-98245480-c7c3-11eb-9a2c-0cdb4a372f09.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>不得不说，英国人对酒的喜爱是流淌在血液中的。每次和同事们去酒吧，我基本上和他们喝上两轮就撤了。而同事们一般都会换上几个酒吧喝上几轮。其实啤酒的酒精度并不高，但肚子中盛不下啊。。。</p><p>说到嗜酒的源头，听过一个说法，过去的时候，英国人不会把水烧开了喝，当时的水过滤技术也不是很成熟。因此喝生水的话容易生病。而酒精能够起到杀菌作用，因此含有酒精的啤酒就大受欢迎了。有些人把啤酒当水喝。。。</p><p>啤酒中的主要成分包括水，麦芽，啤酒花，酵母。最早英国的啤酒中不含酒花，被称为麦芽酒（Ale），在很多英国的电影中，酒馆中流行的都是Ale。后来啤酒花慢慢的被大众所接受，而含有酒花的啤酒被称作beer。</p><p>在酒吧中，除了市面上常见的啤酒品牌之外，通常非常欢迎的是源于本地的Cask Beer生啤。由于其保质期较短，因此都是本地产的。到了一个地方，肯定要尝尝当地的啤酒！</p><p>很多超市/酒类专卖网站上就受欢迎的无非就是两大类。第一种叫做Lager。国内的青岛，哈啤之类的都属于这一类。它们的酒精度都不是很高4.5%左右。另一种就是所谓的精酿Ale了。它们的酒精度会高一些，8%-10%的酒精度。有的极易上头。但估计爱喝酒的人会更加喜欢。。。</p><p>作为一名喝酒的小白，就想到这么多了。。。</p>]]></content>
    
    <summary type="html">
    
      英国的啤酒
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04LTS开发环境/node14.17/Ruby2.7.3/Python3.8.5/OpenJDK11/Tomcat10/Solr8.8.2</title>
    <link href="https://www.aafeng.uk/ubuntu20/"/>
    <id>https://www.aafeng.uk/ubuntu20/</id>
    <published>2021-06-07T08:54:15.409Z</published>
    <updated>2021-06-07T08:54:15.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近把自己本地的VM重新安装配置了一下，主要是Ubuntu升级到20.04LTS, Node.js 14.17, Ruby 2.7.3, Python 3.8.5, OpenJDK 11, Tomcat 10, Solr 8.8.2。下面记录一下：</p><p><img src="https://user-images.githubusercontent.com/63479035/120987987-0d693880-c776-11eb-95f5-11ea161f12c0.png" alt="image"><br>Source: Pixabay</p><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>安装好VM后注意在VirtualBox<strong>配置Port forwarding</strong>.</p><p>运行：</p><pre><code>sudo apt-get install -y build-essential libssl-dev libreadline-dev zlib1g-dev</code></pre><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><pre><code>sudo apt-get install zshsudo usermod -s /bin/zsh $(whoami)</code></pre><p>重新登录后选择2）配置好zsh，然后安装oh-my-zsh:</p><pre><code>sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></pre><h2 id="Node-js-14-17-0"><a href="#Node-js-14-17-0" class="headerlink" title="Node.js 14.17.0"></a>Node.js 14.17.0</h2><pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | zshsource .zshrcnvm list-remotenvm install v14.17.0</code></pre><h2 id="Ruby-2-7-3"><a href="#Ruby-2-7-3" class="headerlink" title="Ruby 2.7.3"></a>Ruby 2.7.3</h2><h3 id="rbenv"><a href="#rbenv" class="headerlink" title="rbenv"></a>rbenv</h3><pre><code>  git clone git://github.com/sstephenson/rbenv.git .rbenvecho &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcecho &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.zshrcgit clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-buildecho &apos;export PATH=&quot;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcsource .zshrc</code></pre><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><pre><code>rbenv install -v 2.7.3rbenv global 2.7.3</code></pre><h2 id="Python-3-8-5"><a href="#Python-3-8-5" class="headerlink" title="Python 3.8.5"></a>Python 3.8.5</h2><pre><code>sudo apt install python3-pipsudo apt-get install python3-venvpython3 -m venv myenv</code></pre><p>将如下语句添加到.zshrc:</p><pre><code>source myenv/bin/activate</code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="OpenJDK-11"><a href="#OpenJDK-11" class="headerlink" title="OpenJDK 11"></a>OpenJDK 11</h3><pre><code>sudo apt install default-jdk sudo nano /etc/environment</code></pre><p>Add:</p><pre><code>JAVA_HOME=&quot;/usr/lib/jvm/java-11-openjdk-amd64&quot;</code></pre><h3 id="Tomcat-10"><a href="#Tomcat-10" class="headerlink" title="Tomcat 10"></a>Tomcat 10</h3><p>Run:</p><pre><code>sudo groupadd tomcatsudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcatcd /tmpcurl -O https://mirrors.ukfast.co.uk/sites/ftp.apache.org/tomcat/tomcat-10/v10.0.6/bin/apache-tomcat-10.0.6.tar.gzsudo mkdir /opt/tomcatsudo tar xzvf apache-tomcat-10.0.6.tar.gz -C /opt/tomcat --strip-components=1cd /opt/tomcatsudo chgrp -R tomcat /opt/tomcatsudo chmod -R g+r confsudo chmod g+x confsudo chown -R tomcat webapps/ work/ temp/ logs/</code></pre><p>添加tomcat服务：</p><pre><code>sudo nano /etc/systemd/system/tomcat.service</code></pre><p>添加如下内容：</p><pre><code>[Unit]Description=Apache Tomcat Web Application ContainerAfter=network.target[Service]Type=forkingEnvironment=JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pidEnvironment=CATALINA_HOME=/opt/tomcatEnvironment=CATALINA_BASE=/opt/tomcatEnvironment=&apos;CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC&apos;Environment=&apos;JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom&apos;ExecStart=/opt/tomcat/bin/startup.shExecStop=/opt/tomcat/bin/shutdown.shUser=tomcatGroup=tomcatUMask=0007RestartSec=10Restart=always[Install]WantedBy=multi-user.target</code></pre><p>Reload system daemon:</p><pre><code>sudo systemctl daemon-reload</code></pre><p>Start Tomcat:</p><pre><code>sudo systemctl start tomcat</code></pre><p>Test if you can access Tomcat via port 8080, then enable this service:</p><pre><code>sudo systemctl enable tomcat</code></pre><p>Configure Tomcat web admin UI:</p><pre><code>sudo nano /opt/tomcat/conf/tomcat-users.xml</code></pre><p>内容如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;              version=&quot;1.0&quot;&gt;  &lt;role rolename=&quot;manager-gui&quot;/&gt;  &lt;user username=&quot;tomcat&quot; password=&quot;PASSWORD&quot; roles=&quot;manager-gui&quot;/&gt;  &lt;role rolename=&quot;admin-gui&quot;/&gt;  &lt;user username=&quot;admin&quot; password=&quot;PASSWORD&quot; roles=&quot;admin-gui&quot;/&gt;&lt;/tomcat-users&gt;   </code></pre><p>默认方式下，tomcat针对admin页面添加了IP限制。可以通过以下文件将其注释掉：</p><pre><code>sudo nano /opt/tomcat/webapps/manager/META-INF/context.xml</code></pre><h3 id="Solr8-8-2"><a href="#Solr8-8-2" class="headerlink" title="Solr8.8.2"></a>Solr8.8.2</h3><pre><code>cd /tmpwget https://mirrors.ukfast.co.uk/sites/ftp.apache.org/lucene/solr/8.8.2/solr-8.8.2.tgztar xvf solr-8.8.2.tgzcd solr-8.8.2/binsudo ./install_solr_service.sh ../../solr-8.8.2.tgz</code></pre><p>创建一个core：</p><pre><code>sudo su - solr -c &quot;/opt/solr/bin/solr create -c your_core -n data_driven_schema_configs&quot;</code></pre><p>测试Solr：</p><pre><code>sudo service solr status</code></pre>]]></content>
    
    <summary type="html">
    
      Ubuntu 20.04LTS开发环境/node14.17/Ruby2.7.3/Python3.8.5/OpenJDK11/Tomcat10/Solr8.8.2
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://www.aafeng.uk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>英国的Segway电动平衡车</title>
    <link href="https://www.aafeng.uk/segway/"/>
    <id>https://www.aafeng.uk/segway/</id>
    <published>2021-06-01T22:54:07.402Z</published>
    <updated>2021-06-01T22:55:07.850Z</updated>
    
    <content type="html"><![CDATA[<p>这两天孩子们在朋友家试玩了一下Segway电动平衡车，立刻都对其爱不释脚，很快就能够熟练掌握其控制方法，在花园中/僻静的道路上飞奔。。。本来自己也想尝试一下，但考虑到朋友家的是专门针对孩子的版本，不想把Segway压坏了，就算了。</p><p><img src="https://user-images.githubusercontent.com/63479035/120398180-9c6af080-c331-11eb-81b4-0940d464bc36.png" alt="image"><br>图源：<a href="https://amzn.to/3uG8yOZ" rel="external nofollow noopener noreferrer" target="_blank">Amazon产品介绍页面</a></p><a id="more"></a><p>在网上查了一下才知道，Segway这家公司的母公司竟然是小米。其实，Segway最早是由DEKA这家公司发明的，但后来被小米收购后并入其旗下的Ninebot子公司。</p><p>其实，电动平衡车的原理貌似“很简单”，它是基于一种“动态稳定”的原理所设计的。举个例子，如果人的身体前倾而腿固定不动的话，人肯定会摔倒。但如果向前迈步的话，则不会摔倒。而这种电动平衡车就是利用这种原理，当人的身体前倾的时候，平衡车就检测到并驱使车向前移动，这样就相当于通过人体的倾斜来控制平衡车。</p><p>对于这种平衡车，一般人都能通过很短的时间掌握其使用。很多小朋友都能迅速的驾驭它并快速行驶。不过需要小心的就是，如果路面不平，或者有路障的话，就极易“翻车”。</p><p>另外，就是其电池的续航能力。朋友家的充满电后能够行驶20多分钟，不知道最新款的续航能力会有多大提升。如果只是20多分钟/半个小时的话，应该还是不能作为一个交通工具的。</p><p>另外，电动平衡车的位置似乎有些尴尬。如果仅仅是作为一个玩具的话，它似乎有些大材小用了。但如果作为一个交通工具的话，它似乎还具有种种问题。因此，各国对它的态度也不尽相同，绝大多数国家都不允许把它作为一个交通工具上路的。</p><p>不论怎样说，这个小东西已经在我的心底种草，可以考虑先买一个玩玩，就算是锻炼身体也好。</p><p>【<a href="https://amzn.to/3uG8yOZ" rel="external nofollow noopener noreferrer" target="_blank">Amazon上购买页面</a>】</p>]]></content>
    
    <summary type="html">
    
      英国的Segway电动平衡车
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Hodnet Hall Gardens</title>
    <link href="https://www.aafeng.uk/hodnet-hall-gardens/"/>
    <id>https://www.aafeng.uk/hodnet-hall-gardens/</id>
    <published>2021-06-01T07:53:55.450Z</published>
    <updated>2021-06-01T07:54:37.417Z</updated>
    
    <content type="html"><![CDATA[<p>这个银行假日的最后一天，和朋友一家一同驱车去了Hodnet Hall Gardens。这是一家私家花园，主人是Algernon爵士及其夫人Heber-Percy。这家花园的主人已经将其对外开放了逾50年。</p><p>我们来的正是时候，花期在夏季的各种花朵已经陆续开放了，比如：magnolias, camellias, rhododendrons, azaleas, bluebells等等。他家还有英格兰玫瑰，只不过目前还没有开花。其实，一年中的不同时段来的话，都会有不同的惊喜。</p><p>入口处的小池塘，周边长着各种认识的，不认识的植被。水池中还有无数的小蝌蚪在游来游去。<br><img src="https://user-images.githubusercontent.com/63479035/120282294-dbf1f800-c2b1-11eb-8e85-d37824aa32b6.png" alt="image"></p><p>碧水蓝天绿树：<br><img src="https://user-images.githubusercontent.com/63479035/120282577-270c0b00-c2b2-11eb-980b-b2a67368f335.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120282651-3ee38f00-c2b2-11eb-8832-71252c45d6c2.png" alt="image"></p><p>隐藏在远处的小凉亭：<br><img src="https://user-images.githubusercontent.com/63479035/120282513-178cc200-c2b2-11eb-88ed-0d01d157b9e8.png" alt="image"></p><p>绝大多数都分不清/不认识的各类鲜花，如果花/树旁边贴个名字就好了：<br><img src="https://user-images.githubusercontent.com/63479035/120282729-59b60380-c2b2-11eb-9f61-807194a18856.png" alt="image"></p><p>这种花应该叫做Acácia Amarela，原产地似乎是葡萄牙：<br><img src="https://user-images.githubusercontent.com/63479035/120282994-9b46ae80-c2b2-11eb-826a-250e5628dd06.png" alt="image"></p><p>这种花貌似叫做Chinese wisteria：<br><img src="https://user-images.githubusercontent.com/63479035/120283668-5707de00-c2b3-11eb-94b4-818fd7f6ea81.png" alt="image"></p><p>Royal Purple Rhododendron？<br><img src="https://user-images.githubusercontent.com/63479035/120284037-be259280-c2b3-11eb-81fe-93fdc2eca3ad.png" alt="image"></p><p>这种bulbous buttercup的花瓣上就像抹了一层黄油一样，油光光的：<br><img src="https://user-images.githubusercontent.com/63479035/120284252-fd53e380-c2b3-11eb-9061-aaee57df6880.png" alt="image"></p><p>源自巴西的Gunnera manicata：<br><img src="https://user-images.githubusercontent.com/63479035/120284591-4f950480-c2b4-11eb-8b9f-6151f34d41a0.png" alt="image"></p><p>看起来很雍容大气的白花，其气质有些像一位公主。的确，她的名字应该叫做：Rhododendron Yaku Princess<br><img src="https://user-images.githubusercontent.com/63479035/120284810-8f5bec00-c2b4-11eb-997a-361f9c0fed48.png" alt="image"></p><p>这个大家都认识，只是现在略有些早，荷花还没有绽放：<br><img src="https://user-images.githubusercontent.com/63479035/120283467-2162f500-c2b3-11eb-98e2-10726c51e27a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120283940-a2ba8780-c2b3-11eb-8906-303138d1817b.png" alt="image"></p><p>让人惊艳的日本红枫：<br><img src="https://user-images.githubusercontent.com/63479035/120285406-1f019a80-c2b5-11eb-99ff-1e98c91a7feb.png" alt="image"></p><p>远处背景处的豪宅就是主人的住所：<br><img src="https://user-images.githubusercontent.com/63479035/120283603-4192b400-c2b3-11eb-9a26-bb4ca0fb12e9.png" alt="image"><br>近照：<br><img src="https://user-images.githubusercontent.com/63479035/120285352-0f825180-c2b5-11eb-94b7-8e13a46a97ac.png" alt="image"></p><p>在整个花园中漫步非常治愈，感觉非常的放松惬意。走累了就坐在草地上小坐，孩子们在周边坐着游戏。花园中也有经典的英式茶屋，可以买杯咖啡。不过这么热的天气，冰淇淋还是更受欢迎。</p>]]></content>
    
    <summary type="html">
    
      Hodnet Hall Gardens
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>登高</title>
    <link href="https://www.aafeng.uk/hawkstone-park/"/>
    <id>https://www.aafeng.uk/hawkstone-park/</id>
    <published>2021-05-30T07:07:38.027Z</published>
    <updated>2021-05-30T07:08:11.478Z</updated>
    
    <content type="html"><![CDATA[<p>和朋友一家一起来到周边的Hawkstone Park来登山。</p><p>近处的地刚刚被犁过，远处的油菜花任然生气盎然。<br><img src="https://user-images.githubusercontent.com/63479035/120094856-b979a680-c11a-11eb-9c3f-4e972025c8a8.png" alt="image"></p><a id="more"></a><p>参天古树：<br><img src="https://user-images.githubusercontent.com/63479035/120095014-779d3000-c11b-11eb-9d2f-7834b14a89ff.png" alt="image"></p><p>这数上的貌似是鸟窝，但近看又不是，似乎是另一种植物寄生在树上。“鸟窝”中又冒出了丝丝绿意：<br><img src="https://user-images.githubusercontent.com/63479035/120095055-a1565700-c11b-11eb-8916-81b9265872b6.png" alt="image"></p><p>沿着弯弯曲曲的小径开始上山：<br><img src="https://user-images.githubusercontent.com/63479035/120095091-cd71d800-c11b-11eb-95d6-ca0aa6241b5e.png" alt="image"></p><p>在巨石上有无数类似气泡的孔洞，应该是地壳变迁时大自然的杰作？亦或是久经风吹日晒，时间留下的痕迹？<br><img src="https://user-images.githubusercontent.com/63479035/120095145-3d805e00-c11c-11eb-9e4f-438e41dad998.png" alt="image"><br>石质极软，可以在上面刻字：<br><img src="https://user-images.githubusercontent.com/63479035/120095426-d5327c00-c11d-11eb-953d-0c715c3d9b5c.png" alt="image"></p><p>山上到处都是危险的“山精野怪”，时不时的出来恐吓路人：<br><img src="https://user-images.githubusercontent.com/63479035/120095221-a7990300-c11c-11eb-9d3e-42275b4aef10.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095183-715b8380-c11c-11eb-89bb-e77997747080.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095216-9d770480-c11c-11eb-9cac-925ad19bfa5f.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095256-eaf37180-c11c-11eb-851c-cd23bb738272.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095384-a61c0a80-c11d-11eb-9f27-cb236d101f59.png" alt="image"></p><p>就连过桥的时候也要恐吓一番：<br><img src="https://user-images.githubusercontent.com/63479035/120095339-5ccbbb00-c11d-11eb-9d93-cd7e2df74071.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095373-94d2fe00-c11d-11eb-9224-9e5df995086b.png" alt="image"></p><p>这个纪念碑是用来纪念当年在击败拿破仑的滑铁卢之战：<br><img src="https://user-images.githubusercontent.com/63479035/120095237-bc759680-c11c-11eb-9d37-3c198aa8a262.png" alt="image"></p><p>终于登上了山顶：<br><img src="https://user-images.githubusercontent.com/63479035/120095354-77059900-c11d-11eb-9d6d-33dc39a384c6.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095390-b59b5380-c11d-11eb-84df-79a132a8ce53.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095414-cb107d80-c11d-11eb-8101-2058c1d74749.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      登高
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Fire运动</title>
    <link href="https://www.aafeng.uk/fire/"/>
    <id>https://www.aafeng.uk/fire/</id>
    <published>2021-05-29T06:15:24.101Z</published>
    <updated>2021-05-29T06:15:56.556Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚读到一篇文章，提到了Fire运动这个概念，觉得这是非常有趣的一种思维/生活方式。</p><p>所谓Fire，就是Financial Independence and Retiring Early的缩写，其核心观点就是要经济独立，提前退休。呵呵，提前退休应该是很多人的梦想。但是，对于绝大多数人来说，这也就是梦想，然后就没有然后了。。。</p><p><img src="https://user-images.githubusercontent.com/63479035/120060029-29b9f680-c04d-11eb-897e-bb90c4f2fdba.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>Fire首先从另外一个角度思考了人们的消费。对于我们的每项消费，不是用钱来衡量的，而是用生命来衡量的。打个比方，如果你每天能挣1000元，那么当你要消费500元购买一件衣服的时候，如果把衣服的价值换为你的生命。也就是说，你愿意用你半天的命去换取一件衣服吗？我相信和一件衣服相比，所有人都会选择半天的命。同样，大家也都会选择“多活”一年，而不会选择一部新车；更不会为了换一栋大房子而“少活”好些年。</p><p>另外一个重要因素就是如何看待自己的工作。如果考虑一个问题：假如财务自由了，你还会坚持现在的工作吗？你还有更想做的事情要做吗？我相信对于众多打工族来说，回答是否定的。毕竟，对于很多人来说，工作是一件费事费力费时间，但又不得不做的事情。</p><p>如果能够这样换位的思考问题的话，那么接下来就好说了。既然这些身外之物如此的不重要，那么，我们为什么不尽量节省开始，节省自己的生命呢？</p><p>从实施角度，Fire提出了一个方案：生活上要奉行极简主义，解决所有不必要的开支，尽快攒够每年生活费的25倍，然后就可以退休了。退休后依靠理财收益的4%生活。也就是说，25倍的存款x4%的理财收益，正好就是每年的生活费。于是，已经有一些人在35岁的时候就真的退休了。</p><p>在Fire中的极简主义，绝对是真的要极简。家中凡是超过一个月没有用过的东西，要全部处理掉。每当要购买新的东西时候，必须扔掉另一件东西。只有这样严格的控制，才能最大限度的控制自己的生活成本，早日存够那生活费的25%。</p><p>不过不得不说的是，每个人的思考角度可能都不一样。比如：对于家中有孩子的人来说，执行这个极简注意似乎就难度不少，成年人能省则省，但对于孩子来说，要做到这点难度似乎大了些。</p><p>但不论怎样，这种思维方式对我的冲击还是非常大的。以后真的需要好好思考一下自己的消费观了。</p>]]></content>
    
    <summary type="html">
    
      Fire运动
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>双扣</title>
    <link href="https://www.aafeng.uk/playingcard-game/"/>
    <id>https://www.aafeng.uk/playingcard-game/</id>
    <published>2021-05-29T05:44:11.432Z</published>
    <updated>2021-05-29T05:44:59.227Z</updated>
    
    <content type="html"><![CDATA[<p>这个周末正好赶上英国的银行假日，于是开车两个多小时造访了几年未见的朋友。难得住在朋友家，在孩子们都睡了之后，有了自己的时间。于是，又有机会重新开始双扣/拖拉机/炒地皮了！</p><p><img src="https://user-images.githubusercontent.com/63479035/120059323-bada9e80-c048-11eb-9157-1ada989c1fd2.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>其实说起这个经典纸牌游戏，我可以说是资深玩家。</p><p>记得在上中学的时候就已经学会了其基本规则，闲暇时就已经开始和小伙伴们切磋牌技了。大家最喜欢看到的就是拿到了拖拉机，最为激动的莫不过“钩到底”。两副纸牌不知承载了多少人快乐的回忆。。。</p><p>在上大学的时候，同学们来自天南地北，大家的生活习惯可能不尽相同，但对双扣的喜爱却如出一辙。于是，每当午/晚饭后，各个宿舍中就经常凑齐牌局。甚至就在晚自习回到宿舍，大家也在熄灯前抓紧时间切磋一把。</p><p>后来大学毕业后，在工作期间，第一家单位的群众双扣基础比较好，从各级领导到众多员工都喜欢这个游戏。当时甚至还在单位举办了双扣比赛。这么多年过去了，现在还记得当初我和搭档的惊险经历。在决胜关头，本来一直落后的我们绝地反超，搭档竟然用拖拉机干掉了对方的拖拉机。。。</p><p>在英国读书期间，结交了一帮朋友。大家每逢周末，就聚在一起共享美食。但更为重要的，是随后的“战斗”。当时经常通宵“战斗”，然后在每天清晨时分，大家纷纷各回各家，补觉。哎，这种日子已经一去不复返了。。。</p><p>当时最为有趣的一个回忆就是，喜欢看到打牌认真的人，尤其是双方都有一个打牌认真的人。在有些时候由于对规则的不同理解，在牌局上争的面红耳赤，牌局结束了仍然是挚友。。。</p><p>在全国各地，双扣的规则似乎不尽相同。于是每次“开战”前，大家都会先把规则统一了。原来曾经听说过“炒地皮”，但却从未想过要尝试一下。记得有一次在漫长的火车途中，经过朋友的建议，初次尝试，但一经尝试就爱上了这种感觉，真的是太刺激了，尤其是自己能炒的时候。</p><p>关于双扣的回忆可以说是太多了，先到这里，那边三缺一。。。</p>]]></content>
    
    <summary type="html">
    
      双扣
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>吐槽-英国小学的教科书</title>
    <link href="https://www.aafeng.uk/school-textbooks/"/>
    <id>https://www.aafeng.uk/school-textbooks/</id>
    <published>2021-05-27T22:21:38.389Z</published>
    <updated>2021-05-27T22:22:56.840Z</updated>
    
    <content type="html"><![CDATA[<p>孩子们的Half term又开始了。于是考虑检查一下他们功课的进度，看看是否需要查漏补缺。可是却感觉无从下手：孩子们根本就没有教科书。</p><p><img src="https://user-images.githubusercontent.com/63479035/119903917-5ed92280-bf41-11eb-8228-fd7d27f0f7d3.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>这个问题可以说是由来已久了。孩子们刚入学的时候，总是想看看他们都学习些什么，进度如何，但翻来翻去，他们的书包中没有任何线索。只有在开家长会的时候，直接问老师才能得到想要的信息。</p><p>在英国的教育体系中，分为Key Stage 1/2/3/4/5几个阶段。其中的小学部分包括KS1和KS2，是根本没有教科书的。甚至到了中学的KS3，也是没有教科书的。只有到了GCSE和A Levels，才会有一些经典的教科书和练习册。</p><p>久而久之，也就慢慢习惯了这个事实。所有学校的教学都会遵循相应的大纲。但教材，没有统一规定，完全是由老师们自由发挥。</p><p>因此有些时候如果遇到个别家长，问起了教科书的问题。几乎可以立刻肯定，他们极有可能是刚到英国，对这里的教育制度不是很了解。</p><p>前段lockdown期间，学校给孩子们发了很多练习册。每天老师在zoom上稍微讲一讲，然后孩子们的主要任务就是按照练习册的内容进行练习。当时的感觉真的很好：一册在手，尽在掌控。孩子目前正在学习的知识点，掌握程度等等都一清二楚。</p><p>如果想要给孩子们开小灶的话，或者参加一些课外辅导班，在辅导班中老师会系统的介绍该学习的内容。或者给孩子购买课外辅导书，按照书的进度查漏补缺。</p>]]></content>
    
    <summary type="html">
    
      吐槽-英国小学的教科书
    
    </summary>
    
      <category term="育儿" scheme="https://www.aafeng.uk/categories/%E8%82%B2%E5%84%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>Rasberry覆盆子</title>
    <link href="https://www.aafeng.uk/rasberry/"/>
    <id>https://www.aafeng.uk/rasberry/</id>
    <published>2021-05-25T20:21:21.738Z</published>
    <updated>2021-05-25T20:21:56.150Z</updated>
    
    <content type="html"><![CDATA[<p>最近超市中的很多应季水果不断上市了，其中就包括Rasberry覆盆子/树莓这种我非常喜欢的水果。</p><p><img src="https://user-images.githubusercontent.com/63479035/119562856-bc813980-bd9e-11eb-9b33-15e0f9d9b19f.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>其实要说应季，似乎也不准确。在英国这里的覆盆子都是在9/10月份才熟的。只有到了秋季，才能去农场中采摘。现在市面上的应该是温室里出产的吧。</p><p>覆盆子这种水果的营养价值非常高，富含各种维生素和氨基酸。记得原来在购买HB家保健品的时候，他家就专门宣传覆盆子对女性特别好，还能改善肤质。</p><p>如果能够赶上应季的覆盆子的话，其果实非常酸甜可口。但缺点就是不易储藏。有些时候买回来放在冰箱中忘记吃了，过了几天后就都烂掉了。</p><p>我对覆盆子最大的印象就是其超级顽强的生命力。在我办公室的周围，长了很多的覆盆子。记得还在办公室上班的时候，每逢秋天，我就喜欢拿着一个小塑料袋去采摘一些覆盆子。这样每天午餐时都不用带水果了。</p><p>家中曾经种过一颗覆盆子，主要是想在秋季体验一下采摘的乐趣。但让我没有想到的就是，没过多长时间，这棵覆盆子就从花园中的一个偏僻角落不断扩展其“版图”，如果再不加制止的话，极有可能会长成一大片。。。</p><p>由于覆盆子的产量很高，繁殖力又强，因此极有可能在秋季的时候会收获很多的覆盆子。前面也提到了，一旦成熟，其保质期有非常短。因此，很多人都喜欢用它来做果酱。</p><p>非常喜欢这种美味又生命力顽强的水果。</p>]]></content>
    
    <summary type="html">
    
      Rasberry覆盆子
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>奇葩职业-拖延症监督师</title>
    <link href="https://www.aafeng.uk/procrastination/"/>
    <id>https://www.aafeng.uk/procrastination/</id>
    <published>2021-05-25T19:40:40.425Z</published>
    <updated>2021-05-25T19:44:04.223Z</updated>
    
    <content type="html"><![CDATA[<p>前两天刚提到过自家娃的拖延症，今天就看到有人介绍拖延症监督师这个从未听说过的职业。</p><p><img src="https://user-images.githubusercontent.com/63479035/119558825-d2d8c680-bd99-11eb-917b-17f50d050cc9.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>所谓拖延症监督师，就是你付钱给别人，这些人在你屁股后面不停的检查你的各种进度。根据你选择的套餐，可以一天检查一次，早中晚检查，甚至更为频繁的检查。</p><p>可能由于是这个职业的特殊性，毕竟是很不招人待见的。因此从事这个行业的以女性为主。想想也是，如果双方都是男士，一个催，一个不想让催，争执起来，只怕要干仗。</p><p>在某宝上搜了一下，还真的有这样的店铺。销量超过500，评价数也100+。看样子这项服务还很受欢迎。真的可以说是花钱找罪受。</p><p>看了一下详细信息，还真的很吸引人。</p><p>比如说：和一些APP，闹钟等的比较。毕竟这些东西都是死的。就说闹钟吧，我想大家都有过类似的经历，闹钟响了之后，第一反应是按一下闹钟，继续睡。。。而APP和闹钟无法解决的问题包括人的情绪波动，厌学，以及和人的沟通等等问题。</p><p>而上面提到的问题，一个具备良好沟通能力的小姐姐所能起到的作用肯定要比任何APP和闹钟都要好上很多。。。</p><p>而且针对客户的特点，还可以分派不同的监督员，比如擅长体育的，擅长艺术的，工科生，211院校的。有了这些人的陪伴，不仅能改掉坏习惯，还能交上朋友。。。</p><p>真的有些动心了，请个小姐姐监督一下家中的孩子。。。</p>]]></content>
    
    <summary type="html">
    
      奇葩职业-拖延症监督师
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>React中的表单组件Formik学习笔记</title>
    <link href="https://www.aafeng.uk/formik-notes/"/>
    <id>https://www.aafeng.uk/formik-notes/</id>
    <published>2021-05-20T11:44:06.000Z</published>
    <updated>2021-06-07T08:59:48.672Z</updated>
    
    <content type="html"><![CDATA[<p>以下的学习笔记和代码源于<a href="https://formik.org/docs/tutorial" rel="external nofollow noopener noreferrer" target="_blank">官网</a>，但并不是对官方文档的翻译，而是我自己的理解和记录。</p><a id="more"></a><p>Formik是一组用于创建表单的React组件。它主要是解决以下几个问题的：</p><ul><li>从表单组件状态中获取状态</li><li>表单验证及错误消息</li><li>表单提交</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>yarn add formik</code></pre><h2 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h2><p>这是官方提供的一个简单示例：</p><pre><code>import React from &apos;react&apos;;import { useFormik } from &apos;formik&apos;;export default function SignupForm() {    const formik = useFormik({        initialValues: {            email: &apos;&apos;,        },        onSubmit: values =&gt; {            alert(JSON.stringify(values, null, 2));        }    });    return (        &lt;form onSubmit={formik.handleSubmit}&gt;        &lt;label htmlFor=&quot;email&quot;&gt;Email Address&lt;/label&gt;        &lt;input            id=&quot;email&quot;            name=&quot;email&quot;            type=&quot;email&quot;            onChange={formik.handleChange}            value={formik.values.email}        /&gt;        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;        &lt;/form&gt;    );};</code></pre><p>在上面的例子中，使用了useFormik钩子。在程序中传递给useFormik两个参数：</p><pre><code>* initialValues: 表单中的初始值* onSubmit: 提交表单时的回调函数</code></pre><p>useFormik钩子函数的返回值中包含了：</p><pre><code>* handleSubmit: 表单提交时的处理函数，它会调用我们实现的onSubmit函数* handleChange: 值变更时的处理函数，它会在input,select,textarea等表单字段值变化时被调用* values: 表单所有字段的当前值，可以通过formik.values.email的方式访问</code></pre><p>从上面例子可以看到，我们将表单中的输入字段和props连接到了一起。这样就避免了自己管理所有表单字段以及自定义的事件处理函数。通过useFormik这个钩子把所有的值，及回调函数统一进行管理。</p><p>当表单变得更加复杂的时候，原理也是一样的。比如：再添加两个字段：firstName, lastName的方式也是一样的：</p><pre><code>const formik = useFormik({    initialValues: {        firstName: &apos;&apos;,        lastName: &apos;&apos;,        email: &apos;&apos;,    },    onSubmit: values =&gt; {        alert(JSON.stringify(values, null, 2));    }});</code></pre><p>以及表单部分：</p><pre><code>&lt;label htmlFor=&quot;firstName&quot;&gt;First Name&lt;/label&gt;&lt;input    id=&quot;firstName&quot;    name=&quot;firstName&quot;    type=&quot;text&quot;    onChange={formik.handleChange}    value={formik.values.firstName}/&gt;&lt;br/&gt;&lt;label htmlFor=&quot;lastName&quot;&gt;Last Name&lt;/label&gt;&lt;input    id=&quot;lastName&quot;    name=&quot;lastName&quot;    type=&quot;text&quot;    onChange={formik.handleChange}    value={formik.values.lastName}/&gt;&lt;br/&gt;</code></pre><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>在进行表单验证的时候，可以选择HTML原生的验证方法，比如: required, maxlength等等。但这种验证方式又其限制，比如：</p><ul><li>仅能用于浏览器中，在Reactive Native中不能工作。</li><li>错误提示都是固定的，无法自定义错误提示信息。</li></ul><p>通过Formik，可以管理验证规则及自定义的错误提示信息。首先定义验证规则：</p><pre><code>const validate = values =&gt; {    const errors = {};    if (!values.firstName) {      errors.firstName = &apos;Required&apos;;    } else if (values.firstName.length &gt; 15) {      errors.firstName = &apos;Must be 15 characters or less&apos;;    }    if (!values.lastName) {      errors.lastName = &apos;Required&apos;;    } else if (values.lastName.length &gt; 20) {      errors.lastName = &apos;Must be 20 characters or less&apos;;    }    if (!values.email) {      errors.email = &apos;Required&apos;;    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {      errors.email = &apos;Invalid Email。&apos;;    }    return errors;};</code></pre><p>可以看到，在上面可以灵活的定义各种验证规则，比如：firstName非空，同时必须小于15个字符串。接下来需要将validate传递给useFormik：</p><pre><code>const formik = useFormik({    initialValues: {        firstName: &apos;&apos;,        lastName: &apos;&apos;,        email: &apos;&apos;,    },    validate,    onSubmit: values =&gt; {        alert(JSON.stringify(values, null, 2));    }});</code></pre><p>同时，在React组件中输入项的相关位置，添加错误提示信息：</p><pre><code>{formik.errors.firstName ? &lt;div&gt;{formik.errors.firstName}&lt;/div&gt; : null}</code></pre><h2 id="Visited-fields"><a href="#Visited-fields" class="headerlink" title="Visited fields"></a>Visited fields</h2><p>在formik中有一个概念，叫做”Visited fields”。其设计的出发点在于：如果用户还没有完成输入，我们就不应进行验证。只有在用户完成输入时，才进行验证。而”Visited fields”就可以用来记录用户已经完成的输入到“touched”这个字段中。</p><p>首先需要在所有表单字段中添加：<strong>onBlur={formik.handleBlur}</strong>：</p><pre><code>&lt;input id=&quot;firstName&quot; name=&quot;firstName&quot; type=&quot;text&quot; onChange={formik.handleChange} onBlur={formik.handleBlur} value={formik.values.firstName}</code></pre><p>接下来，就可以通过检查”touched”的值来决定是否要显示错误提示：</p><pre><code>{formik.touched.firstName &amp;&amp; formik.errors.firstName ? (    &lt;div&gt;{formik.errors.firstName}&lt;/div&gt;) : null}</code></pre><h2 id="通过Yup进行表单验证"><a href="#通过Yup进行表单验证" class="headerlink" title="通过Yup进行表单验证"></a>通过Yup进行表单验证</h2><pre><code>yarn add yup</code></pre><p>使用Yup能够大大简化表单验证的代码，避免我们在进行表单验证的时候自己写代码：</p><pre><code>const formik = useFormik({ initialValues: {   firstName: &apos;&apos;,   lastName: &apos;&apos;,   email: &apos;&apos;, }, validationSchema: Yup.object({   firstName: Yup.string()     .max(15, &apos;Must be 15 characters or less&apos;)     .required(&apos;Required&apos;),   lastName: Yup.string()     .max(20, &apos;Must be 20 characters or less&apos;)     .required(&apos;Required&apos;),   email: Yup.string().email(&apos;Invalid email address&apos;).required(&apos;Required&apos;), }), onSubmit: values =&gt; {   alert(JSON.stringify(values, null, 2)); },</code></pre><p>   });</p><h2 id="使用getFieldProps-简化事件响应代码"><a href="#使用getFieldProps-简化事件响应代码" class="headerlink" title="使用getFieldProps()简化事件响应代码"></a>使用getFieldProps()简化事件响应代码</h2><p>在前面的输入字段中，多次重复性的使用了onChange=xxx, onBlur=xxx:</p><pre><code>&lt;input    id=&quot;firstName&quot;    name=&quot;firstName&quot;    type=&quot;text&quot;    onChange={formik.handleChange}    onBlur={formik.handleBlur}    value={formik.values.firstName}/&gt;</code></pre><p>其实这是可以简化的。比如：</p><pre><code>&lt;input id=&quot;firstName&quot; type=&quot;text&quot; {...formik.getFieldProps(&apos;firstName&apos;)}/&gt;</code></pre><h2 id="简化代码的方式"><a href="#简化代码的方式" class="headerlink" title="简化代码的方式"></a>简化代码的方式</h2><p>可以选择使用<formik>组件，而不是useFormik() hook：</formik></p><pre><code>import React from &apos;react&apos;;import { Formik, Field, Form, ErrorMessage } from &apos;formik&apos;;import * as Yup from &apos;yup&apos;;const SignupForm = () =&gt; {  return (    &lt;Formik      initialValues={{ firstName: '', lastName: '', email: '' }}      validationSchema={Yup.object({        firstName: Yup.string()          .max(15, &apos;Must be 15 characters or less&apos;)          .required(&apos;Required&apos;),        lastName: Yup.string()          .max(20, &apos;Must be 20 characters or less&apos;)          .required(&apos;Required&apos;),        email: Yup.string().email(&apos;Invalid email address&apos;).required(&apos;Required&apos;),      })}      onSubmit={(values, { setSubmitting }) =&gt; {        setTimeout(() =&gt; {          alert(JSON.stringify(values, null, 2));          setSubmitting(false);        }, 400);      }}    &gt;      &lt;Form&gt;        &lt;label htmlFor=&quot;firstName&quot;&gt;First Name&lt;/label&gt;        &lt;Field name=&quot;firstName&quot; type=&quot;text&quot; /&gt;        &lt;ErrorMessage name=&quot;firstName&quot; /&gt;        &lt;label htmlFor=&quot;lastName&quot;&gt;Last Name&lt;/label&gt;        &lt;Field name=&quot;lastName&quot; type=&quot;text&quot; /&gt;        &lt;ErrorMessage name=&quot;lastName&quot; /&gt;        &lt;label htmlFor=&quot;email&quot;&gt;Email Address&lt;/label&gt;        &lt;Field name=&quot;email&quot; type=&quot;email&quot; /&gt;        &lt;ErrorMessage name=&quot;email&quot; /&gt;        &lt;Field name=&quot;colors&quot; as=&quot;select&quot; className=&quot;my-select&quot;&gt;          &lt;option value=&quot;red&quot;&gt;Red&lt;/option&gt;          &lt;option value=&quot;green&quot;&gt;Green&lt;/option&gt;          &lt;option value=&quot;blue&quot;&gt;Blue&lt;/option&gt;        &lt;/Field&gt;        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;      &lt;/Form&gt;    &lt;/Formik&gt;  );};</code></pre><p>在Formik中，还可以通过使用useField hook来创建自己的组件，这样自己的组件就可以重用。同时，在Formik组件中可以使用自定义的组件：</p><pre><code>import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import { Formik, Form, useField } from &apos;formik&apos;;import * as Yup from &apos;yup&apos;;const MyTextInput = ({ label, ...props }) =&gt; {  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]  // which we can spread on &lt;input&gt;. We can use field meta to show an error  // message if the field is invalid and it has been touched (i.e. visited)  const [field, meta] = useField(props);  return (    &lt;&gt;      &lt;label htmlFor={props.id || props.name}&gt;{label}&lt;/label&gt;      &lt;input className=&quot;text-input&quot; {...field} {...props} /&gt;      {meta.touched &amp;&amp; meta.error ? (        &lt;div className=&quot;error&quot;&gt;{meta.error}&lt;/div&gt;      ) : null}    &lt;/&gt;  );};const MyCheckbox = ({ children, ...props }) =&gt; {  // React treats radios and checkbox inputs differently other input types, select, and textarea.  // Formik does this too! When you specify `type` to useField(), it will  // return the correct bag of props for you -- a `checked` prop will be included  // in `field` alongside `name`, `value`, `onChange`, and `onBlur`  const [field, meta] = useField({ ...props, type: &apos;checkbox&apos; });  return (    &lt;div&gt;      &lt;label className=&quot;checkbox-input&quot;&gt;        &lt;input type=&quot;checkbox&quot; {...field} {...props} /&gt;        {children}      &lt;/label&gt;      {meta.touched &amp;&amp; meta.error ? (        &lt;div className=&quot;error&quot;&gt;{meta.error}&lt;/div&gt;      ) : null}    &lt;/div&gt;  );};const MySelect = ({ label, ...props }) =&gt; {  const [field, meta] = useField(props);  return (    &lt;div&gt;      &lt;label htmlFor={props.id || props.name}&gt;{label}&lt;/label&gt;      &lt;select {...field} {...props} /&gt;      {meta.touched &amp;&amp; meta.error ? (        &lt;div className=&quot;error&quot;&gt;{meta.error}&lt;/div&gt;      ) : null}    &lt;/div&gt;  );};// And now we can use theseconst SignupForm = () =&gt; {  return (    &lt;&gt;      &lt;h1&gt;Subscribe!&lt;/h1&gt;      &lt;Formik        initialValues={{               firstName: '',               lastName: '',               email: '',               acceptedTerms: false, // added for our checkbox               jobType: '', // added for our select             }}        validationSchema={Yup.object({          firstName: Yup.string()            .max(15, &apos;Must be 15 characters or less&apos;)            .required(&apos;Required&apos;),          lastName: Yup.string()            .max(20, &apos;Must be 20 characters or less&apos;)            .required(&apos;Required&apos;),          email: Yup.string()            .email(&apos;Invalid email address&apos;)            .required(&apos;Required&apos;),          acceptedTerms: Yup.boolean()            .required(&apos;Required&apos;)            .oneOf([true], &apos;You must accept the terms and conditions.&apos;),          jobType: Yup.string()            .oneOf(              [&apos;designer&apos;, &apos;development&apos;, &apos;product&apos;, &apos;other&apos;],              &apos;Invalid Job Type&apos;            )            .required(&apos;Required&apos;),        })}        onSubmit={(values, { setSubmitting }) =&gt; {          setTimeout(() =&gt; {            alert(JSON.stringify(values, null, 2));            setSubmitting(false);          }, 400);        }}      &gt;        &lt;Form&gt;          &lt;MyTextInput            label=&quot;First Name&quot;            name=&quot;firstName&quot;            type=&quot;text&quot;            placeholder=&quot;Jane&quot;          /&gt;          &lt;MyTextInput            label=&quot;Last Name&quot;            name=&quot;lastName&quot;            type=&quot;text&quot;            placeholder=&quot;Doe&quot;          /&gt;          &lt;MyTextInput            label=&quot;Email Address&quot;            name=&quot;email&quot;            type=&quot;email&quot;            placeholder=&quot;jane@formik.com&quot;          /&gt;          &lt;MySelect label=&quot;Job Type&quot; name=&quot;jobType&quot;&gt;            &lt;option value=&quot;&quot;&gt;Select a job type&lt;/option&gt;            &lt;option value=&quot;designer&quot;&gt;Designer&lt;/option&gt;            &lt;option value=&quot;development&quot;&gt;Developer&lt;/option&gt;            &lt;option value=&quot;product&quot;&gt;Product Manager&lt;/option&gt;            &lt;option value=&quot;other&quot;&gt;Other&lt;/option&gt;          &lt;/MySelect&gt;          &lt;MyCheckbox name=&quot;acceptedTerms&quot;&gt;            I accept the terms and conditions          &lt;/MyCheckbox&gt;          &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;        &lt;/Form&gt;      &lt;/Formik&gt;    &lt;/&gt;  );};</code></pre><h2 id="在Formik中使用checkbox-tree"><a href="#在Formik中使用checkbox-tree" class="headerlink" title="在Formik中使用checkbox tree"></a>在Formik中使用checkbox tree</h2><p><a href="https://github.com/jakezatecky/react-checkbox-tree" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jakezatecky/react-checkbox-tree</a></p>]]></content>
    
    <summary type="html">
    
      React中的表单组件Formik学习笔记
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="https://www.aafeng.uk/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>驯龙高手How to Train Your Dragon剧情介绍</title>
    <link href="https://www.aafeng.uk/how-to-train-your-dragon/"/>
    <id>https://www.aafeng.uk/how-to-train-your-dragon/</id>
    <published>2021-05-16T09:15:23.399Z</published>
    <updated>2021-05-16T09:16:45.757Z</updated>
    
    <content type="html"><![CDATA[<p>这个周末，女儿选择了一个影片：《How to Train Your Dragon/驯龙高手》。她选择这个电影的原因很简单：在学校种很多小朋友经常谈论这部电影种的角色，她也想了解一下，以后和朋友们就更有的聊了。</p><p><img src="https://user-images.githubusercontent.com/63479035/118392026-43ac1000-b62f-11eb-9ba0-5dad792c9ec6.png" alt="image"><br>Source: Pixabay</p><p>其实，龙这种生物在中西方文化中都频繁出现。只不过在中国文化中，龙是一种尊贵的象征，在过去还是皇家的形象代表。龙总是和水这种元素相关联。而在西方文化中，龙总是一种邪恶的象征，人类总是和龙在不断的斗争。龙的一个必杀技就是：喷火。</p><p>在这部电影中，开头处就是著名的维京人在和龙群的战斗场面。龙群来这里抢夺维京人圈养的牲畜。长相各异的龙在不断的喷火，使得维京人的营地一片火光。彪悍的维京人也毫不示弱，和龙群殊死搏斗。最为凶悍的就是维京人的族长Stoick the vast，和他PK的龙都不是对手。。。</p><p>在传说中，龙群中最为神秘，也最为危险的一种叫做夜煞。他们速度极快，来无影，去无踪，同时也最为聪明，因此从未失过手。所有见过夜煞的人都已经是死人了。</p><p>在部落的另一头，出现了族长的儿子Hiccup。他丝毫没有继承族长的基因，长得非常瘦弱。因此族长根本就不允许他和龙群战斗，只是让Hiccup做了铁匠Gobber的徒弟，和他学习打铁。但Hiccup并不甘于只是蜷缩在铁匠铺中，而是想要出去和其他族人一样和龙群战斗。但他实在是太弱了，铁匠师父根本不允许他出门。</p><p>Hiccup悄悄的溜出了门，同时带上了自己的捕龙器。他坚信自己看到了夜煞，并已经将其捕获了。族人都不相信，纷纷嘲笑他。但他坚信自己的判断。终于，他找到了自己的捕龙器，并看到了一只夜煞。那么，自己是要杀了这只夜煞吗？在一番天人交战后，他决定把这只夜煞放了。同时，他也发现夜煞的尾部受损。</p><p>在Hiccup的帮助下，夜煞的尾部被修好了，他们也成了好朋友。同时，夜煞也有了一个名字：无牙。同时，Hiccup和无牙的配合也越来越好了。在无牙的帮助和指引下，Hiccup的驯龙技巧越来越熟练了。部落中捕获的各种龙在他的手下都乖乖的成了Hello Kitty。</p><p>Hiccup也发现了，其实过去部落中总是把龙族当成敌人的想法是错误的。其实众多恶龙都是被一只巨龙趋势来掠夺人类圈养的牲畜。</p><p>最终，维京人一族知道巨龙老巢，但在和巨龙的战斗中损失惨重。最后在Hiccup和无牙的配合下，终于战胜了巨龙，为维京族人消除了隐患。。。</p>]]></content>
    
    <summary type="html">
    
      驯龙高手How to Train Your Dragon剧情介绍
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
