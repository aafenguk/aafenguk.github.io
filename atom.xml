<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aafeng</title>
  <icon>https://www.gravatar.com/avatar/a176a52d9d4ac7d9f90a5204a7d87bcd</icon>
  <subtitle>aafeng&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aafeng.uk/"/>
  <updated>2021-09-21T17:19:54.912Z</updated>
  <id>https://www.aafeng.uk/</id>
  
  <author>
    <name>aafeng</name>
    <email>aafenguk@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好香的Headless CMS - Strapi</title>
    <link href="https://www.aafeng.uk/strapi/"/>
    <id>https://www.aafeng.uk/strapi/</id>
    <published>2021-09-21T17:19:54.908Z</published>
    <updated>2021-09-21T17:19:54.912Z</updated>
    
    <content type="html"><![CDATA[<p>尝试了一下strapi，感觉真的很香，几分钟就能搭建起后台的REST API服务，同时还支持很多插件，比如graphql插件，这就大大加快了开发的速度。</p><p><img src="https://user-images.githubusercontent.com/63479035/134215437-b400282f-8a92-4bac-8d26-37087fc3e323.png" alt="strapi"></p><a id="more"></a><p>其实，之所以喜欢它，最主要还是它的设计出发点：Headless CMS。也就是说，只提供操作数据的API，而不像Wordpress那样同时提供操作数据的UI。（严格的讲，strapi也提供一个非常简单的数据操作界面）</p><p>一旦安装配置好之后，最重要的一步就是设计各种Content Type了，这就有点像关系型数据库中的表结构。这里共有三种不同类型的Content type: Collection type（针对有多个数据的类型，比如blog, user等）, Single type（针对只出现一次的类型，比如:homepage），以及Component（可反复使用的组件）。在设计时可选的字段类型很丰富：</p><p><img src="https://user-images.githubusercontent.com/63479035/134215681-e138a307-6093-499a-9f64-3920a5d5d2d8.png" alt="image"></p><p>等到这个Content type设计好了之后，strapi就会生成类似于：<a href="http://localhost:1337/reviews" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:1337/reviews</a> 这样的API地址，这样前段就可以非常方便的使用了。</p><p>当然，作为一个CMS，strapi自然支持Authn/Authz。可以将某项内容指定为public，也可以指定其访问权限，用户组等等。</p><p><img src="https://user-images.githubusercontent.com/63479035/134216463-2d89ce4f-9035-47a2-bd34-9304e5073d89.png" alt="image"></p><p>添加了graphql插件的后台就更加好用了：<br><img src="https://user-images.githubusercontent.com/63479035/134217053-dc31a9e2-682e-4549-b213-f5e308f3575b.png" alt="image"></p><p>后台API都搞定了，前台就可以非常愉快的使用Vue/React等玩耍了。。。</p>]]></content>
    
    <summary type="html">
    
      好香的Headless CMS - Strapi
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>租车</title>
    <link href="https://www.aafeng.uk/leasing-car/"/>
    <id>https://www.aafeng.uk/leasing-car/</id>
    <published>2021-09-14T16:31:57.151Z</published>
    <updated>2021-09-14T16:31:57.151Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直认为只有公司需要用车的时候才需要租车，尤其是长期租车。对于个人用户而言，只有临时车不够用了，或者临时需要更大些的车时，才需要租车。但前一段时间和朋友聊过之后，终于被种草了。最终下定决心，第二辆车不买了，改为租车。</p><p><img src="https://user-images.githubusercontent.com/63479035/133296787-fb09aefb-c634-4c0d-93c8-253ecb7957b3.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>在做调研的时候才发现，其实这两年来，租车已经在英国变得越来越流行了。越来越多的人在个人用车上也选择了租车，而不是买车。这样，按照每个月需要交付的钱来说，并不比买车多，但却可以一直开新车。</p><p>综合而言，租车的优势在于：</p><ul><li>不用担心修车的费用，一般租的车都是全新的，在保修期内。因此这些车出故障的几率小，就算出了，车厂也保修。就连一般的维护费用，甚至都包含在租车费用中。</li><li>无需向银行贷款，每月只需支付少量费用就可以。</li><li>因为租车费用较低，可以租用一些自己不会买，更高档次的车。</li><li>合同期满后可以再租用另一类最新款的车，这样就可以一直开新车了。</li><li>我们选择的租车公司还包路税，由于是新车，年检费用也省了。</li><li>如果选择电车，不用担心过几年后电池变得不好用了。反正到时候会换另外一辆新车。</li></ul><p>当然，租车的话也有一些小问题。比如：对于里程数是有限制的，如果超过是有罚款的。同时，如果租的车出现任何损坏，需要赔偿。不过这应该也不算问题吧，自己的车坏了同样需要修，大修走保险，小修自己承担，应该都是一样的。</p><p>现在就坐等新车来了。</p>]]></content>
    
    <summary type="html">
    
      租车
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>局域网文件传输工具 - SHAREit</title>
    <link href="https://www.aafeng.uk/shareit/"/>
    <id>https://www.aafeng.uk/shareit/</id>
    <published>2021-09-12T18:56:09.017Z</published>
    <updated>2021-09-15T20:01:17.166Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候经常需要在局域网内部的不同设备之间传输文件。在此之前曾经用过飞鸽传书但已经有些年不再使用了。对于小文件也用过Telegram直接传。但在有些时候需要传输大文件的时候就需要一个专门的局域网文件传输工具了，这里推荐使用SHAREit。</p><p><img src="https://user-images.githubusercontent.com/63479035/132983511-79d12701-286d-48a7-a335-1a5d31dff4d4.png" alt="image"><br>图源：官网截图</p><a id="more"></a><p>这是一个完全免费的软件，支持Windows，Mac，苹果/安卓/Windows手机。当然，既然免费，在使用过程中偶尔会弹出广告。</p><p>首先从<a href="https://www.ushareit.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载并安装，之后启动SHAREit会看到这个界面：</p><p><img src="https://user-images.githubusercontent.com/63479035/133500978-988582ba-d82b-4c04-aba7-d5ba51d44434.png" alt="image"></p><p>如果想要和手机端互传文件的话，需要下载并安装手机客户端。之后通过手机端扫描PC端的二维码，就可以看到如下界面：</p><p><img src="https://user-images.githubusercontent.com/63479035/133501208-95cc2985-87c1-44f4-84e6-34f681866b95.png" alt="image"></p><p>然后就可以开始传输文件了，无论是自己上传还是拖拽都可以：</p><p><img src="https://user-images.githubusercontent.com/63479035/132999104-7aeb82f4-3c88-4c08-bce7-d2fca0c0c4e1.png" alt="image"></p><p>功能非常单一但是好用。推荐！</p>]]></content>
    
    <summary type="html">
    
      局域网文件传输工具 - SHAREit
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="https://www.aafeng.uk/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>好香的定制工作流工具 - Pipedream</title>
    <link href="https://www.aafeng.uk/pipedream/"/>
    <id>https://www.aafeng.uk/pipedream/</id>
    <published>2021-08-28T09:41:47.582Z</published>
    <updated>2021-08-28T09:45:02.935Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了Pipedream这个在线自动化工具，试用了一下，感觉非常好。通过Pipedream，可以自己定义在线工作流。总结一下，它的以下特点最为吸引我：</p><ul><li>良心的免费版本。其免费版本中包括了每月10，000次的调用。相当于每天333次调用。这对于个人用户来说，肯定是够用了。同时对工作流，连接的app，事件源都没有任何限制。</li><li>用户可以自己定义Node.js代码，完全控制工作流。</li><li>完全的无服务器架构，完全不需要自己的服务器就可以自定义很多操作。</li></ul><a id="more"></a><p>这样看来，可以把服务器上的很多cron job都挪到Pipedream上来了。前段时间进行了尝试，把一些cron job挪到了AWS serverless上。尽管AWS的费用并不高，但过了一年试用期后毕竟还是要交费的。而Pipedream这个免费服务似乎就更香了。</p><p>拿自己服务器上的一些cron job来举例来说明Pipedream的用途：</p><ul><li>每天定时检测RSS源，如果有更新，就通过slack/telegram/discord/email消息通知我。</li><li>每天定时检测某个用户的twitter，如果有更新，通知自己。</li><li>调用某个服务器的API，定时给自己发送通知。</li><li>监测Hive CN群中新帖，给大家点赞。</li></ul><p>感觉这些功能应该都很容易的使用Pipedream来实现。</p><p>下面举一个简单的例子来说明Pipedream的使用。</p><p>首先，通过OAuth登录，我这里选择的是通过Google来登录的，同时还可以选择Github账户授权登录。</p><p>登录成功后，创建一个工作流(workflow)。可以看到，有很多的触发器(triggers)，比如：HTTP/Webhook, Twitter, Slack, Telegram, RSS, Email等等。这样工作流的触发条件就非常灵活了。</p><p><img src="https://user-images.githubusercontent.com/63479035/131211967-6f26719d-08e5-4d0b-a8be-b644d7ecad18.png" alt="image"></p><p>比如：我这里选择使用RSS源作为触发器。如下图所示，使用端传媒的RSS作为触发条件：</p><p><img src="https://user-images.githubusercontent.com/63479035/131212245-5437bd76-6911-48d3-b819-103cf9e3adb1.png" alt="image"></p><p>可以看到Pipedream会自动获取最新的RSS作为测试数据源；</p><p><img src="https://user-images.githubusercontent.com/63479035/131212384-61e02c30-1776-429e-a207-c35e7eb53c8d.png" alt="image"></p><p>接下来需要定义下一步的动作了，比如选择最为简单的给自己发送邮件：</p><p>在这一步中，可以选择上一步的输出作为邮件的主体/正文</p><p><img src="https://user-images.githubusercontent.com/63479035/131212686-44725d8c-6774-466c-be74-14eb9cccb0fb.png" alt="image"></p><p>最终选择之后的结果是这样的：</p><p><img src="https://user-images.githubusercontent.com/63479035/131213309-0935d11e-e7ac-4b00-91f4-7dd6b1896845.png" alt="image"></p><p>部署并测试一下，很快就收到了邮件：</p><p><img src="https://user-images.githubusercontent.com/63479035/131213350-5a87df8c-6bf9-47bd-80eb-bd5425a995ac.png" alt="image"></p><p>可以看到，通过Pipedream可以非常方便的定义自己的工作流。</p>]]></content>
    
    <summary type="html">
    
      好香的定制工作流工具 - Pipedream
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Pipedream" scheme="https://www.aafeng.uk/tags/Pipedream/"/>
    
  </entry>
  
  <entry>
    <title>如何在Express.js中使用Pasport.js进行OAuth(Google,Facebook等)登录</title>
    <link href="https://www.aafeng.uk/oauth-express-passport/"/>
    <id>https://www.aafeng.uk/oauth-express-passport/</id>
    <published>2021-08-12T14:27:41.228Z</published>
    <updated>2021-08-12T15:44:22.027Z</updated>
    
    <content type="html"><![CDATA[<p>现在在Web应用程序中使用OAuth登录非常普遍。好处可以说是太多了。对于用户来说，避免再记一个密码。 对于服务方来说，避免保存用户信息，增加安全性，同时避免了很多麻烦，比如数据隐私。 </p><p><img src="/images/technology/nodejs/oauth.png" alt="OAuth登录"></p><a id="more"></a><p>技术栈：</p><ul><li>Node.js</li><li>Express</li><li>MongoDB</li><li>Passport.js</li></ul><h2 id="配置基本Express应用"><a href="#配置基本Express应用" class="headerlink" title="配置基本Express应用"></a>配置基本Express应用</h2><h3 id="基本Express-APP"><a href="#基本Express-APP" class="headerlink" title="基本Express APP"></a>基本Express APP</h3><p>首先创建基本的Express应用程序。</p><pre><code>mkdir oauth-democd oauth-demonpm init</code></pre><p>安装依赖库：</p><pre><code>npm install -g nodemonnpm install express ejs mongoose passport passport-google-oauth20 cookie-session</code></pre><h3 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h3><pre><code>mkdir configmkdir modelsmkdir routesmkdir views</code></pre><h3 id="添加基本文件"><a href="#添加基本文件" class="headerlink" title="添加基本文件"></a>添加基本文件</h3><p>添加app.js:</p><pre><code>const express = require(&apos;express&apos;);const routes = require(&apos;./routes/index&apos;);const app = express();// 使用EJS模板app.set(&apos;view engine&apos;, &apos;ejs&apos;);// 定义路由app.use(&apos;/&apos;, routes);app.listen(3000, &apos;0.0.0.0&apos;, () =&gt; {    console.log(&apos;Listening on port 3000.&apos;);});module.exports = app;</code></pre><p>添加文件routes/index.js:</p><pre><code>const express = require(&apos;express&apos;);const router = express.Router();router.get(&apos;/&apos;, (req, res) =&gt; {    res.render(&apos;index&apos;, { user: req.user });});module.exports = router;</code></pre><p>添加文件：views/index.ejs:</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    Homepage&lt;/body&gt;&lt;/html&gt;</code></pre><p>启动app：</p><pre><code>nodemon app</code></pre><p>就可以在3000端口访问应用了。</p><h3 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h3><p>MongoDB官网的免费账户可以使用0.5 GB的空间，这作为学习用是足够的了。官网可以通过Google账号直接登录，非常方便。</p><p>选择Build a Database：<br><img src="https://user-images.githubusercontent.com/63479035/128933345-0355d160-100f-485e-92db-a792bd2c78f1.png" alt="image"></p><p>选择免费版本。</p><p>在之后的Cloud Provider，我选择的是AWS，region中我选择距离我最近的Ireland。之后选择创建集群。</p><p>之后创建一个Database及Collection：<br><img src="https://user-images.githubusercontent.com/63479035/128934645-9650bbf6-a34a-40a6-a5aa-651ac8196eb1.png" alt="image"></p><p>单击下面的Connect获取连接字符串：<br><img src="https://user-images.githubusercontent.com/63479035/128934823-979ad4a3-cae4-4bc7-8ce9-6e24ad979623.png" alt="image"></p><p>这样你将获取一个类似如下的连接字符串：</p><pre><code>mongodb+srv://dbUser:&lt;password&gt;@cluster0.t8uav.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority</code></pre><p>这个信息不要提交到git仓库中，建议可以保存在一个特殊的文件中，比如：config/credentials.js:</p><pre><code>module.exports = {    mongodb: {        URI: &apos;mongodb+srv://dbUser:password@cluster0.t8uav.mongodb.net/aafeng?retryWrites=true&amp;w=majority&apos;    }};</code></pre><p>同时更新.gitignore文件：</p><pre><code>node_modulesconfig/credentials.js</code></pre><h2 id="使用Bootstrap"><a href="#使用Bootstrap" class="headerlink" title="使用Bootstrap"></a>使用Bootstrap</h2><h3 id="添加views-header-ejs"><a href="#添加views-header-ejs" class="headerlink" title="添加views/header.ejs"></a>添加views/header.ejs</h3><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;OAuth&lt;/title&gt;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin=&quot;anonymous&quot;&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code></pre><h3 id="添加views-nav-ejs"><a href="#添加views-nav-ejs" class="headerlink" title="添加views/nav.ejs"></a>添加views/nav.ejs</h3><pre><code>&lt;!-- navbar --&gt;&lt;nav class=&quot;navbar navbar-expand-md navbar-light pt-5 pb-4&quot;&gt;    &lt;div class=&quot;container-xxl&quot;&gt;        &lt;!-- navbar brand / title --&gt;        &lt;span class=&quot;text-secondary fw-bold&quot;&gt;            OAuth Demo        &lt;/span&gt;        &lt;/a&gt;        &lt;ul class=&quot;navbar-nav&quot;&gt;            &lt;li class=&quot;nav-item&quot;&gt;            &lt;a class=&quot;nav-link&quot; href=&quot;/&quot;&gt;Home&lt;/a&gt;            &lt;/li&gt;            &lt;li class=&quot;nav-item&quot;&gt;            &lt;a class=&quot;nav-link&quot; href=&quot;/profile&quot;&gt;Profile&lt;/a&gt;            &lt;/li&gt;            &lt;li class=&quot;nav-item&quot;&gt;            &lt;a class=&quot;nav-link&quot; href=&quot;/login&quot;&gt;Login&lt;/a&gt;            &lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/nav&gt;</code></pre><h3 id="添加views-footer-ejs"><a href="#添加views-footer-ejs" class="headerlink" title="添加views/footer.ejs"></a>添加views/footer.ejs</h3><pre><code>&lt;footer&gt;    aafeng&apos;s blog&lt;/footer&gt;</code></pre><h3 id="添加index-ejs-profile-ejs-login-ejs"><a href="#添加index-ejs-profile-ejs-login-ejs" class="headerlink" title="添加index.ejs,profile.ejs,login.ejs"></a>添加index.ejs,profile.ejs,login.ejs</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;%- include(&apos;partials/header.ejs&apos;) %&gt;&lt;body&gt;    &lt;%- include(&apos;partials/nav.ejs&apos;) %&gt;    &lt;h2&gt;Homepage&lt;/h2&gt;    &lt;%- include(&apos;partials/footer.ejs&apos;) %&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="实现Google-OAuth登录"><a href="#实现Google-OAuth登录" class="headerlink" title="实现Google OAuth登录"></a>实现Google OAuth登录</h2><h3 id="添加routes-oauthRoutes-js"><a href="#添加routes-oauthRoutes-js" class="headerlink" title="添加routes/oauthRoutes.js"></a>添加routes/oauthRoutes.js</h3><pre><code>const router = require(&apos;express&apos;).Router();const passport = require(&apos;passport&apos;);// 注销router.get(&apos;/logout&apos;, (req, res) =&gt; {    req.logout();    res.redirect(&apos;/&apos;);});// 通过Google登录router.get(&apos;/google&apos;, passport.authenticate(&apos;google&apos;, {    scope:[&apos;profile&apos;]}));// Google登陆后的回调router.get(&apos;/google/redirect&apos;, passport.authenticate(&apos;google&apos;), (req, res)=&gt;{    // passport会自动将user信息添加到req中    // 登录完后自动跳转到/profile    res.redirect(&apos;/profile&apos;);})module.exports = router;</code></pre><h3 id="注册oauth路由"><a href="#注册oauth路由" class="headerlink" title="注册oauth路由"></a>注册oauth路由</h3><p>在app.js中，</p><pre><code>const oauthRoutes = require(&apos;./routes/oauthRoutes&apos;);app.use(&apos;/auth&apos;, oauthRoutes);</code></pre><h3 id="创建models-user-model-js"><a href="#创建models-user-model-js" class="headerlink" title="创建models/user-model.js"></a>创建models/user-model.js</h3><pre><code>const mongoose = require(&apos;mongoose&apos;);const Schema = mongoose.Schema;const userSchema = new Schema({    username: String,    provider_and_id: String,    thumbnail: String});const User = mongoose.model(&apos;user&apos;, userSchema);module.exports = User;</code></pre><h3 id="通过passport实现Google登录及用户创建-读取逻辑"><a href="#通过passport实现Google登录及用户创建-读取逻辑" class="headerlink" title="通过passport实现Google登录及用户创建/读取逻辑"></a>通过passport实现Google登录及用户创建/读取逻辑</h3><pre><code>const passport = require(&apos;passport&apos;);const GoogleStrategy = require(&apos;passport-google-oauth20&apos;);const credentials = require(&apos;./credentials&apos;);const User = require(&apos;../models/user-model&apos;);passport.serializeUser((user, done) =&gt; {    done(null, user.id);});passport.deserializeUser((id, done) =&gt; {    User.findById(id).then((user) =&gt; {        done(null, user);    });});passport.use(    new GoogleStrategy({        callbackURL: &apos;/auth/google/redirect&apos;,        clientID: credentials.google.clientID,        clientSecret: credentials.google.clientSecret    }, (accessToken, refreshToken, profile, done) =&gt; {        // 如果用户已经存在        User.findOne({provider_and_id: `google_${profile.id}`}).then((currentUser) =&gt; {            if(currentUser){                // already have this user                console.log(&apos;user is: &apos;, currentUser);                // do something                done(null, currentUser);            } else {                // if not, create user in our db                console.log(profile);                new User({                    provider_and_id: `google_${profile.id}`,                    username: profile.displayName,                    thumbnail: profile._json.picture                }).save().then((newUser) =&gt; {                    console.log(&apos;created new user: &apos;, newUser);                    // do something                    done(null, newUser);                });            }        });    }));</code></pre><p>在routes/oauthRoutes.js中：</p><pre><code>// 通过Google登录router.get(&apos;/google&apos;, passport.authenticate(&apos;google&apos;, {    scope:[&apos;profile&apos;]}));// Google登陆后的回调，这里仍需要调用中间件passport.authenticate(&apos;google&apos;)，// 用于和Google交换数据router.get(&apos;/google/redirect&apos;, passport.authenticate(&apos;google&apos;), (req, res)=&gt;{    // passport会自动将user信息添加到req中    // 登录完后自动跳转到/profile    res.redirect(&apos;/&apos;);})</code></pre><h3 id="通过session-cookie保存登录信息，并保护特定页面"><a href="#通过session-cookie保存登录信息，并保护特定页面" class="headerlink" title="通过session/cookie保存登录信息，并保护特定页面"></a>通过session/cookie保存登录信息，并保护特定页面</h3><p><strong>特别需要注意，添加cookie/session模块并在app.js中注册，否则passport无法保存登录状态！</strong></p><pre><code>const cookieSession = require(&apos;cookie-session&apos;);// 使用Cookieapp.use(cookieSession({    maxAge: 7 * 24 * 60 * 60 * 1000,  // Cookie保存一周    keys: [credentials.session.cookieKey]}));</code></pre><p>在/profile路由中指定auth中间件来保护这个页面，文件：routes/index.js:</p><pre><code>const authCheck = (req, res, next) =&gt; {    // console.log(req.user);    if(!req.user){        res.redirect(&apos;/login&apos;);    } else {        next();    }};router.get(&apos;/profile&apos;, authCheck, (req, res) =&gt; {    res.render(&apos;profile&apos;, { user: req.user });});</code></pre><p>在profile.ejs中：</p><pre><code>&lt;% if (user) { %&gt;    &lt;img src=&quot;&lt;%= user.thumbnail %&gt;&quot; /&gt;&lt;% } %&gt;</code></pre><h2 id="使用passport-js进行Facebook-OAuth登录"><a href="#使用passport-js进行Facebook-OAuth登录" class="headerlink" title="使用passport.js进行Facebook OAuth登录"></a>使用passport.js进行Facebook OAuth登录</h2><h3 id="创建facebook-app并获取clientID-amp-clientSecret"><a href="#创建facebook-app并获取clientID-amp-clientSecret" class="headerlink" title="创建facebook app并获取clientID &amp; clientSecret"></a>创建facebook app并获取clientID &amp; clientSecret</h3><p>访问：<a href="https://developers.facebook.com/" rel="external nofollow noopener noreferrer" target="_blank">https://developers.facebook.com/</a></p><p>需要注意的是，如果使用localhost:3000进行测试的话，需要<strong>创建一个Test App</strong>，而不是New App。在production环境下使用https时才能创建New App。</p><p>安装passport-facebook:</p><pre><code>npm install passport-facebook</code></pre><p>将facebook app的信息保存在config/credentials.js中：</p><pre><code>facebook: {  clientID: &apos;&apos;,  clientSecret: &apos;&apos;},</code></pre><p>在config/passport-init.js中，添加对FacebookStrtegy的初始化：</p><pre><code>const FacebookStrategy = require(&apos;passport-facebook&apos;).Strategy;passport.use(new FacebookStrategy({    callbackURL: &apos;/auth/facebook/redirect&apos;,    clientID: credentials.facebook.clientID,    clientSecret: credentials.facebook.clientSecret},function(accessToken, refreshToken, profile, done) {    // 如果用户已经存在    User.findOne({provider_and_id: `facebook_${profile.id}`}).then((currentUser) =&gt; {        if(currentUser){            // already have this user            console.log(&apos;user is: &apos;, currentUser);            // do something            done(null, currentUser);        } else {            // if not, create user in our db            console.log(profile);            new User({                provider_and_id: `facebook_${profile.id}`,                username: profile.displayName,                thumbnail: profile.profileUrl            }).save().then((newUser) =&gt; {                console.log(&apos;created new user: &apos;, newUser);                // do something                done(null, newUser);            });        }    });}));</code></pre><p>其余部分，比如： /auth/facebook，/auth/facebook/redirect的路由和Google登录类似，这里就不赘叙了。</p>]]></content>
    
    <summary type="html">
    
      如何在Express.js中使用OAuth(Google,Facebook等)进行登录
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Javascript" scheme="https://www.aafeng.uk/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs开发常用库总结</title>
    <link href="https://www.aafeng.uk/nodejs-libraries/"/>
    <id>https://www.aafeng.uk/nodejs-libraries/</id>
    <published>2021-07-05T08:35:22.457Z</published>
    <updated>2021-07-12T10:49:58.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="超快的Vite"><a href="#超快的Vite" class="headerlink" title="超快的Vite"></a>超快的Vite</h3><pre><code>yarn add vite -D</code></pre><p>更改package.json:</p><pre><code>&quot;scripts&quot;: {    &quot;dev&quot;: &quot;vite --host 0.0.0.0&quot;},</code></pre><p>运行：</p><pre><code>npm run dev</code></pre><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="File-type"><a href="#File-type" class="headerlink" title="File type"></a>File type</h3><p>安装：</p><pre><code>npm install --save file-type</code></pre><h3 id="Image操作"><a href="#Image操作" class="headerlink" title="Image操作"></a>Image操作</h3><p>jimp</p>]]></content>
    
    <summary type="html">
    
      Nodejs开发常用库总结
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Javascript" scheme="https://www.aafeng.uk/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>React Query</title>
    <link href="https://www.aafeng.uk/react-query/"/>
    <id>https://www.aafeng.uk/react-query/</id>
    <published>2021-07-03T15:33:35.594Z</published>
    <updated>2021-07-03T15:34:23.177Z</updated>
    
    <content type="html"><![CDATA[<p>最近试用了一下React Query，感觉真的很香，在考虑是否在项目中引入这个出色的库。</p><p><img src="https://user-images.githubusercontent.com/63479035/124358737-86df3400-dc19-11eb-9cfc-11dc7a7976af.png" alt="image"><br>图源：官网截图</p><a id="more"></a><p>在React APP中不可避免的要调用很多REST API对数据进行CRUD操作。对于每一个API endpoint，我们都需要考虑状态管理，数据同步，缓存，错误处理等诸多细节。这就会使我们的程序变得非常臃肿。而有了React Query，无需借助全局状态，就能实现这些功能。</p><p>如果不使用React Query，最常见的方式就是使用useState及useEffect来实现状态的管理。比如：使用一个state来管理loading，另一个state来关联error，再找一个state来关联真正的数据。这样，在每一个调用API获取数据的部分都需要将调用API的状态和这些状态变量关联，非常繁琐。</p><p>同时，还会有一些其他的问题，比如：</p><ul><li>如果数据在不同人之间共享，那么当别人更改了你正在读取数据的时候，你的数据其实就已经“过时”了。怎么解决这种问题？</li><li>维护一个本地缓存并在需要的时候使数据过期，并发出新的数据请求</li></ul><p>这时可以通过自定义一个hook来处理数据的获取及各种状态，比如loading，error等。这样就可以在初始获取后缓存数据，在后台重新获取数据等。</p><p>React Query是通过维护一个服务器状态树来管理服务端状态的。同时，在React Query中还有它特有的缓存策略，来进行数据的存储和更新。这样，我们就可以把所有和服务器端相关的状态从其他状态管理库中提取出来，交给React Query。</p><p>目前唯一顾虑的就是React Query不是React官方维护的。这就存在一种潜在的风险，和Redux类似。早期的时候很多项目中都使用了Redux。但现在在最新的React版本中，不使用Redux也能进行全局状态的管理。那么是否在将来，React官方也会把React Query做的事情自己实现了呢？</p>]]></content>
    
    <summary type="html">
    
      React Query
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>在线开发工具总结</title>
    <link href="https://www.aafeng.uk/online-devtool/"/>
    <id>https://www.aafeng.uk/online-devtool/</id>
    <published>2021-06-29T09:17:45.879Z</published>
    <updated>2021-07-10T07:52:35.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在线测试REST-API工具"><a href="#在线测试REST-API工具" class="headerlink" title="在线测试REST API工具"></a>在线测试REST API工具</h2><h3 id="hoppscotch"><a href="#hoppscotch" class="headerlink" title="hoppscotch"></a>hoppscotch</h3><p><a href="https://hoppscotch.io/" rel="external nofollow noopener noreferrer" target="_blank">https://hoppscotch.io/</a></p><h3 id="reqbin"><a href="#reqbin" class="headerlink" title="reqbin"></a>reqbin</h3><p><a href="https://reqbin.com/" rel="external nofollow noopener noreferrer" target="_blank">https://reqbin.com/</a></p><h3 id="测试Web-sockets"><a href="#测试Web-sockets" class="headerlink" title="测试Web sockets"></a>测试Web sockets</h3><p><a href="https://websocket.org/echo.html" rel="external nofollow noopener noreferrer" target="_blank">https://websocket.org/echo.html</a></p><h2 id="在线API-endpoints"><a href="#在线API-endpoints" class="headerlink" title="在线API endpoints"></a>在线API endpoints</h2><p>这里有很全面的列表：<a href="https://github.com/public-apis/public-apis" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/public-apis/public-apis</a></p><h3 id="starwars-API"><a href="#starwars-API" class="headerlink" title="starwars API"></a>starwars API</h3><p><a href="https://swapi.dev/" rel="external nofollow noopener noreferrer" target="_blank">https://swapi.dev/</a></p><h3 id="jokes"><a href="#jokes" class="headerlink" title="jokes"></a>jokes</h3><p><a href="https://api.icndb.com/jokes" rel="external nofollow noopener noreferrer" target="_blank">https://api.icndb.com/jokes</a><br><a href="https://api.icndb.com/jokes/random" rel="external nofollow noopener noreferrer" target="_blank">https://api.icndb.com/jokes/random</a><br><a href="https://api.icndb.com/jokes/1" rel="external nofollow noopener noreferrer" target="_blank">https://api.icndb.com/jokes/1</a></p><h3 id="news"><a href="#news" class="headerlink" title="news"></a>news</h3><p><a href="https://newsapi.org/" rel="external nofollow noopener noreferrer" target="_blank">https://newsapi.org/</a></p><h3 id="JSON-server"><a href="#JSON-server" class="headerlink" title="JSON server"></a>JSON server</h3><p><a href="https://jsonplaceholder.typicode.com/" rel="external nofollow noopener noreferrer" target="_blank">https://jsonplaceholder.typicode.com/</a></p><h2 id="Design-tool"><a href="#Design-tool" class="headerlink" title="Design tool"></a>Design tool</h2><p><a href="https://www.canva.com/" rel="external nofollow noopener noreferrer" target="_blank">https://www.canva.com/</a></p>]]></content>
    
    <summary type="html">
    
      在线开发工具总结
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>React开发常用组件总结</title>
    <link href="https://www.aafeng.uk/react-libraries/"/>
    <id>https://www.aafeng.uk/react-libraries/</id>
    <published>2021-06-25T20:27:35.714Z</published>
    <updated>2021-07-05T19:30:51.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="JSON-Server"><a href="#JSON-Server" class="headerlink" title="JSON Server"></a>JSON Server</h3><p>安装：</p><pre><code>npm install -g json-server</code></pre><p>运行：</p><pre><code>json-server --watch data/db.json --port 8000 -H 0.0.0.0</code></pre><h2 id="UI相关"><a href="#UI相关" class="headerlink" title="UI相关"></a>UI相关</h2><p>react-hook-form: <a href="https://github.com/react-hook-form/react-hook-form" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/react-hook-form/react-hook-form</a><br>react-loader-spinner: <a href="https://github.com/mhnpd/react-loader-spinner" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/mhnpd/react-loader-spinner</a><br>styled-components: <a href="https://github.com/styled-components/styled-components" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/styled-components/styled-components</a><br>File Uploader: react-images-upload</p>]]></content>
    
    <summary type="html">
    
      React开发常用组件总结
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React" scheme="https://www.aafeng.uk/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>试用Notion笔记软件</title>
    <link href="https://www.aafeng.uk/notion/"/>
    <id>https://www.aafeng.uk/notion/</id>
    <published>2021-06-21T18:52:58.790Z</published>
    <updated>2021-06-21T18:53:26.249Z</updated>
    
    <content type="html"><![CDATA[<p>最近经同事推荐尝试了一下Notion这个软件，感觉还是不错的。</p><p><img src="https://user-images.githubusercontent.com/63479035/122812401-8a91c300-d2c9-11eb-9b75-35f03c9da8da.png" alt="image"></p><p>其实使用Evernote已经好多年了。最早选择它的时候还没有Onenote。后来有了Onenote之后又懒得再换了。这么多年下来，在Evernote上保存了很多笔记。</p><p>对于Evernote，个人感觉这个软件整体做的还不错，但总感觉其中的功能有些让人不是特别满意。比如：免费版本只能在两个设备间同步数据；不支持程序代码的高亮显示。</p><p>在试用了Notion之后，被其强悍的功能所折服。打算下一步正式用一段时间，看看是否真的好用。</p><p>在我看来，Notion具有以下优点。</p><p>首先就是其灵活性。在Notion中，可以管理笔记，进行项目管理，待办事情列表等等。也就是说，在Notion中，针对使用者的约束会更少，让使用者有更大的空间自由发挥。</p><p>其次，就算在笔记这项最为重要的功能中，也有很多亮点。比如，在表格中可以进行统计。这不是把Excel的功能也搞进来了吗？</p><p>还有就是其强大的Markdown支持，对常见编程语言代码的高亮显示等功能。</p><p>当然，版本备份功能也是必不可少的。在Notion中可以查看自己的修改记录。</p><p>还有很多我尚未尝试的功能，比如：gallery，calender，board，数学公式等等。</p><p>不过，自己对Notion的界面不是很喜欢。反倒是Evernote的界面更对我的胃口。其实也讲不出原因，第一眼喜欢就是喜欢，反之亦然。就像我从第一眼看见Netbeans的时候就产生一种排斥感，但对于eclipse就出奇的喜欢。不论怎样，先进一步试用一下吧，毕竟，它所提供的功能更为重要。</p>]]></content>
    
    <summary type="html">
    
      试用Notion笔记软件
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>useContext+reducers+local storage</title>
    <link href="https://www.aafeng.uk/usecontext/"/>
    <id>https://www.aafeng.uk/usecontext/</id>
    <published>2021-06-20T22:03:57.000Z</published>
    <updated>2021-06-24T09:56:35.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在React中，Context API提供了一种简洁又干净的方法在不同组件中共享状态。 其典型应用场景包括： 用户认证，界面语言，主题等“全局”性的设置。</p><p><img src="https://user-images.githubusercontent.com/63479035/123172610-47745300-d475-11eb-93b9-f8e06387ac02.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><h2 id="使用Context-Provider"><a href="#使用Context-Provider" class="headerlink" title="使用Context Provider"></a>使用Context Provider</h2><p>要想使用上下文，首先需要创建上下文的提供者： Context Provider。 比如：想要创建一个和用户认证相关的上下文。</p><p>首先，添加src/contexts/LoginContext.js:</p><pre><code>import React, { createContext, useState } from &apos;react&apos;;export const LoginContext = createContext();export default function LoginContextProvider({ children }) {    const [isAuthenticated, setIsAuthenticated] =  useState(false);    const [role, setRole] =  useState(&apos;public&apos;);    const login = () =&gt; {        setIsAuthenticated(true);    }    const logout = () =&gt; {        setIsAuthenticated(false);        setRole(&apos;&apos;);    }    return (        &lt;LoginContext.Provider value={{ isAuthenticated, login, logout, role, setRole }}&gt;            { children }        &lt;/LoginContext.Provider&gt;    )}</code></pre><p>对其进行调用的组件：</p><pre><code>import React, { useContext } from &apos;react&apos;;import {LoginContext} from &apos;../contexts/LoginContext&apos;;export default function LoginTest() {    const loginContext = useContext(LoginContext);    const { isAuthenticated, login, logout, role, setRole } = loginContext;    return (        &lt;div style={{margin: "25px"}}&gt;            You are {isAuthenticated? &quot;logged in.&quot;: &quot;logged out.&quot;}&lt;br/&gt;            Your role: {role}&lt;br/&gt;            &lt;button onClick={isAuthenticated? logout:login}&gt;{isAuthenticated? &quot;Logout&quot;:&quot;Login&quot;}&lt;/button&gt;            &lt;button onClick={() =&gt; setRole(&apos;Admin&apos;)}&gt;Change role to Admin&lt;/button&gt;            &lt;button onClick={() =&gt; setRole(&apos;public&apos;)}&gt;Change role to public&lt;/button&gt;        &lt;/div&gt;    )}</code></pre><p>在App.js中，</p><pre><code>&lt;LoginContextProvider&gt;    &lt;LoginTest/&gt;&lt;/LoginContextProvider&gt;</code></pre><p><img src="https://user-images.githubusercontent.com/63479035/123218024-20447280-d4c3-11eb-8c49-4e668a348c83.png" alt="image"></p><h2 id="使用Context-Provider保存全局数据"><a href="#使用Context-Provider保存全局数据" class="headerlink" title="使用Context Provider保存全局数据"></a>使用Context Provider保存全局数据</h2><p>有些时候甚至可以把数据放到Context Provider中，比如：</p><pre><code>import React, { createContext, useState } from &apos;react&apos;;export const BookContext = createContext();const BookContextProvider = ({children}) =&gt; {  const [books, setBooks] = useState([    {title: &apos;Java程序设计&apos;, id: 1101},    {title: &apos;Python程序设计&apos;, id: 1102},    {title: &apos;React in Action&apos;, id: 1103},  ]);  return (    &lt;BookContext.Provider value={{books}}&gt;      {children}    &lt;/BookContext.Provider&gt;  )}export default BookContextProvider;</code></pre><p>在组件中使用BookContext:</p><pre><code>const { books } = useContext(BookContext);</code></pre><p>这样就可以在不同组件中共享 books 实例。</p><h2 id="使用reducer"><a href="#使用reducer" class="headerlink" title="使用reducer"></a>使用reducer</h2><p>首先，在使用Context Provider的时候，不是必须使用reducer的，但如果使用，可以简化代码。比如，在CustomerContextProvider中，我们可以添加addCustomer, removeCustomer等方法并把它们传递给使用Context的组件中，但这样做对于简单应用还好。对于稍微复杂的应用，就会过于烦琐了。最好的方法是使用reducer将这些方法统一进行管理。</p><h3 id="创建reducer"><a href="#创建reducer" class="headerlink" title="创建reducer"></a>创建reducer</h3><p>首先，需要创建一个Reducer，并将操纵状态的逻辑放在reducer中：</p><pre><code>import uuid from &apos;react-uuid&apos;;export const customerReducer = (state, action) =&gt; {  switch (action.type) {    case &apos;ADD_CUSTOMER&apos;:      return [...state, {        name: action.customer.name,         phone: action.customer.phone,         id: uuid()}      ];    case &apos;REMOVE_CUSTOMER&apos;:      return state.filter(customer =&gt; customer.id !== action.id);    case &apos;ADD_DUMMY_CUSTOMERS&apos;:      return [        {id: uuid(), name: &apos;Stuart&apos;, phone: &apos;07853110066&apos;},        {id: uuid(), name: &apos;Lucas&apos;, phone: &apos;07853110067&apos;},        {id: uuid(), name: &apos;Andy&apos;, phone: &apos;07853110068&apos;}      ];        case &apos;RESET_CUSTOMER&apos;:      return [];        default:      return state;  }} </code></pre><h3 id="在ContextProvider中使用reducer"><a href="#在ContextProvider中使用reducer" class="headerlink" title="在ContextProvider中使用reducer"></a>在ContextProvider中使用reducer</h3><p>接下来，在CustomerContext中，就不要使用useState，而是使用useReducer了。因为state的管理已经转移到reducer中了。</p><pre><code>import React, { createContext, useReducer } from &apos;react&apos;;import { customerReducer } from &apos;../reducers/customerReducer&apos;;export const CustomerContext = createContext();const CustomerContextProvider = (props) =&gt; {  const [customers, dispatch] = useReducer(customerReducer, []);  return (    &lt;CustomerContext.Provider value={{ customers, dispatch }}&gt;      {props.children}    &lt;/CustomerContext.Provider&gt;  );}export default CustomerContextProvider;</code></pre><h3 id="在UI组件中使用Context和reducer"><a href="#在UI组件中使用Context和reducer" class="headerlink" title="在UI组件中使用Context和reducer"></a>在UI组件中使用Context和reducer</h3><p>接下来在UI组件中只需要通过传递给dispatch相应的参数就可以调用相应的状态更新方法了：</p><pre><code>import React, { useContext } from &apos;react&apos;;import { CustomerContext } from &apos;../contexts/CustomerContext&apos;;export default function CustomerList() {    const customerContext = useContext(CustomerContext);    const { customers, dispatch } = customerContext;    return (        &lt;div&gt;            Current customers (click to delete):            &lt;hr/&gt;            &lt;ul&gt;            {customers.map(customer =&gt; {                return (                     &lt;li key={customer.id} onClick={() =&gt; dispatch({ type: &apos;REMOVE_CUSTOMER&apos;, id: customer.id })}&gt;{customer.name} / {customer.phone}&lt;/li&gt;                );            })}            &lt;/ul&gt;            &lt;button onClick={() =&gt; dispatch({ type: &apos;ADD_DUMMY_CUSTOMERS&apos; })}&gt;Add dummy customers&lt;/button&gt;            &lt;button onClick={() =&gt; dispatch({ type: &apos;RESET_CUSTOMER&apos; })}&gt;Reset customers&lt;/button&gt;        &lt;/div&gt;    )}</code></pre><h2 id="Local-Storage"><a href="#Local-Storage" class="headerlink" title="Local Storage"></a>Local Storage</h2><p>key value pairs</p><p>值必须为字符串类型。</p><p>需要将JSON转换为字符串后才能够保存到local storage。<br>customer = {“name”:”George”,”phone”:”07882223333”}<br>localStorage.setItem(‘c1’, JSON.stringify(customer))</p><p>因此在读取后需要再次转换为JSON：<br>george = JSON.parse(localStorage.getItem(‘c1’))</p><p>如果想要使用local storage，在CustomerContext.js中：</p><pre><code>const [customers, dispatch] = useReducer(customerReducer, [], () =&gt; {    const localData = localStorage.getItem(&apos;customers&apos;);    return localData ? JSON.parse(localData) : [];});useEffect(() =&gt; {    localStorage.setItem(&apos;customers&apos;, JSON.stringify(customers));}, [customers]);</code></pre>]]></content>
    
    <summary type="html">
    
      使用Context Provider及useContext管理React中的上下文, 使用reducer，local storage
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>安装eufy家用安全摄像头</title>
    <link href="https://www.aafeng.uk/eufy-security-camera/"/>
    <id>https://www.aafeng.uk/eufy-security-camera/</id>
    <published>2021-06-20T21:45:13.701Z</published>
    <updated>2021-06-21T17:34:39.529Z</updated>
    
    <content type="html"><![CDATA[<p>最近不断听到伦敦等地出现一些暴力事件，于是就考虑在家安装一组安全摄像头。经朋友推荐，选择了eufyCam家用摄像头。</p><p><img src="https://user-images.githubusercontent.com/63479035/122688729-e8fd6980-d215-11eb-88ac-5eb548406ffb.png" alt="image"></p><a id="more"></a><p>其实，我所在的小城安全系数本来就很高。我所住的街区也从未听说过入室盗窃的事件。不过安装一下毕竟还是有好处的。至少在有人敲门的时候能够看清对方。</p><p>在网上下单后，很快就送到了。官网说的是3-7个工作日，但没有想到第二天就送到了。奇怪的是，竟然是Amazon Prime的包装。可能两家是有合作吧。</p><p>整个安装过程还是非常简单的。</p><p>首先是把主机通过网线和家中的路由器连接在一起，然后进行了初始设置。</p><p>然后从Google Play Store上安装了他家的APP，在APP中根据提示添加了主机，以及两个配套的摄像头。这里需要注意的是，在选择摄像头位置的时候，需要拿着摄像头看看WIFI信号是否足够强。</p><p>接下来就是把摄像头安装到户外了。说明书上提到，一定要避免阳光的直接照射。这主要是因为摄像头内置有电池，在阳光暴晒下可能会有危险。不过话说，安装在户外，又要避免阳光，似乎并不容易。我选择安装在排水管道的下方，肯定会被照到，但应该还好吧。</p><p>安装好之后，只要有人走进，手机APP就会有提示。摄像头还有白天和夜间模式两种。同时，它还有人脸识别功能，能够检测到走进的人。APP内部还有宠物识别功能。但对于我来说，似乎没什么用。</p><p>安装完毕后，倒没有觉得更安全了，但却感觉很好玩。随时可以看到家附近情况的感觉还是很不错的。</p><p>如果喜欢的话，欢迎使用我的<a href="https://bit.ly/3cSjKBW" rel="external nofollow noopener noreferrer" target="_blank">推荐链接</a>，你能获得40英镑的折扣（订单超过200英镑，且为原价商品才能获得折扣），我则会获得40英镑的Amazon购物券。也算是双赢吧。</p>]]></content>
    
    <summary type="html">
    
      安装eufy家用安全摄像头
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>英国的茴香</title>
    <link href="https://www.aafeng.uk/fennel/"/>
    <id>https://www.aafeng.uk/fennel/</id>
    <published>2021-06-12T20:15:09.937Z</published>
    <updated>2021-06-12T20:15:46.032Z</updated>
    
    <content type="html"><![CDATA[<p>今年英国的天气很古怪。5月份之前一直气温很低。第一批育好的苗种到外面后因为低温基本上都挂了。但最近的温度一直居高不下，有了夏天的感觉。第二批苗长势良好。</p><p>西红柿和蚕豆已经开花了。豆角也即将爬上架子了，角瓜似乎正在酝酿力量，准备爆发。尤其是茴香的长势非常好，家人看到照片后提醒，如果再不吃就要老了。<br><img src="https://user-images.githubusercontent.com/63479035/121783619-8c5fd600-cba7-11eb-8d1d-b0e362b5f12b.png" alt="image"></p><a id="more"></a><p>奇怪的是，在英国超市中也能买到茴香，但确实和国内的很不相同：根部很大，几乎没有叶子。用英国这种茴香做馅，几乎就吃不出茴香味道。。。<br><img src="https://user-images.githubusercontent.com/63479035/121787974-7232f180-cbc1-11eb-9678-862d871d3c16.png" alt="image"><br>Source: Pixabay</p><p>对于我家这株疯长的茴香，我想既然在英国，那么根部一定非常巨大了。那么好吧，我就连根带叶子一起吃了。</p><p>于是满怀期待的连根拔起：<br><img src="https://user-images.githubusercontent.com/63479035/121783673-e5c80500-cba7-11eb-8936-d58e2608f5cb.png" alt="image"></p><p>嗯？根怎么是这样的？？？无论如何，这多么大一株茴香，用来做馅应该是足够了。</p><p>很快，猪肉茴香馅的馅饼，啊不，茴香盒子：<br><img src="https://user-images.githubusercontent.com/63479035/121783699-0a23e180-cba8-11eb-8b61-70c362681378.png" alt="image"></p><p>看来这种茴香才是我记忆中的茴香，记忆中的味道。以后必须要继续种这种茴香了。。。</p>]]></content>
    
    <summary type="html">
    
      英国的茴香
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>说说转行</title>
    <link href="https://www.aafeng.uk/change-career/"/>
    <id>https://www.aafeng.uk/change-career/</id>
    <published>2021-06-10T16:49:55.329Z</published>
    <updated>2021-06-10T16:50:31.120Z</updated>
    
    <content type="html"><![CDATA[<p>前面聊到了职业选择的问题。这就涉及了一个相关的问题：如果选择了一个自己喜欢的职业还好，可以一直做下去。但如果选择了一个自己不喜欢的职业，该转行吗？怎么转？</p><p><img src="https://user-images.githubusercontent.com/63479035/121564884-d021d680-ca13-11eb-8919-1770f1638cae.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>说到转行，其实每个人的考虑都不尽相同。每个人也都有自己的故事。</p><p>到了英国之后，周边有些朋友原来学的专业是英语。可到了英国之后，就相当于没有了专业。于是，被迫转行。有的人选择做会计，从头学起的那种，可以说学的很辛苦。也有的原来在国内就是英语老师，到了英国后，转行做了中文老师。毕竟都是老师，转行的相对要容易的多。这种转行可以说是为生活所迫，选择了一个适合自己的行业。</p><p>记得原来在国内的时候，认识一位女士，在一家大银行做会计。按照当时的收入，应该算是稳定的金领一族。但她对自己的工作越来越没有兴趣，于是报名参加了一个IT相关的培训班。一开始学习，她就知道这才是自己真心喜欢的职业。的确，她在程序设计上的确很有天赋，毕业后很快就拿到了一份满意的IT工作。可以说她是非常幸运的，也有非常有魄力的，自己改变了自己的职业，也改变了自己的命运。</p><p>其实，要想转行成功，我个人感觉最好选择一个就近的行业。而不是来个180度的大转弯。这样搞不好就把自己整坑里了。</p><p>比如：原来做IT相关工作的。如果不想再做技术方面的工作了，可以考虑做针对IT行业的招聘专员/猎头。这样就可以充分利用自己原来的经验。或者，如果表达能力不错的，可以转行做IT培训，把自己的开发经验传授给别人。</p><p>周边朋友既有转行做相关行业的，也有转行从事一个彻底陌生行业的。不知道再过些年自己会不会动转行的念头？</p>]]></content>
    
    <summary type="html">
    
      说说转行
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>在英国体验自嗨锅</title>
    <link href="https://www.aafeng.uk/self-service-hot-pot/"/>
    <id>https://www.aafeng.uk/self-service-hot-pot/</id>
    <published>2021-06-08T21:13:30.095Z</published>
    <updated>2021-06-08T21:13:30.095Z</updated>
    
    <content type="html"><![CDATA[<p>火锅一直是我最喜欢的美食之一。有句话说的好，“没有什么是一顿火锅不能解决的”。记得疫情之前，每次去伦敦都不忘记预定好海底捞的餐位去享受一下他家的美食和服务。</p><p>现在不太可能去伦敦了，而且近一两年应该也会尽量避免去。那么，想吃火锅了怎么解决？当然可以自己在家吃，但似乎和餐厅里的味道还是不太一样。</p><p>看到朋友圈有人发了自嗨锅的照片，感觉不错。这两天买了几个自嗨锅尝试一下。</p><a id="more"></a><p>首先选则了海底捞的素食锅，之所以选择素食锅，是因为肉类的选择似乎太少了。可能是英国这边的种类没法和国内相比吧。<br><img src="https://user-images.githubusercontent.com/63479035/121250634-dbeb8c80-c89d-11eb-8906-ea6672c7ad42.png" alt="image"></p><p>拆开包装后，里面的货还不少。<br><img src="https://user-images.githubusercontent.com/63479035/121250868-23721880-c89e-11eb-9634-e95910caa563.png" alt="image"></p><p>按照说明把食材放入白色的碗中再加水拌匀：<br><img src="https://user-images.githubusercontent.com/63479035/121251284-9bd8d980-c89e-11eb-8c66-80fa32bf1016.png" alt="image"></p><p>同时还尝试了另一个叫做鲜锋品牌的牛肉火锅：<br><img src="https://user-images.githubusercontent.com/63479035/121250746-00dfff80-c89e-11eb-8dba-8f8ef5f13fe5.png" alt="image"></p><p>将加热包放入黑色的大碗中加热15-20分钟左右，就可以食用了。</p><p><img src="https://user-images.githubusercontent.com/63479035/121250442-a181ef80-c89d-11eb-8d31-9e73adf78205.png" alt="image"><br>Source: Pixabay</p><p>整体而言，感觉还是不错的。不过，对于海底捞的素食锅略感失望，其味道和我预期的差距较大。反倒是原先不知道的品牌鲜锋倒是给了我一个大大的惊喜。味道很浓郁，同时汤料中没有过多的花椒，吃起来比较容易。</p><p>下次出门玩的话，尤其是在野外露营，带几个自嗨锅，省时，环保，美味，似乎全占了。。。</p><p><a href="https://amzn.to/2TbA2Pk" rel="external nofollow noopener noreferrer" target="_blank">英国亚马逊上似乎就有卖的</a>。</p>]]></content>
    
    <summary type="html">
    
      在英国体验自嗨锅
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>英国的啤酒</title>
    <link href="https://www.aafeng.uk/beer/"/>
    <id>https://www.aafeng.uk/beer/</id>
    <published>2021-06-07T18:13:08.370Z</published>
    <updated>2021-06-07T18:13:52.706Z</updated>
    
    <content type="html"><![CDATA[<p>在英国和同事们去酒吧，点的最多的就是啤酒了。而在英国这里，啤酒的种类真的是太多了。我对英国啤酒品牌的了解可以说是太少了。每次到酒吧，基本上都是抄作业，同事们点什么我就跟着点，呵呵，黑啤除外，实在是接受不了那种味道。</p><p><img src="https://user-images.githubusercontent.com/63479035/121067966-98245480-c7c3-11eb-9a2c-0cdb4a372f09.png" alt="image"><br>Source: Pixabay</p><a id="more"></a><p>不得不说，英国人对酒的喜爱是流淌在血液中的。每次和同事们去酒吧，我基本上和他们喝上两轮就撤了。而同事们一般都会换上几个酒吧喝上几轮。其实啤酒的酒精度并不高，但肚子中盛不下啊。。。</p><p>说到嗜酒的源头，听过一个说法，过去的时候，英国人不会把水烧开了喝，当时的水过滤技术也不是很成熟。因此喝生水的话容易生病。而酒精能够起到杀菌作用，因此含有酒精的啤酒就大受欢迎了。有些人把啤酒当水喝。。。</p><p>啤酒中的主要成分包括水，麦芽，啤酒花，酵母。最早英国的啤酒中不含酒花，被称为麦芽酒（Ale），在很多英国的电影中，酒馆中流行的都是Ale。后来啤酒花慢慢的被大众所接受，而含有酒花的啤酒被称作beer。</p><p>在酒吧中，除了市面上常见的啤酒品牌之外，通常非常欢迎的是源于本地的Cask Beer生啤。由于其保质期较短，因此都是本地产的。到了一个地方，肯定要尝尝当地的啤酒！</p><p>很多超市/酒类专卖网站上就受欢迎的无非就是两大类。第一种叫做Lager。国内的青岛，哈啤之类的都属于这一类。它们的酒精度都不是很高4.5%左右。另一种就是所谓的精酿Ale了。它们的酒精度会高一些，8%-10%的酒精度。有的极易上头。但估计爱喝酒的人会更加喜欢。。。</p><p>作为一名喝酒的小白，就想到这么多了。。。</p>]]></content>
    
    <summary type="html">
    
      英国的啤酒
    
    </summary>
    
      <category term="美食" scheme="https://www.aafeng.uk/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04LTS开发环境/node14.17/Ruby2.7.3/Python3.8.5/OpenJDK11/Tomcat10/Solr8.8.2</title>
    <link href="https://www.aafeng.uk/ubuntu20/"/>
    <id>https://www.aafeng.uk/ubuntu20/</id>
    <published>2021-06-07T08:54:15.409Z</published>
    <updated>2021-06-07T08:54:15.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近把自己本地的VM重新安装配置了一下，主要是Ubuntu升级到20.04LTS, Node.js 14.17, Ruby 2.7.3, Python 3.8.5, OpenJDK 11, Tomcat 10, Solr 8.8.2。下面记录一下：</p><p><img src="https://user-images.githubusercontent.com/63479035/120987987-0d693880-c776-11eb-95f5-11ea161f12c0.png" alt="image"><br>Source: Pixabay</p><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>安装好VM后注意在VirtualBox<strong>配置Port forwarding</strong>.</p><p>运行：</p><pre><code>sudo apt-get install -y build-essential libssl-dev libreadline-dev zlib1g-dev</code></pre><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><pre><code>sudo apt-get install zshsudo usermod -s /bin/zsh $(whoami)</code></pre><p>重新登录后选择2）配置好zsh，然后安装oh-my-zsh:</p><pre><code>sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></pre><h2 id="Node-js-14-17-0"><a href="#Node-js-14-17-0" class="headerlink" title="Node.js 14.17.0"></a>Node.js 14.17.0</h2><pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | zshsource .zshrcnvm list-remotenvm install v14.17.0</code></pre><h2 id="Ruby-2-7-3"><a href="#Ruby-2-7-3" class="headerlink" title="Ruby 2.7.3"></a>Ruby 2.7.3</h2><h3 id="rbenv"><a href="#rbenv" class="headerlink" title="rbenv"></a>rbenv</h3><pre><code>  git clone git://github.com/sstephenson/rbenv.git .rbenvecho &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcecho &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.zshrcgit clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-buildecho &apos;export PATH=&quot;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcsource .zshrc</code></pre><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><pre><code>rbenv install -v 2.7.3rbenv global 2.7.3</code></pre><h2 id="Python-3-8-5"><a href="#Python-3-8-5" class="headerlink" title="Python 3.8.5"></a>Python 3.8.5</h2><pre><code>sudo apt install python3-pipsudo apt-get install python3-venvpython3 -m venv myenv</code></pre><p>将如下语句添加到.zshrc:</p><pre><code>source myenv/bin/activate</code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="OpenJDK-11"><a href="#OpenJDK-11" class="headerlink" title="OpenJDK 11"></a>OpenJDK 11</h3><pre><code>sudo apt install default-jdk sudo nano /etc/environment</code></pre><p>Add:</p><pre><code>JAVA_HOME=&quot;/usr/lib/jvm/java-11-openjdk-amd64&quot;</code></pre><h3 id="Tomcat-10"><a href="#Tomcat-10" class="headerlink" title="Tomcat 10"></a>Tomcat 10</h3><p>Run:</p><pre><code>sudo groupadd tomcatsudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcatcd /tmpcurl -O https://mirrors.ukfast.co.uk/sites/ftp.apache.org/tomcat/tomcat-10/v10.0.6/bin/apache-tomcat-10.0.6.tar.gzsudo mkdir /opt/tomcatsudo tar xzvf apache-tomcat-10.0.6.tar.gz -C /opt/tomcat --strip-components=1cd /opt/tomcatsudo chgrp -R tomcat /opt/tomcatsudo chmod -R g+r confsudo chmod g+x confsudo chown -R tomcat webapps/ work/ temp/ logs/</code></pre><p>添加tomcat服务：</p><pre><code>sudo nano /etc/systemd/system/tomcat.service</code></pre><p>添加如下内容：</p><pre><code>[Unit]Description=Apache Tomcat Web Application ContainerAfter=network.target[Service]Type=forkingEnvironment=JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pidEnvironment=CATALINA_HOME=/opt/tomcatEnvironment=CATALINA_BASE=/opt/tomcatEnvironment=&apos;CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC&apos;Environment=&apos;JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom&apos;ExecStart=/opt/tomcat/bin/startup.shExecStop=/opt/tomcat/bin/shutdown.shUser=tomcatGroup=tomcatUMask=0007RestartSec=10Restart=always[Install]WantedBy=multi-user.target</code></pre><p>Reload system daemon:</p><pre><code>sudo systemctl daemon-reload</code></pre><p>Start Tomcat:</p><pre><code>sudo systemctl start tomcat</code></pre><p>Test if you can access Tomcat via port 8080, then enable this service:</p><pre><code>sudo systemctl enable tomcat</code></pre><p>Configure Tomcat web admin UI:</p><pre><code>sudo nano /opt/tomcat/conf/tomcat-users.xml</code></pre><p>内容如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;              xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;              version=&quot;1.0&quot;&gt;  &lt;role rolename=&quot;manager-gui&quot;/&gt;  &lt;user username=&quot;tomcat&quot; password=&quot;PASSWORD&quot; roles=&quot;manager-gui&quot;/&gt;  &lt;role rolename=&quot;admin-gui&quot;/&gt;  &lt;user username=&quot;admin&quot; password=&quot;PASSWORD&quot; roles=&quot;admin-gui&quot;/&gt;&lt;/tomcat-users&gt;   </code></pre><p>默认方式下，tomcat针对admin页面添加了IP限制。可以通过以下文件将其注释掉：</p><pre><code>sudo nano /opt/tomcat/webapps/manager/META-INF/context.xml</code></pre><h3 id="Solr8-8-2"><a href="#Solr8-8-2" class="headerlink" title="Solr8.8.2"></a>Solr8.8.2</h3><pre><code>cd /tmpwget https://mirrors.ukfast.co.uk/sites/ftp.apache.org/lucene/solr/8.8.2/solr-8.8.2.tgztar xvf solr-8.8.2.tgzcd solr-8.8.2/binsudo ./install_solr_service.sh ../../solr-8.8.2.tgz</code></pre><p>创建一个core：</p><pre><code>sudo su - solr -c &quot;/opt/solr/bin/solr create -c your_core -n data_driven_schema_configs&quot;</code></pre><p>测试Solr：</p><pre><code>sudo service solr status</code></pre>]]></content>
    
    <summary type="html">
    
      Ubuntu 20.04LTS开发环境/node14.17/Ruby2.7.3/Python3.8.5/OpenJDK11/Tomcat10/Solr8.8.2
    
    </summary>
    
      <category term="技术" scheme="https://www.aafeng.uk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://www.aafeng.uk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>英国的Segway电动平衡车</title>
    <link href="https://www.aafeng.uk/segway/"/>
    <id>https://www.aafeng.uk/segway/</id>
    <published>2021-06-01T22:54:07.402Z</published>
    <updated>2021-06-01T22:55:07.850Z</updated>
    
    <content type="html"><![CDATA[<p>这两天孩子们在朋友家试玩了一下Segway电动平衡车，立刻都对其爱不释脚，很快就能够熟练掌握其控制方法，在花园中/僻静的道路上飞奔。。。本来自己也想尝试一下，但考虑到朋友家的是专门针对孩子的版本，不想把Segway压坏了，就算了。</p><p><img src="https://user-images.githubusercontent.com/63479035/120398180-9c6af080-c331-11eb-81b4-0940d464bc36.png" alt="image"><br>图源：<a href="https://amzn.to/3uG8yOZ" rel="external nofollow noopener noreferrer" target="_blank">Amazon产品介绍页面</a></p><a id="more"></a><p>在网上查了一下才知道，Segway这家公司的母公司竟然是小米。其实，Segway最早是由DEKA这家公司发明的，但后来被小米收购后并入其旗下的Ninebot子公司。</p><p>其实，电动平衡车的原理貌似“很简单”，它是基于一种“动态稳定”的原理所设计的。举个例子，如果人的身体前倾而腿固定不动的话，人肯定会摔倒。但如果向前迈步的话，则不会摔倒。而这种电动平衡车就是利用这种原理，当人的身体前倾的时候，平衡车就检测到并驱使车向前移动，这样就相当于通过人体的倾斜来控制平衡车。</p><p>对于这种平衡车，一般人都能通过很短的时间掌握其使用。很多小朋友都能迅速的驾驭它并快速行驶。不过需要小心的就是，如果路面不平，或者有路障的话，就极易“翻车”。</p><p>另外，就是其电池的续航能力。朋友家的充满电后能够行驶20多分钟，不知道最新款的续航能力会有多大提升。如果只是20多分钟/半个小时的话，应该还是不能作为一个交通工具的。</p><p>另外，电动平衡车的位置似乎有些尴尬。如果仅仅是作为一个玩具的话，它似乎有些大材小用了。但如果作为一个交通工具的话，它似乎还具有种种问题。因此，各国对它的态度也不尽相同，绝大多数国家都不允许把它作为一个交通工具上路的。</p><p>不论怎样说，这个小东西已经在我的心底种草，可以考虑先买一个玩玩，就算是锻炼身体也好。</p><p>【<a href="https://amzn.to/3uG8yOZ" rel="external nofollow noopener noreferrer" target="_blank">Amazon上购买页面</a>】</p>]]></content>
    
    <summary type="html">
    
      英国的Segway电动平衡车
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Hodnet Hall Gardens</title>
    <link href="https://www.aafeng.uk/hodnet-hall-gardens/"/>
    <id>https://www.aafeng.uk/hodnet-hall-gardens/</id>
    <published>2021-06-01T07:53:55.450Z</published>
    <updated>2021-06-01T07:54:37.417Z</updated>
    
    <content type="html"><![CDATA[<p>这个银行假日的最后一天，和朋友一家一同驱车去了Hodnet Hall Gardens。这是一家私家花园，主人是Algernon爵士及其夫人Heber-Percy。这家花园的主人已经将其对外开放了逾50年。</p><p>我们来的正是时候，花期在夏季的各种花朵已经陆续开放了，比如：magnolias, camellias, rhododendrons, azaleas, bluebells等等。他家还有英格兰玫瑰，只不过目前还没有开花。其实，一年中的不同时段来的话，都会有不同的惊喜。</p><p>入口处的小池塘，周边长着各种认识的，不认识的植被。水池中还有无数的小蝌蚪在游来游去。<br><img src="https://user-images.githubusercontent.com/63479035/120282294-dbf1f800-c2b1-11eb-8e85-d37824aa32b6.png" alt="image"></p><p>碧水蓝天绿树：<br><img src="https://user-images.githubusercontent.com/63479035/120282577-270c0b00-c2b2-11eb-980b-b2a67368f335.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120282651-3ee38f00-c2b2-11eb-8832-71252c45d6c2.png" alt="image"></p><p>隐藏在远处的小凉亭：<br><img src="https://user-images.githubusercontent.com/63479035/120282513-178cc200-c2b2-11eb-88ed-0d01d157b9e8.png" alt="image"></p><p>绝大多数都分不清/不认识的各类鲜花，如果花/树旁边贴个名字就好了：<br><img src="https://user-images.githubusercontent.com/63479035/120282729-59b60380-c2b2-11eb-9f61-807194a18856.png" alt="image"></p><p>这种花应该叫做Acácia Amarela，原产地似乎是葡萄牙：<br><img src="https://user-images.githubusercontent.com/63479035/120282994-9b46ae80-c2b2-11eb-826a-250e5628dd06.png" alt="image"></p><p>这种花貌似叫做Chinese wisteria：<br><img src="https://user-images.githubusercontent.com/63479035/120283668-5707de00-c2b3-11eb-94b4-818fd7f6ea81.png" alt="image"></p><p>Royal Purple Rhododendron？<br><img src="https://user-images.githubusercontent.com/63479035/120284037-be259280-c2b3-11eb-81fe-93fdc2eca3ad.png" alt="image"></p><p>这种bulbous buttercup的花瓣上就像抹了一层黄油一样，油光光的：<br><img src="https://user-images.githubusercontent.com/63479035/120284252-fd53e380-c2b3-11eb-9061-aaee57df6880.png" alt="image"></p><p>源自巴西的Gunnera manicata：<br><img src="https://user-images.githubusercontent.com/63479035/120284591-4f950480-c2b4-11eb-8b9f-6151f34d41a0.png" alt="image"></p><p>看起来很雍容大气的白花，其气质有些像一位公主。的确，她的名字应该叫做：Rhododendron Yaku Princess<br><img src="https://user-images.githubusercontent.com/63479035/120284810-8f5bec00-c2b4-11eb-997a-361f9c0fed48.png" alt="image"></p><p>这个大家都认识，只是现在略有些早，荷花还没有绽放：<br><img src="https://user-images.githubusercontent.com/63479035/120283467-2162f500-c2b3-11eb-98e2-10726c51e27a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120283940-a2ba8780-c2b3-11eb-8906-303138d1817b.png" alt="image"></p><p>让人惊艳的日本红枫：<br><img src="https://user-images.githubusercontent.com/63479035/120285406-1f019a80-c2b5-11eb-99ff-1e98c91a7feb.png" alt="image"></p><p>远处背景处的豪宅就是主人的住所：<br><img src="https://user-images.githubusercontent.com/63479035/120283603-4192b400-c2b3-11eb-9a26-bb4ca0fb12e9.png" alt="image"><br>近照：<br><img src="https://user-images.githubusercontent.com/63479035/120285352-0f825180-c2b5-11eb-94b7-8e13a46a97ac.png" alt="image"></p><p>在整个花园中漫步非常治愈，感觉非常的放松惬意。走累了就坐在草地上小坐，孩子们在周边坐着游戏。花园中也有经典的英式茶屋，可以买杯咖啡。不过这么热的天气，冰淇淋还是更受欢迎。</p>]]></content>
    
    <summary type="html">
    
      Hodnet Hall Gardens
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>登高</title>
    <link href="https://www.aafeng.uk/hawkstone-park/"/>
    <id>https://www.aafeng.uk/hawkstone-park/</id>
    <published>2021-05-30T07:07:38.027Z</published>
    <updated>2021-05-30T07:08:11.478Z</updated>
    
    <content type="html"><![CDATA[<p>和朋友一家一起来到周边的Hawkstone Park来登山。</p><p>近处的地刚刚被犁过，远处的油菜花任然生气盎然。<br><img src="https://user-images.githubusercontent.com/63479035/120094856-b979a680-c11a-11eb-9c3f-4e972025c8a8.png" alt="image"></p><a id="more"></a><p>参天古树：<br><img src="https://user-images.githubusercontent.com/63479035/120095014-779d3000-c11b-11eb-9d2f-7834b14a89ff.png" alt="image"></p><p>这数上的貌似是鸟窝，但近看又不是，似乎是另一种植物寄生在树上。“鸟窝”中又冒出了丝丝绿意：<br><img src="https://user-images.githubusercontent.com/63479035/120095055-a1565700-c11b-11eb-8916-81b9265872b6.png" alt="image"></p><p>沿着弯弯曲曲的小径开始上山：<br><img src="https://user-images.githubusercontent.com/63479035/120095091-cd71d800-c11b-11eb-95d6-ca0aa6241b5e.png" alt="image"></p><p>在巨石上有无数类似气泡的孔洞，应该是地壳变迁时大自然的杰作？亦或是久经风吹日晒，时间留下的痕迹？<br><img src="https://user-images.githubusercontent.com/63479035/120095145-3d805e00-c11c-11eb-9e4f-438e41dad998.png" alt="image"><br>石质极软，可以在上面刻字：<br><img src="https://user-images.githubusercontent.com/63479035/120095426-d5327c00-c11d-11eb-953d-0c715c3d9b5c.png" alt="image"></p><p>山上到处都是危险的“山精野怪”，时不时的出来恐吓路人：<br><img src="https://user-images.githubusercontent.com/63479035/120095221-a7990300-c11c-11eb-9d3e-42275b4aef10.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095183-715b8380-c11c-11eb-89bb-e77997747080.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095216-9d770480-c11c-11eb-9cac-925ad19bfa5f.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095256-eaf37180-c11c-11eb-851c-cd23bb738272.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095384-a61c0a80-c11d-11eb-9f27-cb236d101f59.png" alt="image"></p><p>就连过桥的时候也要恐吓一番：<br><img src="https://user-images.githubusercontent.com/63479035/120095339-5ccbbb00-c11d-11eb-9d93-cd7e2df74071.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095373-94d2fe00-c11d-11eb-9224-9e5df995086b.png" alt="image"></p><p>这个纪念碑是用来纪念当年在击败拿破仑的滑铁卢之战：<br><img src="https://user-images.githubusercontent.com/63479035/120095237-bc759680-c11c-11eb-9d37-3c198aa8a262.png" alt="image"></p><p>终于登上了山顶：<br><img src="https://user-images.githubusercontent.com/63479035/120095354-77059900-c11d-11eb-9d6d-33dc39a384c6.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095390-b59b5380-c11d-11eb-84df-79a132a8ce53.png" alt="image"><br><img src="https://user-images.githubusercontent.com/63479035/120095414-cb107d80-c11d-11eb-8101-2058c1d74749.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      登高
    
    </summary>
    
      <category term="生活" scheme="https://www.aafeng.uk/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
